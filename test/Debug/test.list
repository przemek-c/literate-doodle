
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c24  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004e04  08004e04  00005e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004efc  08004efc  0000607c  2**0
                  CONTENTS
  4 .ARM          00000008  08004efc  08004efc  00005efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f04  08004f04  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f04  08004f04  00005f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f08  08004f08  00005f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08004f0c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  2000007c  08004f88  0000607c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08004f88  000062f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101d3  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002529  00000000  00000000  0001627f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  000187a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aba  00000000  00000000  000195a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f509  00000000  00000000  0001a05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ec3  00000000  00000000  00039563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bdf90  00000000  00000000  0004c426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a3b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004028  00000000  00000000  0010a3fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010e424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004dec 	.word	0x08004dec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000080 	.word	0x20000080
 800021c:	08004dec 	.word	0x08004dec

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ba:	4a1a      	ldr	r2, [pc, #104]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c2:	4b18      	ldr	r3, [pc, #96]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ce:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	4a14      	ldr	r2, [pc, #80]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005d4:	f043 0320 	orr.w	r3, r3, #32
 80005d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005da:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	f003 0320 	and.w	r3, r3, #32
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <MX_GPIO_Init+0x74>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	4a08      	ldr	r2, [pc, #32]	@ (8000624 <MX_GPIO_Init+0x74>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <MX_GPIO_Init+0x74>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000

08000628 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800062c:	4b1b      	ldr	r3, [pc, #108]	@ (800069c <MX_I2C1_Init+0x74>)
 800062e:	4a1c      	ldr	r2, [pc, #112]	@ (80006a0 <MX_I2C1_Init+0x78>)
 8000630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8000632:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <MX_I2C1_Init+0x74>)
 8000634:	4a1b      	ldr	r2, [pc, #108]	@ (80006a4 <MX_I2C1_Init+0x7c>)
 8000636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000638:	4b18      	ldr	r3, [pc, #96]	@ (800069c <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063e:	4b17      	ldr	r3, [pc, #92]	@ (800069c <MX_I2C1_Init+0x74>)
 8000640:	2201      	movs	r2, #1
 8000642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b15      	ldr	r3, [pc, #84]	@ (800069c <MX_I2C1_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b14      	ldr	r3, [pc, #80]	@ (800069c <MX_I2C1_Init+0x74>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000650:	4b12      	ldr	r3, [pc, #72]	@ (800069c <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000656:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_I2C1_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065c:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000662:	480e      	ldr	r0, [pc, #56]	@ (800069c <MX_I2C1_Init+0x74>)
 8000664:	f001 f8c8 	bl	80017f8 <HAL_I2C_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800066e:	f000 fa19 	bl	8000aa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000672:	2100      	movs	r1, #0
 8000674:	4809      	ldr	r0, [pc, #36]	@ (800069c <MX_I2C1_Init+0x74>)
 8000676:	f001 fe4b 	bl	8002310 <HAL_I2CEx_ConfigAnalogFilter>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000680:	f000 fa10 	bl	8000aa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000684:	2100      	movs	r1, #0
 8000686:	4805      	ldr	r0, [pc, #20]	@ (800069c <MX_I2C1_Init+0x74>)
 8000688:	f001 fe8d 	bl	80023a6 <HAL_I2CEx_ConfigDigitalFilter>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000692:	f000 fa07 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000098 	.word	0x20000098
 80006a0:	40005400 	.word	0x40005400
 80006a4:	40b285c2 	.word	0x40b285c2

080006a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b09a      	sub	sp, #104	@ 0x68
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	2244      	movs	r2, #68	@ 0x44
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f003 fd76 	bl	80041ba <memset>
  if(i2cHandle->Instance==I2C1)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a1f      	ldr	r2, [pc, #124]	@ (8000750 <HAL_I2C_MspInit+0xa8>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d136      	bne.n	8000746 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006d8:	2340      	movs	r3, #64	@ 0x40
 80006da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 fc8d 	bl	8003004 <HAL_RCCEx_PeriphCLKConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80006f0:	f000 f9d8 	bl	8000aa4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f4:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 80006f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f8:	4a16      	ldr	r2, [pc, #88]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 80006fa:	f043 0302 	orr.w	r3, r3, #2
 80006fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 8000702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000704:	f003 0302 	and.w	r3, r3, #2
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800070c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000710:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000712:	2312      	movs	r3, #18
 8000714:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800071e:	2304      	movs	r3, #4
 8000720:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000722:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000726:	4619      	mov	r1, r3
 8000728:	480b      	ldr	r0, [pc, #44]	@ (8000758 <HAL_I2C_MspInit+0xb0>)
 800072a:	f000 feb1 	bl	8001490 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 8000730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000732:	4a08      	ldr	r2, [pc, #32]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 8000734:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000738:	6593      	str	r3, [r2, #88]	@ 0x58
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 800073c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800073e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000746:	bf00      	nop
 8000748:	3768      	adds	r7, #104	@ 0x68
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40005400 	.word	0x40005400
 8000754:	40021000 	.word	0x40021000
 8000758:	48000400 	.word	0x48000400

0800075c <imu_write_register>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Write to an IMU register
void imu_write_register(uint8_t reg, uint8_t value) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af04      	add	r7, sp, #16
 8000762:	4603      	mov	r3, r0
 8000764:	460a      	mov	r2, r1
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	4613      	mov	r3, r2
 800076a:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 1000);
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	b29a      	uxth	r2, r3
 8000770:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000774:	9302      	str	r3, [sp, #8]
 8000776:	2301      	movs	r3, #1
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	1dbb      	adds	r3, r7, #6
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	2301      	movs	r3, #1
 8000780:	21d4      	movs	r1, #212	@ 0xd4
 8000782:	4803      	ldr	r0, [pc, #12]	@ (8000790 <imu_write_register+0x34>)
 8000784:	f001 f8d4 	bl	8001930 <HAL_I2C_Mem_Write>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000098 	.word	0x20000098

08000794 <imu_read_registers>:

// Read from IMU registers
void imu_read_registers(uint8_t reg, uint8_t *data, uint16_t len) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af04      	add	r7, sp, #16
 800079a:	4603      	mov	r3, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	71fb      	strb	r3, [r7, #7]
 80007a0:	4613      	mov	r3, r2
 80007a2:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, len, 1000);
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ac:	9302      	str	r3, [sp, #8]
 80007ae:	88bb      	ldrh	r3, [r7, #4]
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	21d4      	movs	r1, #212	@ 0xd4
 80007ba:	4803      	ldr	r0, [pc, #12]	@ (80007c8 <imu_read_registers+0x34>)
 80007bc:	f001 f9cc 	bl	8001b58 <HAL_I2C_Mem_Read>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000098 	.word	0x20000098

080007cc <imu_init>:

// Initialize the IMU
void imu_init(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
    uint8_t whoami;
    imu_read_registers(0x0F, &whoami, 1);  // Read WHO_AM_I register
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	2201      	movs	r2, #1
 80007d6:	4619      	mov	r1, r3
 80007d8:	200f      	movs	r0, #15
 80007da:	f7ff ffdb 	bl	8000794 <imu_read_registers>
    if (whoami != WHO_AM_I_VALUE) {
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b6c      	cmp	r3, #108	@ 0x6c
 80007e2:	d006      	beq.n	80007f2 <imu_init+0x26>
        printf("IMU not found: 0x%02X\n\r", whoami);
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	4619      	mov	r1, r3
 80007e8:	480a      	ldr	r0, [pc, #40]	@ (8000814 <imu_init+0x48>)
 80007ea:	f003 fc91 	bl	8004110 <iprintf>
        while (1);  // Hang if IMU not detected
 80007ee:	bf00      	nop
 80007f0:	e7fd      	b.n	80007ee <imu_init+0x22>
    }
    imu_write_register(0x12, 0x40);  // CTRL3_C: Enable Block Data Update (BDU)
 80007f2:	2140      	movs	r1, #64	@ 0x40
 80007f4:	2012      	movs	r0, #18
 80007f6:	f7ff ffb1 	bl	800075c <imu_write_register>
    imu_write_register(0x10, 0x64);  // CTRL1_XL: 104 Hz, ±8g (was 0x60 for ±2g)
 80007fa:	2164      	movs	r1, #100	@ 0x64
 80007fc:	2010      	movs	r0, #16
 80007fe:	f7ff ffad 	bl	800075c <imu_write_register>
    imu_write_register(0x11, 0x64);  // CTRL2_G: 104 Hz, ±500 dps (was 0x6C for ±2000 dps)
 8000802:	2164      	movs	r1, #100	@ 0x64
 8000804:	2011      	movs	r0, #17
 8000806:	f7ff ffa9 	bl	800075c <imu_write_register>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	08004e04 	.word	0x08004e04

08000818 <imu_read_accel>:

// Read accelerometer data
void imu_read_accel(imu_data_t *accel) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
    uint8_t buffer[6];
    imu_read_registers(0x28, buffer, 6);  // OUTX_L_XL to OUTZ_H_XL
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2206      	movs	r2, #6
 8000826:	4619      	mov	r1, r3
 8000828:	2028      	movs	r0, #40	@ 0x28
 800082a:	f7ff ffb3 	bl	8000794 <imu_read_registers>
    accel->x = (int16_t)(buffer[0] | (buffer[1] << 8));
 800082e:	7a3b      	ldrb	r3, [r7, #8]
 8000830:	b21a      	sxth	r2, r3
 8000832:	7a7b      	ldrb	r3, [r7, #9]
 8000834:	021b      	lsls	r3, r3, #8
 8000836:	b21b      	sxth	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	b21a      	sxth	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	801a      	strh	r2, [r3, #0]
    accel->y = (int16_t)(buffer[2] | (buffer[3] << 8));
 8000840:	7abb      	ldrb	r3, [r7, #10]
 8000842:	b21a      	sxth	r2, r3
 8000844:	7afb      	ldrb	r3, [r7, #11]
 8000846:	021b      	lsls	r3, r3, #8
 8000848:	b21b      	sxth	r3, r3
 800084a:	4313      	orrs	r3, r2
 800084c:	b21a      	sxth	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	805a      	strh	r2, [r3, #2]
    accel->z = (int16_t)(buffer[4] | (buffer[5] << 8));
 8000852:	7b3b      	ldrb	r3, [r7, #12]
 8000854:	b21a      	sxth	r2, r3
 8000856:	7b7b      	ldrb	r3, [r7, #13]
 8000858:	021b      	lsls	r3, r3, #8
 800085a:	b21b      	sxth	r3, r3
 800085c:	4313      	orrs	r3, r2
 800085e:	b21a      	sxth	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	809a      	strh	r2, [r3, #4]
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <imu_read_gyro>:

// Read gyroscope data
void imu_read_gyro(imu_data_t *gyro) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
    uint8_t buffer[6];
    imu_read_registers(0x22, buffer, 6);  // OUTX_L_G to OUTZ_H_G
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	2206      	movs	r2, #6
 800087a:	4619      	mov	r1, r3
 800087c:	2022      	movs	r0, #34	@ 0x22
 800087e:	f7ff ff89 	bl	8000794 <imu_read_registers>
    gyro->x = (int16_t)(buffer[0] | (buffer[1] << 8));
 8000882:	7a3b      	ldrb	r3, [r7, #8]
 8000884:	b21a      	sxth	r2, r3
 8000886:	7a7b      	ldrb	r3, [r7, #9]
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b21b      	sxth	r3, r3
 800088c:	4313      	orrs	r3, r2
 800088e:	b21a      	sxth	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	801a      	strh	r2, [r3, #0]
    gyro->y = (int16_t)(buffer[2] | (buffer[3] << 8));
 8000894:	7abb      	ldrb	r3, [r7, #10]
 8000896:	b21a      	sxth	r2, r3
 8000898:	7afb      	ldrb	r3, [r7, #11]
 800089a:	021b      	lsls	r3, r3, #8
 800089c:	b21b      	sxth	r3, r3
 800089e:	4313      	orrs	r3, r2
 80008a0:	b21a      	sxth	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	805a      	strh	r2, [r3, #2]
    gyro->z = (int16_t)(buffer[4] | (buffer[5] << 8));
 80008a6:	7b3b      	ldrb	r3, [r7, #12]
 80008a8:	b21a      	sxth	r2, r3
 80008aa:	7b7b      	ldrb	r3, [r7, #13]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b21b      	sxth	r3, r3
 80008b0:	4313      	orrs	r3, r2
 80008b2:	b21a      	sxth	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	809a      	strh	r2, [r3, #4]
}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	@ 0x28
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c6:	f000 fbe1 	bl	800108c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ca:	f000 f88b 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ce:	f7ff fe6f 	bl	80005b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008d2:	f7ff fea9 	bl	8000628 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80008d6:	2000      	movs	r0, #0
 80008d8:	f000 fa24 	bl	8000d24 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80008dc:	2101      	movs	r1, #1
 80008de:	2000      	movs	r0, #0
 80008e0:	f000 fa82 	bl	8000de8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80008e4:	4b39      	ldr	r3, [pc, #228]	@ (80009cc <main+0x10c>)
 80008e6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008ea:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80008ec:	4b37      	ldr	r3, [pc, #220]	@ (80009cc <main+0x10c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80008f2:	4b36      	ldr	r3, [pc, #216]	@ (80009cc <main+0x10c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80008f8:	4b34      	ldr	r3, [pc, #208]	@ (80009cc <main+0x10c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80008fe:	4b33      	ldr	r3, [pc, #204]	@ (80009cc <main+0x10c>)
 8000900:	2200      	movs	r2, #0
 8000902:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000904:	4931      	ldr	r1, [pc, #196]	@ (80009cc <main+0x10c>)
 8000906:	2000      	movs	r0, #0
 8000908:	f000 faee 	bl	8000ee8 <BSP_COM_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <main+0x56>
  {
    Error_Handler();
 8000912:	f000 f8c7 	bl	8000aa4 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000916:	482e      	ldr	r0, [pc, #184]	@ (80009d0 <main+0x110>)
 8000918:	f003 fbfa 	bl	8004110 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 800091c:	2000      	movs	r0, #0
 800091e:	f000 fa37 	bl	8000d90 <BSP_LED_On>

  imu_init();  // Initialize the IMU after peripherals are set up
 8000922:	f7ff ff53 	bl	80007cc <imu_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000926:	4b2b      	ldr	r3, [pc, #172]	@ (80009d4 <main+0x114>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d1fb      	bne.n	8000926 <main+0x66>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 800092e:	4b29      	ldr	r3, [pc, #164]	@ (80009d4 <main+0x114>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000934:	2000      	movs	r0, #0
 8000936:	f000 fa41 	bl	8000dbc <BSP_LED_Toggle>

      /* ..... Perform your action ..... */
      printf("Let's do this !\n\r");
 800093a:	4827      	ldr	r0, [pc, #156]	@ (80009d8 <main+0x118>)
 800093c:	f003 fbe8 	bl	8004110 <iprintf>
      // grok code starts
      imu_data_t accel, gyro;
      imu_read_accel(&accel);
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ff67 	bl	8000818 <imu_read_accel>
      imu_read_gyro(&gyro);
 800094a:	463b      	mov	r3, r7
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff8d 	bl	800086c <imu_read_gyro>

      // Compute scaled values using integer arithmetic
      int32_t accel_ug_x = (int32_t)accel.x * ACCEL_SENSITIVITY_UG;
 8000952:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000956:	461a      	mov	r2, r3
 8000958:	23f4      	movs	r3, #244	@ 0xf4
 800095a:	fb02 f303 	mul.w	r3, r2, r3
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
      int32_t accel_ug_y = (int32_t)accel.y * ACCEL_SENSITIVITY_UG;
 8000960:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000964:	461a      	mov	r2, r3
 8000966:	23f4      	movs	r3, #244	@ 0xf4
 8000968:	fb02 f303 	mul.w	r3, r2, r3
 800096c:	623b      	str	r3, [r7, #32]
      int32_t accel_ug_z = (int32_t)accel.z * ACCEL_SENSITIVITY_UG;
 800096e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000972:	461a      	mov	r2, r3
 8000974:	23f4      	movs	r3, #244	@ 0xf4
 8000976:	fb02 f303 	mul.w	r3, r2, r3
 800097a:	61fb      	str	r3, [r7, #28]
      int32_t gyro_udps_x = (int32_t)gyro.x * GYRO_SENSITIVITY_UDPS;
 800097c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000980:	461a      	mov	r2, r3
 8000982:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000986:	fb02 f303 	mul.w	r3, r2, r3
 800098a:	61bb      	str	r3, [r7, #24]
      int32_t gyro_udps_y = (int32_t)gyro.y * GYRO_SENSITIVITY_UDPS;
 800098c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000990:	461a      	mov	r2, r3
 8000992:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000996:	fb02 f303 	mul.w	r3, r2, r3
 800099a:	617b      	str	r3, [r7, #20]
      int32_t gyro_udps_z = (int32_t)gyro.z * GYRO_SENSITIVITY_UDPS;
 800099c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009a0:	461a      	mov	r2, r3
 80009a2:	f244 435c 	movw	r3, #17500	@ 0x445c
 80009a6:	fb02 f303 	mul.w	r3, r2, r3
 80009aa:	613b      	str	r3, [r7, #16]
      sprintf(message, "Gyro [mdps]: X=%ld, Y=%ld, Z=%ld\n\r",
              gyro_mdps_x, gyro_mdps_y, gyro_mdps_z);
      HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
      */
      // printing by me
      printf("Accel [ug]: X=%ld, Y=%ld, Z=%ld\n\r",
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	6a3a      	ldr	r2, [r7, #32]
 80009b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80009b2:	480a      	ldr	r0, [pc, #40]	@ (80009dc <main+0x11c>)
 80009b4:	f003 fbac 	bl	8004110 <iprintf>
              accel_ug_x, accel_ug_y, accel_ug_z);
      printf("Gyro [mdps]: X=%ld, Y=%ld, Z=%ld\n\r",
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	697a      	ldr	r2, [r7, #20]
 80009bc:	69b9      	ldr	r1, [r7, #24]
 80009be:	4808      	ldr	r0, [pc, #32]	@ (80009e0 <main+0x120>)
 80009c0:	f003 fba6 	bl	8004110 <iprintf>
                    gyro_udps_x, gyro_udps_y, gyro_udps_z);

      HAL_Delay(100);
 80009c4:	2064      	movs	r0, #100	@ 0x64
 80009c6:	f000 fbd1 	bl	800116c <HAL_Delay>
    if (BspButtonState == BUTTON_PRESSED)
 80009ca:	e7ac      	b.n	8000926 <main+0x66>
 80009cc:	200000ec 	.word	0x200000ec
 80009d0:	08004e1c 	.word	0x08004e1c
 80009d4:	200000fc 	.word	0x200000fc
 80009d8:	08004e38 	.word	0x08004e38
 80009dc:	08004e4c 	.word	0x08004e4c
 80009e0:	08004e70 	.word	0x08004e70

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b094      	sub	sp, #80	@ 0x50
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 0318 	add.w	r3, r7, #24
 80009ee:	2238      	movs	r2, #56	@ 0x38
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f003 fbe1 	bl	80041ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a06:	2000      	movs	r0, #0
 8000a08:	f001 fd1a 	bl	8002440 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a16:	2340      	movs	r3, #64	@ 0x40
 8000a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a22:	2304      	movs	r3, #4
 8000a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000a26:	2355      	movs	r3, #85	@ 0x55
 8000a28:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a36:	f107 0318 	add.w	r3, r7, #24
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 fdb4 	bl	80025a8 <HAL_RCC_OscConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a46:	f000 f82d 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4a:	230f      	movs	r3, #15
 8000a4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2104      	movs	r1, #4
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 f8b2 	bl	8002bcc <HAL_RCC_ClockConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a6e:	f000 f819 	bl	8000aa4 <Error_Handler>
  }
}
 8000a72:	bf00      	nop
 8000a74:	3750      	adds	r7, #80	@ 0x50
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d102      	bne.n	8000a92 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000a8c:	4b04      	ldr	r3, [pc, #16]	@ (8000aa0 <BSP_PB_Callback+0x24>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	601a      	str	r2, [r3, #0]
  }
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	200000fc 	.word	0x200000fc

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <Error_Handler+0x8>

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <HAL_MspInit+0x44>)
 8000ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aba:	4a0e      	ldr	r2, [pc, #56]	@ (8000af4 <HAL_MspInit+0x44>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <HAL_MspInit+0x44>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <HAL_MspInit+0x44>)
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad2:	4a08      	ldr	r2, [pc, #32]	@ (8000af4 <HAL_MspInit+0x44>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <HAL_MspInit+0x44>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ae6:	f001 fd4f 	bl	8002588 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <NMI_Handler+0x4>

08000b00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <MemManage_Handler+0x4>

08000b10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4e:	f000 faef 	bl	8001130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f000 f9b2 	bl	8000ec4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	e00a      	b.n	8000b8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b76:	f3af 8000 	nop.w
 8000b7a:	4601      	mov	r1, r0
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	60ba      	str	r2, [r7, #8]
 8000b82:	b2ca      	uxtb	r2, r1
 8000b84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbf0      	blt.n	8000b76 <_read+0x12>
  }

  return len;
 8000b94:	687b      	ldr	r3, [r7, #4]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	60f8      	str	r0, [r7, #12]
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	e009      	b.n	8000bc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	60ba      	str	r2, [r7, #8]
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 f9f7 	bl	8000fac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	dbf1      	blt.n	8000bb0 <_write+0x12>
  }
  return len;
 8000bcc:	687b      	ldr	r3, [r7, #4]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <_close>:

int _close(int file)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bfe:	605a      	str	r2, [r3, #4]
  return 0;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <_isatty>:

int _isatty(int file)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c48:	4a14      	ldr	r2, [pc, #80]	@ (8000c9c <_sbrk+0x5c>)
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <_sbrk+0x60>)
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c54:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d102      	bne.n	8000c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <_sbrk+0x64>)
 8000c5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ca8 <_sbrk+0x68>)
 8000c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c62:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d207      	bcs.n	8000c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c70:	f003 faf2 	bl	8004258 <__errno>
 8000c74:	4603      	mov	r3, r0
 8000c76:	220c      	movs	r2, #12
 8000c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	e009      	b.n	8000c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c80:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c86:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ca4 <_sbrk+0x64>)
 8000c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20008000 	.word	0x20008000
 8000ca0:	00000400 	.word	0x00000400
 8000ca4:	20000100 	.word	0x20000100
 8000ca8:	200002f8 	.word	0x200002f8

08000cac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd0:	480d      	ldr	r0, [pc, #52]	@ (8000d08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cd2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cd4:	f7ff ffea 	bl	8000cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	@ (8000d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <LoopForever+0xe>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d1c <LoopForever+0x16>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f003 fab1 	bl	8004264 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d02:	f7ff fddd 	bl	80008c0 <main>

08000d06 <LoopForever>:

LoopForever:
    b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
  ldr   r0, =_estack
 8000d08:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d14:	08004f0c 	.word	0x08004f0c
  ldr r2, =_sbss
 8000d18:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d1c:	200002f4 	.word	0x200002f4

08000d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC1_2_IRQHandler>
	...

08000d24 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000d2e:	4b16      	ldr	r3, [pc, #88]	@ (8000d88 <BSP_LED_Init+0x64>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	4a15      	ldr	r2, [pc, #84]	@ (8000d88 <BSP_LED_Init+0x64>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3a:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <BSP_LED_Init+0x64>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000d46:	2320      	movs	r3, #32
 8000d48:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	4a0c      	ldr	r2, [pc, #48]	@ (8000d8c <BSP_LED_Init+0x68>)
 8000d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5e:	f107 020c 	add.w	r2, r7, #12
 8000d62:	4611      	mov	r1, r2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 fb93 	bl	8001490 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	4a07      	ldr	r2, [pc, #28]	@ (8000d8c <BSP_LED_Init+0x68>)
 8000d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d72:	2120      	movs	r1, #32
 8000d74:	2200      	movs	r2, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fd0c 	bl	8001794 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3720      	adds	r7, #32
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	20000004 	.word	0x20000004

08000d90 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	4a06      	ldr	r2, [pc, #24]	@ (8000db8 <BSP_LED_On+0x28>)
 8000d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da2:	2120      	movs	r1, #32
 8000da4:	2201      	movs	r2, #1
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 fcf4 	bl	8001794 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000004 	.word	0x20000004

08000dbc <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	4a06      	ldr	r2, [pc, #24]	@ (8000de4 <BSP_LED_Toggle+0x28>)
 8000dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dce:	2220      	movs	r2, #32
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 fcf6 	bl	80017c4 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000004 	.word	0x20000004

08000de8 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	460a      	mov	r2, r1
 8000df2:	71fb      	strb	r3, [r7, #7]
 8000df4:	4613      	mov	r3, r2
 8000df6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000df8:	4b2c      	ldr	r3, [pc, #176]	@ (8000eac <BSP_PB_Init+0xc4>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfc:	4a2b      	ldr	r2, [pc, #172]	@ (8000eac <BSP_PB_Init+0xc4>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e04:	4b29      	ldr	r3, [pc, #164]	@ (8000eac <BSP_PB_Init+0xc4>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000e10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e14:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000e16:	2302      	movs	r3, #2
 8000e18:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10c      	bne.n	8000e3e <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	4a21      	ldr	r2, [pc, #132]	@ (8000eb0 <BSP_PB_Init+0xc8>)
 8000e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e30:	f107 020c 	add.w	r2, r7, #12
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 fb2a 	bl	8001490 <HAL_GPIO_Init>
 8000e3c:	e031      	b.n	8000ea2 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000e3e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e42:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4a1a      	ldr	r2, [pc, #104]	@ (8000eb0 <BSP_PB_Init+0xc8>)
 8000e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4c:	f107 020c 	add.w	r2, r7, #12
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fb1c 	bl	8001490 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	4a15      	ldr	r2, [pc, #84]	@ (8000eb4 <BSP_PB_Init+0xcc>)
 8000e5e:	441a      	add	r2, r3
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	4915      	ldr	r1, [pc, #84]	@ (8000eb8 <BSP_PB_Init+0xd0>)
 8000e64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	f000 facc 	bl	8001408 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	00db      	lsls	r3, r3, #3
 8000e74:	4a0f      	ldr	r2, [pc, #60]	@ (8000eb4 <BSP_PB_Init+0xcc>)
 8000e76:	1898      	adds	r0, r3, r2
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4a10      	ldr	r2, [pc, #64]	@ (8000ebc <BSP_PB_Init+0xd4>)
 8000e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e80:	461a      	mov	r2, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	f000 faa3 	bl	80013ce <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000e88:	2028      	movs	r0, #40	@ 0x28
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec0 <BSP_PB_Init+0xd8>)
 8000e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e92:	2200      	movs	r2, #0
 8000e94:	4619      	mov	r1, r3
 8000e96:	f000 fa66 	bl	8001366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000e9a:	2328      	movs	r3, #40	@ 0x28
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fa7c 	bl	800139a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3720      	adds	r7, #32
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	20000104 	.word	0x20000104
 8000eb8:	08004eac 	.word	0x08004eac
 8000ebc:	20000010 	.word	0x20000010
 8000ec0:	20000014 	.word	0x20000014

08000ec4 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <BSP_PB_IRQHandler+0x20>)
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 faaa 	bl	8001430 <HAL_EXTI_IRQHandler>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000104 	.word	0x20000104

08000ee8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d903      	bls.n	8000f06 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000efe:	f06f 0301 	mvn.w	r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	e018      	b.n	8000f38 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2294      	movs	r2, #148	@ 0x94
 8000f0a:	fb02 f303 	mul.w	r3, r2, r3
 8000f0e:	4a0d      	ldr	r2, [pc, #52]	@ (8000f44 <BSP_COM_Init+0x5c>)
 8000f10:	4413      	add	r3, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f86e 	bl	8000ff4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2294      	movs	r2, #148	@ 0x94
 8000f1c:	fb02 f303 	mul.w	r3, r2, r3
 8000f20:	4a08      	ldr	r2, [pc, #32]	@ (8000f44 <BSP_COM_Init+0x5c>)
 8000f22:	4413      	add	r3, r2
 8000f24:	6839      	ldr	r1, [r7, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f80e 	bl	8000f48 <MX_LPUART1_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d002      	beq.n	8000f38 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000f32:	f06f 0303 	mvn.w	r3, #3
 8000f36:	e000      	b.n	8000f3a <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000f38:	68fb      	ldr	r3, [r7, #12]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000010c 	.word	0x2000010c

08000f48 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <MX_LPUART1_Init+0x60>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	220c      	movs	r2, #12
 8000f66:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	895b      	ldrh	r3, [r3, #10]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	891b      	ldrh	r3, [r3, #8]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	899b      	ldrh	r3, [r3, #12]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f94:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f002 fa24 	bl	80033e4 <HAL_UART_Init>
 8000f9c:	4603      	mov	r3, r0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000000c 	.word	0x2000000c

08000fac <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8000fb4:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <__io_putchar+0x30>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	2394      	movs	r3, #148	@ 0x94
 8000fbc:	fb02 f303 	mul.w	r3, r2, r3
 8000fc0:	4a07      	ldr	r2, [pc, #28]	@ (8000fe0 <__io_putchar+0x34>)
 8000fc2:	1898      	adds	r0, r3, r2
 8000fc4:	1d39      	adds	r1, r7, #4
 8000fc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f002 fa64 	bl	8003498 <HAL_UART_Transmit>
  return ch;
 8000fd0:	687b      	ldr	r3, [r7, #4]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200001a0 	.word	0x200001a0
 8000fe0:	2000010c 	.word	0x2000010c

08000fe4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff fd47 	bl	8000a7c <BSP_PB_Callback>
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	@ 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000ffc:	4b22      	ldr	r3, [pc, #136]	@ (8001088 <COM1_MspInit+0x94>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001000:	4a21      	ldr	r2, [pc, #132]	@ (8001088 <COM1_MspInit+0x94>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001008:	4b1f      	ldr	r3, [pc, #124]	@ (8001088 <COM1_MspInit+0x94>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001014:	4b1c      	ldr	r3, [pc, #112]	@ (8001088 <COM1_MspInit+0x94>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001018:	4a1b      	ldr	r2, [pc, #108]	@ (8001088 <COM1_MspInit+0x94>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001020:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <COM1_MspInit+0x94>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800102c:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <COM1_MspInit+0x94>)
 800102e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001030:	4a15      	ldr	r2, [pc, #84]	@ (8001088 <COM1_MspInit+0x94>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001038:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <COM1_MspInit+0x94>)
 800103a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001044:	2304      	movs	r3, #4
 8001046:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800104c:	2302      	movs	r3, #2
 800104e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001050:	2301      	movs	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001054:	230c      	movs	r3, #12
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001062:	f000 fa15 	bl	8001490 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001066:	2308      	movs	r3, #8
 8001068:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800106e:	230c      	movs	r3, #12
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800107c:	f000 fa08 	bl	8001490 <HAL_GPIO_Init>
}
 8001080:	bf00      	nop
 8001082:	3728      	adds	r7, #40	@ 0x28
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40021000 	.word	0x40021000

0800108c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001096:	2003      	movs	r0, #3
 8001098:	f000 f95a 	bl	8001350 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800109c:	2000      	movs	r0, #0
 800109e:	f000 f80d 	bl	80010bc <HAL_InitTick>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	71fb      	strb	r3, [r7, #7]
 80010ac:	e001      	b.n	80010b2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ae:	f7ff fcff 	bl	8000ab0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010b2:	79fb      	ldrb	r3, [r7, #7]

}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010c8:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <HAL_InitTick+0x68>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d022      	beq.n	8001116 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010d0:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <HAL_InitTick+0x6c>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <HAL_InitTick+0x68>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80010e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 f966 	bl	80013b6 <HAL_SYSTICK_Config>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10f      	bne.n	8001110 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b0f      	cmp	r3, #15
 80010f4:	d809      	bhi.n	800110a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f6:	2200      	movs	r2, #0
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	f04f 30ff 	mov.w	r0, #4294967295
 80010fe:	f000 f932 	bl	8001366 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <HAL_InitTick+0x70>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	e007      	b.n	800111a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	e004      	b.n	800111a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	e001      	b.n	800111a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	2000001c 	.word	0x2000001c
 8001128:	20000000 	.word	0x20000000
 800112c:	20000018 	.word	0x20000018

08001130 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001134:	4b05      	ldr	r3, [pc, #20]	@ (800114c <HAL_IncTick+0x1c>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <HAL_IncTick+0x20>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4413      	add	r3, r2
 800113e:	4a03      	ldr	r2, [pc, #12]	@ (800114c <HAL_IncTick+0x1c>)
 8001140:	6013      	str	r3, [r2, #0]
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	200001a4 	.word	0x200001a4
 8001150:	2000001c 	.word	0x2000001c

08001154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return uwTick;
 8001158:	4b03      	ldr	r3, [pc, #12]	@ (8001168 <HAL_GetTick+0x14>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	200001a4 	.word	0x200001a4

0800116c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff ffee 	bl	8001154 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001184:	d004      	beq.n	8001190 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001186:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <HAL_Delay+0x40>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	4413      	add	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001190:	bf00      	nop
 8001192:	f7ff ffdf 	bl	8001154 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d8f7      	bhi.n	8001192 <HAL_Delay+0x26>
  {
  }
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	2000001c 	.word	0x2000001c

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db0b      	blt.n	800123e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f003 021f 	and.w	r2, r3, #31
 800122c:	4907      	ldr	r1, [pc, #28]	@ (800124c <__NVIC_EnableIRQ+0x38>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	@ (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	@ (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	@ 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	@ 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800131c:	d301      	bcc.n	8001322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131e:	2301      	movs	r3, #1
 8001320:	e00f      	b.n	8001342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001322:	4a0a      	ldr	r2, [pc, #40]	@ (800134c <SysTick_Config+0x40>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132a:	210f      	movs	r1, #15
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f7ff ff8e 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	4b05      	ldr	r3, [pc, #20]	@ (800134c <SysTick_Config+0x40>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	4b04      	ldr	r3, [pc, #16]	@ (800134c <SysTick_Config+0x40>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff29 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff40 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff90 	bl	80012a4 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5f 	bl	8001250 <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff33 	bl	8001214 <__NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffa4 	bl	800130c <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80013ce:	b480      	push	{r7}
 80013d0:	b087      	sub	sp, #28
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	460b      	mov	r3, r1
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 80013e0:	7afb      	ldrb	r3, [r7, #11]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d103      	bne.n	80013ee <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	605a      	str	r2, [r3, #4]
      break;
 80013ec:	e005      	b.n	80013fa <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2200      	movs	r2, #0
 80013f2:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	75fb      	strb	r3, [r7, #23]
      break;
 80013f8:	bf00      	nop
  }

  return status;
 80013fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	371c      	adds	r7, #28
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e003      	b.n	8001424 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001422:	2300      	movs	r3, #0
  }
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	0c1b      	lsrs	r3, r3, #16
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 031f 	and.w	r3, r3, #31
 800144c:	2201      	movs	r2, #1
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	015a      	lsls	r2, r3, #5
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <HAL_EXTI_IRQHandler+0x5c>)
 800145a:	4413      	add	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d009      	beq.n	8001482 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d002      	beq.n	8001482 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	4798      	blx	r3
    }
  }
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40010414 	.word	0x40010414

08001490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800149e:	e15a      	b.n	8001756 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	2101      	movs	r1, #1
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	4013      	ands	r3, r2
 80014ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 814c 	beq.w	8001750 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d005      	beq.n	80014d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d130      	bne.n	8001532 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001506:	2201      	movs	r2, #1
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	091b      	lsrs	r3, r3, #4
 800151c:	f003 0201 	and.w	r2, r3, #1
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b03      	cmp	r3, #3
 800153c:	d017      	beq.n	800156e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	2203      	movs	r2, #3
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d123      	bne.n	80015c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	08da      	lsrs	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3208      	adds	r2, #8
 8001582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001586:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	220f      	movs	r2, #15
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	691a      	ldr	r2, [r3, #16]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	08da      	lsrs	r2, r3, #3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3208      	adds	r2, #8
 80015bc:	6939      	ldr	r1, [r7, #16]
 80015be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	2203      	movs	r2, #3
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0203 	and.w	r2, r3, #3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 80a6 	beq.w	8001750 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001604:	4b5b      	ldr	r3, [pc, #364]	@ (8001774 <HAL_GPIO_Init+0x2e4>)
 8001606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001608:	4a5a      	ldr	r2, [pc, #360]	@ (8001774 <HAL_GPIO_Init+0x2e4>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001610:	4b58      	ldr	r3, [pc, #352]	@ (8001774 <HAL_GPIO_Init+0x2e4>)
 8001612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800161c:	4a56      	ldr	r2, [pc, #344]	@ (8001778 <HAL_GPIO_Init+0x2e8>)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	220f      	movs	r2, #15
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001646:	d01f      	beq.n	8001688 <HAL_GPIO_Init+0x1f8>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a4c      	ldr	r2, [pc, #304]	@ (800177c <HAL_GPIO_Init+0x2ec>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d019      	beq.n	8001684 <HAL_GPIO_Init+0x1f4>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a4b      	ldr	r2, [pc, #300]	@ (8001780 <HAL_GPIO_Init+0x2f0>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d013      	beq.n	8001680 <HAL_GPIO_Init+0x1f0>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a4a      	ldr	r2, [pc, #296]	@ (8001784 <HAL_GPIO_Init+0x2f4>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d00d      	beq.n	800167c <HAL_GPIO_Init+0x1ec>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a49      	ldr	r2, [pc, #292]	@ (8001788 <HAL_GPIO_Init+0x2f8>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d007      	beq.n	8001678 <HAL_GPIO_Init+0x1e8>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a48      	ldr	r2, [pc, #288]	@ (800178c <HAL_GPIO_Init+0x2fc>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d101      	bne.n	8001674 <HAL_GPIO_Init+0x1e4>
 8001670:	2305      	movs	r3, #5
 8001672:	e00a      	b.n	800168a <HAL_GPIO_Init+0x1fa>
 8001674:	2306      	movs	r3, #6
 8001676:	e008      	b.n	800168a <HAL_GPIO_Init+0x1fa>
 8001678:	2304      	movs	r3, #4
 800167a:	e006      	b.n	800168a <HAL_GPIO_Init+0x1fa>
 800167c:	2303      	movs	r3, #3
 800167e:	e004      	b.n	800168a <HAL_GPIO_Init+0x1fa>
 8001680:	2302      	movs	r3, #2
 8001682:	e002      	b.n	800168a <HAL_GPIO_Init+0x1fa>
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <HAL_GPIO_Init+0x1fa>
 8001688:	2300      	movs	r3, #0
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	f002 0203 	and.w	r2, r2, #3
 8001690:	0092      	lsls	r2, r2, #2
 8001692:	4093      	lsls	r3, r2
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800169a:	4937      	ldr	r1, [pc, #220]	@ (8001778 <HAL_GPIO_Init+0x2e8>)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3302      	adds	r3, #2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a8:	4b39      	ldr	r3, [pc, #228]	@ (8001790 <HAL_GPIO_Init+0x300>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016cc:	4a30      	ldr	r2, [pc, #192]	@ (8001790 <HAL_GPIO_Init+0x300>)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001790 <HAL_GPIO_Init+0x300>)
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016f6:	4a26      	ldr	r2, [pc, #152]	@ (8001790 <HAL_GPIO_Init+0x300>)
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016fc:	4b24      	ldr	r3, [pc, #144]	@ (8001790 <HAL_GPIO_Init+0x300>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	43db      	mvns	r3, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001720:	4a1b      	ldr	r2, [pc, #108]	@ (8001790 <HAL_GPIO_Init+0x300>)
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001726:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <HAL_GPIO_Init+0x300>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	43db      	mvns	r3, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800174a:	4a11      	ldr	r2, [pc, #68]	@ (8001790 <HAL_GPIO_Init+0x300>)
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	3301      	adds	r3, #1
 8001754:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	fa22 f303 	lsr.w	r3, r2, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	f47f ae9d 	bne.w	80014a0 <HAL_GPIO_Init+0x10>
  }
}
 8001766:	bf00      	nop
 8001768:	bf00      	nop
 800176a:	371c      	adds	r7, #28
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	40021000 	.word	0x40021000
 8001778:	40010000 	.word	0x40010000
 800177c:	48000400 	.word	0x48000400
 8001780:	48000800 	.word	0x48000800
 8001784:	48000c00 	.word	0x48000c00
 8001788:	48001000 	.word	0x48001000
 800178c:	48001400 	.word	0x48001400
 8001790:	40010400 	.word	0x40010400

08001794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
 80017a0:	4613      	mov	r3, r2
 80017a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a4:	787b      	ldrb	r3, [r7, #1]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017aa:	887a      	ldrh	r2, [r7, #2]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017b2:	887a      	ldrh	r2, [r7, #2]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017d6:	887a      	ldrh	r2, [r7, #2]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4013      	ands	r3, r2
 80017dc:	041a      	lsls	r2, r3, #16
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43d9      	mvns	r1, r3
 80017e2:	887b      	ldrh	r3, [r7, #2]
 80017e4:	400b      	ands	r3, r1
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	619a      	str	r2, [r3, #24]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e08d      	b.n	8001926 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d106      	bne.n	8001824 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7fe ff42 	bl	80006a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2224      	movs	r2, #36	@ 0x24
 8001828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0201 	bic.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001848:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001858:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d107      	bne.n	8001872 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	e006      	b.n	8001880 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800187e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d108      	bne.n	800189a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	e007      	b.n	80018aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691a      	ldr	r2, [r3, #16]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69d9      	ldr	r1, [r3, #28]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1a      	ldr	r2, [r3, #32]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0201 	orr.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2220      	movs	r2, #32
 8001912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af02      	add	r7, sp, #8
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	4608      	mov	r0, r1
 800193a:	4611      	mov	r1, r2
 800193c:	461a      	mov	r2, r3
 800193e:	4603      	mov	r3, r0
 8001940:	817b      	strh	r3, [r7, #10]
 8001942:	460b      	mov	r3, r1
 8001944:	813b      	strh	r3, [r7, #8]
 8001946:	4613      	mov	r3, r2
 8001948:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b20      	cmp	r3, #32
 8001954:	f040 80f9 	bne.w	8001b4a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HAL_I2C_Mem_Write+0x34>
 800195e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800196a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0ed      	b.n	8001b4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_I2C_Mem_Write+0x4e>
 800197a:	2302      	movs	r3, #2
 800197c:	e0e6      	b.n	8001b4c <HAL_I2C_Mem_Write+0x21c>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001986:	f7ff fbe5 	bl	8001154 <HAL_GetTick>
 800198a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2319      	movs	r3, #25
 8001992:	2201      	movs	r2, #1
 8001994:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 fac3 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0d1      	b.n	8001b4c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2221      	movs	r2, #33	@ 0x21
 80019ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2240      	movs	r2, #64	@ 0x40
 80019b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a3a      	ldr	r2, [r7, #32]
 80019c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80019c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019d0:	88f8      	ldrh	r0, [r7, #6]
 80019d2:	893a      	ldrh	r2, [r7, #8]
 80019d4:	8979      	ldrh	r1, [r7, #10]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	4603      	mov	r3, r0
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 f9d3 	bl	8001d8c <I2C_RequestMemoryWrite>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0a9      	b.n	8001b4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	2bff      	cmp	r3, #255	@ 0xff
 8001a00:	d90e      	bls.n	8001a20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	22ff      	movs	r2, #255	@ 0xff
 8001a06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	8979      	ldrh	r1, [r7, #10]
 8001a10:	2300      	movs	r3, #0
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 fc47 	bl	80022ac <I2C_TransferConfig>
 8001a1e:	e00f      	b.n	8001a40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	8979      	ldrh	r1, [r7, #10]
 8001a32:	2300      	movs	r3, #0
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 fc36 	bl	80022ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f000 fac6 	bl	8001fd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e07b      	b.n	8001b4c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a58:	781a      	ldrb	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	3b01      	subs	r3, #1
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d034      	beq.n	8001af8 <HAL_I2C_Mem_Write+0x1c8>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d130      	bne.n	8001af8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2180      	movs	r1, #128	@ 0x80
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 fa3f 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e04d      	b.n	8001b4c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	2bff      	cmp	r3, #255	@ 0xff
 8001ab8:	d90e      	bls.n	8001ad8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	22ff      	movs	r2, #255	@ 0xff
 8001abe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	8979      	ldrh	r1, [r7, #10]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 fbeb 	bl	80022ac <I2C_TransferConfig>
 8001ad6:	e00f      	b.n	8001af8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	8979      	ldrh	r1, [r7, #10]
 8001aea:	2300      	movs	r3, #0
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 fbda 	bl	80022ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d19e      	bne.n	8001a40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 faac 	bl	8002064 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e01a      	b.n	8001b4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <HAL_I2C_Mem_Write+0x224>)
 8001b2a:	400b      	ands	r3, r1
 8001b2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2220      	movs	r2, #32
 8001b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e000      	b.n	8001b4c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001b4a:	2302      	movs	r3, #2
  }
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	fe00e800 	.word	0xfe00e800

08001b58 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	4608      	mov	r0, r1
 8001b62:	4611      	mov	r1, r2
 8001b64:	461a      	mov	r2, r3
 8001b66:	4603      	mov	r3, r0
 8001b68:	817b      	strh	r3, [r7, #10]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	813b      	strh	r3, [r7, #8]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b20      	cmp	r3, #32
 8001b7c:	f040 80fd 	bne.w	8001d7a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <HAL_I2C_Mem_Read+0x34>
 8001b86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d105      	bne.n	8001b98 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b92:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0f1      	b.n	8001d7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_I2C_Mem_Read+0x4e>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e0ea      	b.n	8001d7c <HAL_I2C_Mem_Read+0x224>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bae:	f7ff fad1 	bl	8001154 <HAL_GetTick>
 8001bb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2319      	movs	r3, #25
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 f9af 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0d5      	b.n	8001d7c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2222      	movs	r2, #34	@ 0x22
 8001bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2240      	movs	r2, #64	@ 0x40
 8001bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a3a      	ldr	r2, [r7, #32]
 8001bea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bf8:	88f8      	ldrh	r0, [r7, #6]
 8001bfa:	893a      	ldrh	r2, [r7, #8]
 8001bfc:	8979      	ldrh	r1, [r7, #10]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	4603      	mov	r3, r0
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 f913 	bl	8001e34 <I2C_RequestMemoryRead>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0ad      	b.n	8001d7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2bff      	cmp	r3, #255	@ 0xff
 8001c28:	d90e      	bls.n	8001c48 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	22ff      	movs	r2, #255	@ 0xff
 8001c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	8979      	ldrh	r1, [r7, #10]
 8001c38:	4b52      	ldr	r3, [pc, #328]	@ (8001d84 <HAL_I2C_Mem_Read+0x22c>)
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 fb33 	bl	80022ac <I2C_TransferConfig>
 8001c46:	e00f      	b.n	8001c68 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	8979      	ldrh	r1, [r7, #10]
 8001c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d84 <HAL_I2C_Mem_Read+0x22c>)
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 fb22 	bl	80022ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2104      	movs	r1, #4
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 f956 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e07c      	b.n	8001d7c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	3b01      	subs	r3, #1
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d034      	beq.n	8001d28 <HAL_I2C_Mem_Read+0x1d0>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d130      	bne.n	8001d28 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2180      	movs	r1, #128	@ 0x80
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 f927 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e04d      	b.n	8001d7c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	2bff      	cmp	r3, #255	@ 0xff
 8001ce8:	d90e      	bls.n	8001d08 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	22ff      	movs	r2, #255	@ 0xff
 8001cee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	8979      	ldrh	r1, [r7, #10]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 fad3 	bl	80022ac <I2C_TransferConfig>
 8001d06:	e00f      	b.n	8001d28 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	8979      	ldrh	r1, [r7, #10]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 fac2 	bl	80022ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d19a      	bne.n	8001c68 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 f994 	bl	8002064 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e01a      	b.n	8001d7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6859      	ldr	r1, [r3, #4]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <HAL_I2C_Mem_Read+0x230>)
 8001d5a:	400b      	ands	r3, r1
 8001d5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001d7a:	2302      	movs	r3, #2
  }
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	80002400 	.word	0x80002400
 8001d88:	fe00e800 	.word	0xfe00e800

08001d8c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	817b      	strh	r3, [r7, #10]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	813b      	strh	r3, [r7, #8]
 8001da2:	4613      	mov	r3, r2
 8001da4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	8979      	ldrh	r1, [r7, #10]
 8001dac:	4b20      	ldr	r3, [pc, #128]	@ (8001e30 <I2C_RequestMemoryWrite+0xa4>)
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 fa79 	bl	80022ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	69b9      	ldr	r1, [r7, #24]
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 f909 	bl	8001fd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e02c      	b.n	8001e28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d105      	bne.n	8001de0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dd4:	893b      	ldrh	r3, [r7, #8]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	629a      	str	r2, [r3, #40]	@ 0x28
 8001dde:	e015      	b.n	8001e0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001de0:	893b      	ldrh	r3, [r7, #8]
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	69b9      	ldr	r1, [r7, #24]
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f8ef 	bl	8001fd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e012      	b.n	8001e28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e02:	893b      	ldrh	r3, [r7, #8]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2200      	movs	r2, #0
 8001e14:	2180      	movs	r1, #128	@ 0x80
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 f884 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	80002000 	.word	0x80002000

08001e34 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	4608      	mov	r0, r1
 8001e3e:	4611      	mov	r1, r2
 8001e40:	461a      	mov	r2, r3
 8001e42:	4603      	mov	r3, r0
 8001e44:	817b      	strh	r3, [r7, #10]
 8001e46:	460b      	mov	r3, r1
 8001e48:	813b      	strh	r3, [r7, #8]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	8979      	ldrh	r1, [r7, #10]
 8001e54:	4b20      	ldr	r3, [pc, #128]	@ (8001ed8 <I2C_RequestMemoryRead+0xa4>)
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 fa26 	bl	80022ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e60:	69fa      	ldr	r2, [r7, #28]
 8001e62:	69b9      	ldr	r1, [r7, #24]
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 f8b6 	bl	8001fd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e02c      	b.n	8001ece <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d105      	bne.n	8001e86 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e7a:	893b      	ldrh	r3, [r7, #8]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e84:	e015      	b.n	8001eb2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e86:	893b      	ldrh	r3, [r7, #8]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	69b9      	ldr	r1, [r7, #24]
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f89c 	bl	8001fd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e012      	b.n	8001ece <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ea8:	893b      	ldrh	r3, [r7, #8]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2140      	movs	r1, #64	@ 0x40
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f831 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	80002000 	.word	0x80002000

08001edc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d103      	bne.n	8001efa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d007      	beq.n	8001f18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	619a      	str	r2, [r3, #24]
  }
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	4613      	mov	r3, r2
 8001f32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f34:	e03b      	b.n	8001fae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	6839      	ldr	r1, [r7, #0]
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f8d6 	bl	80020ec <I2C_IsErrorOccurred>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e041      	b.n	8001fce <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d02d      	beq.n	8001fae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f52:	f7ff f8ff 	bl	8001154 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d302      	bcc.n	8001f68 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d122      	bne.n	8001fae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	4013      	ands	r3, r2
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	bf0c      	ite	eq
 8001f78:	2301      	moveq	r3, #1
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d113      	bne.n	8001fae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	f043 0220 	orr.w	r2, r3, #32
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2220      	movs	r2, #32
 8001f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00f      	b.n	8001fce <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699a      	ldr	r2, [r3, #24]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	bf0c      	ite	eq
 8001fbe:	2301      	moveq	r3, #1
 8001fc0:	2300      	movne	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d0b4      	beq.n	8001f36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b084      	sub	sp, #16
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fe2:	e033      	b.n	800204c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	68b9      	ldr	r1, [r7, #8]
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 f87f 	bl	80020ec <I2C_IsErrorOccurred>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e031      	b.n	800205c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffe:	d025      	beq.n	800204c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002000:	f7ff f8a8 	bl	8001154 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	429a      	cmp	r2, r3
 800200e:	d302      	bcc.n	8002016 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d11a      	bne.n	800204c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b02      	cmp	r3, #2
 8002022:	d013      	beq.n	800204c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002028:	f043 0220 	orr.w	r2, r3, #32
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e007      	b.n	800205c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b02      	cmp	r3, #2
 8002058:	d1c4      	bne.n	8001fe4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002070:	e02f      	b.n	80020d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f838 	bl	80020ec <I2C_IsErrorOccurred>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e02d      	b.n	80020e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002086:	f7ff f865 	bl	8001154 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	429a      	cmp	r2, r3
 8002094:	d302      	bcc.n	800209c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d11a      	bne.n	80020d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	d013      	beq.n	80020d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	f043 0220 	orr.w	r2, r3, #32
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2220      	movs	r2, #32
 80020ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e007      	b.n	80020e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b20      	cmp	r3, #32
 80020de:	d1c8      	bne.n	8002072 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	@ 0x28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b00      	cmp	r3, #0
 8002116:	d068      	beq.n	80021ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2210      	movs	r2, #16
 800211e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002120:	e049      	b.n	80021b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002128:	d045      	beq.n	80021b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800212a:	f7ff f813 	bl	8001154 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	429a      	cmp	r2, r3
 8002138:	d302      	bcc.n	8002140 <I2C_IsErrorOccurred+0x54>
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d13a      	bne.n	80021b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800214a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002152:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800215e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002162:	d121      	bne.n	80021a8 <I2C_IsErrorOccurred+0xbc>
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800216a:	d01d      	beq.n	80021a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800216c:	7cfb      	ldrb	r3, [r7, #19]
 800216e:	2b20      	cmp	r3, #32
 8002170:	d01a      	beq.n	80021a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002180:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002182:	f7fe ffe7 	bl	8001154 <HAL_GetTick>
 8002186:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002188:	e00e      	b.n	80021a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800218a:	f7fe ffe3 	bl	8001154 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b19      	cmp	r3, #25
 8002196:	d907      	bls.n	80021a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002198:	6a3b      	ldr	r3, [r7, #32]
 800219a:	f043 0320 	orr.w	r3, r3, #32
 800219e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80021a6:	e006      	b.n	80021b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b20      	cmp	r3, #32
 80021b4:	d1e9      	bne.n	800218a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0320 	and.w	r3, r3, #32
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	d003      	beq.n	80021cc <I2C_IsErrorOccurred+0xe0>
 80021c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0aa      	beq.n	8002122 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80021cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d103      	bne.n	80021dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2220      	movs	r2, #32
 80021da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	f043 0304 	orr.w	r3, r3, #4
 80021e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00b      	beq.n	8002214 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800220c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00b      	beq.n	8002236 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	f043 0308 	orr.w	r3, r3, #8
 8002224:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800222e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00b      	beq.n	8002258 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	f043 0302 	orr.w	r3, r3, #2
 8002246:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002250:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800225c:	2b00      	cmp	r3, #0
 800225e:	d01c      	beq.n	800229a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f7ff fe3b 	bl	8001edc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b0d      	ldr	r3, [pc, #52]	@ (80022a8 <I2C_IsErrorOccurred+0x1bc>)
 8002272:	400b      	ands	r3, r1
 8002274:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	431a      	orrs	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2220      	movs	r2, #32
 8002286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800229a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3728      	adds	r7, #40	@ 0x28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	fe00e800 	.word	0xfe00e800

080022ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	460b      	mov	r3, r1
 80022b8:	817b      	strh	r3, [r7, #10]
 80022ba:	4613      	mov	r3, r2
 80022bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022be:	897b      	ldrh	r3, [r7, #10]
 80022c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022c4:	7a7b      	ldrb	r3, [r7, #9]
 80022c6:	041b      	lsls	r3, r3, #16
 80022c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	0d5b      	lsrs	r3, r3, #21
 80022e6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80022ea:	4b08      	ldr	r3, [pc, #32]	@ (800230c <I2C_TransferConfig+0x60>)
 80022ec:	430b      	orrs	r3, r1
 80022ee:	43db      	mvns	r3, r3
 80022f0:	ea02 0103 	and.w	r1, r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80022fe:	bf00      	nop
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	03ff63ff 	.word	0x03ff63ff

08002310 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b20      	cmp	r3, #32
 8002324:	d138      	bne.n	8002398 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002330:	2302      	movs	r3, #2
 8002332:	e032      	b.n	800239a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2224      	movs	r2, #36	@ 0x24
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0201 	bic.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002362:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6819      	ldr	r1, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0201 	orr.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	e000      	b.n	800239a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002398:	2302      	movs	r3, #2
  }
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d139      	bne.n	8002430 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e033      	b.n	8002432 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2224      	movs	r2, #36	@ 0x24
 80023d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0201 	bic.w	r2, r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	e000      	b.n	8002432 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002430:	2302      	movs	r3, #2
  }
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d141      	bne.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800244e:	4b4b      	ldr	r3, [pc, #300]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800245a:	d131      	bne.n	80024c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800245c:	4b47      	ldr	r3, [pc, #284]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800245e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002462:	4a46      	ldr	r2, [pc, #280]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002468:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800246c:	4b43      	ldr	r3, [pc, #268]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002474:	4a41      	ldr	r2, [pc, #260]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002476:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800247a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800247c:	4b40      	ldr	r3, [pc, #256]	@ (8002580 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2232      	movs	r2, #50	@ 0x32
 8002482:	fb02 f303 	mul.w	r3, r2, r3
 8002486:	4a3f      	ldr	r2, [pc, #252]	@ (8002584 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002488:	fba2 2303 	umull	r2, r3, r2, r3
 800248c:	0c9b      	lsrs	r3, r3, #18
 800248e:	3301      	adds	r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002492:	e002      	b.n	800249a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3b01      	subs	r3, #1
 8002498:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800249a:	4b38      	ldr	r3, [pc, #224]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024a6:	d102      	bne.n	80024ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f2      	bne.n	8002494 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024ae:	4b33      	ldr	r3, [pc, #204]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ba:	d158      	bne.n	800256e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e057      	b.n	8002570 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024c0:	4b2e      	ldr	r3, [pc, #184]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024c6:	4a2d      	ldr	r2, [pc, #180]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80024d0:	e04d      	b.n	800256e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024d8:	d141      	bne.n	800255e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024da:	4b28      	ldr	r3, [pc, #160]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024e6:	d131      	bne.n	800254c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024e8:	4b24      	ldr	r3, [pc, #144]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024ee:	4a23      	ldr	r2, [pc, #140]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024f8:	4b20      	ldr	r3, [pc, #128]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002500:	4a1e      	ldr	r2, [pc, #120]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002502:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002506:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002508:	4b1d      	ldr	r3, [pc, #116]	@ (8002580 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2232      	movs	r2, #50	@ 0x32
 800250e:	fb02 f303 	mul.w	r3, r2, r3
 8002512:	4a1c      	ldr	r2, [pc, #112]	@ (8002584 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002514:	fba2 2303 	umull	r2, r3, r2, r3
 8002518:	0c9b      	lsrs	r3, r3, #18
 800251a:	3301      	adds	r3, #1
 800251c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800251e:	e002      	b.n	8002526 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3b01      	subs	r3, #1
 8002524:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002526:	4b15      	ldr	r3, [pc, #84]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800252e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002532:	d102      	bne.n	800253a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f2      	bne.n	8002520 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800253a:	4b10      	ldr	r3, [pc, #64]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002546:	d112      	bne.n	800256e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e011      	b.n	8002570 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800254c:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800254e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002552:	4a0a      	ldr	r2, [pc, #40]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002558:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800255c:	e007      	b.n	800256e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800255e:	4b07      	ldr	r3, [pc, #28]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002566:	4a05      	ldr	r2, [pc, #20]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002568:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800256c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	40007000 	.word	0x40007000
 8002580:	20000000 	.word	0x20000000
 8002584:	431bde83 	.word	0x431bde83

08002588 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800258c:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	4a04      	ldr	r2, [pc, #16]	@ (80025a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002592:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002596:	6093      	str	r3, [r2, #8]
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40007000 	.word	0x40007000

080025a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e2fe      	b.n	8002bb8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d075      	beq.n	80026b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c6:	4b97      	ldr	r3, [pc, #604]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025d0:	4b94      	ldr	r3, [pc, #592]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	2b0c      	cmp	r3, #12
 80025de:	d102      	bne.n	80025e6 <HAL_RCC_OscConfig+0x3e>
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d002      	beq.n	80025ec <HAL_RCC_OscConfig+0x44>
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d10b      	bne.n	8002604 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ec:	4b8d      	ldr	r3, [pc, #564]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d05b      	beq.n	80026b0 <HAL_RCC_OscConfig+0x108>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d157      	bne.n	80026b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e2d9      	b.n	8002bb8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800260c:	d106      	bne.n	800261c <HAL_RCC_OscConfig+0x74>
 800260e:	4b85      	ldr	r3, [pc, #532]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a84      	ldr	r2, [pc, #528]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 8002614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	e01d      	b.n	8002658 <HAL_RCC_OscConfig+0xb0>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0x98>
 8002626:	4b7f      	ldr	r3, [pc, #508]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a7e      	ldr	r2, [pc, #504]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 800262c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b7c      	ldr	r3, [pc, #496]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a7b      	ldr	r2, [pc, #492]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 8002638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e00b      	b.n	8002658 <HAL_RCC_OscConfig+0xb0>
 8002640:	4b78      	ldr	r3, [pc, #480]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a77      	ldr	r2, [pc, #476]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 8002646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	4b75      	ldr	r3, [pc, #468]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a74      	ldr	r2, [pc, #464]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 8002652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d013      	beq.n	8002688 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7fe fd78 	bl	8001154 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002668:	f7fe fd74 	bl	8001154 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	@ 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e29e      	b.n	8002bb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800267a:	4b6a      	ldr	r3, [pc, #424]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0xc0>
 8002686:	e014      	b.n	80026b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7fe fd64 	bl	8001154 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002690:	f7fe fd60 	bl	8001154 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	@ 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e28a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026a2:	4b60      	ldr	r3, [pc, #384]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0xe8>
 80026ae:	e000      	b.n	80026b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d075      	beq.n	80027aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026be:	4b59      	ldr	r3, [pc, #356]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026c8:	4b56      	ldr	r3, [pc, #344]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	2b0c      	cmp	r3, #12
 80026d6:	d102      	bne.n	80026de <HAL_RCC_OscConfig+0x136>
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d002      	beq.n	80026e4 <HAL_RCC_OscConfig+0x13c>
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d11f      	bne.n	8002724 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_OscConfig+0x154>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e25d      	b.n	8002bb8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fc:	4b49      	ldr	r3, [pc, #292]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	061b      	lsls	r3, r3, #24
 800270a:	4946      	ldr	r1, [pc, #280]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 800270c:	4313      	orrs	r3, r2
 800270e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002710:	4b45      	ldr	r3, [pc, #276]	@ (8002828 <HAL_RCC_OscConfig+0x280>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe fcd1 	bl	80010bc <HAL_InitTick>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d043      	beq.n	80027a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e249      	b.n	8002bb8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d023      	beq.n	8002774 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800272c:	4b3d      	ldr	r3, [pc, #244]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a3c      	ldr	r2, [pc, #240]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 8002732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe fd0c 	bl	8001154 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002740:	f7fe fd08 	bl	8001154 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e232      	b.n	8002bb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002752:	4b34      	ldr	r3, [pc, #208]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275e:	4b31      	ldr	r3, [pc, #196]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	061b      	lsls	r3, r3, #24
 800276c:	492d      	ldr	r1, [pc, #180]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 800276e:	4313      	orrs	r3, r2
 8002770:	604b      	str	r3, [r1, #4]
 8002772:	e01a      	b.n	80027aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002774:	4b2b      	ldr	r3, [pc, #172]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a2a      	ldr	r2, [pc, #168]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 800277a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800277e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002780:	f7fe fce8 	bl	8001154 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002788:	f7fe fce4 	bl	8001154 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e20e      	b.n	8002bb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800279a:	4b22      	ldr	r3, [pc, #136]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x1e0>
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d041      	beq.n	800283a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01c      	beq.n	80027f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027be:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 80027c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027c4:	4a17      	ldr	r2, [pc, #92]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ce:	f7fe fcc1 	bl	8001154 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d6:	f7fe fcbd 	bl	8001154 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e1e7      	b.n	8002bb8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 80027ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0ef      	beq.n	80027d6 <HAL_RCC_OscConfig+0x22e>
 80027f6:	e020      	b.n	800283a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 80027fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027fe:	4a09      	ldr	r2, [pc, #36]	@ (8002824 <HAL_RCC_OscConfig+0x27c>)
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002808:	f7fe fca4 	bl	8001154 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800280e:	e00d      	b.n	800282c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002810:	f7fe fca0 	bl	8001154 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d906      	bls.n	800282c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e1ca      	b.n	8002bb8 <HAL_RCC_OscConfig+0x610>
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
 8002828:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800282c:	4b8c      	ldr	r3, [pc, #560]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 800282e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1ea      	bne.n	8002810 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80a6 	beq.w	8002994 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002848:	2300      	movs	r3, #0
 800284a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800284c:	4b84      	ldr	r3, [pc, #528]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 800284e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_RCC_OscConfig+0x2b4>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_RCC_OscConfig+0x2b6>
 800285c:	2300      	movs	r3, #0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00d      	beq.n	800287e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	4b7f      	ldr	r3, [pc, #508]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002866:	4a7e      	ldr	r2, [pc, #504]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 8002868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800286c:	6593      	str	r3, [r2, #88]	@ 0x58
 800286e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 8002870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800287a:	2301      	movs	r3, #1
 800287c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800287e:	4b79      	ldr	r3, [pc, #484]	@ (8002a64 <HAL_RCC_OscConfig+0x4bc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d118      	bne.n	80028bc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800288a:	4b76      	ldr	r3, [pc, #472]	@ (8002a64 <HAL_RCC_OscConfig+0x4bc>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a75      	ldr	r2, [pc, #468]	@ (8002a64 <HAL_RCC_OscConfig+0x4bc>)
 8002890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002896:	f7fe fc5d 	bl	8001154 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289e:	f7fe fc59 	bl	8001154 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e183      	b.n	8002bb8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002a64 <HAL_RCC_OscConfig+0x4bc>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d108      	bne.n	80028d6 <HAL_RCC_OscConfig+0x32e>
 80028c4:	4b66      	ldr	r3, [pc, #408]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ca:	4a65      	ldr	r2, [pc, #404]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028d4:	e024      	b.n	8002920 <HAL_RCC_OscConfig+0x378>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b05      	cmp	r3, #5
 80028dc:	d110      	bne.n	8002900 <HAL_RCC_OscConfig+0x358>
 80028de:	4b60      	ldr	r3, [pc, #384]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e4:	4a5e      	ldr	r2, [pc, #376]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 80028e6:	f043 0304 	orr.w	r3, r3, #4
 80028ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 80028f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f4:	4a5a      	ldr	r2, [pc, #360]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028fe:	e00f      	b.n	8002920 <HAL_RCC_OscConfig+0x378>
 8002900:	4b57      	ldr	r3, [pc, #348]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002906:	4a56      	ldr	r2, [pc, #344]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002910:	4b53      	ldr	r3, [pc, #332]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002916:	4a52      	ldr	r2, [pc, #328]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 8002918:	f023 0304 	bic.w	r3, r3, #4
 800291c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d016      	beq.n	8002956 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002928:	f7fe fc14 	bl	8001154 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800292e:	e00a      	b.n	8002946 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002930:	f7fe fc10 	bl	8001154 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e138      	b.n	8002bb8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002946:	4b46      	ldr	r3, [pc, #280]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 8002948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0ed      	beq.n	8002930 <HAL_RCC_OscConfig+0x388>
 8002954:	e015      	b.n	8002982 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002956:	f7fe fbfd 	bl	8001154 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800295c:	e00a      	b.n	8002974 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295e:	f7fe fbf9 	bl	8001154 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296c:	4293      	cmp	r3, r2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e121      	b.n	8002bb8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002974:	4b3a      	ldr	r3, [pc, #232]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 8002976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1ed      	bne.n	800295e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002982:	7ffb      	ldrb	r3, [r7, #31]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d105      	bne.n	8002994 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002988:	4b35      	ldr	r3, [pc, #212]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 800298a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298c:	4a34      	ldr	r2, [pc, #208]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 800298e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002992:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d03c      	beq.n	8002a1a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01c      	beq.n	80029e2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 80029aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b8:	f7fe fbcc 	bl	8001154 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029c0:	f7fe fbc8 	bl	8001154 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e0f2      	b.n	8002bb8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029d2:	4b23      	ldr	r3, [pc, #140]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 80029d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ef      	beq.n	80029c0 <HAL_RCC_OscConfig+0x418>
 80029e0:	e01b      	b.n	8002a1a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 80029e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 80029ea:	f023 0301 	bic.w	r3, r3, #1
 80029ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f2:	f7fe fbaf 	bl	8001154 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029fa:	f7fe fbab 	bl	8001154 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e0d5      	b.n	8002bb8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a0c:	4b14      	ldr	r3, [pc, #80]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 8002a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1ef      	bne.n	80029fa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 80c9 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a24:	4b0e      	ldr	r3, [pc, #56]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	2b0c      	cmp	r3, #12
 8002a2e:	f000 8083 	beq.w	8002b38 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d15e      	bne.n	8002af8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3a:	4b09      	ldr	r3, [pc, #36]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a08      	ldr	r2, [pc, #32]	@ (8002a60 <HAL_RCC_OscConfig+0x4b8>)
 8002a40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a46:	f7fe fb85 	bl	8001154 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a4c:	e00c      	b.n	8002a68 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4e:	f7fe fb81 	bl	8001154 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d905      	bls.n	8002a68 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e0ab      	b.n	8002bb8 <HAL_RCC_OscConfig+0x610>
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a68:	4b55      	ldr	r3, [pc, #340]	@ (8002bc0 <HAL_RCC_OscConfig+0x618>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1ec      	bne.n	8002a4e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a74:	4b52      	ldr	r3, [pc, #328]	@ (8002bc0 <HAL_RCC_OscConfig+0x618>)
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	4b52      	ldr	r3, [pc, #328]	@ (8002bc4 <HAL_RCC_OscConfig+0x61c>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6a11      	ldr	r1, [r2, #32]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a84:	3a01      	subs	r2, #1
 8002a86:	0112      	lsls	r2, r2, #4
 8002a88:	4311      	orrs	r1, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002a8e:	0212      	lsls	r2, r2, #8
 8002a90:	4311      	orrs	r1, r2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a96:	0852      	lsrs	r2, r2, #1
 8002a98:	3a01      	subs	r2, #1
 8002a9a:	0552      	lsls	r2, r2, #21
 8002a9c:	4311      	orrs	r1, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002aa2:	0852      	lsrs	r2, r2, #1
 8002aa4:	3a01      	subs	r2, #1
 8002aa6:	0652      	lsls	r2, r2, #25
 8002aa8:	4311      	orrs	r1, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002aae:	06d2      	lsls	r2, r2, #27
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	4943      	ldr	r1, [pc, #268]	@ (8002bc0 <HAL_RCC_OscConfig+0x618>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab8:	4b41      	ldr	r3, [pc, #260]	@ (8002bc0 <HAL_RCC_OscConfig+0x618>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a40      	ldr	r2, [pc, #256]	@ (8002bc0 <HAL_RCC_OscConfig+0x618>)
 8002abe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ac2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ac4:	4b3e      	ldr	r3, [pc, #248]	@ (8002bc0 <HAL_RCC_OscConfig+0x618>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4a3d      	ldr	r2, [pc, #244]	@ (8002bc0 <HAL_RCC_OscConfig+0x618>)
 8002aca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ace:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fb40 	bl	8001154 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad8:	f7fe fb3c 	bl	8001154 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e066      	b.n	8002bb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aea:	4b35      	ldr	r3, [pc, #212]	@ (8002bc0 <HAL_RCC_OscConfig+0x618>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x530>
 8002af6:	e05e      	b.n	8002bb6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af8:	4b31      	ldr	r3, [pc, #196]	@ (8002bc0 <HAL_RCC_OscConfig+0x618>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a30      	ldr	r2, [pc, #192]	@ (8002bc0 <HAL_RCC_OscConfig+0x618>)
 8002afe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fb26 	bl	8001154 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fe fb22 	bl	8001154 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e04c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b1e:	4b28      	ldr	r3, [pc, #160]	@ (8002bc0 <HAL_RCC_OscConfig+0x618>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002b2a:	4b25      	ldr	r3, [pc, #148]	@ (8002bc0 <HAL_RCC_OscConfig+0x618>)
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	4924      	ldr	r1, [pc, #144]	@ (8002bc0 <HAL_RCC_OscConfig+0x618>)
 8002b30:	4b25      	ldr	r3, [pc, #148]	@ (8002bc8 <HAL_RCC_OscConfig+0x620>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	60cb      	str	r3, [r1, #12]
 8002b36:	e03e      	b.n	8002bb6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e039      	b.n	8002bb8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002b44:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc0 <HAL_RCC_OscConfig+0x618>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f003 0203 	and.w	r2, r3, #3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d12c      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b62:	3b01      	subs	r3, #1
 8002b64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d123      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b74:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d11b      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b84:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d113      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b94:	085b      	lsrs	r3, r3, #1
 8002b96:	3b01      	subs	r3, #1
 8002b98:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d109      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba8:	085b      	lsrs	r3, r3, #1
 8002baa:	3b01      	subs	r3, #1
 8002bac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d001      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3720      	adds	r7, #32
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	019f800c 	.word	0x019f800c
 8002bc8:	feeefffc 	.word	0xfeeefffc

08002bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e11e      	b.n	8002e22 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002be4:	4b91      	ldr	r3, [pc, #580]	@ (8002e2c <HAL_RCC_ClockConfig+0x260>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d910      	bls.n	8002c14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b8e      	ldr	r3, [pc, #568]	@ (8002e2c <HAL_RCC_ClockConfig+0x260>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 020f 	bic.w	r2, r3, #15
 8002bfa:	498c      	ldr	r1, [pc, #560]	@ (8002e2c <HAL_RCC_ClockConfig+0x260>)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b8a      	ldr	r3, [pc, #552]	@ (8002e2c <HAL_RCC_ClockConfig+0x260>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e106      	b.n	8002e22 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d073      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d129      	bne.n	8002c7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c28:	4b81      	ldr	r3, [pc, #516]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0f4      	b.n	8002e22 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002c38:	f000 f99e 	bl	8002f78 <RCC_GetSysClockFreqFromPLLSource>
 8002c3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4a7c      	ldr	r2, [pc, #496]	@ (8002e34 <HAL_RCC_ClockConfig+0x268>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d93f      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002c46:	4b7a      	ldr	r3, [pc, #488]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d033      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d12f      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c66:	4b72      	ldr	r3, [pc, #456]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c6e:	4a70      	ldr	r2, [pc, #448]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c76:	2380      	movs	r3, #128	@ 0x80
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	e024      	b.n	8002cc6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d107      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c84:	4b6a      	ldr	r3, [pc, #424]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d109      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0c6      	b.n	8002e22 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c94:	4b66      	ldr	r3, [pc, #408]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0be      	b.n	8002e22 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002ca4:	f000 f8ce 	bl	8002e44 <HAL_RCC_GetSysClockFreq>
 8002ca8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4a61      	ldr	r2, [pc, #388]	@ (8002e34 <HAL_RCC_ClockConfig+0x268>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d909      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cb2:	4b5f      	ldr	r3, [pc, #380]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cba:	4a5d      	ldr	r2, [pc, #372]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002cbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cc0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002cc2:	2380      	movs	r3, #128	@ 0x80
 8002cc4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cc6:	4b5a      	ldr	r3, [pc, #360]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f023 0203 	bic.w	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4957      	ldr	r1, [pc, #348]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd8:	f7fe fa3c 	bl	8001154 <HAL_GetTick>
 8002cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce0:	f7fe fa38 	bl	8001154 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e095      	b.n	8002e22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf6:	4b4e      	ldr	r3, [pc, #312]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 020c 	and.w	r2, r3, #12
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d1eb      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d023      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d20:	4b43      	ldr	r3, [pc, #268]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4a42      	ldr	r2, [pc, #264]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002d26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d007      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002d38:	4b3d      	ldr	r3, [pc, #244]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002d40:	4a3b      	ldr	r2, [pc, #236]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002d42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d48:	4b39      	ldr	r3, [pc, #228]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4936      	ldr	r1, [pc, #216]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2b80      	cmp	r3, #128	@ 0x80
 8002d60:	d105      	bne.n	8002d6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d62:	4b33      	ldr	r3, [pc, #204]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	4a32      	ldr	r2, [pc, #200]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002d68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8002e2c <HAL_RCC_ClockConfig+0x260>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d21d      	bcs.n	8002db8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8002e2c <HAL_RCC_ClockConfig+0x260>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 020f 	bic.w	r2, r3, #15
 8002d84:	4929      	ldr	r1, [pc, #164]	@ (8002e2c <HAL_RCC_ClockConfig+0x260>)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d8c:	f7fe f9e2 	bl	8001154 <HAL_GetTick>
 8002d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	e00a      	b.n	8002daa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d94:	f7fe f9de 	bl	8001154 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e03b      	b.n	8002e22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b20      	ldr	r3, [pc, #128]	@ (8002e2c <HAL_RCC_ClockConfig+0x260>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d1ed      	bne.n	8002d94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4917      	ldr	r1, [pc, #92]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002de2:	4b13      	ldr	r3, [pc, #76]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	490f      	ldr	r1, [pc, #60]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002df6:	f000 f825 	bl	8002e44 <HAL_RCC_GetSysClockFreq>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e30 <HAL_RCC_ClockConfig+0x264>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	490c      	ldr	r1, [pc, #48]	@ (8002e38 <HAL_RCC_ClockConfig+0x26c>)
 8002e08:	5ccb      	ldrb	r3, [r1, r3]
 8002e0a:	f003 031f 	and.w	r3, r3, #31
 8002e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e12:	4a0a      	ldr	r2, [pc, #40]	@ (8002e3c <HAL_RCC_ClockConfig+0x270>)
 8002e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e16:	4b0a      	ldr	r3, [pc, #40]	@ (8002e40 <HAL_RCC_ClockConfig+0x274>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe f94e 	bl	80010bc <HAL_InitTick>
 8002e20:	4603      	mov	r3, r0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40022000 	.word	0x40022000
 8002e30:	40021000 	.word	0x40021000
 8002e34:	04c4b400 	.word	0x04c4b400
 8002e38:	08004e94 	.word	0x08004e94
 8002e3c:	20000000 	.word	0x20000000
 8002e40:	20000018 	.word	0x20000018

08002e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002e4a:	4b2c      	ldr	r3, [pc, #176]	@ (8002efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d102      	bne.n	8002e5c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e56:	4b2a      	ldr	r3, [pc, #168]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	e047      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e5c:	4b27      	ldr	r3, [pc, #156]	@ (8002efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 030c 	and.w	r3, r3, #12
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d102      	bne.n	8002e6e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e68:	4b26      	ldr	r3, [pc, #152]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	e03e      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002e6e:	4b23      	ldr	r3, [pc, #140]	@ (8002efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b0c      	cmp	r3, #12
 8002e78:	d136      	bne.n	8002ee8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e7a:	4b20      	ldr	r3, [pc, #128]	@ (8002efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e84:	4b1d      	ldr	r3, [pc, #116]	@ (8002efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	3301      	adds	r3, #1
 8002e90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d10c      	bne.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e98:	4a1a      	ldr	r2, [pc, #104]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea0:	4a16      	ldr	r2, [pc, #88]	@ (8002efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ea2:	68d2      	ldr	r2, [r2, #12]
 8002ea4:	0a12      	lsrs	r2, r2, #8
 8002ea6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002eaa:	fb02 f303 	mul.w	r3, r2, r3
 8002eae:	617b      	str	r3, [r7, #20]
      break;
 8002eb0:	e00c      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002eb2:	4a13      	ldr	r2, [pc, #76]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eba:	4a10      	ldr	r2, [pc, #64]	@ (8002efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ebc:	68d2      	ldr	r2, [r2, #12]
 8002ebe:	0a12      	lsrs	r2, r2, #8
 8002ec0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ec4:	fb02 f303 	mul.w	r3, r2, r3
 8002ec8:	617b      	str	r3, [r7, #20]
      break;
 8002eca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	0e5b      	lsrs	r3, r3, #25
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	e001      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002eec:	693b      	ldr	r3, [r7, #16]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	371c      	adds	r7, #28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	00f42400 	.word	0x00f42400
 8002f04:	016e3600 	.word	0x016e3600

08002f08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f0c:	4b03      	ldr	r3, [pc, #12]	@ (8002f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	20000000 	.word	0x20000000

08002f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f24:	f7ff fff0 	bl	8002f08 <HAL_RCC_GetHCLKFreq>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	4904      	ldr	r1, [pc, #16]	@ (8002f48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f36:	5ccb      	ldrb	r3, [r1, r3]
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000
 8002f48:	08004ea4 	.word	0x08004ea4

08002f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f50:	f7ff ffda 	bl	8002f08 <HAL_RCC_GetHCLKFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	0adb      	lsrs	r3, r3, #11
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	4904      	ldr	r1, [pc, #16]	@ (8002f74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f62:	5ccb      	ldrb	r3, [r1, r3]
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	08004ea4 	.word	0x08004ea4

08002f78 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f88:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	3301      	adds	r3, #1
 8002f94:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d10c      	bne.n	8002fb6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f9c:	4a17      	ldr	r2, [pc, #92]	@ (8002ffc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa4:	4a14      	ldr	r2, [pc, #80]	@ (8002ff8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fa6:	68d2      	ldr	r2, [r2, #12]
 8002fa8:	0a12      	lsrs	r2, r2, #8
 8002faa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	617b      	str	r3, [r7, #20]
    break;
 8002fb4:	e00c      	b.n	8002fd0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fb6:	4a12      	ldr	r2, [pc, #72]	@ (8003000 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8002ff8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fc0:	68d2      	ldr	r2, [r2, #12]
 8002fc2:	0a12      	lsrs	r2, r2, #8
 8002fc4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fc8:	fb02 f303 	mul.w	r3, r2, r3
 8002fcc:	617b      	str	r3, [r7, #20]
    break;
 8002fce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fd0:	4b09      	ldr	r3, [pc, #36]	@ (8002ff8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	0e5b      	lsrs	r3, r3, #25
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	3301      	adds	r3, #1
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002fea:	687b      	ldr	r3, [r7, #4]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	371c      	adds	r7, #28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	016e3600 	.word	0x016e3600
 8003000:	00f42400 	.word	0x00f42400

08003004 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800300c:	2300      	movs	r3, #0
 800300e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003010:	2300      	movs	r3, #0
 8003012:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8098 	beq.w	8003152 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003022:	2300      	movs	r3, #0
 8003024:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003026:	4b43      	ldr	r3, [pc, #268]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10d      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003032:	4b40      	ldr	r3, [pc, #256]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003036:	4a3f      	ldr	r2, [pc, #252]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800303c:	6593      	str	r3, [r2, #88]	@ 0x58
 800303e:	4b3d      	ldr	r3, [pc, #244]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003046:	60bb      	str	r3, [r7, #8]
 8003048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800304a:	2301      	movs	r3, #1
 800304c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800304e:	4b3a      	ldr	r3, [pc, #232]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a39      	ldr	r2, [pc, #228]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003058:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800305a:	f7fe f87b 	bl	8001154 <HAL_GetTick>
 800305e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003060:	e009      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003062:	f7fe f877 	bl	8001154 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d902      	bls.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	74fb      	strb	r3, [r7, #19]
        break;
 8003074:	e005      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003076:	4b30      	ldr	r3, [pc, #192]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0ef      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003082:	7cfb      	ldrb	r3, [r7, #19]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d159      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003088:	4b2a      	ldr	r3, [pc, #168]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800308e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003092:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d01e      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d019      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030a4:	4b23      	ldr	r3, [pc, #140]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030b0:	4b20      	ldr	r3, [pc, #128]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030d0:	4a18      	ldr	r2, [pc, #96]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d016      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e2:	f7fe f837 	bl	8001154 <HAL_GetTick>
 80030e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030e8:	e00b      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ea:	f7fe f833 	bl	8001154 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d902      	bls.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	74fb      	strb	r3, [r7, #19]
            break;
 8003100:	e006      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003102:	4b0c      	ldr	r3, [pc, #48]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0ec      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003110:	7cfb      	ldrb	r3, [r7, #19]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10b      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003116:	4b07      	ldr	r3, [pc, #28]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003124:	4903      	ldr	r1, [pc, #12]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800312c:	e008      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800312e:	7cfb      	ldrb	r3, [r7, #19]
 8003130:	74bb      	strb	r3, [r7, #18]
 8003132:	e005      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003134:	40021000 	.word	0x40021000
 8003138:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313c:	7cfb      	ldrb	r3, [r7, #19]
 800313e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003140:	7c7b      	ldrb	r3, [r7, #17]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d105      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003146:	4ba6      	ldr	r3, [pc, #664]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314a:	4aa5      	ldr	r2, [pc, #660]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800314c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003150:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800315e:	4ba0      	ldr	r3, [pc, #640]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003164:	f023 0203 	bic.w	r2, r3, #3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	499c      	ldr	r1, [pc, #624]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003180:	4b97      	ldr	r3, [pc, #604]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003186:	f023 020c 	bic.w	r2, r3, #12
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	4994      	ldr	r1, [pc, #592]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031a2:	4b8f      	ldr	r3, [pc, #572]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	498b      	ldr	r1, [pc, #556]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031c4:	4b86      	ldr	r3, [pc, #536]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	4983      	ldr	r1, [pc, #524]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031e6:	4b7e      	ldr	r3, [pc, #504]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	497a      	ldr	r1, [pc, #488]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003208:	4b75      	ldr	r3, [pc, #468]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	4972      	ldr	r1, [pc, #456]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800322a:	4b6d      	ldr	r3, [pc, #436]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800322c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003230:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	4969      	ldr	r1, [pc, #420]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800324c:	4b64      	ldr	r3, [pc, #400]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003252:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	4961      	ldr	r1, [pc, #388]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800326e:	4b5c      	ldr	r3, [pc, #368]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003274:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327c:	4958      	ldr	r1, [pc, #352]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328c:	2b00      	cmp	r3, #0
 800328e:	d015      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003290:	4b53      	ldr	r3, [pc, #332]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003296:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329e:	4950      	ldr	r1, [pc, #320]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032ae:	d105      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032b0:	4b4b      	ldr	r3, [pc, #300]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4a4a      	ldr	r2, [pc, #296]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032ba:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d015      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032c8:	4b45      	ldr	r3, [pc, #276]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d6:	4942      	ldr	r1, [pc, #264]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032e6:	d105      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032e8:	4b3d      	ldr	r3, [pc, #244]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4a3c      	ldr	r2, [pc, #240]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032f2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d015      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003300:	4b37      	ldr	r3, [pc, #220]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003306:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330e:	4934      	ldr	r1, [pc, #208]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003310:	4313      	orrs	r3, r2
 8003312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800331e:	d105      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003320:	4b2f      	ldr	r3, [pc, #188]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4a2e      	ldr	r2, [pc, #184]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003326:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800332a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d015      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003338:	4b29      	ldr	r3, [pc, #164]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800333e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003346:	4926      	ldr	r1, [pc, #152]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003352:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003356:	d105      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003358:	4b21      	ldr	r3, [pc, #132]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4a20      	ldr	r2, [pc, #128]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800335e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003362:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d015      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003370:	4b1b      	ldr	r3, [pc, #108]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003376:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337e:	4918      	ldr	r1, [pc, #96]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800338e:	d105      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003390:	4b13      	ldr	r3, [pc, #76]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4a12      	ldr	r2, [pc, #72]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003396:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800339a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d015      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033a8:	4b0d      	ldr	r3, [pc, #52]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b6:	490a      	ldr	r1, [pc, #40]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033c6:	d105      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80033c8:	4b05      	ldr	r3, [pc, #20]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	4a04      	ldr	r2, [pc, #16]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80033d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000

080033e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e042      	b.n	800347c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d106      	bne.n	800340e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f83b 	bl	8003484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2224      	movs	r2, #36	@ 0x24
 8003412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fb8c 	bl	8003b4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f8bd 	bl	80035b4 <UART_SetConfig>
 800343a:	4603      	mov	r3, r0
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e01b      	b.n	800347c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fc0b 	bl	8003c90 <UART_CheckIdleState>
 800347a:	4603      	mov	r3, r0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08a      	sub	sp, #40	@ 0x28
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	603b      	str	r3, [r7, #0]
 80034a4:	4613      	mov	r3, r2
 80034a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	d17b      	bne.n	80035aa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_UART_Transmit+0x26>
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e074      	b.n	80035ac <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2221      	movs	r2, #33	@ 0x21
 80034ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034d2:	f7fd fe3f 	bl	8001154 <HAL_GetTick>
 80034d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	88fa      	ldrh	r2, [r7, #6]
 80034dc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	88fa      	ldrh	r2, [r7, #6]
 80034e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034f0:	d108      	bne.n	8003504 <HAL_UART_Transmit+0x6c>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d104      	bne.n	8003504 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	e003      	b.n	800350c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003508:	2300      	movs	r3, #0
 800350a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800350c:	e030      	b.n	8003570 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2200      	movs	r2, #0
 8003516:	2180      	movs	r1, #128	@ 0x80
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fc63 	bl	8003de4 <UART_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e03d      	b.n	80035ac <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10b      	bne.n	800354e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003544:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	3302      	adds	r3, #2
 800354a:	61bb      	str	r3, [r7, #24]
 800354c:	e007      	b.n	800355e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	781a      	ldrb	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	3301      	adds	r3, #1
 800355c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1c8      	bne.n	800350e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2200      	movs	r2, #0
 8003584:	2140      	movs	r1, #64	@ 0x40
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fc2c 	bl	8003de4 <UART_WaitOnFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d005      	beq.n	800359e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e006      	b.n	80035ac <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e000      	b.n	80035ac <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80035aa:	2302      	movs	r3, #2
  }
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3720      	adds	r7, #32
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b8:	b08c      	sub	sp, #48	@ 0x30
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	431a      	orrs	r2, r3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	4313      	orrs	r3, r2
 80035da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	4bab      	ldr	r3, [pc, #684]	@ (8003890 <UART_SetConfig+0x2dc>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035ec:	430b      	orrs	r3, r1
 80035ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4aa0      	ldr	r2, [pc, #640]	@ (8003894 <UART_SetConfig+0x2e0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d004      	beq.n	8003620 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800361c:	4313      	orrs	r3, r2
 800361e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800362a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003634:	430b      	orrs	r3, r1
 8003636:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363e:	f023 010f 	bic.w	r1, r3, #15
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a91      	ldr	r2, [pc, #580]	@ (8003898 <UART_SetConfig+0x2e4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d125      	bne.n	80036a4 <UART_SetConfig+0xf0>
 8003658:	4b90      	ldr	r3, [pc, #576]	@ (800389c <UART_SetConfig+0x2e8>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b03      	cmp	r3, #3
 8003664:	d81a      	bhi.n	800369c <UART_SetConfig+0xe8>
 8003666:	a201      	add	r2, pc, #4	@ (adr r2, 800366c <UART_SetConfig+0xb8>)
 8003668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366c:	0800367d 	.word	0x0800367d
 8003670:	0800368d 	.word	0x0800368d
 8003674:	08003685 	.word	0x08003685
 8003678:	08003695 	.word	0x08003695
 800367c:	2301      	movs	r3, #1
 800367e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003682:	e0d6      	b.n	8003832 <UART_SetConfig+0x27e>
 8003684:	2302      	movs	r3, #2
 8003686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800368a:	e0d2      	b.n	8003832 <UART_SetConfig+0x27e>
 800368c:	2304      	movs	r3, #4
 800368e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003692:	e0ce      	b.n	8003832 <UART_SetConfig+0x27e>
 8003694:	2308      	movs	r3, #8
 8003696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800369a:	e0ca      	b.n	8003832 <UART_SetConfig+0x27e>
 800369c:	2310      	movs	r3, #16
 800369e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036a2:	e0c6      	b.n	8003832 <UART_SetConfig+0x27e>
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a7d      	ldr	r2, [pc, #500]	@ (80038a0 <UART_SetConfig+0x2ec>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d138      	bne.n	8003720 <UART_SetConfig+0x16c>
 80036ae:	4b7b      	ldr	r3, [pc, #492]	@ (800389c <UART_SetConfig+0x2e8>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b4:	f003 030c 	and.w	r3, r3, #12
 80036b8:	2b0c      	cmp	r3, #12
 80036ba:	d82d      	bhi.n	8003718 <UART_SetConfig+0x164>
 80036bc:	a201      	add	r2, pc, #4	@ (adr r2, 80036c4 <UART_SetConfig+0x110>)
 80036be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c2:	bf00      	nop
 80036c4:	080036f9 	.word	0x080036f9
 80036c8:	08003719 	.word	0x08003719
 80036cc:	08003719 	.word	0x08003719
 80036d0:	08003719 	.word	0x08003719
 80036d4:	08003709 	.word	0x08003709
 80036d8:	08003719 	.word	0x08003719
 80036dc:	08003719 	.word	0x08003719
 80036e0:	08003719 	.word	0x08003719
 80036e4:	08003701 	.word	0x08003701
 80036e8:	08003719 	.word	0x08003719
 80036ec:	08003719 	.word	0x08003719
 80036f0:	08003719 	.word	0x08003719
 80036f4:	08003711 	.word	0x08003711
 80036f8:	2300      	movs	r3, #0
 80036fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036fe:	e098      	b.n	8003832 <UART_SetConfig+0x27e>
 8003700:	2302      	movs	r3, #2
 8003702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003706:	e094      	b.n	8003832 <UART_SetConfig+0x27e>
 8003708:	2304      	movs	r3, #4
 800370a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800370e:	e090      	b.n	8003832 <UART_SetConfig+0x27e>
 8003710:	2308      	movs	r3, #8
 8003712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003716:	e08c      	b.n	8003832 <UART_SetConfig+0x27e>
 8003718:	2310      	movs	r3, #16
 800371a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800371e:	e088      	b.n	8003832 <UART_SetConfig+0x27e>
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a5f      	ldr	r2, [pc, #380]	@ (80038a4 <UART_SetConfig+0x2f0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d125      	bne.n	8003776 <UART_SetConfig+0x1c2>
 800372a:	4b5c      	ldr	r3, [pc, #368]	@ (800389c <UART_SetConfig+0x2e8>)
 800372c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003730:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003734:	2b30      	cmp	r3, #48	@ 0x30
 8003736:	d016      	beq.n	8003766 <UART_SetConfig+0x1b2>
 8003738:	2b30      	cmp	r3, #48	@ 0x30
 800373a:	d818      	bhi.n	800376e <UART_SetConfig+0x1ba>
 800373c:	2b20      	cmp	r3, #32
 800373e:	d00a      	beq.n	8003756 <UART_SetConfig+0x1a2>
 8003740:	2b20      	cmp	r3, #32
 8003742:	d814      	bhi.n	800376e <UART_SetConfig+0x1ba>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <UART_SetConfig+0x19a>
 8003748:	2b10      	cmp	r3, #16
 800374a:	d008      	beq.n	800375e <UART_SetConfig+0x1aa>
 800374c:	e00f      	b.n	800376e <UART_SetConfig+0x1ba>
 800374e:	2300      	movs	r3, #0
 8003750:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003754:	e06d      	b.n	8003832 <UART_SetConfig+0x27e>
 8003756:	2302      	movs	r3, #2
 8003758:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800375c:	e069      	b.n	8003832 <UART_SetConfig+0x27e>
 800375e:	2304      	movs	r3, #4
 8003760:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003764:	e065      	b.n	8003832 <UART_SetConfig+0x27e>
 8003766:	2308      	movs	r3, #8
 8003768:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800376c:	e061      	b.n	8003832 <UART_SetConfig+0x27e>
 800376e:	2310      	movs	r3, #16
 8003770:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003774:	e05d      	b.n	8003832 <UART_SetConfig+0x27e>
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a4b      	ldr	r2, [pc, #300]	@ (80038a8 <UART_SetConfig+0x2f4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d125      	bne.n	80037cc <UART_SetConfig+0x218>
 8003780:	4b46      	ldr	r3, [pc, #280]	@ (800389c <UART_SetConfig+0x2e8>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003786:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800378a:	2bc0      	cmp	r3, #192	@ 0xc0
 800378c:	d016      	beq.n	80037bc <UART_SetConfig+0x208>
 800378e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003790:	d818      	bhi.n	80037c4 <UART_SetConfig+0x210>
 8003792:	2b80      	cmp	r3, #128	@ 0x80
 8003794:	d00a      	beq.n	80037ac <UART_SetConfig+0x1f8>
 8003796:	2b80      	cmp	r3, #128	@ 0x80
 8003798:	d814      	bhi.n	80037c4 <UART_SetConfig+0x210>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <UART_SetConfig+0x1f0>
 800379e:	2b40      	cmp	r3, #64	@ 0x40
 80037a0:	d008      	beq.n	80037b4 <UART_SetConfig+0x200>
 80037a2:	e00f      	b.n	80037c4 <UART_SetConfig+0x210>
 80037a4:	2300      	movs	r3, #0
 80037a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037aa:	e042      	b.n	8003832 <UART_SetConfig+0x27e>
 80037ac:	2302      	movs	r3, #2
 80037ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037b2:	e03e      	b.n	8003832 <UART_SetConfig+0x27e>
 80037b4:	2304      	movs	r3, #4
 80037b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ba:	e03a      	b.n	8003832 <UART_SetConfig+0x27e>
 80037bc:	2308      	movs	r3, #8
 80037be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037c2:	e036      	b.n	8003832 <UART_SetConfig+0x27e>
 80037c4:	2310      	movs	r3, #16
 80037c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ca:	e032      	b.n	8003832 <UART_SetConfig+0x27e>
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a30      	ldr	r2, [pc, #192]	@ (8003894 <UART_SetConfig+0x2e0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d12a      	bne.n	800382c <UART_SetConfig+0x278>
 80037d6:	4b31      	ldr	r3, [pc, #196]	@ (800389c <UART_SetConfig+0x2e8>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80037e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037e4:	d01a      	beq.n	800381c <UART_SetConfig+0x268>
 80037e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037ea:	d81b      	bhi.n	8003824 <UART_SetConfig+0x270>
 80037ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037f0:	d00c      	beq.n	800380c <UART_SetConfig+0x258>
 80037f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037f6:	d815      	bhi.n	8003824 <UART_SetConfig+0x270>
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <UART_SetConfig+0x250>
 80037fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003800:	d008      	beq.n	8003814 <UART_SetConfig+0x260>
 8003802:	e00f      	b.n	8003824 <UART_SetConfig+0x270>
 8003804:	2300      	movs	r3, #0
 8003806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800380a:	e012      	b.n	8003832 <UART_SetConfig+0x27e>
 800380c:	2302      	movs	r3, #2
 800380e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003812:	e00e      	b.n	8003832 <UART_SetConfig+0x27e>
 8003814:	2304      	movs	r3, #4
 8003816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800381a:	e00a      	b.n	8003832 <UART_SetConfig+0x27e>
 800381c:	2308      	movs	r3, #8
 800381e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003822:	e006      	b.n	8003832 <UART_SetConfig+0x27e>
 8003824:	2310      	movs	r3, #16
 8003826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800382a:	e002      	b.n	8003832 <UART_SetConfig+0x27e>
 800382c:	2310      	movs	r3, #16
 800382e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a17      	ldr	r2, [pc, #92]	@ (8003894 <UART_SetConfig+0x2e0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	f040 80a8 	bne.w	800398e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800383e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003842:	2b08      	cmp	r3, #8
 8003844:	d834      	bhi.n	80038b0 <UART_SetConfig+0x2fc>
 8003846:	a201      	add	r2, pc, #4	@ (adr r2, 800384c <UART_SetConfig+0x298>)
 8003848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384c:	08003871 	.word	0x08003871
 8003850:	080038b1 	.word	0x080038b1
 8003854:	08003879 	.word	0x08003879
 8003858:	080038b1 	.word	0x080038b1
 800385c:	0800387f 	.word	0x0800387f
 8003860:	080038b1 	.word	0x080038b1
 8003864:	080038b1 	.word	0x080038b1
 8003868:	080038b1 	.word	0x080038b1
 800386c:	08003887 	.word	0x08003887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003870:	f7ff fb56 	bl	8002f20 <HAL_RCC_GetPCLK1Freq>
 8003874:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003876:	e021      	b.n	80038bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003878:	4b0c      	ldr	r3, [pc, #48]	@ (80038ac <UART_SetConfig+0x2f8>)
 800387a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800387c:	e01e      	b.n	80038bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800387e:	f7ff fae1 	bl	8002e44 <HAL_RCC_GetSysClockFreq>
 8003882:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003884:	e01a      	b.n	80038bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800388c:	e016      	b.n	80038bc <UART_SetConfig+0x308>
 800388e:	bf00      	nop
 8003890:	cfff69f3 	.word	0xcfff69f3
 8003894:	40008000 	.word	0x40008000
 8003898:	40013800 	.word	0x40013800
 800389c:	40021000 	.word	0x40021000
 80038a0:	40004400 	.word	0x40004400
 80038a4:	40004800 	.word	0x40004800
 80038a8:	40004c00 	.word	0x40004c00
 80038ac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80038ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 812a 	beq.w	8003b18 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	4a9e      	ldr	r2, [pc, #632]	@ (8003b44 <UART_SetConfig+0x590>)
 80038ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038ce:	461a      	mov	r2, r3
 80038d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	4413      	add	r3, r2
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d305      	bcc.n	80038f4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d903      	bls.n	80038fc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80038fa:	e10d      	b.n	8003b18 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	2200      	movs	r2, #0
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	60fa      	str	r2, [r7, #12]
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	4a8e      	ldr	r2, [pc, #568]	@ (8003b44 <UART_SetConfig+0x590>)
 800390a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800390e:	b29b      	uxth	r3, r3
 8003910:	2200      	movs	r2, #0
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	607a      	str	r2, [r7, #4]
 8003916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800391a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800391e:	f7fc fccf 	bl	80002c0 <__aeabi_uldivmod>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4610      	mov	r0, r2
 8003928:	4619      	mov	r1, r3
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	020b      	lsls	r3, r1, #8
 8003934:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003938:	0202      	lsls	r2, r0, #8
 800393a:	6979      	ldr	r1, [r7, #20]
 800393c:	6849      	ldr	r1, [r1, #4]
 800393e:	0849      	lsrs	r1, r1, #1
 8003940:	2000      	movs	r0, #0
 8003942:	460c      	mov	r4, r1
 8003944:	4605      	mov	r5, r0
 8003946:	eb12 0804 	adds.w	r8, r2, r4
 800394a:	eb43 0905 	adc.w	r9, r3, r5
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	469a      	mov	sl, r3
 8003956:	4693      	mov	fp, r2
 8003958:	4652      	mov	r2, sl
 800395a:	465b      	mov	r3, fp
 800395c:	4640      	mov	r0, r8
 800395e:	4649      	mov	r1, r9
 8003960:	f7fc fcae 	bl	80002c0 <__aeabi_uldivmod>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4613      	mov	r3, r2
 800396a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003972:	d308      	bcc.n	8003986 <UART_SetConfig+0x3d2>
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800397a:	d204      	bcs.n	8003986 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6a3a      	ldr	r2, [r7, #32]
 8003982:	60da      	str	r2, [r3, #12]
 8003984:	e0c8      	b.n	8003b18 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800398c:	e0c4      	b.n	8003b18 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003996:	d167      	bne.n	8003a68 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003998:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800399c:	2b08      	cmp	r3, #8
 800399e:	d828      	bhi.n	80039f2 <UART_SetConfig+0x43e>
 80039a0:	a201      	add	r2, pc, #4	@ (adr r2, 80039a8 <UART_SetConfig+0x3f4>)
 80039a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a6:	bf00      	nop
 80039a8:	080039cd 	.word	0x080039cd
 80039ac:	080039d5 	.word	0x080039d5
 80039b0:	080039dd 	.word	0x080039dd
 80039b4:	080039f3 	.word	0x080039f3
 80039b8:	080039e3 	.word	0x080039e3
 80039bc:	080039f3 	.word	0x080039f3
 80039c0:	080039f3 	.word	0x080039f3
 80039c4:	080039f3 	.word	0x080039f3
 80039c8:	080039eb 	.word	0x080039eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039cc:	f7ff faa8 	bl	8002f20 <HAL_RCC_GetPCLK1Freq>
 80039d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039d2:	e014      	b.n	80039fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039d4:	f7ff faba 	bl	8002f4c <HAL_RCC_GetPCLK2Freq>
 80039d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039da:	e010      	b.n	80039fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003b48 <UART_SetConfig+0x594>)
 80039de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039e0:	e00d      	b.n	80039fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039e2:	f7ff fa2f 	bl	8002e44 <HAL_RCC_GetSysClockFreq>
 80039e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039e8:	e009      	b.n	80039fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039f0:	e005      	b.n	80039fe <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80039fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 8089 	beq.w	8003b18 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	4a4e      	ldr	r2, [pc, #312]	@ (8003b44 <UART_SetConfig+0x590>)
 8003a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a10:	461a      	mov	r2, r3
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a18:	005a      	lsls	r2, r3, #1
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	085b      	lsrs	r3, r3, #1
 8003a20:	441a      	add	r2, r3
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	2b0f      	cmp	r3, #15
 8003a30:	d916      	bls.n	8003a60 <UART_SetConfig+0x4ac>
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a38:	d212      	bcs.n	8003a60 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	f023 030f 	bic.w	r3, r3, #15
 8003a42:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	085b      	lsrs	r3, r3, #1
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	8bfb      	ldrh	r3, [r7, #30]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	8bfa      	ldrh	r2, [r7, #30]
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	e05b      	b.n	8003b18 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003a66:	e057      	b.n	8003b18 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a68:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d828      	bhi.n	8003ac2 <UART_SetConfig+0x50e>
 8003a70:	a201      	add	r2, pc, #4	@ (adr r2, 8003a78 <UART_SetConfig+0x4c4>)
 8003a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a76:	bf00      	nop
 8003a78:	08003a9d 	.word	0x08003a9d
 8003a7c:	08003aa5 	.word	0x08003aa5
 8003a80:	08003aad 	.word	0x08003aad
 8003a84:	08003ac3 	.word	0x08003ac3
 8003a88:	08003ab3 	.word	0x08003ab3
 8003a8c:	08003ac3 	.word	0x08003ac3
 8003a90:	08003ac3 	.word	0x08003ac3
 8003a94:	08003ac3 	.word	0x08003ac3
 8003a98:	08003abb 	.word	0x08003abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a9c:	f7ff fa40 	bl	8002f20 <HAL_RCC_GetPCLK1Freq>
 8003aa0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003aa2:	e014      	b.n	8003ace <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aa4:	f7ff fa52 	bl	8002f4c <HAL_RCC_GetPCLK2Freq>
 8003aa8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003aaa:	e010      	b.n	8003ace <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aac:	4b26      	ldr	r3, [pc, #152]	@ (8003b48 <UART_SetConfig+0x594>)
 8003aae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ab0:	e00d      	b.n	8003ace <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ab2:	f7ff f9c7 	bl	8002e44 <HAL_RCC_GetSysClockFreq>
 8003ab6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ab8:	e009      	b.n	8003ace <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ac0:	e005      	b.n	8003ace <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003acc:	bf00      	nop
    }

    if (pclk != 0U)
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d021      	beq.n	8003b18 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	4a1a      	ldr	r2, [pc, #104]	@ (8003b44 <UART_SetConfig+0x590>)
 8003ada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	085b      	lsrs	r3, r3, #1
 8003aec:	441a      	add	r2, r3
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	2b0f      	cmp	r3, #15
 8003afc:	d909      	bls.n	8003b12 <UART_SetConfig+0x55e>
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b04:	d205      	bcs.n	8003b12 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60da      	str	r2, [r3, #12]
 8003b10:	e002      	b.n	8003b18 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2200      	movs	r2, #0
 8003b32:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003b34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3730      	adds	r7, #48	@ 0x30
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b42:	bf00      	nop
 8003b44:	08004eb0 	.word	0x08004eb0
 8003b48:	00f42400 	.word	0x00f42400

08003b4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01a      	beq.n	8003c62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c4a:	d10a      	bne.n	8003c62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	605a      	str	r2, [r3, #4]
  }
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b098      	sub	sp, #96	@ 0x60
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ca0:	f7fd fa58 	bl	8001154 <HAL_GetTick>
 8003ca4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d12f      	bne.n	8003d14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f88e 	bl	8003de4 <UART_WaitOnFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d022      	beq.n	8003d14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ce2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003cf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e6      	bne.n	8003cce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e063      	b.n	8003ddc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d149      	bne.n	8003db6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f857 	bl	8003de4 <UART_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d03c      	beq.n	8003db6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	623b      	str	r3, [r7, #32]
   return(result);
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e6      	bne.n	8003d3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3308      	adds	r3, #8
 8003d74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d8e:	61fa      	str	r2, [r7, #28]
 8003d90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	69b9      	ldr	r1, [r7, #24]
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	617b      	str	r3, [r7, #20]
   return(result);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e5      	bne.n	8003d6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e012      	b.n	8003ddc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3758      	adds	r7, #88	@ 0x58
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	4613      	mov	r3, r2
 8003df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df4:	e04f      	b.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d04b      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfe:	f7fd f9a9 	bl	8001154 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d302      	bcc.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e04e      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d037      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b80      	cmp	r3, #128	@ 0x80
 8003e2a:	d034      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b40      	cmp	r3, #64	@ 0x40
 8003e30:	d031      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d110      	bne.n	8003e62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2208      	movs	r2, #8
 8003e46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f838 	bl	8003ebe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2208      	movs	r2, #8
 8003e52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e029      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e70:	d111      	bne.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f81e 	bl	8003ebe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e00f      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	bf0c      	ite	eq
 8003ea6:	2301      	moveq	r3, #1
 8003ea8:	2300      	movne	r3, #0
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d0a0      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b095      	sub	sp, #84	@ 0x54
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ee4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ee6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003eea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e6      	bne.n	8003ec6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3308      	adds	r3, #8
 8003efe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	e853 3f00 	ldrex	r3, [r3]
 8003f06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3308      	adds	r3, #8
 8003f1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f24:	e841 2300 	strex	r3, r2, [r1]
 8003f28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1e3      	bne.n	8003ef8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d118      	bne.n	8003f6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f023 0310 	bic.w	r3, r3, #16
 8003f4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	6979      	ldr	r1, [r7, #20]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	e841 2300 	strex	r3, r2, [r1]
 8003f62:	613b      	str	r3, [r7, #16]
   return(result);
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1e6      	bne.n	8003f38 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003f7e:	bf00      	nop
 8003f80:	3754      	adds	r7, #84	@ 0x54
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
	...

08003f8c <std>:
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	b510      	push	{r4, lr}
 8003f90:	4604      	mov	r4, r0
 8003f92:	e9c0 3300 	strd	r3, r3, [r0]
 8003f96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f9a:	6083      	str	r3, [r0, #8]
 8003f9c:	8181      	strh	r1, [r0, #12]
 8003f9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003fa0:	81c2      	strh	r2, [r0, #14]
 8003fa2:	6183      	str	r3, [r0, #24]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	2208      	movs	r2, #8
 8003fa8:	305c      	adds	r0, #92	@ 0x5c
 8003faa:	f000 f906 	bl	80041ba <memset>
 8003fae:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe4 <std+0x58>)
 8003fb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8003fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe8 <std+0x5c>)
 8003fb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fec <std+0x60>)
 8003fb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003fba:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff0 <std+0x64>)
 8003fbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff4 <std+0x68>)
 8003fc0:	6224      	str	r4, [r4, #32]
 8003fc2:	429c      	cmp	r4, r3
 8003fc4:	d006      	beq.n	8003fd4 <std+0x48>
 8003fc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003fca:	4294      	cmp	r4, r2
 8003fcc:	d002      	beq.n	8003fd4 <std+0x48>
 8003fce:	33d0      	adds	r3, #208	@ 0xd0
 8003fd0:	429c      	cmp	r4, r3
 8003fd2:	d105      	bne.n	8003fe0 <std+0x54>
 8003fd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fdc:	f000 b966 	b.w	80042ac <__retarget_lock_init_recursive>
 8003fe0:	bd10      	pop	{r4, pc}
 8003fe2:	bf00      	nop
 8003fe4:	08004135 	.word	0x08004135
 8003fe8:	08004157 	.word	0x08004157
 8003fec:	0800418f 	.word	0x0800418f
 8003ff0:	080041b3 	.word	0x080041b3
 8003ff4:	200001a8 	.word	0x200001a8

08003ff8 <stdio_exit_handler>:
 8003ff8:	4a02      	ldr	r2, [pc, #8]	@ (8004004 <stdio_exit_handler+0xc>)
 8003ffa:	4903      	ldr	r1, [pc, #12]	@ (8004008 <stdio_exit_handler+0x10>)
 8003ffc:	4803      	ldr	r0, [pc, #12]	@ (800400c <stdio_exit_handler+0x14>)
 8003ffe:	f000 b869 	b.w	80040d4 <_fwalk_sglue>
 8004002:	bf00      	nop
 8004004:	20000020 	.word	0x20000020
 8004008:	08004b4d 	.word	0x08004b4d
 800400c:	20000030 	.word	0x20000030

08004010 <cleanup_stdio>:
 8004010:	6841      	ldr	r1, [r0, #4]
 8004012:	4b0c      	ldr	r3, [pc, #48]	@ (8004044 <cleanup_stdio+0x34>)
 8004014:	4299      	cmp	r1, r3
 8004016:	b510      	push	{r4, lr}
 8004018:	4604      	mov	r4, r0
 800401a:	d001      	beq.n	8004020 <cleanup_stdio+0x10>
 800401c:	f000 fd96 	bl	8004b4c <_fflush_r>
 8004020:	68a1      	ldr	r1, [r4, #8]
 8004022:	4b09      	ldr	r3, [pc, #36]	@ (8004048 <cleanup_stdio+0x38>)
 8004024:	4299      	cmp	r1, r3
 8004026:	d002      	beq.n	800402e <cleanup_stdio+0x1e>
 8004028:	4620      	mov	r0, r4
 800402a:	f000 fd8f 	bl	8004b4c <_fflush_r>
 800402e:	68e1      	ldr	r1, [r4, #12]
 8004030:	4b06      	ldr	r3, [pc, #24]	@ (800404c <cleanup_stdio+0x3c>)
 8004032:	4299      	cmp	r1, r3
 8004034:	d004      	beq.n	8004040 <cleanup_stdio+0x30>
 8004036:	4620      	mov	r0, r4
 8004038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800403c:	f000 bd86 	b.w	8004b4c <_fflush_r>
 8004040:	bd10      	pop	{r4, pc}
 8004042:	bf00      	nop
 8004044:	200001a8 	.word	0x200001a8
 8004048:	20000210 	.word	0x20000210
 800404c:	20000278 	.word	0x20000278

08004050 <global_stdio_init.part.0>:
 8004050:	b510      	push	{r4, lr}
 8004052:	4b0b      	ldr	r3, [pc, #44]	@ (8004080 <global_stdio_init.part.0+0x30>)
 8004054:	4c0b      	ldr	r4, [pc, #44]	@ (8004084 <global_stdio_init.part.0+0x34>)
 8004056:	4a0c      	ldr	r2, [pc, #48]	@ (8004088 <global_stdio_init.part.0+0x38>)
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	4620      	mov	r0, r4
 800405c:	2200      	movs	r2, #0
 800405e:	2104      	movs	r1, #4
 8004060:	f7ff ff94 	bl	8003f8c <std>
 8004064:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004068:	2201      	movs	r2, #1
 800406a:	2109      	movs	r1, #9
 800406c:	f7ff ff8e 	bl	8003f8c <std>
 8004070:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004074:	2202      	movs	r2, #2
 8004076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800407a:	2112      	movs	r1, #18
 800407c:	f7ff bf86 	b.w	8003f8c <std>
 8004080:	200002e0 	.word	0x200002e0
 8004084:	200001a8 	.word	0x200001a8
 8004088:	08003ff9 	.word	0x08003ff9

0800408c <__sfp_lock_acquire>:
 800408c:	4801      	ldr	r0, [pc, #4]	@ (8004094 <__sfp_lock_acquire+0x8>)
 800408e:	f000 b90e 	b.w	80042ae <__retarget_lock_acquire_recursive>
 8004092:	bf00      	nop
 8004094:	200002e9 	.word	0x200002e9

08004098 <__sfp_lock_release>:
 8004098:	4801      	ldr	r0, [pc, #4]	@ (80040a0 <__sfp_lock_release+0x8>)
 800409a:	f000 b909 	b.w	80042b0 <__retarget_lock_release_recursive>
 800409e:	bf00      	nop
 80040a0:	200002e9 	.word	0x200002e9

080040a4 <__sinit>:
 80040a4:	b510      	push	{r4, lr}
 80040a6:	4604      	mov	r4, r0
 80040a8:	f7ff fff0 	bl	800408c <__sfp_lock_acquire>
 80040ac:	6a23      	ldr	r3, [r4, #32]
 80040ae:	b11b      	cbz	r3, 80040b8 <__sinit+0x14>
 80040b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040b4:	f7ff bff0 	b.w	8004098 <__sfp_lock_release>
 80040b8:	4b04      	ldr	r3, [pc, #16]	@ (80040cc <__sinit+0x28>)
 80040ba:	6223      	str	r3, [r4, #32]
 80040bc:	4b04      	ldr	r3, [pc, #16]	@ (80040d0 <__sinit+0x2c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1f5      	bne.n	80040b0 <__sinit+0xc>
 80040c4:	f7ff ffc4 	bl	8004050 <global_stdio_init.part.0>
 80040c8:	e7f2      	b.n	80040b0 <__sinit+0xc>
 80040ca:	bf00      	nop
 80040cc:	08004011 	.word	0x08004011
 80040d0:	200002e0 	.word	0x200002e0

080040d4 <_fwalk_sglue>:
 80040d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040d8:	4607      	mov	r7, r0
 80040da:	4688      	mov	r8, r1
 80040dc:	4614      	mov	r4, r2
 80040de:	2600      	movs	r6, #0
 80040e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040e4:	f1b9 0901 	subs.w	r9, r9, #1
 80040e8:	d505      	bpl.n	80040f6 <_fwalk_sglue+0x22>
 80040ea:	6824      	ldr	r4, [r4, #0]
 80040ec:	2c00      	cmp	r4, #0
 80040ee:	d1f7      	bne.n	80040e0 <_fwalk_sglue+0xc>
 80040f0:	4630      	mov	r0, r6
 80040f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040f6:	89ab      	ldrh	r3, [r5, #12]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d907      	bls.n	800410c <_fwalk_sglue+0x38>
 80040fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004100:	3301      	adds	r3, #1
 8004102:	d003      	beq.n	800410c <_fwalk_sglue+0x38>
 8004104:	4629      	mov	r1, r5
 8004106:	4638      	mov	r0, r7
 8004108:	47c0      	blx	r8
 800410a:	4306      	orrs	r6, r0
 800410c:	3568      	adds	r5, #104	@ 0x68
 800410e:	e7e9      	b.n	80040e4 <_fwalk_sglue+0x10>

08004110 <iprintf>:
 8004110:	b40f      	push	{r0, r1, r2, r3}
 8004112:	b507      	push	{r0, r1, r2, lr}
 8004114:	4906      	ldr	r1, [pc, #24]	@ (8004130 <iprintf+0x20>)
 8004116:	ab04      	add	r3, sp, #16
 8004118:	6808      	ldr	r0, [r1, #0]
 800411a:	f853 2b04 	ldr.w	r2, [r3], #4
 800411e:	6881      	ldr	r1, [r0, #8]
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	f000 f9e9 	bl	80044f8 <_vfiprintf_r>
 8004126:	b003      	add	sp, #12
 8004128:	f85d eb04 	ldr.w	lr, [sp], #4
 800412c:	b004      	add	sp, #16
 800412e:	4770      	bx	lr
 8004130:	2000002c 	.word	0x2000002c

08004134 <__sread>:
 8004134:	b510      	push	{r4, lr}
 8004136:	460c      	mov	r4, r1
 8004138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800413c:	f000 f868 	bl	8004210 <_read_r>
 8004140:	2800      	cmp	r0, #0
 8004142:	bfab      	itete	ge
 8004144:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004146:	89a3      	ldrhlt	r3, [r4, #12]
 8004148:	181b      	addge	r3, r3, r0
 800414a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800414e:	bfac      	ite	ge
 8004150:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004152:	81a3      	strhlt	r3, [r4, #12]
 8004154:	bd10      	pop	{r4, pc}

08004156 <__swrite>:
 8004156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800415a:	461f      	mov	r7, r3
 800415c:	898b      	ldrh	r3, [r1, #12]
 800415e:	05db      	lsls	r3, r3, #23
 8004160:	4605      	mov	r5, r0
 8004162:	460c      	mov	r4, r1
 8004164:	4616      	mov	r6, r2
 8004166:	d505      	bpl.n	8004174 <__swrite+0x1e>
 8004168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800416c:	2302      	movs	r3, #2
 800416e:	2200      	movs	r2, #0
 8004170:	f000 f83c 	bl	80041ec <_lseek_r>
 8004174:	89a3      	ldrh	r3, [r4, #12]
 8004176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800417a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800417e:	81a3      	strh	r3, [r4, #12]
 8004180:	4632      	mov	r2, r6
 8004182:	463b      	mov	r3, r7
 8004184:	4628      	mov	r0, r5
 8004186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800418a:	f000 b853 	b.w	8004234 <_write_r>

0800418e <__sseek>:
 800418e:	b510      	push	{r4, lr}
 8004190:	460c      	mov	r4, r1
 8004192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004196:	f000 f829 	bl	80041ec <_lseek_r>
 800419a:	1c43      	adds	r3, r0, #1
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	bf15      	itete	ne
 80041a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80041a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80041a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80041aa:	81a3      	strheq	r3, [r4, #12]
 80041ac:	bf18      	it	ne
 80041ae:	81a3      	strhne	r3, [r4, #12]
 80041b0:	bd10      	pop	{r4, pc}

080041b2 <__sclose>:
 80041b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041b6:	f000 b809 	b.w	80041cc <_close_r>

080041ba <memset>:
 80041ba:	4402      	add	r2, r0
 80041bc:	4603      	mov	r3, r0
 80041be:	4293      	cmp	r3, r2
 80041c0:	d100      	bne.n	80041c4 <memset+0xa>
 80041c2:	4770      	bx	lr
 80041c4:	f803 1b01 	strb.w	r1, [r3], #1
 80041c8:	e7f9      	b.n	80041be <memset+0x4>
	...

080041cc <_close_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4d06      	ldr	r5, [pc, #24]	@ (80041e8 <_close_r+0x1c>)
 80041d0:	2300      	movs	r3, #0
 80041d2:	4604      	mov	r4, r0
 80041d4:	4608      	mov	r0, r1
 80041d6:	602b      	str	r3, [r5, #0]
 80041d8:	f7fc fcfd 	bl	8000bd6 <_close>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d102      	bne.n	80041e6 <_close_r+0x1a>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	b103      	cbz	r3, 80041e6 <_close_r+0x1a>
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	bd38      	pop	{r3, r4, r5, pc}
 80041e8:	200002e4 	.word	0x200002e4

080041ec <_lseek_r>:
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	4d07      	ldr	r5, [pc, #28]	@ (800420c <_lseek_r+0x20>)
 80041f0:	4604      	mov	r4, r0
 80041f2:	4608      	mov	r0, r1
 80041f4:	4611      	mov	r1, r2
 80041f6:	2200      	movs	r2, #0
 80041f8:	602a      	str	r2, [r5, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	f7fc fd12 	bl	8000c24 <_lseek>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	d102      	bne.n	800420a <_lseek_r+0x1e>
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	b103      	cbz	r3, 800420a <_lseek_r+0x1e>
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	bd38      	pop	{r3, r4, r5, pc}
 800420c:	200002e4 	.word	0x200002e4

08004210 <_read_r>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	4d07      	ldr	r5, [pc, #28]	@ (8004230 <_read_r+0x20>)
 8004214:	4604      	mov	r4, r0
 8004216:	4608      	mov	r0, r1
 8004218:	4611      	mov	r1, r2
 800421a:	2200      	movs	r2, #0
 800421c:	602a      	str	r2, [r5, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	f7fc fca0 	bl	8000b64 <_read>
 8004224:	1c43      	adds	r3, r0, #1
 8004226:	d102      	bne.n	800422e <_read_r+0x1e>
 8004228:	682b      	ldr	r3, [r5, #0]
 800422a:	b103      	cbz	r3, 800422e <_read_r+0x1e>
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	bd38      	pop	{r3, r4, r5, pc}
 8004230:	200002e4 	.word	0x200002e4

08004234 <_write_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	4d07      	ldr	r5, [pc, #28]	@ (8004254 <_write_r+0x20>)
 8004238:	4604      	mov	r4, r0
 800423a:	4608      	mov	r0, r1
 800423c:	4611      	mov	r1, r2
 800423e:	2200      	movs	r2, #0
 8004240:	602a      	str	r2, [r5, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	f7fc fcab 	bl	8000b9e <_write>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d102      	bne.n	8004252 <_write_r+0x1e>
 800424c:	682b      	ldr	r3, [r5, #0]
 800424e:	b103      	cbz	r3, 8004252 <_write_r+0x1e>
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	bd38      	pop	{r3, r4, r5, pc}
 8004254:	200002e4 	.word	0x200002e4

08004258 <__errno>:
 8004258:	4b01      	ldr	r3, [pc, #4]	@ (8004260 <__errno+0x8>)
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	2000002c 	.word	0x2000002c

08004264 <__libc_init_array>:
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	4d0d      	ldr	r5, [pc, #52]	@ (800429c <__libc_init_array+0x38>)
 8004268:	4c0d      	ldr	r4, [pc, #52]	@ (80042a0 <__libc_init_array+0x3c>)
 800426a:	1b64      	subs	r4, r4, r5
 800426c:	10a4      	asrs	r4, r4, #2
 800426e:	2600      	movs	r6, #0
 8004270:	42a6      	cmp	r6, r4
 8004272:	d109      	bne.n	8004288 <__libc_init_array+0x24>
 8004274:	4d0b      	ldr	r5, [pc, #44]	@ (80042a4 <__libc_init_array+0x40>)
 8004276:	4c0c      	ldr	r4, [pc, #48]	@ (80042a8 <__libc_init_array+0x44>)
 8004278:	f000 fdb8 	bl	8004dec <_init>
 800427c:	1b64      	subs	r4, r4, r5
 800427e:	10a4      	asrs	r4, r4, #2
 8004280:	2600      	movs	r6, #0
 8004282:	42a6      	cmp	r6, r4
 8004284:	d105      	bne.n	8004292 <__libc_init_array+0x2e>
 8004286:	bd70      	pop	{r4, r5, r6, pc}
 8004288:	f855 3b04 	ldr.w	r3, [r5], #4
 800428c:	4798      	blx	r3
 800428e:	3601      	adds	r6, #1
 8004290:	e7ee      	b.n	8004270 <__libc_init_array+0xc>
 8004292:	f855 3b04 	ldr.w	r3, [r5], #4
 8004296:	4798      	blx	r3
 8004298:	3601      	adds	r6, #1
 800429a:	e7f2      	b.n	8004282 <__libc_init_array+0x1e>
 800429c:	08004f04 	.word	0x08004f04
 80042a0:	08004f04 	.word	0x08004f04
 80042a4:	08004f04 	.word	0x08004f04
 80042a8:	08004f08 	.word	0x08004f08

080042ac <__retarget_lock_init_recursive>:
 80042ac:	4770      	bx	lr

080042ae <__retarget_lock_acquire_recursive>:
 80042ae:	4770      	bx	lr

080042b0 <__retarget_lock_release_recursive>:
 80042b0:	4770      	bx	lr
	...

080042b4 <_free_r>:
 80042b4:	b538      	push	{r3, r4, r5, lr}
 80042b6:	4605      	mov	r5, r0
 80042b8:	2900      	cmp	r1, #0
 80042ba:	d041      	beq.n	8004340 <_free_r+0x8c>
 80042bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042c0:	1f0c      	subs	r4, r1, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	bfb8      	it	lt
 80042c6:	18e4      	addlt	r4, r4, r3
 80042c8:	f000 f8e0 	bl	800448c <__malloc_lock>
 80042cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004344 <_free_r+0x90>)
 80042ce:	6813      	ldr	r3, [r2, #0]
 80042d0:	b933      	cbnz	r3, 80042e0 <_free_r+0x2c>
 80042d2:	6063      	str	r3, [r4, #4]
 80042d4:	6014      	str	r4, [r2, #0]
 80042d6:	4628      	mov	r0, r5
 80042d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042dc:	f000 b8dc 	b.w	8004498 <__malloc_unlock>
 80042e0:	42a3      	cmp	r3, r4
 80042e2:	d908      	bls.n	80042f6 <_free_r+0x42>
 80042e4:	6820      	ldr	r0, [r4, #0]
 80042e6:	1821      	adds	r1, r4, r0
 80042e8:	428b      	cmp	r3, r1
 80042ea:	bf01      	itttt	eq
 80042ec:	6819      	ldreq	r1, [r3, #0]
 80042ee:	685b      	ldreq	r3, [r3, #4]
 80042f0:	1809      	addeq	r1, r1, r0
 80042f2:	6021      	streq	r1, [r4, #0]
 80042f4:	e7ed      	b.n	80042d2 <_free_r+0x1e>
 80042f6:	461a      	mov	r2, r3
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	b10b      	cbz	r3, 8004300 <_free_r+0x4c>
 80042fc:	42a3      	cmp	r3, r4
 80042fe:	d9fa      	bls.n	80042f6 <_free_r+0x42>
 8004300:	6811      	ldr	r1, [r2, #0]
 8004302:	1850      	adds	r0, r2, r1
 8004304:	42a0      	cmp	r0, r4
 8004306:	d10b      	bne.n	8004320 <_free_r+0x6c>
 8004308:	6820      	ldr	r0, [r4, #0]
 800430a:	4401      	add	r1, r0
 800430c:	1850      	adds	r0, r2, r1
 800430e:	4283      	cmp	r3, r0
 8004310:	6011      	str	r1, [r2, #0]
 8004312:	d1e0      	bne.n	80042d6 <_free_r+0x22>
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	6053      	str	r3, [r2, #4]
 800431a:	4408      	add	r0, r1
 800431c:	6010      	str	r0, [r2, #0]
 800431e:	e7da      	b.n	80042d6 <_free_r+0x22>
 8004320:	d902      	bls.n	8004328 <_free_r+0x74>
 8004322:	230c      	movs	r3, #12
 8004324:	602b      	str	r3, [r5, #0]
 8004326:	e7d6      	b.n	80042d6 <_free_r+0x22>
 8004328:	6820      	ldr	r0, [r4, #0]
 800432a:	1821      	adds	r1, r4, r0
 800432c:	428b      	cmp	r3, r1
 800432e:	bf04      	itt	eq
 8004330:	6819      	ldreq	r1, [r3, #0]
 8004332:	685b      	ldreq	r3, [r3, #4]
 8004334:	6063      	str	r3, [r4, #4]
 8004336:	bf04      	itt	eq
 8004338:	1809      	addeq	r1, r1, r0
 800433a:	6021      	streq	r1, [r4, #0]
 800433c:	6054      	str	r4, [r2, #4]
 800433e:	e7ca      	b.n	80042d6 <_free_r+0x22>
 8004340:	bd38      	pop	{r3, r4, r5, pc}
 8004342:	bf00      	nop
 8004344:	200002f0 	.word	0x200002f0

08004348 <sbrk_aligned>:
 8004348:	b570      	push	{r4, r5, r6, lr}
 800434a:	4e0f      	ldr	r6, [pc, #60]	@ (8004388 <sbrk_aligned+0x40>)
 800434c:	460c      	mov	r4, r1
 800434e:	6831      	ldr	r1, [r6, #0]
 8004350:	4605      	mov	r5, r0
 8004352:	b911      	cbnz	r1, 800435a <sbrk_aligned+0x12>
 8004354:	f000 fcb6 	bl	8004cc4 <_sbrk_r>
 8004358:	6030      	str	r0, [r6, #0]
 800435a:	4621      	mov	r1, r4
 800435c:	4628      	mov	r0, r5
 800435e:	f000 fcb1 	bl	8004cc4 <_sbrk_r>
 8004362:	1c43      	adds	r3, r0, #1
 8004364:	d103      	bne.n	800436e <sbrk_aligned+0x26>
 8004366:	f04f 34ff 	mov.w	r4, #4294967295
 800436a:	4620      	mov	r0, r4
 800436c:	bd70      	pop	{r4, r5, r6, pc}
 800436e:	1cc4      	adds	r4, r0, #3
 8004370:	f024 0403 	bic.w	r4, r4, #3
 8004374:	42a0      	cmp	r0, r4
 8004376:	d0f8      	beq.n	800436a <sbrk_aligned+0x22>
 8004378:	1a21      	subs	r1, r4, r0
 800437a:	4628      	mov	r0, r5
 800437c:	f000 fca2 	bl	8004cc4 <_sbrk_r>
 8004380:	3001      	adds	r0, #1
 8004382:	d1f2      	bne.n	800436a <sbrk_aligned+0x22>
 8004384:	e7ef      	b.n	8004366 <sbrk_aligned+0x1e>
 8004386:	bf00      	nop
 8004388:	200002ec 	.word	0x200002ec

0800438c <_malloc_r>:
 800438c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004390:	1ccd      	adds	r5, r1, #3
 8004392:	f025 0503 	bic.w	r5, r5, #3
 8004396:	3508      	adds	r5, #8
 8004398:	2d0c      	cmp	r5, #12
 800439a:	bf38      	it	cc
 800439c:	250c      	movcc	r5, #12
 800439e:	2d00      	cmp	r5, #0
 80043a0:	4606      	mov	r6, r0
 80043a2:	db01      	blt.n	80043a8 <_malloc_r+0x1c>
 80043a4:	42a9      	cmp	r1, r5
 80043a6:	d904      	bls.n	80043b2 <_malloc_r+0x26>
 80043a8:	230c      	movs	r3, #12
 80043aa:	6033      	str	r3, [r6, #0]
 80043ac:	2000      	movs	r0, #0
 80043ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004488 <_malloc_r+0xfc>
 80043b6:	f000 f869 	bl	800448c <__malloc_lock>
 80043ba:	f8d8 3000 	ldr.w	r3, [r8]
 80043be:	461c      	mov	r4, r3
 80043c0:	bb44      	cbnz	r4, 8004414 <_malloc_r+0x88>
 80043c2:	4629      	mov	r1, r5
 80043c4:	4630      	mov	r0, r6
 80043c6:	f7ff ffbf 	bl	8004348 <sbrk_aligned>
 80043ca:	1c43      	adds	r3, r0, #1
 80043cc:	4604      	mov	r4, r0
 80043ce:	d158      	bne.n	8004482 <_malloc_r+0xf6>
 80043d0:	f8d8 4000 	ldr.w	r4, [r8]
 80043d4:	4627      	mov	r7, r4
 80043d6:	2f00      	cmp	r7, #0
 80043d8:	d143      	bne.n	8004462 <_malloc_r+0xd6>
 80043da:	2c00      	cmp	r4, #0
 80043dc:	d04b      	beq.n	8004476 <_malloc_r+0xea>
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	4639      	mov	r1, r7
 80043e2:	4630      	mov	r0, r6
 80043e4:	eb04 0903 	add.w	r9, r4, r3
 80043e8:	f000 fc6c 	bl	8004cc4 <_sbrk_r>
 80043ec:	4581      	cmp	r9, r0
 80043ee:	d142      	bne.n	8004476 <_malloc_r+0xea>
 80043f0:	6821      	ldr	r1, [r4, #0]
 80043f2:	1a6d      	subs	r5, r5, r1
 80043f4:	4629      	mov	r1, r5
 80043f6:	4630      	mov	r0, r6
 80043f8:	f7ff ffa6 	bl	8004348 <sbrk_aligned>
 80043fc:	3001      	adds	r0, #1
 80043fe:	d03a      	beq.n	8004476 <_malloc_r+0xea>
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	442b      	add	r3, r5
 8004404:	6023      	str	r3, [r4, #0]
 8004406:	f8d8 3000 	ldr.w	r3, [r8]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	bb62      	cbnz	r2, 8004468 <_malloc_r+0xdc>
 800440e:	f8c8 7000 	str.w	r7, [r8]
 8004412:	e00f      	b.n	8004434 <_malloc_r+0xa8>
 8004414:	6822      	ldr	r2, [r4, #0]
 8004416:	1b52      	subs	r2, r2, r5
 8004418:	d420      	bmi.n	800445c <_malloc_r+0xd0>
 800441a:	2a0b      	cmp	r2, #11
 800441c:	d917      	bls.n	800444e <_malloc_r+0xc2>
 800441e:	1961      	adds	r1, r4, r5
 8004420:	42a3      	cmp	r3, r4
 8004422:	6025      	str	r5, [r4, #0]
 8004424:	bf18      	it	ne
 8004426:	6059      	strne	r1, [r3, #4]
 8004428:	6863      	ldr	r3, [r4, #4]
 800442a:	bf08      	it	eq
 800442c:	f8c8 1000 	streq.w	r1, [r8]
 8004430:	5162      	str	r2, [r4, r5]
 8004432:	604b      	str	r3, [r1, #4]
 8004434:	4630      	mov	r0, r6
 8004436:	f000 f82f 	bl	8004498 <__malloc_unlock>
 800443a:	f104 000b 	add.w	r0, r4, #11
 800443e:	1d23      	adds	r3, r4, #4
 8004440:	f020 0007 	bic.w	r0, r0, #7
 8004444:	1ac2      	subs	r2, r0, r3
 8004446:	bf1c      	itt	ne
 8004448:	1a1b      	subne	r3, r3, r0
 800444a:	50a3      	strne	r3, [r4, r2]
 800444c:	e7af      	b.n	80043ae <_malloc_r+0x22>
 800444e:	6862      	ldr	r2, [r4, #4]
 8004450:	42a3      	cmp	r3, r4
 8004452:	bf0c      	ite	eq
 8004454:	f8c8 2000 	streq.w	r2, [r8]
 8004458:	605a      	strne	r2, [r3, #4]
 800445a:	e7eb      	b.n	8004434 <_malloc_r+0xa8>
 800445c:	4623      	mov	r3, r4
 800445e:	6864      	ldr	r4, [r4, #4]
 8004460:	e7ae      	b.n	80043c0 <_malloc_r+0x34>
 8004462:	463c      	mov	r4, r7
 8004464:	687f      	ldr	r7, [r7, #4]
 8004466:	e7b6      	b.n	80043d6 <_malloc_r+0x4a>
 8004468:	461a      	mov	r2, r3
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	42a3      	cmp	r3, r4
 800446e:	d1fb      	bne.n	8004468 <_malloc_r+0xdc>
 8004470:	2300      	movs	r3, #0
 8004472:	6053      	str	r3, [r2, #4]
 8004474:	e7de      	b.n	8004434 <_malloc_r+0xa8>
 8004476:	230c      	movs	r3, #12
 8004478:	6033      	str	r3, [r6, #0]
 800447a:	4630      	mov	r0, r6
 800447c:	f000 f80c 	bl	8004498 <__malloc_unlock>
 8004480:	e794      	b.n	80043ac <_malloc_r+0x20>
 8004482:	6005      	str	r5, [r0, #0]
 8004484:	e7d6      	b.n	8004434 <_malloc_r+0xa8>
 8004486:	bf00      	nop
 8004488:	200002f0 	.word	0x200002f0

0800448c <__malloc_lock>:
 800448c:	4801      	ldr	r0, [pc, #4]	@ (8004494 <__malloc_lock+0x8>)
 800448e:	f7ff bf0e 	b.w	80042ae <__retarget_lock_acquire_recursive>
 8004492:	bf00      	nop
 8004494:	200002e8 	.word	0x200002e8

08004498 <__malloc_unlock>:
 8004498:	4801      	ldr	r0, [pc, #4]	@ (80044a0 <__malloc_unlock+0x8>)
 800449a:	f7ff bf09 	b.w	80042b0 <__retarget_lock_release_recursive>
 800449e:	bf00      	nop
 80044a0:	200002e8 	.word	0x200002e8

080044a4 <__sfputc_r>:
 80044a4:	6893      	ldr	r3, [r2, #8]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	b410      	push	{r4}
 80044ac:	6093      	str	r3, [r2, #8]
 80044ae:	da08      	bge.n	80044c2 <__sfputc_r+0x1e>
 80044b0:	6994      	ldr	r4, [r2, #24]
 80044b2:	42a3      	cmp	r3, r4
 80044b4:	db01      	blt.n	80044ba <__sfputc_r+0x16>
 80044b6:	290a      	cmp	r1, #10
 80044b8:	d103      	bne.n	80044c2 <__sfputc_r+0x1e>
 80044ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044be:	f000 bb6d 	b.w	8004b9c <__swbuf_r>
 80044c2:	6813      	ldr	r3, [r2, #0]
 80044c4:	1c58      	adds	r0, r3, #1
 80044c6:	6010      	str	r0, [r2, #0]
 80044c8:	7019      	strb	r1, [r3, #0]
 80044ca:	4608      	mov	r0, r1
 80044cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <__sfputs_r>:
 80044d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d4:	4606      	mov	r6, r0
 80044d6:	460f      	mov	r7, r1
 80044d8:	4614      	mov	r4, r2
 80044da:	18d5      	adds	r5, r2, r3
 80044dc:	42ac      	cmp	r4, r5
 80044de:	d101      	bne.n	80044e4 <__sfputs_r+0x12>
 80044e0:	2000      	movs	r0, #0
 80044e2:	e007      	b.n	80044f4 <__sfputs_r+0x22>
 80044e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044e8:	463a      	mov	r2, r7
 80044ea:	4630      	mov	r0, r6
 80044ec:	f7ff ffda 	bl	80044a4 <__sfputc_r>
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	d1f3      	bne.n	80044dc <__sfputs_r+0xa>
 80044f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044f8 <_vfiprintf_r>:
 80044f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fc:	460d      	mov	r5, r1
 80044fe:	b09d      	sub	sp, #116	@ 0x74
 8004500:	4614      	mov	r4, r2
 8004502:	4698      	mov	r8, r3
 8004504:	4606      	mov	r6, r0
 8004506:	b118      	cbz	r0, 8004510 <_vfiprintf_r+0x18>
 8004508:	6a03      	ldr	r3, [r0, #32]
 800450a:	b90b      	cbnz	r3, 8004510 <_vfiprintf_r+0x18>
 800450c:	f7ff fdca 	bl	80040a4 <__sinit>
 8004510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004512:	07d9      	lsls	r1, r3, #31
 8004514:	d405      	bmi.n	8004522 <_vfiprintf_r+0x2a>
 8004516:	89ab      	ldrh	r3, [r5, #12]
 8004518:	059a      	lsls	r2, r3, #22
 800451a:	d402      	bmi.n	8004522 <_vfiprintf_r+0x2a>
 800451c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800451e:	f7ff fec6 	bl	80042ae <__retarget_lock_acquire_recursive>
 8004522:	89ab      	ldrh	r3, [r5, #12]
 8004524:	071b      	lsls	r3, r3, #28
 8004526:	d501      	bpl.n	800452c <_vfiprintf_r+0x34>
 8004528:	692b      	ldr	r3, [r5, #16]
 800452a:	b99b      	cbnz	r3, 8004554 <_vfiprintf_r+0x5c>
 800452c:	4629      	mov	r1, r5
 800452e:	4630      	mov	r0, r6
 8004530:	f000 fb72 	bl	8004c18 <__swsetup_r>
 8004534:	b170      	cbz	r0, 8004554 <_vfiprintf_r+0x5c>
 8004536:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004538:	07dc      	lsls	r4, r3, #31
 800453a:	d504      	bpl.n	8004546 <_vfiprintf_r+0x4e>
 800453c:	f04f 30ff 	mov.w	r0, #4294967295
 8004540:	b01d      	add	sp, #116	@ 0x74
 8004542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004546:	89ab      	ldrh	r3, [r5, #12]
 8004548:	0598      	lsls	r0, r3, #22
 800454a:	d4f7      	bmi.n	800453c <_vfiprintf_r+0x44>
 800454c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800454e:	f7ff feaf 	bl	80042b0 <__retarget_lock_release_recursive>
 8004552:	e7f3      	b.n	800453c <_vfiprintf_r+0x44>
 8004554:	2300      	movs	r3, #0
 8004556:	9309      	str	r3, [sp, #36]	@ 0x24
 8004558:	2320      	movs	r3, #32
 800455a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800455e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004562:	2330      	movs	r3, #48	@ 0x30
 8004564:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004714 <_vfiprintf_r+0x21c>
 8004568:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800456c:	f04f 0901 	mov.w	r9, #1
 8004570:	4623      	mov	r3, r4
 8004572:	469a      	mov	sl, r3
 8004574:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004578:	b10a      	cbz	r2, 800457e <_vfiprintf_r+0x86>
 800457a:	2a25      	cmp	r2, #37	@ 0x25
 800457c:	d1f9      	bne.n	8004572 <_vfiprintf_r+0x7a>
 800457e:	ebba 0b04 	subs.w	fp, sl, r4
 8004582:	d00b      	beq.n	800459c <_vfiprintf_r+0xa4>
 8004584:	465b      	mov	r3, fp
 8004586:	4622      	mov	r2, r4
 8004588:	4629      	mov	r1, r5
 800458a:	4630      	mov	r0, r6
 800458c:	f7ff ffa1 	bl	80044d2 <__sfputs_r>
 8004590:	3001      	adds	r0, #1
 8004592:	f000 80a7 	beq.w	80046e4 <_vfiprintf_r+0x1ec>
 8004596:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004598:	445a      	add	r2, fp
 800459a:	9209      	str	r2, [sp, #36]	@ 0x24
 800459c:	f89a 3000 	ldrb.w	r3, [sl]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 809f 	beq.w	80046e4 <_vfiprintf_r+0x1ec>
 80045a6:	2300      	movs	r3, #0
 80045a8:	f04f 32ff 	mov.w	r2, #4294967295
 80045ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045b0:	f10a 0a01 	add.w	sl, sl, #1
 80045b4:	9304      	str	r3, [sp, #16]
 80045b6:	9307      	str	r3, [sp, #28]
 80045b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80045bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80045be:	4654      	mov	r4, sl
 80045c0:	2205      	movs	r2, #5
 80045c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045c6:	4853      	ldr	r0, [pc, #332]	@ (8004714 <_vfiprintf_r+0x21c>)
 80045c8:	f7fb fe2a 	bl	8000220 <memchr>
 80045cc:	9a04      	ldr	r2, [sp, #16]
 80045ce:	b9d8      	cbnz	r0, 8004608 <_vfiprintf_r+0x110>
 80045d0:	06d1      	lsls	r1, r2, #27
 80045d2:	bf44      	itt	mi
 80045d4:	2320      	movmi	r3, #32
 80045d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045da:	0713      	lsls	r3, r2, #28
 80045dc:	bf44      	itt	mi
 80045de:	232b      	movmi	r3, #43	@ 0x2b
 80045e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045e4:	f89a 3000 	ldrb.w	r3, [sl]
 80045e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80045ea:	d015      	beq.n	8004618 <_vfiprintf_r+0x120>
 80045ec:	9a07      	ldr	r2, [sp, #28]
 80045ee:	4654      	mov	r4, sl
 80045f0:	2000      	movs	r0, #0
 80045f2:	f04f 0c0a 	mov.w	ip, #10
 80045f6:	4621      	mov	r1, r4
 80045f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045fc:	3b30      	subs	r3, #48	@ 0x30
 80045fe:	2b09      	cmp	r3, #9
 8004600:	d94b      	bls.n	800469a <_vfiprintf_r+0x1a2>
 8004602:	b1b0      	cbz	r0, 8004632 <_vfiprintf_r+0x13a>
 8004604:	9207      	str	r2, [sp, #28]
 8004606:	e014      	b.n	8004632 <_vfiprintf_r+0x13a>
 8004608:	eba0 0308 	sub.w	r3, r0, r8
 800460c:	fa09 f303 	lsl.w	r3, r9, r3
 8004610:	4313      	orrs	r3, r2
 8004612:	9304      	str	r3, [sp, #16]
 8004614:	46a2      	mov	sl, r4
 8004616:	e7d2      	b.n	80045be <_vfiprintf_r+0xc6>
 8004618:	9b03      	ldr	r3, [sp, #12]
 800461a:	1d19      	adds	r1, r3, #4
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	9103      	str	r1, [sp, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	bfbb      	ittet	lt
 8004624:	425b      	neglt	r3, r3
 8004626:	f042 0202 	orrlt.w	r2, r2, #2
 800462a:	9307      	strge	r3, [sp, #28]
 800462c:	9307      	strlt	r3, [sp, #28]
 800462e:	bfb8      	it	lt
 8004630:	9204      	strlt	r2, [sp, #16]
 8004632:	7823      	ldrb	r3, [r4, #0]
 8004634:	2b2e      	cmp	r3, #46	@ 0x2e
 8004636:	d10a      	bne.n	800464e <_vfiprintf_r+0x156>
 8004638:	7863      	ldrb	r3, [r4, #1]
 800463a:	2b2a      	cmp	r3, #42	@ 0x2a
 800463c:	d132      	bne.n	80046a4 <_vfiprintf_r+0x1ac>
 800463e:	9b03      	ldr	r3, [sp, #12]
 8004640:	1d1a      	adds	r2, r3, #4
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	9203      	str	r2, [sp, #12]
 8004646:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800464a:	3402      	adds	r4, #2
 800464c:	9305      	str	r3, [sp, #20]
 800464e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004724 <_vfiprintf_r+0x22c>
 8004652:	7821      	ldrb	r1, [r4, #0]
 8004654:	2203      	movs	r2, #3
 8004656:	4650      	mov	r0, sl
 8004658:	f7fb fde2 	bl	8000220 <memchr>
 800465c:	b138      	cbz	r0, 800466e <_vfiprintf_r+0x176>
 800465e:	9b04      	ldr	r3, [sp, #16]
 8004660:	eba0 000a 	sub.w	r0, r0, sl
 8004664:	2240      	movs	r2, #64	@ 0x40
 8004666:	4082      	lsls	r2, r0
 8004668:	4313      	orrs	r3, r2
 800466a:	3401      	adds	r4, #1
 800466c:	9304      	str	r3, [sp, #16]
 800466e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004672:	4829      	ldr	r0, [pc, #164]	@ (8004718 <_vfiprintf_r+0x220>)
 8004674:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004678:	2206      	movs	r2, #6
 800467a:	f7fb fdd1 	bl	8000220 <memchr>
 800467e:	2800      	cmp	r0, #0
 8004680:	d03f      	beq.n	8004702 <_vfiprintf_r+0x20a>
 8004682:	4b26      	ldr	r3, [pc, #152]	@ (800471c <_vfiprintf_r+0x224>)
 8004684:	bb1b      	cbnz	r3, 80046ce <_vfiprintf_r+0x1d6>
 8004686:	9b03      	ldr	r3, [sp, #12]
 8004688:	3307      	adds	r3, #7
 800468a:	f023 0307 	bic.w	r3, r3, #7
 800468e:	3308      	adds	r3, #8
 8004690:	9303      	str	r3, [sp, #12]
 8004692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004694:	443b      	add	r3, r7
 8004696:	9309      	str	r3, [sp, #36]	@ 0x24
 8004698:	e76a      	b.n	8004570 <_vfiprintf_r+0x78>
 800469a:	fb0c 3202 	mla	r2, ip, r2, r3
 800469e:	460c      	mov	r4, r1
 80046a0:	2001      	movs	r0, #1
 80046a2:	e7a8      	b.n	80045f6 <_vfiprintf_r+0xfe>
 80046a4:	2300      	movs	r3, #0
 80046a6:	3401      	adds	r4, #1
 80046a8:	9305      	str	r3, [sp, #20]
 80046aa:	4619      	mov	r1, r3
 80046ac:	f04f 0c0a 	mov.w	ip, #10
 80046b0:	4620      	mov	r0, r4
 80046b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046b6:	3a30      	subs	r2, #48	@ 0x30
 80046b8:	2a09      	cmp	r2, #9
 80046ba:	d903      	bls.n	80046c4 <_vfiprintf_r+0x1cc>
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0c6      	beq.n	800464e <_vfiprintf_r+0x156>
 80046c0:	9105      	str	r1, [sp, #20]
 80046c2:	e7c4      	b.n	800464e <_vfiprintf_r+0x156>
 80046c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80046c8:	4604      	mov	r4, r0
 80046ca:	2301      	movs	r3, #1
 80046cc:	e7f0      	b.n	80046b0 <_vfiprintf_r+0x1b8>
 80046ce:	ab03      	add	r3, sp, #12
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	462a      	mov	r2, r5
 80046d4:	4b12      	ldr	r3, [pc, #72]	@ (8004720 <_vfiprintf_r+0x228>)
 80046d6:	a904      	add	r1, sp, #16
 80046d8:	4630      	mov	r0, r6
 80046da:	f3af 8000 	nop.w
 80046de:	4607      	mov	r7, r0
 80046e0:	1c78      	adds	r0, r7, #1
 80046e2:	d1d6      	bne.n	8004692 <_vfiprintf_r+0x19a>
 80046e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046e6:	07d9      	lsls	r1, r3, #31
 80046e8:	d405      	bmi.n	80046f6 <_vfiprintf_r+0x1fe>
 80046ea:	89ab      	ldrh	r3, [r5, #12]
 80046ec:	059a      	lsls	r2, r3, #22
 80046ee:	d402      	bmi.n	80046f6 <_vfiprintf_r+0x1fe>
 80046f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046f2:	f7ff fddd 	bl	80042b0 <__retarget_lock_release_recursive>
 80046f6:	89ab      	ldrh	r3, [r5, #12]
 80046f8:	065b      	lsls	r3, r3, #25
 80046fa:	f53f af1f 	bmi.w	800453c <_vfiprintf_r+0x44>
 80046fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004700:	e71e      	b.n	8004540 <_vfiprintf_r+0x48>
 8004702:	ab03      	add	r3, sp, #12
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	462a      	mov	r2, r5
 8004708:	4b05      	ldr	r3, [pc, #20]	@ (8004720 <_vfiprintf_r+0x228>)
 800470a:	a904      	add	r1, sp, #16
 800470c:	4630      	mov	r0, r6
 800470e:	f000 f879 	bl	8004804 <_printf_i>
 8004712:	e7e4      	b.n	80046de <_vfiprintf_r+0x1e6>
 8004714:	08004ec8 	.word	0x08004ec8
 8004718:	08004ed2 	.word	0x08004ed2
 800471c:	00000000 	.word	0x00000000
 8004720:	080044d3 	.word	0x080044d3
 8004724:	08004ece 	.word	0x08004ece

08004728 <_printf_common>:
 8004728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800472c:	4616      	mov	r6, r2
 800472e:	4698      	mov	r8, r3
 8004730:	688a      	ldr	r2, [r1, #8]
 8004732:	690b      	ldr	r3, [r1, #16]
 8004734:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004738:	4293      	cmp	r3, r2
 800473a:	bfb8      	it	lt
 800473c:	4613      	movlt	r3, r2
 800473e:	6033      	str	r3, [r6, #0]
 8004740:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004744:	4607      	mov	r7, r0
 8004746:	460c      	mov	r4, r1
 8004748:	b10a      	cbz	r2, 800474e <_printf_common+0x26>
 800474a:	3301      	adds	r3, #1
 800474c:	6033      	str	r3, [r6, #0]
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	0699      	lsls	r1, r3, #26
 8004752:	bf42      	ittt	mi
 8004754:	6833      	ldrmi	r3, [r6, #0]
 8004756:	3302      	addmi	r3, #2
 8004758:	6033      	strmi	r3, [r6, #0]
 800475a:	6825      	ldr	r5, [r4, #0]
 800475c:	f015 0506 	ands.w	r5, r5, #6
 8004760:	d106      	bne.n	8004770 <_printf_common+0x48>
 8004762:	f104 0a19 	add.w	sl, r4, #25
 8004766:	68e3      	ldr	r3, [r4, #12]
 8004768:	6832      	ldr	r2, [r6, #0]
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	42ab      	cmp	r3, r5
 800476e:	dc26      	bgt.n	80047be <_printf_common+0x96>
 8004770:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004774:	6822      	ldr	r2, [r4, #0]
 8004776:	3b00      	subs	r3, #0
 8004778:	bf18      	it	ne
 800477a:	2301      	movne	r3, #1
 800477c:	0692      	lsls	r2, r2, #26
 800477e:	d42b      	bmi.n	80047d8 <_printf_common+0xb0>
 8004780:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004784:	4641      	mov	r1, r8
 8004786:	4638      	mov	r0, r7
 8004788:	47c8      	blx	r9
 800478a:	3001      	adds	r0, #1
 800478c:	d01e      	beq.n	80047cc <_printf_common+0xa4>
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	6922      	ldr	r2, [r4, #16]
 8004792:	f003 0306 	and.w	r3, r3, #6
 8004796:	2b04      	cmp	r3, #4
 8004798:	bf02      	ittt	eq
 800479a:	68e5      	ldreq	r5, [r4, #12]
 800479c:	6833      	ldreq	r3, [r6, #0]
 800479e:	1aed      	subeq	r5, r5, r3
 80047a0:	68a3      	ldr	r3, [r4, #8]
 80047a2:	bf0c      	ite	eq
 80047a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047a8:	2500      	movne	r5, #0
 80047aa:	4293      	cmp	r3, r2
 80047ac:	bfc4      	itt	gt
 80047ae:	1a9b      	subgt	r3, r3, r2
 80047b0:	18ed      	addgt	r5, r5, r3
 80047b2:	2600      	movs	r6, #0
 80047b4:	341a      	adds	r4, #26
 80047b6:	42b5      	cmp	r5, r6
 80047b8:	d11a      	bne.n	80047f0 <_printf_common+0xc8>
 80047ba:	2000      	movs	r0, #0
 80047bc:	e008      	b.n	80047d0 <_printf_common+0xa8>
 80047be:	2301      	movs	r3, #1
 80047c0:	4652      	mov	r2, sl
 80047c2:	4641      	mov	r1, r8
 80047c4:	4638      	mov	r0, r7
 80047c6:	47c8      	blx	r9
 80047c8:	3001      	adds	r0, #1
 80047ca:	d103      	bne.n	80047d4 <_printf_common+0xac>
 80047cc:	f04f 30ff 	mov.w	r0, #4294967295
 80047d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d4:	3501      	adds	r5, #1
 80047d6:	e7c6      	b.n	8004766 <_printf_common+0x3e>
 80047d8:	18e1      	adds	r1, r4, r3
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	2030      	movs	r0, #48	@ 0x30
 80047de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047e2:	4422      	add	r2, r4
 80047e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80047ec:	3302      	adds	r3, #2
 80047ee:	e7c7      	b.n	8004780 <_printf_common+0x58>
 80047f0:	2301      	movs	r3, #1
 80047f2:	4622      	mov	r2, r4
 80047f4:	4641      	mov	r1, r8
 80047f6:	4638      	mov	r0, r7
 80047f8:	47c8      	blx	r9
 80047fa:	3001      	adds	r0, #1
 80047fc:	d0e6      	beq.n	80047cc <_printf_common+0xa4>
 80047fe:	3601      	adds	r6, #1
 8004800:	e7d9      	b.n	80047b6 <_printf_common+0x8e>
	...

08004804 <_printf_i>:
 8004804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004808:	7e0f      	ldrb	r7, [r1, #24]
 800480a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800480c:	2f78      	cmp	r7, #120	@ 0x78
 800480e:	4691      	mov	r9, r2
 8004810:	4680      	mov	r8, r0
 8004812:	460c      	mov	r4, r1
 8004814:	469a      	mov	sl, r3
 8004816:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800481a:	d807      	bhi.n	800482c <_printf_i+0x28>
 800481c:	2f62      	cmp	r7, #98	@ 0x62
 800481e:	d80a      	bhi.n	8004836 <_printf_i+0x32>
 8004820:	2f00      	cmp	r7, #0
 8004822:	f000 80d2 	beq.w	80049ca <_printf_i+0x1c6>
 8004826:	2f58      	cmp	r7, #88	@ 0x58
 8004828:	f000 80b9 	beq.w	800499e <_printf_i+0x19a>
 800482c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004830:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004834:	e03a      	b.n	80048ac <_printf_i+0xa8>
 8004836:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800483a:	2b15      	cmp	r3, #21
 800483c:	d8f6      	bhi.n	800482c <_printf_i+0x28>
 800483e:	a101      	add	r1, pc, #4	@ (adr r1, 8004844 <_printf_i+0x40>)
 8004840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004844:	0800489d 	.word	0x0800489d
 8004848:	080048b1 	.word	0x080048b1
 800484c:	0800482d 	.word	0x0800482d
 8004850:	0800482d 	.word	0x0800482d
 8004854:	0800482d 	.word	0x0800482d
 8004858:	0800482d 	.word	0x0800482d
 800485c:	080048b1 	.word	0x080048b1
 8004860:	0800482d 	.word	0x0800482d
 8004864:	0800482d 	.word	0x0800482d
 8004868:	0800482d 	.word	0x0800482d
 800486c:	0800482d 	.word	0x0800482d
 8004870:	080049b1 	.word	0x080049b1
 8004874:	080048db 	.word	0x080048db
 8004878:	0800496b 	.word	0x0800496b
 800487c:	0800482d 	.word	0x0800482d
 8004880:	0800482d 	.word	0x0800482d
 8004884:	080049d3 	.word	0x080049d3
 8004888:	0800482d 	.word	0x0800482d
 800488c:	080048db 	.word	0x080048db
 8004890:	0800482d 	.word	0x0800482d
 8004894:	0800482d 	.word	0x0800482d
 8004898:	08004973 	.word	0x08004973
 800489c:	6833      	ldr	r3, [r6, #0]
 800489e:	1d1a      	adds	r2, r3, #4
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6032      	str	r2, [r6, #0]
 80048a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80048ac:	2301      	movs	r3, #1
 80048ae:	e09d      	b.n	80049ec <_printf_i+0x1e8>
 80048b0:	6833      	ldr	r3, [r6, #0]
 80048b2:	6820      	ldr	r0, [r4, #0]
 80048b4:	1d19      	adds	r1, r3, #4
 80048b6:	6031      	str	r1, [r6, #0]
 80048b8:	0606      	lsls	r6, r0, #24
 80048ba:	d501      	bpl.n	80048c0 <_printf_i+0xbc>
 80048bc:	681d      	ldr	r5, [r3, #0]
 80048be:	e003      	b.n	80048c8 <_printf_i+0xc4>
 80048c0:	0645      	lsls	r5, r0, #25
 80048c2:	d5fb      	bpl.n	80048bc <_printf_i+0xb8>
 80048c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048c8:	2d00      	cmp	r5, #0
 80048ca:	da03      	bge.n	80048d4 <_printf_i+0xd0>
 80048cc:	232d      	movs	r3, #45	@ 0x2d
 80048ce:	426d      	negs	r5, r5
 80048d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048d4:	4859      	ldr	r0, [pc, #356]	@ (8004a3c <_printf_i+0x238>)
 80048d6:	230a      	movs	r3, #10
 80048d8:	e011      	b.n	80048fe <_printf_i+0xfa>
 80048da:	6821      	ldr	r1, [r4, #0]
 80048dc:	6833      	ldr	r3, [r6, #0]
 80048de:	0608      	lsls	r0, r1, #24
 80048e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80048e4:	d402      	bmi.n	80048ec <_printf_i+0xe8>
 80048e6:	0649      	lsls	r1, r1, #25
 80048e8:	bf48      	it	mi
 80048ea:	b2ad      	uxthmi	r5, r5
 80048ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80048ee:	4853      	ldr	r0, [pc, #332]	@ (8004a3c <_printf_i+0x238>)
 80048f0:	6033      	str	r3, [r6, #0]
 80048f2:	bf14      	ite	ne
 80048f4:	230a      	movne	r3, #10
 80048f6:	2308      	moveq	r3, #8
 80048f8:	2100      	movs	r1, #0
 80048fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80048fe:	6866      	ldr	r6, [r4, #4]
 8004900:	60a6      	str	r6, [r4, #8]
 8004902:	2e00      	cmp	r6, #0
 8004904:	bfa2      	ittt	ge
 8004906:	6821      	ldrge	r1, [r4, #0]
 8004908:	f021 0104 	bicge.w	r1, r1, #4
 800490c:	6021      	strge	r1, [r4, #0]
 800490e:	b90d      	cbnz	r5, 8004914 <_printf_i+0x110>
 8004910:	2e00      	cmp	r6, #0
 8004912:	d04b      	beq.n	80049ac <_printf_i+0x1a8>
 8004914:	4616      	mov	r6, r2
 8004916:	fbb5 f1f3 	udiv	r1, r5, r3
 800491a:	fb03 5711 	mls	r7, r3, r1, r5
 800491e:	5dc7      	ldrb	r7, [r0, r7]
 8004920:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004924:	462f      	mov	r7, r5
 8004926:	42bb      	cmp	r3, r7
 8004928:	460d      	mov	r5, r1
 800492a:	d9f4      	bls.n	8004916 <_printf_i+0x112>
 800492c:	2b08      	cmp	r3, #8
 800492e:	d10b      	bne.n	8004948 <_printf_i+0x144>
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	07df      	lsls	r7, r3, #31
 8004934:	d508      	bpl.n	8004948 <_printf_i+0x144>
 8004936:	6923      	ldr	r3, [r4, #16]
 8004938:	6861      	ldr	r1, [r4, #4]
 800493a:	4299      	cmp	r1, r3
 800493c:	bfde      	ittt	le
 800493e:	2330      	movle	r3, #48	@ 0x30
 8004940:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004944:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004948:	1b92      	subs	r2, r2, r6
 800494a:	6122      	str	r2, [r4, #16]
 800494c:	f8cd a000 	str.w	sl, [sp]
 8004950:	464b      	mov	r3, r9
 8004952:	aa03      	add	r2, sp, #12
 8004954:	4621      	mov	r1, r4
 8004956:	4640      	mov	r0, r8
 8004958:	f7ff fee6 	bl	8004728 <_printf_common>
 800495c:	3001      	adds	r0, #1
 800495e:	d14a      	bne.n	80049f6 <_printf_i+0x1f2>
 8004960:	f04f 30ff 	mov.w	r0, #4294967295
 8004964:	b004      	add	sp, #16
 8004966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	f043 0320 	orr.w	r3, r3, #32
 8004970:	6023      	str	r3, [r4, #0]
 8004972:	4833      	ldr	r0, [pc, #204]	@ (8004a40 <_printf_i+0x23c>)
 8004974:	2778      	movs	r7, #120	@ 0x78
 8004976:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	6831      	ldr	r1, [r6, #0]
 800497e:	061f      	lsls	r7, r3, #24
 8004980:	f851 5b04 	ldr.w	r5, [r1], #4
 8004984:	d402      	bmi.n	800498c <_printf_i+0x188>
 8004986:	065f      	lsls	r7, r3, #25
 8004988:	bf48      	it	mi
 800498a:	b2ad      	uxthmi	r5, r5
 800498c:	6031      	str	r1, [r6, #0]
 800498e:	07d9      	lsls	r1, r3, #31
 8004990:	bf44      	itt	mi
 8004992:	f043 0320 	orrmi.w	r3, r3, #32
 8004996:	6023      	strmi	r3, [r4, #0]
 8004998:	b11d      	cbz	r5, 80049a2 <_printf_i+0x19e>
 800499a:	2310      	movs	r3, #16
 800499c:	e7ac      	b.n	80048f8 <_printf_i+0xf4>
 800499e:	4827      	ldr	r0, [pc, #156]	@ (8004a3c <_printf_i+0x238>)
 80049a0:	e7e9      	b.n	8004976 <_printf_i+0x172>
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	f023 0320 	bic.w	r3, r3, #32
 80049a8:	6023      	str	r3, [r4, #0]
 80049aa:	e7f6      	b.n	800499a <_printf_i+0x196>
 80049ac:	4616      	mov	r6, r2
 80049ae:	e7bd      	b.n	800492c <_printf_i+0x128>
 80049b0:	6833      	ldr	r3, [r6, #0]
 80049b2:	6825      	ldr	r5, [r4, #0]
 80049b4:	6961      	ldr	r1, [r4, #20]
 80049b6:	1d18      	adds	r0, r3, #4
 80049b8:	6030      	str	r0, [r6, #0]
 80049ba:	062e      	lsls	r6, r5, #24
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	d501      	bpl.n	80049c4 <_printf_i+0x1c0>
 80049c0:	6019      	str	r1, [r3, #0]
 80049c2:	e002      	b.n	80049ca <_printf_i+0x1c6>
 80049c4:	0668      	lsls	r0, r5, #25
 80049c6:	d5fb      	bpl.n	80049c0 <_printf_i+0x1bc>
 80049c8:	8019      	strh	r1, [r3, #0]
 80049ca:	2300      	movs	r3, #0
 80049cc:	6123      	str	r3, [r4, #16]
 80049ce:	4616      	mov	r6, r2
 80049d0:	e7bc      	b.n	800494c <_printf_i+0x148>
 80049d2:	6833      	ldr	r3, [r6, #0]
 80049d4:	1d1a      	adds	r2, r3, #4
 80049d6:	6032      	str	r2, [r6, #0]
 80049d8:	681e      	ldr	r6, [r3, #0]
 80049da:	6862      	ldr	r2, [r4, #4]
 80049dc:	2100      	movs	r1, #0
 80049de:	4630      	mov	r0, r6
 80049e0:	f7fb fc1e 	bl	8000220 <memchr>
 80049e4:	b108      	cbz	r0, 80049ea <_printf_i+0x1e6>
 80049e6:	1b80      	subs	r0, r0, r6
 80049e8:	6060      	str	r0, [r4, #4]
 80049ea:	6863      	ldr	r3, [r4, #4]
 80049ec:	6123      	str	r3, [r4, #16]
 80049ee:	2300      	movs	r3, #0
 80049f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049f4:	e7aa      	b.n	800494c <_printf_i+0x148>
 80049f6:	6923      	ldr	r3, [r4, #16]
 80049f8:	4632      	mov	r2, r6
 80049fa:	4649      	mov	r1, r9
 80049fc:	4640      	mov	r0, r8
 80049fe:	47d0      	blx	sl
 8004a00:	3001      	adds	r0, #1
 8004a02:	d0ad      	beq.n	8004960 <_printf_i+0x15c>
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	079b      	lsls	r3, r3, #30
 8004a08:	d413      	bmi.n	8004a32 <_printf_i+0x22e>
 8004a0a:	68e0      	ldr	r0, [r4, #12]
 8004a0c:	9b03      	ldr	r3, [sp, #12]
 8004a0e:	4298      	cmp	r0, r3
 8004a10:	bfb8      	it	lt
 8004a12:	4618      	movlt	r0, r3
 8004a14:	e7a6      	b.n	8004964 <_printf_i+0x160>
 8004a16:	2301      	movs	r3, #1
 8004a18:	4632      	mov	r2, r6
 8004a1a:	4649      	mov	r1, r9
 8004a1c:	4640      	mov	r0, r8
 8004a1e:	47d0      	blx	sl
 8004a20:	3001      	adds	r0, #1
 8004a22:	d09d      	beq.n	8004960 <_printf_i+0x15c>
 8004a24:	3501      	adds	r5, #1
 8004a26:	68e3      	ldr	r3, [r4, #12]
 8004a28:	9903      	ldr	r1, [sp, #12]
 8004a2a:	1a5b      	subs	r3, r3, r1
 8004a2c:	42ab      	cmp	r3, r5
 8004a2e:	dcf2      	bgt.n	8004a16 <_printf_i+0x212>
 8004a30:	e7eb      	b.n	8004a0a <_printf_i+0x206>
 8004a32:	2500      	movs	r5, #0
 8004a34:	f104 0619 	add.w	r6, r4, #25
 8004a38:	e7f5      	b.n	8004a26 <_printf_i+0x222>
 8004a3a:	bf00      	nop
 8004a3c:	08004ed9 	.word	0x08004ed9
 8004a40:	08004eea 	.word	0x08004eea

08004a44 <__sflush_r>:
 8004a44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a4c:	0716      	lsls	r6, r2, #28
 8004a4e:	4605      	mov	r5, r0
 8004a50:	460c      	mov	r4, r1
 8004a52:	d454      	bmi.n	8004afe <__sflush_r+0xba>
 8004a54:	684b      	ldr	r3, [r1, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	dc02      	bgt.n	8004a60 <__sflush_r+0x1c>
 8004a5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	dd48      	ble.n	8004af2 <__sflush_r+0xae>
 8004a60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a62:	2e00      	cmp	r6, #0
 8004a64:	d045      	beq.n	8004af2 <__sflush_r+0xae>
 8004a66:	2300      	movs	r3, #0
 8004a68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a6c:	682f      	ldr	r7, [r5, #0]
 8004a6e:	6a21      	ldr	r1, [r4, #32]
 8004a70:	602b      	str	r3, [r5, #0]
 8004a72:	d030      	beq.n	8004ad6 <__sflush_r+0x92>
 8004a74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a76:	89a3      	ldrh	r3, [r4, #12]
 8004a78:	0759      	lsls	r1, r3, #29
 8004a7a:	d505      	bpl.n	8004a88 <__sflush_r+0x44>
 8004a7c:	6863      	ldr	r3, [r4, #4]
 8004a7e:	1ad2      	subs	r2, r2, r3
 8004a80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a82:	b10b      	cbz	r3, 8004a88 <__sflush_r+0x44>
 8004a84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a86:	1ad2      	subs	r2, r2, r3
 8004a88:	2300      	movs	r3, #0
 8004a8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a8c:	6a21      	ldr	r1, [r4, #32]
 8004a8e:	4628      	mov	r0, r5
 8004a90:	47b0      	blx	r6
 8004a92:	1c43      	adds	r3, r0, #1
 8004a94:	89a3      	ldrh	r3, [r4, #12]
 8004a96:	d106      	bne.n	8004aa6 <__sflush_r+0x62>
 8004a98:	6829      	ldr	r1, [r5, #0]
 8004a9a:	291d      	cmp	r1, #29
 8004a9c:	d82b      	bhi.n	8004af6 <__sflush_r+0xb2>
 8004a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8004b48 <__sflush_r+0x104>)
 8004aa0:	410a      	asrs	r2, r1
 8004aa2:	07d6      	lsls	r6, r2, #31
 8004aa4:	d427      	bmi.n	8004af6 <__sflush_r+0xb2>
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	6062      	str	r2, [r4, #4]
 8004aaa:	04d9      	lsls	r1, r3, #19
 8004aac:	6922      	ldr	r2, [r4, #16]
 8004aae:	6022      	str	r2, [r4, #0]
 8004ab0:	d504      	bpl.n	8004abc <__sflush_r+0x78>
 8004ab2:	1c42      	adds	r2, r0, #1
 8004ab4:	d101      	bne.n	8004aba <__sflush_r+0x76>
 8004ab6:	682b      	ldr	r3, [r5, #0]
 8004ab8:	b903      	cbnz	r3, 8004abc <__sflush_r+0x78>
 8004aba:	6560      	str	r0, [r4, #84]	@ 0x54
 8004abc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004abe:	602f      	str	r7, [r5, #0]
 8004ac0:	b1b9      	cbz	r1, 8004af2 <__sflush_r+0xae>
 8004ac2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ac6:	4299      	cmp	r1, r3
 8004ac8:	d002      	beq.n	8004ad0 <__sflush_r+0x8c>
 8004aca:	4628      	mov	r0, r5
 8004acc:	f7ff fbf2 	bl	80042b4 <_free_r>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ad4:	e00d      	b.n	8004af2 <__sflush_r+0xae>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	4628      	mov	r0, r5
 8004ada:	47b0      	blx	r6
 8004adc:	4602      	mov	r2, r0
 8004ade:	1c50      	adds	r0, r2, #1
 8004ae0:	d1c9      	bne.n	8004a76 <__sflush_r+0x32>
 8004ae2:	682b      	ldr	r3, [r5, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0c6      	beq.n	8004a76 <__sflush_r+0x32>
 8004ae8:	2b1d      	cmp	r3, #29
 8004aea:	d001      	beq.n	8004af0 <__sflush_r+0xac>
 8004aec:	2b16      	cmp	r3, #22
 8004aee:	d11e      	bne.n	8004b2e <__sflush_r+0xea>
 8004af0:	602f      	str	r7, [r5, #0]
 8004af2:	2000      	movs	r0, #0
 8004af4:	e022      	b.n	8004b3c <__sflush_r+0xf8>
 8004af6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004afa:	b21b      	sxth	r3, r3
 8004afc:	e01b      	b.n	8004b36 <__sflush_r+0xf2>
 8004afe:	690f      	ldr	r7, [r1, #16]
 8004b00:	2f00      	cmp	r7, #0
 8004b02:	d0f6      	beq.n	8004af2 <__sflush_r+0xae>
 8004b04:	0793      	lsls	r3, r2, #30
 8004b06:	680e      	ldr	r6, [r1, #0]
 8004b08:	bf08      	it	eq
 8004b0a:	694b      	ldreq	r3, [r1, #20]
 8004b0c:	600f      	str	r7, [r1, #0]
 8004b0e:	bf18      	it	ne
 8004b10:	2300      	movne	r3, #0
 8004b12:	eba6 0807 	sub.w	r8, r6, r7
 8004b16:	608b      	str	r3, [r1, #8]
 8004b18:	f1b8 0f00 	cmp.w	r8, #0
 8004b1c:	dde9      	ble.n	8004af2 <__sflush_r+0xae>
 8004b1e:	6a21      	ldr	r1, [r4, #32]
 8004b20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004b22:	4643      	mov	r3, r8
 8004b24:	463a      	mov	r2, r7
 8004b26:	4628      	mov	r0, r5
 8004b28:	47b0      	blx	r6
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	dc08      	bgt.n	8004b40 <__sflush_r+0xfc>
 8004b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b36:	81a3      	strh	r3, [r4, #12]
 8004b38:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b40:	4407      	add	r7, r0
 8004b42:	eba8 0800 	sub.w	r8, r8, r0
 8004b46:	e7e7      	b.n	8004b18 <__sflush_r+0xd4>
 8004b48:	dfbffffe 	.word	0xdfbffffe

08004b4c <_fflush_r>:
 8004b4c:	b538      	push	{r3, r4, r5, lr}
 8004b4e:	690b      	ldr	r3, [r1, #16]
 8004b50:	4605      	mov	r5, r0
 8004b52:	460c      	mov	r4, r1
 8004b54:	b913      	cbnz	r3, 8004b5c <_fflush_r+0x10>
 8004b56:	2500      	movs	r5, #0
 8004b58:	4628      	mov	r0, r5
 8004b5a:	bd38      	pop	{r3, r4, r5, pc}
 8004b5c:	b118      	cbz	r0, 8004b66 <_fflush_r+0x1a>
 8004b5e:	6a03      	ldr	r3, [r0, #32]
 8004b60:	b90b      	cbnz	r3, 8004b66 <_fflush_r+0x1a>
 8004b62:	f7ff fa9f 	bl	80040a4 <__sinit>
 8004b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0f3      	beq.n	8004b56 <_fflush_r+0xa>
 8004b6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b70:	07d0      	lsls	r0, r2, #31
 8004b72:	d404      	bmi.n	8004b7e <_fflush_r+0x32>
 8004b74:	0599      	lsls	r1, r3, #22
 8004b76:	d402      	bmi.n	8004b7e <_fflush_r+0x32>
 8004b78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b7a:	f7ff fb98 	bl	80042ae <__retarget_lock_acquire_recursive>
 8004b7e:	4628      	mov	r0, r5
 8004b80:	4621      	mov	r1, r4
 8004b82:	f7ff ff5f 	bl	8004a44 <__sflush_r>
 8004b86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b88:	07da      	lsls	r2, r3, #31
 8004b8a:	4605      	mov	r5, r0
 8004b8c:	d4e4      	bmi.n	8004b58 <_fflush_r+0xc>
 8004b8e:	89a3      	ldrh	r3, [r4, #12]
 8004b90:	059b      	lsls	r3, r3, #22
 8004b92:	d4e1      	bmi.n	8004b58 <_fflush_r+0xc>
 8004b94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b96:	f7ff fb8b 	bl	80042b0 <__retarget_lock_release_recursive>
 8004b9a:	e7dd      	b.n	8004b58 <_fflush_r+0xc>

08004b9c <__swbuf_r>:
 8004b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9e:	460e      	mov	r6, r1
 8004ba0:	4614      	mov	r4, r2
 8004ba2:	4605      	mov	r5, r0
 8004ba4:	b118      	cbz	r0, 8004bae <__swbuf_r+0x12>
 8004ba6:	6a03      	ldr	r3, [r0, #32]
 8004ba8:	b90b      	cbnz	r3, 8004bae <__swbuf_r+0x12>
 8004baa:	f7ff fa7b 	bl	80040a4 <__sinit>
 8004bae:	69a3      	ldr	r3, [r4, #24]
 8004bb0:	60a3      	str	r3, [r4, #8]
 8004bb2:	89a3      	ldrh	r3, [r4, #12]
 8004bb4:	071a      	lsls	r2, r3, #28
 8004bb6:	d501      	bpl.n	8004bbc <__swbuf_r+0x20>
 8004bb8:	6923      	ldr	r3, [r4, #16]
 8004bba:	b943      	cbnz	r3, 8004bce <__swbuf_r+0x32>
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f000 f82a 	bl	8004c18 <__swsetup_r>
 8004bc4:	b118      	cbz	r0, 8004bce <__swbuf_r+0x32>
 8004bc6:	f04f 37ff 	mov.w	r7, #4294967295
 8004bca:	4638      	mov	r0, r7
 8004bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	6922      	ldr	r2, [r4, #16]
 8004bd2:	1a98      	subs	r0, r3, r2
 8004bd4:	6963      	ldr	r3, [r4, #20]
 8004bd6:	b2f6      	uxtb	r6, r6
 8004bd8:	4283      	cmp	r3, r0
 8004bda:	4637      	mov	r7, r6
 8004bdc:	dc05      	bgt.n	8004bea <__swbuf_r+0x4e>
 8004bde:	4621      	mov	r1, r4
 8004be0:	4628      	mov	r0, r5
 8004be2:	f7ff ffb3 	bl	8004b4c <_fflush_r>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	d1ed      	bne.n	8004bc6 <__swbuf_r+0x2a>
 8004bea:	68a3      	ldr	r3, [r4, #8]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	60a3      	str	r3, [r4, #8]
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	6022      	str	r2, [r4, #0]
 8004bf6:	701e      	strb	r6, [r3, #0]
 8004bf8:	6962      	ldr	r2, [r4, #20]
 8004bfa:	1c43      	adds	r3, r0, #1
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d004      	beq.n	8004c0a <__swbuf_r+0x6e>
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	07db      	lsls	r3, r3, #31
 8004c04:	d5e1      	bpl.n	8004bca <__swbuf_r+0x2e>
 8004c06:	2e0a      	cmp	r6, #10
 8004c08:	d1df      	bne.n	8004bca <__swbuf_r+0x2e>
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	f7ff ff9d 	bl	8004b4c <_fflush_r>
 8004c12:	2800      	cmp	r0, #0
 8004c14:	d0d9      	beq.n	8004bca <__swbuf_r+0x2e>
 8004c16:	e7d6      	b.n	8004bc6 <__swbuf_r+0x2a>

08004c18 <__swsetup_r>:
 8004c18:	b538      	push	{r3, r4, r5, lr}
 8004c1a:	4b29      	ldr	r3, [pc, #164]	@ (8004cc0 <__swsetup_r+0xa8>)
 8004c1c:	4605      	mov	r5, r0
 8004c1e:	6818      	ldr	r0, [r3, #0]
 8004c20:	460c      	mov	r4, r1
 8004c22:	b118      	cbz	r0, 8004c2c <__swsetup_r+0x14>
 8004c24:	6a03      	ldr	r3, [r0, #32]
 8004c26:	b90b      	cbnz	r3, 8004c2c <__swsetup_r+0x14>
 8004c28:	f7ff fa3c 	bl	80040a4 <__sinit>
 8004c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c30:	0719      	lsls	r1, r3, #28
 8004c32:	d422      	bmi.n	8004c7a <__swsetup_r+0x62>
 8004c34:	06da      	lsls	r2, r3, #27
 8004c36:	d407      	bmi.n	8004c48 <__swsetup_r+0x30>
 8004c38:	2209      	movs	r2, #9
 8004c3a:	602a      	str	r2, [r5, #0]
 8004c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c40:	81a3      	strh	r3, [r4, #12]
 8004c42:	f04f 30ff 	mov.w	r0, #4294967295
 8004c46:	e033      	b.n	8004cb0 <__swsetup_r+0x98>
 8004c48:	0758      	lsls	r0, r3, #29
 8004c4a:	d512      	bpl.n	8004c72 <__swsetup_r+0x5a>
 8004c4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c4e:	b141      	cbz	r1, 8004c62 <__swsetup_r+0x4a>
 8004c50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c54:	4299      	cmp	r1, r3
 8004c56:	d002      	beq.n	8004c5e <__swsetup_r+0x46>
 8004c58:	4628      	mov	r0, r5
 8004c5a:	f7ff fb2b 	bl	80042b4 <_free_r>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c62:	89a3      	ldrh	r3, [r4, #12]
 8004c64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c68:	81a3      	strh	r3, [r4, #12]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	6063      	str	r3, [r4, #4]
 8004c6e:	6923      	ldr	r3, [r4, #16]
 8004c70:	6023      	str	r3, [r4, #0]
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	f043 0308 	orr.w	r3, r3, #8
 8004c78:	81a3      	strh	r3, [r4, #12]
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	b94b      	cbnz	r3, 8004c92 <__swsetup_r+0x7a>
 8004c7e:	89a3      	ldrh	r3, [r4, #12]
 8004c80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c88:	d003      	beq.n	8004c92 <__swsetup_r+0x7a>
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f000 f84f 	bl	8004d30 <__smakebuf_r>
 8004c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c96:	f013 0201 	ands.w	r2, r3, #1
 8004c9a:	d00a      	beq.n	8004cb2 <__swsetup_r+0x9a>
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	60a2      	str	r2, [r4, #8]
 8004ca0:	6962      	ldr	r2, [r4, #20]
 8004ca2:	4252      	negs	r2, r2
 8004ca4:	61a2      	str	r2, [r4, #24]
 8004ca6:	6922      	ldr	r2, [r4, #16]
 8004ca8:	b942      	cbnz	r2, 8004cbc <__swsetup_r+0xa4>
 8004caa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004cae:	d1c5      	bne.n	8004c3c <__swsetup_r+0x24>
 8004cb0:	bd38      	pop	{r3, r4, r5, pc}
 8004cb2:	0799      	lsls	r1, r3, #30
 8004cb4:	bf58      	it	pl
 8004cb6:	6962      	ldrpl	r2, [r4, #20]
 8004cb8:	60a2      	str	r2, [r4, #8]
 8004cba:	e7f4      	b.n	8004ca6 <__swsetup_r+0x8e>
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	e7f7      	b.n	8004cb0 <__swsetup_r+0x98>
 8004cc0:	2000002c 	.word	0x2000002c

08004cc4 <_sbrk_r>:
 8004cc4:	b538      	push	{r3, r4, r5, lr}
 8004cc6:	4d06      	ldr	r5, [pc, #24]	@ (8004ce0 <_sbrk_r+0x1c>)
 8004cc8:	2300      	movs	r3, #0
 8004cca:	4604      	mov	r4, r0
 8004ccc:	4608      	mov	r0, r1
 8004cce:	602b      	str	r3, [r5, #0]
 8004cd0:	f7fb ffb6 	bl	8000c40 <_sbrk>
 8004cd4:	1c43      	adds	r3, r0, #1
 8004cd6:	d102      	bne.n	8004cde <_sbrk_r+0x1a>
 8004cd8:	682b      	ldr	r3, [r5, #0]
 8004cda:	b103      	cbz	r3, 8004cde <_sbrk_r+0x1a>
 8004cdc:	6023      	str	r3, [r4, #0]
 8004cde:	bd38      	pop	{r3, r4, r5, pc}
 8004ce0:	200002e4 	.word	0x200002e4

08004ce4 <__swhatbuf_r>:
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cec:	2900      	cmp	r1, #0
 8004cee:	b096      	sub	sp, #88	@ 0x58
 8004cf0:	4615      	mov	r5, r2
 8004cf2:	461e      	mov	r6, r3
 8004cf4:	da0d      	bge.n	8004d12 <__swhatbuf_r+0x2e>
 8004cf6:	89a3      	ldrh	r3, [r4, #12]
 8004cf8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004cfc:	f04f 0100 	mov.w	r1, #0
 8004d00:	bf14      	ite	ne
 8004d02:	2340      	movne	r3, #64	@ 0x40
 8004d04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d08:	2000      	movs	r0, #0
 8004d0a:	6031      	str	r1, [r6, #0]
 8004d0c:	602b      	str	r3, [r5, #0]
 8004d0e:	b016      	add	sp, #88	@ 0x58
 8004d10:	bd70      	pop	{r4, r5, r6, pc}
 8004d12:	466a      	mov	r2, sp
 8004d14:	f000 f848 	bl	8004da8 <_fstat_r>
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	dbec      	blt.n	8004cf6 <__swhatbuf_r+0x12>
 8004d1c:	9901      	ldr	r1, [sp, #4]
 8004d1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d26:	4259      	negs	r1, r3
 8004d28:	4159      	adcs	r1, r3
 8004d2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d2e:	e7eb      	b.n	8004d08 <__swhatbuf_r+0x24>

08004d30 <__smakebuf_r>:
 8004d30:	898b      	ldrh	r3, [r1, #12]
 8004d32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d34:	079d      	lsls	r5, r3, #30
 8004d36:	4606      	mov	r6, r0
 8004d38:	460c      	mov	r4, r1
 8004d3a:	d507      	bpl.n	8004d4c <__smakebuf_r+0x1c>
 8004d3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	6123      	str	r3, [r4, #16]
 8004d44:	2301      	movs	r3, #1
 8004d46:	6163      	str	r3, [r4, #20]
 8004d48:	b003      	add	sp, #12
 8004d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d4c:	ab01      	add	r3, sp, #4
 8004d4e:	466a      	mov	r2, sp
 8004d50:	f7ff ffc8 	bl	8004ce4 <__swhatbuf_r>
 8004d54:	9f00      	ldr	r7, [sp, #0]
 8004d56:	4605      	mov	r5, r0
 8004d58:	4639      	mov	r1, r7
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	f7ff fb16 	bl	800438c <_malloc_r>
 8004d60:	b948      	cbnz	r0, 8004d76 <__smakebuf_r+0x46>
 8004d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d66:	059a      	lsls	r2, r3, #22
 8004d68:	d4ee      	bmi.n	8004d48 <__smakebuf_r+0x18>
 8004d6a:	f023 0303 	bic.w	r3, r3, #3
 8004d6e:	f043 0302 	orr.w	r3, r3, #2
 8004d72:	81a3      	strh	r3, [r4, #12]
 8004d74:	e7e2      	b.n	8004d3c <__smakebuf_r+0xc>
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	6020      	str	r0, [r4, #0]
 8004d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d7e:	81a3      	strh	r3, [r4, #12]
 8004d80:	9b01      	ldr	r3, [sp, #4]
 8004d82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004d86:	b15b      	cbz	r3, 8004da0 <__smakebuf_r+0x70>
 8004d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	f000 f81d 	bl	8004dcc <_isatty_r>
 8004d92:	b128      	cbz	r0, 8004da0 <__smakebuf_r+0x70>
 8004d94:	89a3      	ldrh	r3, [r4, #12]
 8004d96:	f023 0303 	bic.w	r3, r3, #3
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	81a3      	strh	r3, [r4, #12]
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	431d      	orrs	r5, r3
 8004da4:	81a5      	strh	r5, [r4, #12]
 8004da6:	e7cf      	b.n	8004d48 <__smakebuf_r+0x18>

08004da8 <_fstat_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	4d07      	ldr	r5, [pc, #28]	@ (8004dc8 <_fstat_r+0x20>)
 8004dac:	2300      	movs	r3, #0
 8004dae:	4604      	mov	r4, r0
 8004db0:	4608      	mov	r0, r1
 8004db2:	4611      	mov	r1, r2
 8004db4:	602b      	str	r3, [r5, #0]
 8004db6:	f7fb ff1a 	bl	8000bee <_fstat>
 8004dba:	1c43      	adds	r3, r0, #1
 8004dbc:	d102      	bne.n	8004dc4 <_fstat_r+0x1c>
 8004dbe:	682b      	ldr	r3, [r5, #0]
 8004dc0:	b103      	cbz	r3, 8004dc4 <_fstat_r+0x1c>
 8004dc2:	6023      	str	r3, [r4, #0]
 8004dc4:	bd38      	pop	{r3, r4, r5, pc}
 8004dc6:	bf00      	nop
 8004dc8:	200002e4 	.word	0x200002e4

08004dcc <_isatty_r>:
 8004dcc:	b538      	push	{r3, r4, r5, lr}
 8004dce:	4d06      	ldr	r5, [pc, #24]	@ (8004de8 <_isatty_r+0x1c>)
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	4608      	mov	r0, r1
 8004dd6:	602b      	str	r3, [r5, #0]
 8004dd8:	f7fb ff19 	bl	8000c0e <_isatty>
 8004ddc:	1c43      	adds	r3, r0, #1
 8004dde:	d102      	bne.n	8004de6 <_isatty_r+0x1a>
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	b103      	cbz	r3, 8004de6 <_isatty_r+0x1a>
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	bd38      	pop	{r3, r4, r5, pc}
 8004de8:	200002e4 	.word	0x200002e4

08004dec <_init>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	bf00      	nop
 8004df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df2:	bc08      	pop	{r3}
 8004df4:	469e      	mov	lr, r3
 8004df6:	4770      	bx	lr

08004df8 <_fini>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr
