
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000854c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  0800872c  0800872c  0000972c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b28  08008b28  0000a090  2**0
                  CONTENTS
  4 .ARM          00000008  08008b28  08008b28  00009b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b30  08008b30  0000a090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b30  08008b30  00009b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b34  08008b34  00009b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08008b38  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  20000090  08008bc8  0000a090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  08008bc8  0000a4c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019aba  00000000  00000000  0000a0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035f9  00000000  00000000  00023b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  00027178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001131  00000000  00000000  00028788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021553  00000000  00000000  000298b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c826  00000000  00000000  0004ae0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdede  00000000  00000000  00067632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135510  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064dc  00000000  00000000  00135554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0013ba30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000090 	.word	0x20000090
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008714 	.word	0x08008714

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000094 	.word	0x20000094
 800021c:	08008714 	.word	0x08008714

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	@ 0x28
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	4b25      	ldr	r3, [pc, #148]	@ (800065c <MX_GPIO_Init+0xac>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ca:	4a24      	ldr	r2, [pc, #144]	@ (800065c <MX_GPIO_Init+0xac>)
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d2:	4b22      	ldr	r3, [pc, #136]	@ (800065c <MX_GPIO_Init+0xac>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d6:	f003 0304 	and.w	r3, r3, #4
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005de:	4b1f      	ldr	r3, [pc, #124]	@ (800065c <MX_GPIO_Init+0xac>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e2:	4a1e      	ldr	r2, [pc, #120]	@ (800065c <MX_GPIO_Init+0xac>)
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ea:	4b1c      	ldr	r3, [pc, #112]	@ (800065c <MX_GPIO_Init+0xac>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ee:	f003 0320 	and.w	r3, r3, #32
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b19      	ldr	r3, [pc, #100]	@ (800065c <MX_GPIO_Init+0xac>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fa:	4a18      	ldr	r2, [pc, #96]	@ (800065c <MX_GPIO_Init+0xac>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000602:	4b16      	ldr	r3, [pc, #88]	@ (800065c <MX_GPIO_Init+0xac>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	4b13      	ldr	r3, [pc, #76]	@ (800065c <MX_GPIO_Init+0xac>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000612:	4a12      	ldr	r2, [pc, #72]	@ (800065c <MX_GPIO_Init+0xac>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800061a:	4b10      	ldr	r3, [pc, #64]	@ (800065c <MX_GPIO_Init+0xac>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : encoder_Pin */
  GPIO_InitStruct.Pin = encoder_Pin;
 8000626:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800062a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800062c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000632:	2301      	movs	r3, #1
 8000634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(encoder_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4619      	mov	r1, r3
 800063c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000640:	f001 fe9e 	bl	8002380 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000644:	2200      	movs	r2, #0
 8000646:	2100      	movs	r1, #0
 8000648:	2017      	movs	r0, #23
 800064a:	f001 fd44 	bl	80020d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800064e:	2017      	movs	r0, #23
 8000650:	f001 fd5b 	bl	800210a <HAL_NVIC_EnableIRQ>

}
 8000654:	bf00      	nop
 8000656:	3728      	adds	r7, #40	@ 0x28
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40021000 	.word	0x40021000

08000660 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000664:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <MX_I2C1_Init+0x74>)
 8000666:	4a1c      	ldr	r2, [pc, #112]	@ (80006d8 <MX_I2C1_Init+0x78>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 800066a:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <MX_I2C1_Init+0x74>)
 800066c:	4a1b      	ldr	r2, [pc, #108]	@ (80006dc <MX_I2C1_Init+0x7c>)
 800066e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000670:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000676:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <MX_I2C1_Init+0x74>)
 8000678:	2201      	movs	r2, #1
 800067a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800067c:	4b15      	ldr	r3, [pc, #84]	@ (80006d4 <MX_I2C1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000682:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_I2C1_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000688:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <MX_I2C1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_I2C1_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <MX_I2C1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069a:	480e      	ldr	r0, [pc, #56]	@ (80006d4 <MX_I2C1_Init+0x74>)
 800069c:	f002 f83c 	bl	8002718 <HAL_I2C_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006a6:	f000 fd91 	bl	80011cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006aa:	2100      	movs	r1, #0
 80006ac:	4809      	ldr	r0, [pc, #36]	@ (80006d4 <MX_I2C1_Init+0x74>)
 80006ae:	f002 fdbf 	bl	8003230 <HAL_I2CEx_ConfigAnalogFilter>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006b8:	f000 fd88 	bl	80011cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006bc:	2100      	movs	r1, #0
 80006be:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <MX_I2C1_Init+0x74>)
 80006c0:	f002 fe01 	bl	80032c6 <HAL_I2CEx_ConfigDigitalFilter>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ca:	f000 fd7f 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200000ac 	.word	0x200000ac
 80006d8:	40005400 	.word	0x40005400
 80006dc:	40b285c2 	.word	0x40b285c2

080006e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b09a      	sub	sp, #104	@ 0x68
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	2244      	movs	r2, #68	@ 0x44
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f007 f9dc 	bl	8007abe <memset>
  if(i2cHandle->Instance==I2C1)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a1f      	ldr	r2, [pc, #124]	@ (8000788 <HAL_I2C_MspInit+0xa8>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d136      	bne.n	800077e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000710:	2340      	movs	r3, #64	@ 0x40
 8000712:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000714:	2300      	movs	r3, #0
 8000716:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	4618      	mov	r0, r3
 800071e:	f003 fc01 	bl	8003f24 <HAL_RCCEx_PeriphCLKConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000728:	f000 fd50 	bl	80011cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072c:	4b17      	ldr	r3, [pc, #92]	@ (800078c <HAL_I2C_MspInit+0xac>)
 800072e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000730:	4a16      	ldr	r2, [pc, #88]	@ (800078c <HAL_I2C_MspInit+0xac>)
 8000732:	f043 0302 	orr.w	r3, r3, #2
 8000736:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000738:	4b14      	ldr	r3, [pc, #80]	@ (800078c <HAL_I2C_MspInit+0xac>)
 800073a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073c:	f003 0302 	and.w	r3, r3, #2
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000744:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000748:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800074a:	2312      	movs	r3, #18
 800074c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000756:	2304      	movs	r3, #4
 8000758:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800075e:	4619      	mov	r1, r3
 8000760:	480b      	ldr	r0, [pc, #44]	@ (8000790 <HAL_I2C_MspInit+0xb0>)
 8000762:	f001 fe0d 	bl	8002380 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <HAL_I2C_MspInit+0xac>)
 8000768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800076a:	4a08      	ldr	r2, [pc, #32]	@ (800078c <HAL_I2C_MspInit+0xac>)
 800076c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000770:	6593      	str	r3, [r2, #88]	@ 0x58
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <HAL_I2C_MspInit+0xac>)
 8000774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000776:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800077e:	bf00      	nop
 8000780:	3768      	adds	r7, #104	@ 0x68
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40005400 	.word	0x40005400
 800078c:	40021000 	.word	0x40021000
 8000790:	48000400 	.word	0x48000400

08000794 <imu_write_register>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Write to an IMU register
void imu_write_register(uint8_t reg, uint8_t value) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af04      	add	r7, sp, #16
 800079a:	4603      	mov	r3, r0
 800079c:	460a      	mov	r2, r1
 800079e:	71fb      	strb	r3, [r7, #7]
 80007a0:	4613      	mov	r3, r2
 80007a2:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 1000);
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ac:	9302      	str	r3, [sp, #8]
 80007ae:	2301      	movs	r3, #1
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	1dbb      	adds	r3, r7, #6
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	21d4      	movs	r1, #212	@ 0xd4
 80007ba:	4803      	ldr	r0, [pc, #12]	@ (80007c8 <imu_write_register+0x34>)
 80007bc:	f002 f848 	bl	8002850 <HAL_I2C_Mem_Write>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200000ac 	.word	0x200000ac

080007cc <imu_read_registers>:

// Read from IMU registers
void imu_read_registers(uint8_t reg, uint8_t *data, uint16_t len) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af04      	add	r7, sp, #16
 80007d2:	4603      	mov	r3, r0
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	71fb      	strb	r3, [r7, #7]
 80007d8:	4613      	mov	r3, r2
 80007da:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, len, 1000);
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	b29a      	uxth	r2, r3
 80007e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007e4:	9302      	str	r3, [sp, #8]
 80007e6:	88bb      	ldrh	r3, [r7, #4]
 80007e8:	9301      	str	r3, [sp, #4]
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	2301      	movs	r3, #1
 80007f0:	21d4      	movs	r1, #212	@ 0xd4
 80007f2:	4803      	ldr	r0, [pc, #12]	@ (8000800 <imu_read_registers+0x34>)
 80007f4:	f002 f940 	bl	8002a78 <HAL_I2C_Mem_Read>
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200000ac 	.word	0x200000ac

08000804 <imu_init>:

// Initialize the IMU
void imu_init(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
    uint8_t whoami;
    imu_read_registers(0x0F, &whoami, 1);  // Read WHO_AM_I register
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	2201      	movs	r2, #1
 800080e:	4619      	mov	r1, r3
 8000810:	200f      	movs	r0, #15
 8000812:	f7ff ffdb 	bl	80007cc <imu_read_registers>
    if (whoami != WHO_AM_I_VALUE) {
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b6c      	cmp	r3, #108	@ 0x6c
 800081a:	d006      	beq.n	800082a <imu_init+0x26>
        printf("IMU not found: 0x%02X\n\r", whoami);
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	4619      	mov	r1, r3
 8000820:	480a      	ldr	r0, [pc, #40]	@ (800084c <imu_init+0x48>)
 8000822:	f007 f8f7 	bl	8007a14 <iprintf>
        while (1);  // Hang if IMU not detected
 8000826:	bf00      	nop
 8000828:	e7fd      	b.n	8000826 <imu_init+0x22>
    }
    imu_write_register(0x12, 0x40);  // CTRL3_C: Enable Block Data Update (BDU)
 800082a:	2140      	movs	r1, #64	@ 0x40
 800082c:	2012      	movs	r0, #18
 800082e:	f7ff ffb1 	bl	8000794 <imu_write_register>
    imu_write_register(0x10, 0x64);  // CTRL1_XL: 104 Hz, ±8g (was 0x60 for ±2g)
 8000832:	2164      	movs	r1, #100	@ 0x64
 8000834:	2010      	movs	r0, #16
 8000836:	f7ff ffad 	bl	8000794 <imu_write_register>
    imu_write_register(0x11, 0x64);  // CTRL2_G: 104 Hz, ±500 dps (was 0x6C for ±2000 dps)
 800083a:	2164      	movs	r1, #100	@ 0x64
 800083c:	2011      	movs	r0, #17
 800083e:	f7ff ffa9 	bl	8000794 <imu_write_register>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	0800872c 	.word	0x0800872c

08000850 <imu_read_accel>:

// Read accelerometer data
void imu_read_accel(imu_data_t *accel) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
    uint8_t buffer[6];
    imu_read_registers(0x28, buffer, 6);  // OUTX_L_XL to OUTZ_H_XL
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	2206      	movs	r2, #6
 800085e:	4619      	mov	r1, r3
 8000860:	2028      	movs	r0, #40	@ 0x28
 8000862:	f7ff ffb3 	bl	80007cc <imu_read_registers>
    accel->x = (int16_t)(buffer[0] | (buffer[1] << 8));
 8000866:	7a3b      	ldrb	r3, [r7, #8]
 8000868:	b21a      	sxth	r2, r3
 800086a:	7a7b      	ldrb	r3, [r7, #9]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21b      	sxth	r3, r3
 8000870:	4313      	orrs	r3, r2
 8000872:	b21a      	sxth	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	801a      	strh	r2, [r3, #0]
    accel->y = (int16_t)(buffer[2] | (buffer[3] << 8));
 8000878:	7abb      	ldrb	r3, [r7, #10]
 800087a:	b21a      	sxth	r2, r3
 800087c:	7afb      	ldrb	r3, [r7, #11]
 800087e:	021b      	lsls	r3, r3, #8
 8000880:	b21b      	sxth	r3, r3
 8000882:	4313      	orrs	r3, r2
 8000884:	b21a      	sxth	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	805a      	strh	r2, [r3, #2]
    accel->z = (int16_t)(buffer[4] | (buffer[5] << 8));
 800088a:	7b3b      	ldrb	r3, [r7, #12]
 800088c:	b21a      	sxth	r2, r3
 800088e:	7b7b      	ldrb	r3, [r7, #13]
 8000890:	021b      	lsls	r3, r3, #8
 8000892:	b21b      	sxth	r3, r3
 8000894:	4313      	orrs	r3, r2
 8000896:	b21a      	sxth	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	809a      	strh	r2, [r3, #4]
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <imu_read_gyro>:

// Read gyroscope data
void imu_read_gyro(imu_data_t *gyro) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
    uint8_t buffer[6];
    imu_read_registers(0x22, buffer, 6);  // OUTX_L_G to OUTZ_H_G
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	2206      	movs	r2, #6
 80008b2:	4619      	mov	r1, r3
 80008b4:	2022      	movs	r0, #34	@ 0x22
 80008b6:	f7ff ff89 	bl	80007cc <imu_read_registers>
    gyro->x = (int16_t)(buffer[0] | (buffer[1] << 8));
 80008ba:	7a3b      	ldrb	r3, [r7, #8]
 80008bc:	b21a      	sxth	r2, r3
 80008be:	7a7b      	ldrb	r3, [r7, #9]
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	b21b      	sxth	r3, r3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	b21a      	sxth	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	801a      	strh	r2, [r3, #0]
    gyro->y = (int16_t)(buffer[2] | (buffer[3] << 8));
 80008cc:	7abb      	ldrb	r3, [r7, #10]
 80008ce:	b21a      	sxth	r2, r3
 80008d0:	7afb      	ldrb	r3, [r7, #11]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	4313      	orrs	r3, r2
 80008d8:	b21a      	sxth	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	805a      	strh	r2, [r3, #2]
    gyro->z = (int16_t)(buffer[4] | (buffer[5] << 8));
 80008de:	7b3b      	ldrb	r3, [r7, #12]
 80008e0:	b21a      	sxth	r2, r3
 80008e2:	7b7b      	ldrb	r3, [r7, #13]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21b      	sxth	r3, r3
 80008e8:	4313      	orrs	r3, r2
 80008ea:	b21a      	sxth	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	809a      	strh	r2, [r3, #4]
}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <parseMessage>:
// UART parsing message
// there was a problem with first char so I change ptr++ to ptr += 2
// and Python code sends two [[ but here it sees only one
// weird but it works like that

void parseMessage(char* msg) {
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b08b      	sub	sp, #44	@ 0x2c
 80008fc:	af02      	add	r7, sp, #8
 80008fe:	6078      	str	r0, [r7, #4]
  if (!msg) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d103      	bne.n	800090e <parseMessage+0x16>
      printf("Error: Null message pointer\n\r");
 8000906:	4886      	ldr	r0, [pc, #536]	@ (8000b20 <parseMessage+0x228>)
 8000908:	f007 f884 	bl	8007a14 <iprintf>
      return;
 800090c:	e105      	b.n	8000b1a <parseMessage+0x222>
  }

  printf("Original message: %s\n\r", msg);  // Debug original message
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	4884      	ldr	r0, [pc, #528]	@ (8000b24 <parseMessage+0x22c>)
 8000912:	f007 f87f 	bl	8007a14 <iprintf>
  char* ptr = msg;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	61fb      	str	r3, [r7, #28]
  

  // First, let's check and skip the opening bracket
  if (*ptr == '[') {
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b5b      	cmp	r3, #91	@ 0x5b
 8000920:	d107      	bne.n	8000932 <parseMessage+0x3a>
      // ptr++;
      ptr += 2;
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	3302      	adds	r3, #2
 8000926:	61fb      	str	r3, [r7, #28]
      printf("After bracket check, ptr points to: %s\n\r", ptr);
 8000928:	69f9      	ldr	r1, [r7, #28]
 800092a:	487f      	ldr	r0, [pc, #508]	@ (8000b28 <parseMessage+0x230>)
 800092c:	f007 f872 	bl	8007a14 <iprintf>
 8000930:	e0d0      	b.n	8000ad4 <parseMessage+0x1dc>
  } else {
      printf("Error: Message doesn't start with [\n\r");
 8000932:	487e      	ldr	r0, [pc, #504]	@ (8000b2c <parseMessage+0x234>)
 8000934:	f007 f86e 	bl	8007a14 <iprintf>
      // ptr++;
      ptr += 2;
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	3302      	adds	r3, #2
 800093c:	61fb      	str	r3, [r7, #28]
  }
  
  // Parse all fields in sequence
  while (*ptr != ']' && *ptr != '\0') {
 800093e:	e0c9      	b.n	8000ad4 <parseMessage+0x1dc>
      printf("Current parsing position: '%s'\n\r", ptr);  // Show exactly what we're looking at
 8000940:	69f9      	ldr	r1, [r7, #28]
 8000942:	487b      	ldr	r0, [pc, #492]	@ (8000b30 <parseMessage+0x238>)
 8000944:	f007 f866 	bl	8007a14 <iprintf>
      
      // Print the first few characters for debugging
      printf("Next 3 chars: '%c%c%c'\n\r", ptr[0], ptr[1], ptr[2]);
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3301      	adds	r3, #1
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3302      	adds	r3, #2
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	4875      	ldr	r0, [pc, #468]	@ (8000b34 <parseMessage+0x23c>)
 800095e:	f007 f859 	bl	8007a14 <iprintf>
      
      if (strncmp(ptr, "S:", 2) == 0) {
 8000962:	2202      	movs	r2, #2
 8000964:	4974      	ldr	r1, [pc, #464]	@ (8000b38 <parseMessage+0x240>)
 8000966:	69f8      	ldr	r0, [r7, #28]
 8000968:	f007 f8b1 	bl	8007ace <strncmp>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d116      	bne.n	80009a0 <parseMessage+0xa8>
          ptr += 2;  // Skip "S:"
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3302      	adds	r3, #2
 8000976:	61fb      	str	r3, [r7, #28]
          if (*ptr != '\0') {  // Safety check
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	f000 809e 	beq.w	8000abe <parseMessage+0x1c6>
              Steering = *ptr;
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	4b6d      	ldr	r3, [pc, #436]	@ (8000b3c <parseMessage+0x244>)
 8000988:	701a      	strb	r2, [r3, #0]
              printf("Found Steering: %c\n\r", Steering);
 800098a:	4b6c      	ldr	r3, [pc, #432]	@ (8000b3c <parseMessage+0x244>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	4619      	mov	r1, r3
 8000992:	486b      	ldr	r0, [pc, #428]	@ (8000b40 <parseMessage+0x248>)
 8000994:	f007 f83e 	bl	8007a14 <iprintf>
              ptr++;
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	3301      	adds	r3, #1
 800099c:	61fb      	str	r3, [r7, #28]
 800099e:	e08e      	b.n	8000abe <parseMessage+0x1c6>
          }
      }
      else if (strncmp(ptr, "G:", 2) == 0) {
 80009a0:	2202      	movs	r2, #2
 80009a2:	4968      	ldr	r1, [pc, #416]	@ (8000b44 <parseMessage+0x24c>)
 80009a4:	69f8      	ldr	r0, [r7, #28]
 80009a6:	f007 f892 	bl	8007ace <strncmp>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d115      	bne.n	80009dc <parseMessage+0xe4>
          ptr += 2;  // Skip "G:"
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	3302      	adds	r3, #2
 80009b4:	61fb      	str	r3, [r7, #28]
          if (*ptr != '\0') {  // Safety check
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d07f      	beq.n	8000abe <parseMessage+0x1c6>
              Gear = *ptr;
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	4b61      	ldr	r3, [pc, #388]	@ (8000b48 <parseMessage+0x250>)
 80009c4:	701a      	strb	r2, [r3, #0]
              printf("Found Gear: %c\n\r", Gear);
 80009c6:	4b60      	ldr	r3, [pc, #384]	@ (8000b48 <parseMessage+0x250>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	4619      	mov	r1, r3
 80009ce:	485f      	ldr	r0, [pc, #380]	@ (8000b4c <parseMessage+0x254>)
 80009d0:	f007 f820 	bl	8007a14 <iprintf>
              ptr++;
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	3301      	adds	r3, #1
 80009d8:	61fb      	str	r3, [r7, #28]
 80009da:	e070      	b.n	8000abe <parseMessage+0x1c6>
          }
      }
      else if (strncmp(ptr, "T:", 2) == 0) {
 80009dc:	2202      	movs	r2, #2
 80009de:	495c      	ldr	r1, [pc, #368]	@ (8000b50 <parseMessage+0x258>)
 80009e0:	69f8      	ldr	r0, [r7, #28]
 80009e2:	f007 f874 	bl	8007ace <strncmp>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d115      	bne.n	8000a18 <parseMessage+0x120>
          ptr += 2;  // Skip "T:"
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	3302      	adds	r3, #2
 80009f0:	61fb      	str	r3, [r7, #28]
          if (*ptr != '\0') {  // Safety check
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d061      	beq.n	8000abe <parseMessage+0x1c6>
              Type = *ptr;
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	781a      	ldrb	r2, [r3, #0]
 80009fe:	4b55      	ldr	r3, [pc, #340]	@ (8000b54 <parseMessage+0x25c>)
 8000a00:	701a      	strb	r2, [r3, #0]
              printf("Found Type: %c\n\r", Type);
 8000a02:	4b54      	ldr	r3, [pc, #336]	@ (8000b54 <parseMessage+0x25c>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4853      	ldr	r0, [pc, #332]	@ (8000b58 <parseMessage+0x260>)
 8000a0c:	f007 f802 	bl	8007a14 <iprintf>
              ptr++;
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	3301      	adds	r3, #1
 8000a14:	61fb      	str	r3, [r7, #28]
 8000a16:	e052      	b.n	8000abe <parseMessage+0x1c6>
          }
      }
      else if (strncmp(ptr, "V:", 2) == 0) {
 8000a18:	2202      	movs	r2, #2
 8000a1a:	4950      	ldr	r1, [pc, #320]	@ (8000b5c <parseMessage+0x264>)
 8000a1c:	69f8      	ldr	r0, [r7, #28]
 8000a1e:	f007 f856 	bl	8007ace <strncmp>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d11c      	bne.n	8000a62 <parseMessage+0x16a>
          ptr += 2;  // Skip "V:"
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	61fb      	str	r3, [r7, #28]
          char* endPtr;
          long temp = strtol(ptr, &endPtr, 10);
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	220a      	movs	r2, #10
 8000a34:	4619      	mov	r1, r3
 8000a36:	69f8      	ldr	r0, [r7, #28]
 8000a38:	f006 ff20 	bl	800787c <strtol>
 8000a3c:	6178      	str	r0, [r7, #20]
          if (endPtr != ptr) {
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	69fa      	ldr	r2, [r7, #28]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d03b      	beq.n	8000abe <parseMessage+0x1c6>
              Velocity = (uint8_t)temp;
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4b45      	ldr	r3, [pc, #276]	@ (8000b60 <parseMessage+0x268>)
 8000a4c:	701a      	strb	r2, [r3, #0]
              printf("Found Velocity: %d\n\r", Velocity);
 8000a4e:	4b44      	ldr	r3, [pc, #272]	@ (8000b60 <parseMessage+0x268>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	4619      	mov	r1, r3
 8000a56:	4843      	ldr	r0, [pc, #268]	@ (8000b64 <parseMessage+0x26c>)
 8000a58:	f006 ffdc 	bl	8007a14 <iprintf>
              ptr = endPtr;
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	e02d      	b.n	8000abe <parseMessage+0x1c6>
          }
      }
      else if (strncmp(ptr, "D:", 2) == 0) {
 8000a62:	2202      	movs	r2, #2
 8000a64:	4940      	ldr	r1, [pc, #256]	@ (8000b68 <parseMessage+0x270>)
 8000a66:	69f8      	ldr	r0, [r7, #28]
 8000a68:	f007 f831 	bl	8007ace <strncmp>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d11c      	bne.n	8000aac <parseMessage+0x1b4>
          ptr += 2;  // Skip "D:"
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3302      	adds	r3, #2
 8000a76:	61fb      	str	r3, [r7, #28]
          char* endPtr;
          long temp = strtol(ptr, &endPtr, 10);
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	220a      	movs	r2, #10
 8000a7e:	4619      	mov	r1, r3
 8000a80:	69f8      	ldr	r0, [r7, #28]
 8000a82:	f006 fefb 	bl	800787c <strtol>
 8000a86:	61b8      	str	r0, [r7, #24]
          if (endPtr != ptr) {
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	69fa      	ldr	r2, [r7, #28]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d016      	beq.n	8000abe <parseMessage+0x1c6>
              Duration = (uint8_t)temp;
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b35      	ldr	r3, [pc, #212]	@ (8000b6c <parseMessage+0x274>)
 8000a96:	701a      	strb	r2, [r3, #0]
              printf("Found Duration: %d\n\r", Duration);
 8000a98:	4b34      	ldr	r3, [pc, #208]	@ (8000b6c <parseMessage+0x274>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4833      	ldr	r0, [pc, #204]	@ (8000b70 <parseMessage+0x278>)
 8000aa2:	f006 ffb7 	bl	8007a14 <iprintf>
              ptr = endPtr;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	e008      	b.n	8000abe <parseMessage+0x1c6>
          }
      }
      else {
          // If we don't recognize the field, skip one character
          printf("Skipping unknown character: %c\n\r", *ptr);
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4830      	ldr	r0, [pc, #192]	@ (8000b74 <parseMessage+0x27c>)
 8000ab4:	f006 ffae 	bl	8007a14 <iprintf>
          ptr++;
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	3301      	adds	r3, #1
 8000abc:	61fb      	str	r3, [r7, #28]
      }
      
      // Skip comma if present
      if (*ptr == ',') {
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b2c      	cmp	r3, #44	@ 0x2c
 8000ac4:	d106      	bne.n	8000ad4 <parseMessage+0x1dc>
          ptr++;
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	61fb      	str	r3, [r7, #28]
          printf("Skipped comma, now at: %s\n\r", ptr);
 8000acc:	69f9      	ldr	r1, [r7, #28]
 8000ace:	482a      	ldr	r0, [pc, #168]	@ (8000b78 <parseMessage+0x280>)
 8000ad0:	f006 ffa0 	bl	8007a14 <iprintf>
  while (*ptr != ']' && *ptr != '\0') {
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b5d      	cmp	r3, #93	@ 0x5d
 8000ada:	d004      	beq.n	8000ae6 <parseMessage+0x1ee>
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	f47f af2d 	bne.w	8000940 <parseMessage+0x48>
      }
  }
  
  printf("Final parsed values - S:%c G:%c T:%c V:%d D:%d\n\r", 
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <parseMessage+0x244>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	4619      	mov	r1, r3
 8000aee:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <parseMessage+0x250>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	4618      	mov	r0, r3
 8000af6:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <parseMessage+0x25c>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	461c      	mov	r4, r3
 8000afe:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <parseMessage+0x268>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <parseMessage+0x274>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	9301      	str	r3, [sp, #4]
 8000b0e:	9200      	str	r2, [sp, #0]
 8000b10:	4623      	mov	r3, r4
 8000b12:	4602      	mov	r2, r0
 8000b14:	4819      	ldr	r0, [pc, #100]	@ (8000b7c <parseMessage+0x284>)
 8000b16:	f006 ff7d 	bl	8007a14 <iprintf>
         Steering, Gear, Type, Velocity, Duration);
}
 8000b1a:	3724      	adds	r7, #36	@ 0x24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd90      	pop	{r4, r7, pc}
 8000b20:	08008744 	.word	0x08008744
 8000b24:	08008764 	.word	0x08008764
 8000b28:	0800877c 	.word	0x0800877c
 8000b2c:	080087a8 	.word	0x080087a8
 8000b30:	080087d0 	.word	0x080087d0
 8000b34:	080087f4 	.word	0x080087f4
 8000b38:	08008810 	.word	0x08008810
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	08008814 	.word	0x08008814
 8000b44:	0800882c 	.word	0x0800882c
 8000b48:	20000001 	.word	0x20000001
 8000b4c:	08008830 	.word	0x08008830
 8000b50:	08008844 	.word	0x08008844
 8000b54:	20000002 	.word	0x20000002
 8000b58:	08008848 	.word	0x08008848
 8000b5c:	0800885c 	.word	0x0800885c
 8000b60:	20000136 	.word	0x20000136
 8000b64:	08008860 	.word	0x08008860
 8000b68:	08008878 	.word	0x08008878
 8000b6c:	20000137 	.word	0x20000137
 8000b70:	0800887c 	.word	0x0800887c
 8000b74:	08008894 	.word	0x08008894
 8000b78:	080088b8 	.word	0x080088b8
 8000b7c:	080088d4 	.word	0x080088d4

08000b80 <calculateCurrentVelocity>:

volatile float calculateCurrentVelocity(volatile uint32_t encoderPulseCount){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8000b88:	f001 f99c 	bl	8001ec4 <HAL_GetTick>
 8000b8c:	61f8      	str	r0, [r7, #28]

  if (now - lastCalcTime >= CALCULATION_INTERVAL_MS) {
 8000b8e:	4b23      	ldr	r3, [pc, #140]	@ (8000c1c <calculateCurrentVelocity+0x9c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	69fa      	ldr	r2, [r7, #28]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	2b63      	cmp	r3, #99	@ 0x63
 8000b98:	d937      	bls.n	8000c0a <calculateCurrentVelocity+0x8a>
      // --- Velocity Calculation Logic (as shown previously) ---
      uint32_t currentPulseCount = encoderPulseCount; // Read volatile variable safely
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	61bb      	str	r3, [r7, #24]
      uint32_t pulsesElapsed = currentPulseCount - lastPulseCount;
 8000b9e:	4b20      	ldr	r3, [pc, #128]	@ (8000c20 <calculateCurrentVelocity+0xa0>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	617b      	str	r3, [r7, #20]
      float deltaTime_s = (now - lastCalcTime) / 1000.0f;
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <calculateCurrentVelocity+0x9c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	69fa      	ldr	r2, [r7, #28]
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	ee07 3a90 	vmov	s15, r3
 8000bb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bb8:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8000c24 <calculateCurrentVelocity+0xa4>
 8000bbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bc0:	edc7 7a04 	vstr	s15, [r7, #16]

      if (deltaTime_s > 0.0001f) {
 8000bc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bc8:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000c28 <calculateCurrentVelocity+0xa8>
 8000bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd4:	dd13      	ble.n	8000bfe <calculateCurrentVelocity+0x7e>
          float rps = (float)pulsesElapsed / PULSES_PER_REVOLUTION / deltaTime_s;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	ee07 3a90 	vmov	s15, r3
 8000bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000be0:	ed97 7a04 	vldr	s14, [r7, #16]
 8000be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000be8:	edc7 7a03 	vstr	s15, [r7, #12]
          linear_mps = rps * WHEEL_CIRCUMFERENCE_M;
 8000bec:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bf0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000c2c <calculateCurrentVelocity+0xac>
 8000bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <calculateCurrentVelocity+0xb0>)
 8000bfa:	edc3 7a00 	vstr	s15, [r3]
          // currentVelocity = linear_mps;
      } else {
          // Handle zero/small delta time
          // linear_mps = 0.0f;
      }
      lastPulseCount = currentPulseCount;
 8000bfe:	4a08      	ldr	r2, [pc, #32]	@ (8000c20 <calculateCurrentVelocity+0xa0>)
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	6013      	str	r3, [r2, #0]
      lastCalcTime = now;
 8000c04:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <calculateCurrentVelocity+0x9c>)
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	6013      	str	r3, [r2, #0]
      // --- End Velocity Calculation Logic ---

      // Call PI controller update *here* if using this approach
      // updatePIController(desiredVelocity);
  }
  return linear_mps;
 8000c0a:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <calculateCurrentVelocity+0xb0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	ee07 3a90 	vmov	s15, r3
}
 8000c12:	eeb0 0a67 	vmov.f32	s0, s15
 8000c16:	3720      	adds	r7, #32
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000148 	.word	0x20000148
 8000c20:	20000144 	.word	0x20000144
 8000c24:	447a0000 	.word	0x447a0000
 8000c28:	38d1b717 	.word	0x38d1b717
 8000c2c:	3e71463a 	.word	0x3e71463a
 8000c30:	2000013c 	.word	0x2000013c

08000c34 <PIcontroller>:


void PIcontroller(volatile float m_desiredVelocity, volatile float m_currentVelocity){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000c3e:	edc7 0a00 	vstr	s1, [r7]
	float error = m_desiredVelocity - m_currentVelocity;
 8000c42:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c46:	edd7 7a00 	vldr	s15, [r7]
 8000c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c4e:	edc7 7a04 	vstr	s15, [r7, #16]

	float pTerm = Kp * error;
 8000c52:	4b3a      	ldr	r3, [pc, #232]	@ (8000d3c <PIcontroller+0x108>)
 8000c54:	edd3 7a00 	vldr	s15, [r3]
 8000c58:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c60:	edc7 7a03 	vstr	s15, [r7, #12]
	integralTerm += Ki * error * (CALCULATION_INTERVAL_MS / 1000.0f);
 8000c64:	4b36      	ldr	r3, [pc, #216]	@ (8000d40 <PIcontroller+0x10c>)
 8000c66:	ed93 7a00 	vldr	s14, [r3]
 8000c6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c72:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8000d44 <PIcontroller+0x110>
 8000c76:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c7a:	4b33      	ldr	r3, [pc, #204]	@ (8000d48 <PIcontroller+0x114>)
 8000c7c:	edd3 7a00 	vldr	s15, [r3]
 8000c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c84:	4b30      	ldr	r3, [pc, #192]	@ (8000d48 <PIcontroller+0x114>)
 8000c86:	edc3 7a00 	vstr	s15, [r3]
	// Clamp integral term
	if (integralTerm > maxIntegral) integralTerm = maxIntegral;
 8000c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d48 <PIcontroller+0x114>)
 8000c8c:	ed93 7a00 	vldr	s14, [r3]
 8000c90:	4b2e      	ldr	r3, [pc, #184]	@ (8000d4c <PIcontroller+0x118>)
 8000c92:	edd3 7a00 	vldr	s15, [r3]
 8000c96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c9e:	dd04      	ble.n	8000caa <PIcontroller+0x76>
 8000ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d4c <PIcontroller+0x118>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a28      	ldr	r2, [pc, #160]	@ (8000d48 <PIcontroller+0x114>)
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	e014      	b.n	8000cd4 <PIcontroller+0xa0>
	else if (integralTerm < -maxIntegral) integralTerm = -maxIntegral;
 8000caa:	4b28      	ldr	r3, [pc, #160]	@ (8000d4c <PIcontroller+0x118>)
 8000cac:	edd3 7a00 	vldr	s15, [r3]
 8000cb0:	eeb1 7a67 	vneg.f32	s14, s15
 8000cb4:	4b24      	ldr	r3, [pc, #144]	@ (8000d48 <PIcontroller+0x114>)
 8000cb6:	edd3 7a00 	vldr	s15, [r3]
 8000cba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc2:	dd07      	ble.n	8000cd4 <PIcontroller+0xa0>
 8000cc4:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <PIcontroller+0x118>)
 8000cc6:	edd3 7a00 	vldr	s15, [r3]
 8000cca:	eef1 7a67 	vneg.f32	s15, s15
 8000cce:	4b1e      	ldr	r3, [pc, #120]	@ (8000d48 <PIcontroller+0x114>)
 8000cd0:	edc3 7a00 	vstr	s15, [r3]

	float output = pTerm + integralTerm;
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <PIcontroller+0x114>)
 8000cd6:	edd3 7a00 	vldr	s15, [r3]
 8000cda:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ce2:	edc7 7a05 	vstr	s15, [r7, #20]

	if (output > maxPWM) output = maxPWM;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <PIcontroller+0x11c>)
 8000ce8:	edd3 7a00 	vldr	s15, [r3]
 8000cec:	ed97 7a05 	vldr	s14, [r7, #20]
 8000cf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf8:	dd03      	ble.n	8000d02 <PIcontroller+0xce>
 8000cfa:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <PIcontroller+0x11c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	e00c      	b.n	8000d1c <PIcontroller+0xe8>
	else if (output < minPWM) output = minPWM;
 8000d02:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <PIcontroller+0x120>)
 8000d04:	edd3 7a00 	vldr	s15, [r3]
 8000d08:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d14:	d502      	bpl.n	8000d1c <PIcontroller+0xe8>
 8000d16:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <PIcontroller+0x120>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	617b      	str	r3, [r7, #20]

	// Timers configuration
    TIM8->CCR2 = (uint32_t)output;
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <PIcontroller+0x124>)
 8000d1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d26:	ee17 2a90 	vmov	r2, s15
 8000d2a:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	480b      	ldr	r0, [pc, #44]	@ (8000d5c <PIcontroller+0x128>)
 8000d30:	f003 fba0 	bl	8004474 <HAL_TIM_PWM_Start>
               error,
               pTerm,
               integralTerm,
               output);
               */
}
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000004 	.word	0x20000004
 8000d40:	20000008 	.word	0x20000008
 8000d44:	3dcccccd 	.word	0x3dcccccd
 8000d48:	20000150 	.word	0x20000150
 8000d4c:	20000010 	.word	0x20000010
 8000d50:	2000000c 	.word	0x2000000c
 8000d54:	20000154 	.word	0x20000154
 8000d58:	40013400 	.word	0x40013400
 8000d5c:	200001f4 	.word	0x200001f4

08000d60 <runMotor>:

void runMotor(char gear, char type, uint8_t velocity) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	71bb      	strb	r3, [r7, #6]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	717b      	strb	r3, [r7, #5]
  //Gear = *gear;
  
  switch (Gear)
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <runMotor+0x54>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b42      	cmp	r3, #66	@ 0x42
 8000d7a:	d016      	beq.n	8000daa <runMotor+0x4a>
 8000d7c:	2b46      	cmp	r3, #70	@ 0x46
 8000d7e:	d10c      	bne.n	8000d9a <runMotor+0x3a>
  {
  case 'F': // F in ASCII is 70
    // motorForward
    // regulator(Velocity, Type);
    PIcontroller(desiredVelocity, currentVelocity);
 8000d80:	4b0d      	ldr	r3, [pc, #52]	@ (8000db8 <runMotor+0x58>)
 8000d82:	edd3 7a00 	vldr	s15, [r3]
 8000d86:	4b0d      	ldr	r3, [pc, #52]	@ (8000dbc <runMotor+0x5c>)
 8000d88:	ed93 7a00 	vldr	s14, [r3]
 8000d8c:	eef0 0a47 	vmov.f32	s1, s14
 8000d90:	eeb0 0a67 	vmov.f32	s0, s15
 8000d94:	f7ff ff4e 	bl	8000c34 <PIcontroller>

    break;
 8000d98:	e008      	b.n	8000dac <runMotor+0x4c>
  case 'B':
    // motorBackward();
    break;
  default:
    TIM8->CCR2 = 0;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <runMotor+0x60>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000da0:	2104      	movs	r1, #4
 8000da2:	4808      	ldr	r0, [pc, #32]	@ (8000dc4 <runMotor+0x64>)
 8000da4:	f003 fb66 	bl	8004474 <HAL_TIM_PWM_Start>
    break;
 8000da8:	e000      	b.n	8000dac <runMotor+0x4c>
    break;
 8000daa:	bf00      	nop
  }
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000001 	.word	0x20000001
 8000db8:	2000014c 	.word	0x2000014c
 8000dbc:	20000140 	.word	0x20000140
 8000dc0:	40013400 	.word	0x40013400
 8000dc4:	200001f4 	.word	0x200001f4

08000dc8 <Steer>:

void Steer(char steering) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
	int PWMtoSteer = 30;
 8000dd2:	231e      	movs	r3, #30
 8000dd4:	60fb      	str	r3, [r7, #12]
  //Gear = *gear;
  
    switch (Steering)
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <Steer+0x80>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b4c      	cmp	r3, #76	@ 0x4c
 8000dde:	d002      	beq.n	8000de6 <Steer+0x1e>
 8000de0:	2b52      	cmp	r3, #82	@ 0x52
 8000de2:	d00f      	beq.n	8000e04 <Steer+0x3c>
 8000de4:	e01d      	b.n	8000e22 <Steer+0x5a>
    {
    case 'L':
    	// one to zero
        TIM3->CCR2 = 0;
 8000de6:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <Steer+0x84>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	639a      	str	r2, [r3, #56]	@ 0x38
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000dec:	2104      	movs	r1, #4
 8000dee:	4818      	ldr	r0, [pc, #96]	@ (8000e50 <Steer+0x88>)
 8000df0:	f003 fb40 	bl	8004474 <HAL_TIM_PWM_Start>
    	// second to run
        TIM4->CCR1 = PWMtoSteer;
 8000df4:	4a17      	ldr	r2, [pc, #92]	@ (8000e54 <Steer+0x8c>)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6353      	str	r3, [r2, #52]	@ 0x34
        HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4816      	ldr	r0, [pc, #88]	@ (8000e58 <Steer+0x90>)
 8000dfe:	f003 fb39 	bl	8004474 <HAL_TIM_PWM_Start>
      break;
 8000e02:	e01d      	b.n	8000e40 <Steer+0x78>
    case 'R':
    	// one to zero
        TIM4->CCR1 = 0;
 8000e04:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <Steer+0x8c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4812      	ldr	r0, [pc, #72]	@ (8000e58 <Steer+0x90>)
 8000e0e:	f003 fb31 	bl	8004474 <HAL_TIM_PWM_Start>
    	// second to run
        TIM3->CCR2 = PWMtoSteer;
 8000e12:	4a0e      	ldr	r2, [pc, #56]	@ (8000e4c <Steer+0x84>)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	6393      	str	r3, [r2, #56]	@ 0x38
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e18:	2104      	movs	r1, #4
 8000e1a:	480d      	ldr	r0, [pc, #52]	@ (8000e50 <Steer+0x88>)
 8000e1c:	f003 fb2a 	bl	8004474 <HAL_TIM_PWM_Start>
      break;
 8000e20:	e00e      	b.n	8000e40 <Steer+0x78>
    default:
    	// both to zero
        TIM4->CCR1 = 0;
 8000e22:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <Steer+0x8c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	480b      	ldr	r0, [pc, #44]	@ (8000e58 <Steer+0x90>)
 8000e2c:	f003 fb22 	bl	8004474 <HAL_TIM_PWM_Start>
    	// both to zero
        TIM3->CCR2 = 0;
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <Steer+0x84>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	639a      	str	r2, [r3, #56]	@ 0x38
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e36:	2104      	movs	r1, #4
 8000e38:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <Steer+0x88>)
 8000e3a:	f003 fb1b 	bl	8004474 <HAL_TIM_PWM_Start>
      break;
 8000e3e:	bf00      	nop
    }
}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	40000400 	.word	0x40000400
 8000e50:	2000015c 	.word	0x2000015c
 8000e54:	40000800 	.word	0x40000800
 8000e58:	200001a8 	.word	0x200001a8

08000e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	@ 0x28
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e62:	f000 ffcb 	bl	8001dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e66:	f000 f8e7 	bl	8001038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6a:	f7ff fba1 	bl	80005b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e6e:	f7ff fbf7 	bl	8000660 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000e72:	f000 fd39 	bl	80018e8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000e76:	f000 fad1 	bl	800141c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e7a:	f000 fb45 	bl	8001508 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000e7e:	f000 fbb9 	bl	80015f4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rxBuffer[0], 1);
 8000e82:	2201      	movs	r2, #1
 8000e84:	495b      	ldr	r1, [pc, #364]	@ (8000ff4 <main+0x198>)
 8000e86:	485c      	ldr	r0, [pc, #368]	@ (8000ff8 <main+0x19c>)
 8000e88:	f004 fc42 	bl	8005710 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f000 fe01 	bl	8001a94 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000e92:	2101      	movs	r1, #1
 8000e94:	2000      	movs	r0, #0
 8000e96:	f000 fe5f 	bl	8001b58 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000e9a:	4b58      	ldr	r3, [pc, #352]	@ (8000ffc <main+0x1a0>)
 8000e9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ea0:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000ea2:	4b56      	ldr	r3, [pc, #344]	@ (8000ffc <main+0x1a0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000ea8:	4b54      	ldr	r3, [pc, #336]	@ (8000ffc <main+0x1a0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000eae:	4b53      	ldr	r3, [pc, #332]	@ (8000ffc <main+0x1a0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000eb4:	4b51      	ldr	r3, [pc, #324]	@ (8000ffc <main+0x1a0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000eba:	4950      	ldr	r1, [pc, #320]	@ (8000ffc <main+0x1a0>)
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f000 fecb 	bl	8001c58 <BSP_COM_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <main+0x70>
  {
    Error_Handler();
 8000ec8:	f000 f980 	bl	80011cc <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000ecc:	484c      	ldr	r0, [pc, #304]	@ (8001000 <main+0x1a4>)
 8000ece:	f006 fda1 	bl	8007a14 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 fe14 	bl	8001b00 <BSP_LED_On>

  imu_init();  // Initialize the IMU after peripherals are set up
 8000ed8:	f7ff fc94 	bl	8000804 <imu_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (messageComplete) {
 8000edc:	4b49      	ldr	r3, [pc, #292]	@ (8001004 <main+0x1a8>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d005      	beq.n	8000ef2 <main+0x96>
      parseMessage((char*)rxBuffer);
 8000ee6:	4843      	ldr	r0, [pc, #268]	@ (8000ff4 <main+0x198>)
 8000ee8:	f7ff fd06 	bl	80008f8 <parseMessage>
      messageComplete = 0;
 8000eec:	4b45      	ldr	r3, [pc, #276]	@ (8001004 <main+0x1a8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
    }
    currentVelocity = calculateCurrentVelocity(encoderPulseCount);
 8000ef2:	4b45      	ldr	r3, [pc, #276]	@ (8001008 <main+0x1ac>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fe42 	bl	8000b80 <calculateCurrentVelocity>
 8000efc:	eef0 7a40 	vmov.f32	s15, s0
 8000f00:	4b42      	ldr	r3, [pc, #264]	@ (800100c <main+0x1b0>)
 8000f02:	edc3 7a00 	vstr	s15, [r3]
    if (currentVelocity == 0){
 8000f06:	4b41      	ldr	r3, [pc, #260]	@ (800100c <main+0x1b0>)
 8000f08:	edd3 7a00 	vldr	s15, [r3]
 8000f0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f14:	d102      	bne.n	8000f1c <main+0xc0>
    	printf("Current velocity is 0\n\r");
 8000f16:	483e      	ldr	r0, [pc, #248]	@ (8001010 <main+0x1b4>)
 8000f18:	f006 fd7c 	bl	8007a14 <iprintf>
    }
    // desiredVelocity = 2.5; // convert to float I guess

    runMotor(Gear, Type, Velocity); //
 8000f1c:	4b3d      	ldr	r3, [pc, #244]	@ (8001014 <main+0x1b8>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	4a3d      	ldr	r2, [pc, #244]	@ (8001018 <main+0x1bc>)
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	b2d1      	uxtb	r1, r2
 8000f28:	4a3c      	ldr	r2, [pc, #240]	@ (800101c <main+0x1c0>)
 8000f2a:	7812      	ldrb	r2, [r2, #0]
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff16 	bl	8000d60 <runMotor>
    Steer(Steering);
 8000f34:	4b3a      	ldr	r3, [pc, #232]	@ (8001020 <main+0x1c4>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff44 	bl	8000dc8 <Steer>


    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000f40:	4b38      	ldr	r3, [pc, #224]	@ (8001024 <main+0x1c8>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d1c9      	bne.n	8000edc <main+0x80>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000f48:	4b36      	ldr	r3, [pc, #216]	@ (8001024 <main+0x1c8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 fdec 	bl	8001b2c <BSP_LED_Toggle>

      /* ..... Perform your action ..... */
      printf("Let's do this !\n\r");
 8000f54:	4834      	ldr	r0, [pc, #208]	@ (8001028 <main+0x1cc>)
 8000f56:	f006 fd5d 	bl	8007a14 <iprintf>
      // grok code starts
      imu_data_t accel, gyro;
      imu_read_accel(&accel);
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fc76 	bl	8000850 <imu_read_accel>
      imu_read_gyro(&gyro);
 8000f64:	463b      	mov	r3, r7
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fc9c 	bl	80008a4 <imu_read_gyro>

      // Compute scaled values using integer arithmetic
      int32_t accel_ug_x = (int32_t)accel.x * ACCEL_SENSITIVITY_UG;
 8000f6c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f70:	461a      	mov	r2, r3
 8000f72:	23f4      	movs	r3, #244	@ 0xf4
 8000f74:	fb02 f303 	mul.w	r3, r2, r3
 8000f78:	627b      	str	r3, [r7, #36]	@ 0x24
      int32_t accel_ug_y = (int32_t)accel.y * ACCEL_SENSITIVITY_UG;
 8000f7a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	23f4      	movs	r3, #244	@ 0xf4
 8000f82:	fb02 f303 	mul.w	r3, r2, r3
 8000f86:	623b      	str	r3, [r7, #32]
      int32_t accel_ug_z = (int32_t)accel.z * ACCEL_SENSITIVITY_UG;
 8000f88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	23f4      	movs	r3, #244	@ 0xf4
 8000f90:	fb02 f303 	mul.w	r3, r2, r3
 8000f94:	61fb      	str	r3, [r7, #28]
      int32_t gyro_udps_x = (int32_t)gyro.x * GYRO_SENSITIVITY_UDPS;
 8000f96:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000fa0:	fb02 f303 	mul.w	r3, r2, r3
 8000fa4:	61bb      	str	r3, [r7, #24]
      int32_t gyro_udps_y = (int32_t)gyro.y * GYRO_SENSITIVITY_UDPS;
 8000fa6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000faa:	461a      	mov	r2, r3
 8000fac:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000fb0:	fb02 f303 	mul.w	r3, r2, r3
 8000fb4:	617b      	str	r3, [r7, #20]
      int32_t gyro_udps_z = (int32_t)gyro.z * GYRO_SENSITIVITY_UDPS;
 8000fb6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000fc0:	fb02 f303 	mul.w	r3, r2, r3
 8000fc4:	613b      	str	r3, [r7, #16]

      // printing
      printf("Accel [ug]: X=%ld, Y=%ld, Z=%ld\n\r",
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	6a3a      	ldr	r2, [r7, #32]
 8000fca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000fcc:	4817      	ldr	r0, [pc, #92]	@ (800102c <main+0x1d0>)
 8000fce:	f006 fd21 	bl	8007a14 <iprintf>
              accel_ug_x, accel_ug_y, accel_ug_z);
      printf("Gyro [mdps]: X=%ld, Y=%ld, Z=%ld\n\r",
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	69b9      	ldr	r1, [r7, #24]
 8000fd8:	4815      	ldr	r0, [pc, #84]	@ (8001030 <main+0x1d4>)
 8000fda:	f006 fd1b 	bl	8007a14 <iprintf>
                    gyro_udps_x, gyro_udps_y, gyro_udps_z);

      HAL_Delay(100);
 8000fde:	2064      	movs	r0, #100	@ 0x64
 8000fe0:	f000 ff7c 	bl	8001edc <HAL_Delay>

      // runMotor(Gear, Type, Velocity);

      printf("Pulses counted: %ld\n\r", encoderPulseCount);
 8000fe4:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <main+0x1ac>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4812      	ldr	r0, [pc, #72]	@ (8001034 <main+0x1d8>)
 8000fec:	f006 fd12 	bl	8007a14 <iprintf>
    if (messageComplete) {
 8000ff0:	e774      	b.n	8000edc <main+0x80>
 8000ff2:	bf00      	nop
 8000ff4:	20000114 	.word	0x20000114
 8000ff8:	20000240 	.word	0x20000240
 8000ffc:	20000100 	.word	0x20000100
 8001000:	08008908 	.word	0x08008908
 8001004:	20000135 	.word	0x20000135
 8001008:	20000138 	.word	0x20000138
 800100c:	20000140 	.word	0x20000140
 8001010:	08008924 	.word	0x08008924
 8001014:	20000001 	.word	0x20000001
 8001018:	20000002 	.word	0x20000002
 800101c:	20000136 	.word	0x20000136
 8001020:	20000000 	.word	0x20000000
 8001024:	20000110 	.word	0x20000110
 8001028:	0800893c 	.word	0x0800893c
 800102c:	08008950 	.word	0x08008950
 8001030:	08008974 	.word	0x08008974
 8001034:	08008998 	.word	0x08008998

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b094      	sub	sp, #80	@ 0x50
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	f107 0318 	add.w	r3, r7, #24
 8001042:	2238      	movs	r2, #56	@ 0x38
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f006 fd39 	bl	8007abe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800105a:	2000      	movs	r0, #0
 800105c:	f002 f980 	bl	8003360 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001060:	2302      	movs	r3, #2
 8001062:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001064:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106a:	2340      	movs	r3, #64	@ 0x40
 800106c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106e:	2302      	movs	r3, #2
 8001070:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001072:	2302      	movs	r3, #2
 8001074:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001076:	2304      	movs	r3, #4
 8001078:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800107a:	2355      	movs	r3, #85	@ 0x55
 800107c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800107e:	2302      	movs	r3, #2
 8001080:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001082:	2302      	movs	r3, #2
 8001084:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001086:	2302      	movs	r3, #2
 8001088:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108a:	f107 0318 	add.w	r3, r7, #24
 800108e:	4618      	mov	r0, r3
 8001090:	f002 fa1a 	bl	80034c8 <HAL_RCC_OscConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800109a:	f000 f897 	bl	80011cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109e:	230f      	movs	r3, #15
 80010a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a2:	2303      	movs	r3, #3
 80010a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2104      	movs	r1, #4
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 fd18 	bl	8003aec <HAL_RCC_ClockConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010c2:	f000 f883 	bl	80011cc <Error_Handler>
  }
}
 80010c6:	bf00      	nop
 80010c8:	3750      	adds	r7, #80	@ 0x50
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a20      	ldr	r2, [pc, #128]	@ (8001160 <HAL_UART_RxCpltCallback+0x90>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d13b      	bne.n	800115a <HAL_UART_RxCpltCallback+0x8a>
      if (rxIndex == 0 && rxBuffer[0] != START_MARKER) {
 80010e2:	4b20      	ldr	r3, [pc, #128]	@ (8001164 <HAL_UART_RxCpltCallback+0x94>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d109      	bne.n	8001100 <HAL_UART_RxCpltCallback+0x30>
 80010ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001168 <HAL_UART_RxCpltCallback+0x98>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b5b      	cmp	r3, #91	@ 0x5b
 80010f2:	d005      	beq.n	8001100 <HAL_UART_RxCpltCallback+0x30>
          // Wait for start marker
          HAL_UART_Receive_IT(&huart1, &rxBuffer[0], 1);
 80010f4:	2201      	movs	r2, #1
 80010f6:	491c      	ldr	r1, [pc, #112]	@ (8001168 <HAL_UART_RxCpltCallback+0x98>)
 80010f8:	481c      	ldr	r0, [pc, #112]	@ (800116c <HAL_UART_RxCpltCallback+0x9c>)
 80010fa:	f004 fb09 	bl	8005710 <HAL_UART_Receive_IT>
          return;
 80010fe:	e02c      	b.n	800115a <HAL_UART_RxCpltCallback+0x8a>
      }
      
      if (rxBuffer[rxIndex] == END_MARKER) {
 8001100:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <HAL_UART_RxCpltCallback+0x94>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	461a      	mov	r2, r3
 8001108:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <HAL_UART_RxCpltCallback+0x98>)
 800110a:	5c9b      	ldrb	r3, [r3, r2]
 800110c:	2b5d      	cmp	r3, #93	@ 0x5d
 800110e:	d10d      	bne.n	800112c <HAL_UART_RxCpltCallback+0x5c>
          // Message complete
          rxBuffer[rxIndex + 1] = '\0';  // Null terminate
 8001110:	4b14      	ldr	r3, [pc, #80]	@ (8001164 <HAL_UART_RxCpltCallback+0x94>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	3301      	adds	r3, #1
 8001118:	4a13      	ldr	r2, [pc, #76]	@ (8001168 <HAL_UART_RxCpltCallback+0x98>)
 800111a:	2100      	movs	r1, #0
 800111c:	54d1      	strb	r1, [r2, r3]
          messageComplete = 1;
 800111e:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <HAL_UART_RxCpltCallback+0xa0>)
 8001120:	2201      	movs	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]
          rxIndex = 0;
 8001124:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <HAL_UART_RxCpltCallback+0x94>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
 800112a:	e00b      	b.n	8001144 <HAL_UART_RxCpltCallback+0x74>
      } else if (rxIndex < RX_BUFFER_SIZE - 2) {
 800112c:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <HAL_UART_RxCpltCallback+0x94>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b1d      	cmp	r3, #29
 8001134:	d806      	bhi.n	8001144 <HAL_UART_RxCpltCallback+0x74>
          rxIndex++;
 8001136:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <HAL_UART_RxCpltCallback+0x94>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	3301      	adds	r3, #1
 800113e:	b2da      	uxtb	r2, r3
 8001140:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <HAL_UART_RxCpltCallback+0x94>)
 8001142:	701a      	strb	r2, [r3, #0]
      }
      
      // Continue receiving
      HAL_UART_Receive_IT(&huart1, &rxBuffer[rxIndex], 1);
 8001144:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <HAL_UART_RxCpltCallback+0x94>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	461a      	mov	r2, r3
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_UART_RxCpltCallback+0x98>)
 800114e:	4413      	add	r3, r2
 8001150:	2201      	movs	r2, #1
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	@ (800116c <HAL_UART_RxCpltCallback+0x9c>)
 8001156:	f004 fadb 	bl	8005710 <HAL_UART_Receive_IT>
  }
}
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40013800 	.word	0x40013800
 8001164:	20000134 	.word	0x20000134
 8001168:	20000114 	.word	0x20000114
 800116c:	20000240 	.word	0x20000240
 8001170:	20000135 	.word	0x20000135

08001174 <HAL_GPIO_EXTI_Callback>:

// motor controller EXTI handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_9) { // Check if it's PA9's interrupt
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001184:	d107      	bne.n	8001196 <HAL_GPIO_EXTI_Callback+0x22>
        encoderPulseCount++;
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	3301      	adds	r3, #1
 800118c:	4a04      	ldr	r2, [pc, #16]	@ (80011a0 <HAL_GPIO_EXTI_Callback+0x2c>)
 800118e:	6013      	str	r3, [r2, #0]
        BSP_LED_Toggle(LED_GREEN);
 8001190:	2000      	movs	r0, #0
 8001192:	f000 fccb 	bl	8001b2c <BSP_LED_Toggle>
        // printf("Pulses counted: %ld\n\r", encoderPulseCount);
    }
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000138 	.word	0x20000138

080011a4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80011b4:	4b04      	ldr	r3, [pc, #16]	@ (80011c8 <BSP_PB_Callback+0x24>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]
  }
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000110 	.word	0x20000110

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <Error_Handler+0x8>

080011d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <HAL_MspInit+0x44>)
 80011e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e2:	4a0e      	ldr	r2, [pc, #56]	@ (800121c <HAL_MspInit+0x44>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <HAL_MspInit+0x44>)
 80011ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <HAL_MspInit+0x44>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fa:	4a08      	ldr	r2, [pc, #32]	@ (800121c <HAL_MspInit+0x44>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001200:	6593      	str	r3, [r2, #88]	@ 0x58
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_MspInit+0x44>)
 8001204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800120e:	f002 f94b 	bl	80034a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <NMI_Handler+0x4>

08001228 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <MemManage_Handler+0x4>

08001238 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <BusFault_Handler+0x4>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <UsageFault_Handler+0x4>

08001248 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001276:	f000 fe13 	bl	8001ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}

0800127e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(encoder_Pin);
 8001282:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001286:	f001 fa2f 	bl	80026e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001294:	4802      	ldr	r0, [pc, #8]	@ (80012a0 <USART1_IRQHandler+0x10>)
 8001296:	f004 fa87 	bl	80057a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000240 	.word	0x20000240

080012a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f000 fcc3 	bl	8001c34 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b086      	sub	sp, #24
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	e00a      	b.n	80012da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012c4:	f3af 8000 	nop.w
 80012c8:	4601      	mov	r1, r0
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	1c5a      	adds	r2, r3, #1
 80012ce:	60ba      	str	r2, [r7, #8]
 80012d0:	b2ca      	uxtb	r2, r1
 80012d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3301      	adds	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	429a      	cmp	r2, r3
 80012e0:	dbf0      	blt.n	80012c4 <_read+0x12>
  }

  return len;
 80012e2:	687b      	ldr	r3, [r7, #4]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	e009      	b.n	8001312 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	60ba      	str	r2, [r7, #8]
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fd08 	bl	8001d1c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	3301      	adds	r3, #1
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	429a      	cmp	r2, r3
 8001318:	dbf1      	blt.n	80012fe <_write+0x12>
  }
  return len;
 800131a:	687b      	ldr	r3, [r7, #4]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <_close>:

int _close(int file)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800132c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800134c:	605a      	str	r2, [r3, #4]
  return 0;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <_isatty>:

int _isatty(int file)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001364:	2301      	movs	r3, #1
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001372:	b480      	push	{r7}
 8001374:	b085      	sub	sp, #20
 8001376:	af00      	add	r7, sp, #0
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001394:	4a14      	ldr	r2, [pc, #80]	@ (80013e8 <_sbrk+0x5c>)
 8001396:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <_sbrk+0x60>)
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a0:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d102      	bne.n	80013ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a8:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <_sbrk+0x64>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	@ (80013f4 <_sbrk+0x68>)
 80013ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ae:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d207      	bcs.n	80013cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013bc:	f006 fbe0 	bl	8007b80 <__errno>
 80013c0:	4603      	mov	r3, r0
 80013c2:	220c      	movs	r2, #12
 80013c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	e009      	b.n	80013e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013cc:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d2:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <_sbrk+0x64>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	4a05      	ldr	r2, [pc, #20]	@ (80013f0 <_sbrk+0x64>)
 80013dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20008000 	.word	0x20008000
 80013ec:	00000400 	.word	0x00000400
 80013f0:	20000158 	.word	0x20000158
 80013f4:	200004c8 	.word	0x200004c8

080013f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <SystemInit+0x20>)
 80013fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001402:	4a05      	ldr	r2, [pc, #20]	@ (8001418 <SystemInit+0x20>)
 8001404:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001408:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08e      	sub	sp, #56	@ 0x38
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800143c:	463b      	mov	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
 800144a:	615a      	str	r2, [r3, #20]
 800144c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800144e:	4b2c      	ldr	r3, [pc, #176]	@ (8001500 <MX_TIM3_Init+0xe4>)
 8001450:	4a2c      	ldr	r2, [pc, #176]	@ (8001504 <MX_TIM3_Init+0xe8>)
 8001452:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 8001454:	4b2a      	ldr	r3, [pc, #168]	@ (8001500 <MX_TIM3_Init+0xe4>)
 8001456:	22a9      	movs	r2, #169	@ 0xa9
 8001458:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <MX_TIM3_Init+0xe4>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32;
 8001460:	4b27      	ldr	r3, [pc, #156]	@ (8001500 <MX_TIM3_Init+0xe4>)
 8001462:	2220      	movs	r2, #32
 8001464:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001466:	4b26      	ldr	r3, [pc, #152]	@ (8001500 <MX_TIM3_Init+0xe4>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146c:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <MX_TIM3_Init+0xe4>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001472:	4823      	ldr	r0, [pc, #140]	@ (8001500 <MX_TIM3_Init+0xe4>)
 8001474:	f002 ff46 	bl	8004304 <HAL_TIM_Base_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800147e:	f7ff fea5 	bl	80011cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001482:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001486:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001488:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800148c:	4619      	mov	r1, r3
 800148e:	481c      	ldr	r0, [pc, #112]	@ (8001500 <MX_TIM3_Init+0xe4>)
 8001490:	f003 fa04 	bl	800489c <HAL_TIM_ConfigClockSource>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800149a:	f7ff fe97 	bl	80011cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800149e:	4818      	ldr	r0, [pc, #96]	@ (8001500 <MX_TIM3_Init+0xe4>)
 80014a0:	f002 ff87 	bl	80043b2 <HAL_TIM_PWM_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80014aa:	f7ff fe8f 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	4619      	mov	r1, r3
 80014bc:	4810      	ldr	r0, [pc, #64]	@ (8001500 <MX_TIM3_Init+0xe4>)
 80014be:	f003 ff3b 	bl	8005338 <HAL_TIMEx_MasterConfigSynchronization>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80014c8:	f7ff fe80 	bl	80011cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014cc:	2360      	movs	r3, #96	@ 0x60
 80014ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014dc:	463b      	mov	r3, r7
 80014de:	2204      	movs	r2, #4
 80014e0:	4619      	mov	r1, r3
 80014e2:	4807      	ldr	r0, [pc, #28]	@ (8001500 <MX_TIM3_Init+0xe4>)
 80014e4:	f003 f8c6 	bl	8004674 <HAL_TIM_PWM_ConfigChannel>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014ee:	f7ff fe6d 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014f2:	4803      	ldr	r0, [pc, #12]	@ (8001500 <MX_TIM3_Init+0xe4>)
 80014f4:	f000 f976 	bl	80017e4 <HAL_TIM_MspPostInit>

}
 80014f8:	bf00      	nop
 80014fa:	3738      	adds	r7, #56	@ 0x38
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000015c 	.word	0x2000015c
 8001504:	40000400 	.word	0x40000400

08001508 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08e      	sub	sp, #56	@ 0x38
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001528:	463b      	mov	r3, r7
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]
 8001536:	615a      	str	r2, [r3, #20]
 8001538:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800153a:	4b2c      	ldr	r3, [pc, #176]	@ (80015ec <MX_TIM4_Init+0xe4>)
 800153c:	4a2c      	ldr	r2, [pc, #176]	@ (80015f0 <MX_TIM4_Init+0xe8>)
 800153e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 170-1;
 8001540:	4b2a      	ldr	r3, [pc, #168]	@ (80015ec <MX_TIM4_Init+0xe4>)
 8001542:	22a9      	movs	r2, #169	@ 0xa9
 8001544:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b29      	ldr	r3, [pc, #164]	@ (80015ec <MX_TIM4_Init+0xe4>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 32;
 800154c:	4b27      	ldr	r3, [pc, #156]	@ (80015ec <MX_TIM4_Init+0xe4>)
 800154e:	2220      	movs	r2, #32
 8001550:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001552:	4b26      	ldr	r3, [pc, #152]	@ (80015ec <MX_TIM4_Init+0xe4>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001558:	4b24      	ldr	r3, [pc, #144]	@ (80015ec <MX_TIM4_Init+0xe4>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800155e:	4823      	ldr	r0, [pc, #140]	@ (80015ec <MX_TIM4_Init+0xe4>)
 8001560:	f002 fed0 	bl	8004304 <HAL_TIM_Base_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800156a:	f7ff fe2f 	bl	80011cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001572:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001574:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001578:	4619      	mov	r1, r3
 800157a:	481c      	ldr	r0, [pc, #112]	@ (80015ec <MX_TIM4_Init+0xe4>)
 800157c:	f003 f98e 	bl	800489c <HAL_TIM_ConfigClockSource>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001586:	f7ff fe21 	bl	80011cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800158a:	4818      	ldr	r0, [pc, #96]	@ (80015ec <MX_TIM4_Init+0xe4>)
 800158c:	f002 ff11 	bl	80043b2 <HAL_TIM_PWM_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001596:	f7ff fe19 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	4619      	mov	r1, r3
 80015a8:	4810      	ldr	r0, [pc, #64]	@ (80015ec <MX_TIM4_Init+0xe4>)
 80015aa:	f003 fec5 	bl	8005338 <HAL_TIMEx_MasterConfigSynchronization>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80015b4:	f7ff fe0a 	bl	80011cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b8:	2360      	movs	r3, #96	@ 0x60
 80015ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c8:	463b      	mov	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	4619      	mov	r1, r3
 80015ce:	4807      	ldr	r0, [pc, #28]	@ (80015ec <MX_TIM4_Init+0xe4>)
 80015d0:	f003 f850 	bl	8004674 <HAL_TIM_PWM_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80015da:	f7ff fdf7 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015de:	4803      	ldr	r0, [pc, #12]	@ (80015ec <MX_TIM4_Init+0xe4>)
 80015e0:	f000 f900 	bl	80017e4 <HAL_TIM_MspPostInit>

}
 80015e4:	bf00      	nop
 80015e6:	3738      	adds	r7, #56	@ 0x38
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200001a8 	.word	0x200001a8
 80015f0:	40000800 	.word	0x40000800

080015f4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b09c      	sub	sp, #112	@ 0x70
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001614:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	615a      	str	r2, [r3, #20]
 8001626:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2234      	movs	r2, #52	@ 0x34
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f006 fa45 	bl	8007abe <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001634:	4b45      	ldr	r3, [pc, #276]	@ (800174c <MX_TIM8_Init+0x158>)
 8001636:	4a46      	ldr	r2, [pc, #280]	@ (8001750 <MX_TIM8_Init+0x15c>)
 8001638:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 170-1;
 800163a:	4b44      	ldr	r3, [pc, #272]	@ (800174c <MX_TIM8_Init+0x158>)
 800163c:	22a9      	movs	r2, #169	@ 0xa9
 800163e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b42      	ldr	r3, [pc, #264]	@ (800174c <MX_TIM8_Init+0x158>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 32;
 8001646:	4b41      	ldr	r3, [pc, #260]	@ (800174c <MX_TIM8_Init+0x158>)
 8001648:	2220      	movs	r2, #32
 800164a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164c:	4b3f      	ldr	r3, [pc, #252]	@ (800174c <MX_TIM8_Init+0x158>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001652:	4b3e      	ldr	r3, [pc, #248]	@ (800174c <MX_TIM8_Init+0x158>)
 8001654:	2200      	movs	r2, #0
 8001656:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001658:	4b3c      	ldr	r3, [pc, #240]	@ (800174c <MX_TIM8_Init+0x158>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800165e:	483b      	ldr	r0, [pc, #236]	@ (800174c <MX_TIM8_Init+0x158>)
 8001660:	f002 fe50 	bl	8004304 <HAL_TIM_Base_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800166a:	f7ff fdaf 	bl	80011cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001672:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001674:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001678:	4619      	mov	r1, r3
 800167a:	4834      	ldr	r0, [pc, #208]	@ (800174c <MX_TIM8_Init+0x158>)
 800167c:	f003 f90e 	bl	800489c <HAL_TIM_ConfigClockSource>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001686:	f7ff fda1 	bl	80011cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800168a:	4830      	ldr	r0, [pc, #192]	@ (800174c <MX_TIM8_Init+0x158>)
 800168c:	f002 fe91 	bl	80043b2 <HAL_TIM_PWM_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001696:	f7ff fd99 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016aa:	4619      	mov	r1, r3
 80016ac:	4827      	ldr	r0, [pc, #156]	@ (800174c <MX_TIM8_Init+0x158>)
 80016ae:	f003 fe43 	bl	8005338 <HAL_TIMEx_MasterConfigSynchronization>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 80016b8:	f7ff fd88 	bl	80011cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016bc:	2360      	movs	r3, #96	@ 0x60
 80016be:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c4:	2300      	movs	r3, #0
 80016c6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016c8:	2300      	movs	r3, #0
 80016ca:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016d4:	2300      	movs	r3, #0
 80016d6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016dc:	2204      	movs	r2, #4
 80016de:	4619      	mov	r1, r3
 80016e0:	481a      	ldr	r0, [pc, #104]	@ (800174c <MX_TIM8_Init+0x158>)
 80016e2:	f002 ffc7 	bl	8004674 <HAL_TIM_PWM_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 80016ec:	f7ff fd6e 	bl	80011cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001704:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001708:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800170e:	2300      	movs	r3, #0
 8001710:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001716:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800171a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001720:	2300      	movs	r3, #0
 8001722:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	4619      	mov	r1, r3
 800172c:	4807      	ldr	r0, [pc, #28]	@ (800174c <MX_TIM8_Init+0x158>)
 800172e:	f003 fe85 	bl	800543c <HAL_TIMEx_ConfigBreakDeadTime>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8001738:	f7ff fd48 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800173c:	4803      	ldr	r0, [pc, #12]	@ (800174c <MX_TIM8_Init+0x158>)
 800173e:	f000 f851 	bl	80017e4 <HAL_TIM_MspPostInit>

}
 8001742:	bf00      	nop
 8001744:	3770      	adds	r7, #112	@ 0x70
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200001f4 	.word	0x200001f4
 8001750:	40013400 	.word	0x40013400

08001754 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a1c      	ldr	r2, [pc, #112]	@ (80017d4 <HAL_TIM_Base_MspInit+0x80>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d10c      	bne.n	8001780 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001766:	4b1c      	ldr	r3, [pc, #112]	@ (80017d8 <HAL_TIM_Base_MspInit+0x84>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176a:	4a1b      	ldr	r2, [pc, #108]	@ (80017d8 <HAL_TIM_Base_MspInit+0x84>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	6593      	str	r3, [r2, #88]	@ 0x58
 8001772:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <HAL_TIM_Base_MspInit+0x84>)
 8001774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800177e:	e022      	b.n	80017c6 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a15      	ldr	r2, [pc, #84]	@ (80017dc <HAL_TIM_Base_MspInit+0x88>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d10c      	bne.n	80017a4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800178a:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <HAL_TIM_Base_MspInit+0x84>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178e:	4a12      	ldr	r2, [pc, #72]	@ (80017d8 <HAL_TIM_Base_MspInit+0x84>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	6593      	str	r3, [r2, #88]	@ 0x58
 8001796:	4b10      	ldr	r3, [pc, #64]	@ (80017d8 <HAL_TIM_Base_MspInit+0x84>)
 8001798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]
}
 80017a2:	e010      	b.n	80017c6 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM8)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0d      	ldr	r2, [pc, #52]	@ (80017e0 <HAL_TIM_Base_MspInit+0x8c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d10b      	bne.n	80017c6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017ae:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <HAL_TIM_Base_MspInit+0x84>)
 80017b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b2:	4a09      	ldr	r2, [pc, #36]	@ (80017d8 <HAL_TIM_Base_MspInit+0x84>)
 80017b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ba:	4b07      	ldr	r3, [pc, #28]	@ (80017d8 <HAL_TIM_Base_MspInit+0x84>)
 80017bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
}
 80017c6:	bf00      	nop
 80017c8:	371c      	adds	r7, #28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40000400 	.word	0x40000400
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40000800 	.word	0x40000800
 80017e0:	40013400 	.word	0x40013400

080017e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	@ 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a33      	ldr	r2, [pc, #204]	@ (80018d0 <HAL_TIM_MspPostInit+0xec>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d11d      	bne.n	8001842 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	4b33      	ldr	r3, [pc, #204]	@ (80018d4 <HAL_TIM_MspPostInit+0xf0>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180a:	4a32      	ldr	r2, [pc, #200]	@ (80018d4 <HAL_TIM_MspPostInit+0xf0>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001812:	4b30      	ldr	r3, [pc, #192]	@ (80018d4 <HAL_TIM_MspPostInit+0xf0>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800181e:	2380      	movs	r3, #128	@ 0x80
 8001820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800182e:	2302      	movs	r3, #2
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800183c:	f000 fda0 	bl	8002380 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001840:	e042      	b.n	80018c8 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM4)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a24      	ldr	r2, [pc, #144]	@ (80018d8 <HAL_TIM_MspPostInit+0xf4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d11c      	bne.n	8001886 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184c:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <HAL_TIM_MspPostInit+0xf0>)
 800184e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001850:	4a20      	ldr	r2, [pc, #128]	@ (80018d4 <HAL_TIM_MspPostInit+0xf0>)
 8001852:	f043 0302 	orr.w	r3, r3, #2
 8001856:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001858:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <HAL_TIM_MspPostInit+0xf0>)
 800185a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001864:	2340      	movs	r3, #64	@ 0x40
 8001866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001874:	2302      	movs	r3, #2
 8001876:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	4817      	ldr	r0, [pc, #92]	@ (80018dc <HAL_TIM_MspPostInit+0xf8>)
 8001880:	f000 fd7e 	bl	8002380 <HAL_GPIO_Init>
}
 8001884:	e020      	b.n	80018c8 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a15      	ldr	r2, [pc, #84]	@ (80018e0 <HAL_TIM_MspPostInit+0xfc>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d11b      	bne.n	80018c8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001890:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <HAL_TIM_MspPostInit+0xf0>)
 8001892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001894:	4a0f      	ldr	r2, [pc, #60]	@ (80018d4 <HAL_TIM_MspPostInit+0xf0>)
 8001896:	f043 0304 	orr.w	r3, r3, #4
 800189a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800189c:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <HAL_TIM_MspPostInit+0xf0>)
 800189e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018a8:	2380      	movs	r3, #128	@ 0x80
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80018b8:	2304      	movs	r3, #4
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	4808      	ldr	r0, [pc, #32]	@ (80018e4 <HAL_TIM_MspPostInit+0x100>)
 80018c4:	f000 fd5c 	bl	8002380 <HAL_GPIO_Init>
}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	@ 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40000400 	.word	0x40000400
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40000800 	.word	0x40000800
 80018dc:	48000400 	.word	0x48000400
 80018e0:	40013400 	.word	0x40013400
 80018e4:	48000800 	.word	0x48000800

080018e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018ec:	4b22      	ldr	r3, [pc, #136]	@ (8001978 <MX_USART1_UART_Init+0x90>)
 80018ee:	4a23      	ldr	r2, [pc, #140]	@ (800197c <MX_USART1_UART_Init+0x94>)
 80018f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018f2:	4b21      	ldr	r3, [pc, #132]	@ (8001978 <MX_USART1_UART_Init+0x90>)
 80018f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001978 <MX_USART1_UART_Init+0x90>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001900:	4b1d      	ldr	r3, [pc, #116]	@ (8001978 <MX_USART1_UART_Init+0x90>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001906:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <MX_USART1_UART_Init+0x90>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800190c:	4b1a      	ldr	r3, [pc, #104]	@ (8001978 <MX_USART1_UART_Init+0x90>)
 800190e:	220c      	movs	r2, #12
 8001910:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001912:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <MX_USART1_UART_Init+0x90>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001918:	4b17      	ldr	r3, [pc, #92]	@ (8001978 <MX_USART1_UART_Init+0x90>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191e:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <MX_USART1_UART_Init+0x90>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001924:	4b14      	ldr	r3, [pc, #80]	@ (8001978 <MX_USART1_UART_Init+0x90>)
 8001926:	2200      	movs	r2, #0
 8001928:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800192a:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <MX_USART1_UART_Init+0x90>)
 800192c:	2200      	movs	r2, #0
 800192e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001930:	4811      	ldr	r0, [pc, #68]	@ (8001978 <MX_USART1_UART_Init+0x90>)
 8001932:	f003 fe0f 	bl	8005554 <HAL_UART_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800193c:	f7ff fc46 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001940:	2100      	movs	r1, #0
 8001942:	480d      	ldr	r0, [pc, #52]	@ (8001978 <MX_USART1_UART_Init+0x90>)
 8001944:	f005 fe55 	bl	80075f2 <HAL_UARTEx_SetTxFifoThreshold>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800194e:	f7ff fc3d 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001952:	2100      	movs	r1, #0
 8001954:	4808      	ldr	r0, [pc, #32]	@ (8001978 <MX_USART1_UART_Init+0x90>)
 8001956:	f005 fe8a 	bl	800766e <HAL_UARTEx_SetRxFifoThreshold>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001960:	f7ff fc34 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001964:	4804      	ldr	r0, [pc, #16]	@ (8001978 <MX_USART1_UART_Init+0x90>)
 8001966:	f005 fe0b 	bl	8007580 <HAL_UARTEx_DisableFifoMode>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001970:	f7ff fc2c 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000240 	.word	0x20000240
 800197c:	40013800 	.word	0x40013800

08001980 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b09a      	sub	sp, #104	@ 0x68
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	2244      	movs	r2, #68	@ 0x44
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f006 f88c 	bl	8007abe <memset>
  if(uartHandle->Instance==USART1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a22      	ldr	r2, [pc, #136]	@ (8001a34 <HAL_UART_MspInit+0xb4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d13d      	bne.n	8001a2c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019b0:	2301      	movs	r3, #1
 80019b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	4618      	mov	r0, r3
 80019be:	f002 fab1 	bl	8003f24 <HAL_RCCEx_PeriphCLKConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019c8:	f7ff fc00 	bl	80011cc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <HAL_UART_MspInit+0xb8>)
 80019ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d0:	4a19      	ldr	r2, [pc, #100]	@ (8001a38 <HAL_UART_MspInit+0xb8>)
 80019d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80019d8:	4b17      	ldr	r3, [pc, #92]	@ (8001a38 <HAL_UART_MspInit+0xb8>)
 80019da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e4:	4b14      	ldr	r3, [pc, #80]	@ (8001a38 <HAL_UART_MspInit+0xb8>)
 80019e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e8:	4a13      	ldr	r2, [pc, #76]	@ (8001a38 <HAL_UART_MspInit+0xb8>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f0:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <HAL_UART_MspInit+0xb8>)
 80019f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80019fc:	2330      	movs	r3, #48	@ 0x30
 80019fe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a0c:	2307      	movs	r3, #7
 8001a0e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a14:	4619      	mov	r1, r3
 8001a16:	4809      	ldr	r0, [pc, #36]	@ (8001a3c <HAL_UART_MspInit+0xbc>)
 8001a18:	f000 fcb2 	bl	8002380 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2025      	movs	r0, #37	@ 0x25
 8001a22:	f000 fb58 	bl	80020d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a26:	2025      	movs	r0, #37	@ 0x25
 8001a28:	f000 fb6f 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	3768      	adds	r7, #104	@ 0x68
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40013800 	.word	0x40013800
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	48000800 	.word	0x48000800

08001a40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a40:	480d      	ldr	r0, [pc, #52]	@ (8001a78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a42:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a44:	f7ff fcd8 	bl	80013f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a48:	480c      	ldr	r0, [pc, #48]	@ (8001a7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a4a:	490d      	ldr	r1, [pc, #52]	@ (8001a80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a84 <LoopForever+0xe>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a50:	e002      	b.n	8001a58 <LoopCopyDataInit>

08001a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a56:	3304      	adds	r3, #4

08001a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a5c:	d3f9      	bcc.n	8001a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a60:	4c0a      	ldr	r4, [pc, #40]	@ (8001a8c <LoopForever+0x16>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a64:	e001      	b.n	8001a6a <LoopFillZerobss>

08001a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a68:	3204      	adds	r2, #4

08001a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a6c:	d3fb      	bcc.n	8001a66 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001a6e:	f006 f88d 	bl	8007b8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a72:	f7ff f9f3 	bl	8000e5c <main>

08001a76 <LoopForever>:

LoopForever:
    b LoopForever
 8001a76:	e7fe      	b.n	8001a76 <LoopForever>
  ldr   r0, =_estack
 8001a78:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a80:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001a84:	08008b38 	.word	0x08008b38
  ldr r2, =_sbss
 8001a88:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001a8c:	200004c4 	.word	0x200004c4

08001a90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a90:	e7fe      	b.n	8001a90 <ADC1_2_IRQHandler>
	...

08001a94 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8001a9e:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <BSP_LED_Init+0x64>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa2:	4a15      	ldr	r2, [pc, #84]	@ (8001af8 <BSP_LED_Init+0x64>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aaa:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <BSP_LED_Init+0x64>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8001afc <BSP_LED_Init+0x68>)
 8001aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ace:	f107 020c 	add.w	r2, r7, #12
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 fc53 	bl	8002380 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	4a07      	ldr	r2, [pc, #28]	@ (8001afc <BSP_LED_Init+0x68>)
 8001ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae2:	2120      	movs	r1, #32
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 fdcc 	bl	8002684 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3720      	adds	r7, #32
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000
 8001afc:	20000018 	.word	0x20000018

08001b00 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	4a06      	ldr	r2, [pc, #24]	@ (8001b28 <BSP_LED_On+0x28>)
 8001b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b12:	2120      	movs	r1, #32
 8001b14:	2201      	movs	r2, #1
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 fdb4 	bl	8002684 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000018 	.word	0x20000018

08001b2c <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4a06      	ldr	r2, [pc, #24]	@ (8001b54 <BSP_LED_Toggle+0x28>)
 8001b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	4611      	mov	r1, r2
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 fdb6 	bl	80026b4 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000018 	.word	0x20000018

08001b58 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	460a      	mov	r2, r1
 8001b62:	71fb      	strb	r3, [r7, #7]
 8001b64:	4613      	mov	r3, r2
 8001b66:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8001b68:	4b2c      	ldr	r3, [pc, #176]	@ (8001c1c <BSP_PB_Init+0xc4>)
 8001b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8001c1c <BSP_PB_Init+0xc4>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b74:	4b29      	ldr	r3, [pc, #164]	@ (8001c1c <BSP_PB_Init+0xc4>)
 8001b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001b80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b84:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001b86:	2302      	movs	r3, #2
 8001b88:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001b8e:	79bb      	ldrb	r3, [r7, #6]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10c      	bne.n	8001bae <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	4a21      	ldr	r2, [pc, #132]	@ (8001c20 <BSP_PB_Init+0xc8>)
 8001b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba0:	f107 020c 	add.w	r2, r7, #12
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 fbea 	bl	8002380 <HAL_GPIO_Init>
 8001bac:	e031      	b.n	8001c12 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001bae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bb2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	4a1a      	ldr	r2, [pc, #104]	@ (8001c20 <BSP_PB_Init+0xc8>)
 8001bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbc:	f107 020c 	add.w	r2, r7, #12
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 fbdc 	bl	8002380 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4a15      	ldr	r2, [pc, #84]	@ (8001c24 <BSP_PB_Init+0xcc>)
 8001bce:	441a      	add	r2, r3
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	4915      	ldr	r1, [pc, #84]	@ (8001c28 <BSP_PB_Init+0xd0>)
 8001bd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f000 fb8c 	bl	80022f8 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4a0f      	ldr	r2, [pc, #60]	@ (8001c24 <BSP_PB_Init+0xcc>)
 8001be6:	1898      	adds	r0, r3, r2
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	4a10      	ldr	r2, [pc, #64]	@ (8001c2c <BSP_PB_Init+0xd4>)
 8001bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	f000 fb63 	bl	80022be <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001bf8:	2028      	movs	r0, #40	@ 0x28
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8001c30 <BSP_PB_Init+0xd8>)
 8001bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c02:	2200      	movs	r2, #0
 8001c04:	4619      	mov	r1, r3
 8001c06:	f000 fa66 	bl	80020d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001c0a:	2328      	movs	r3, #40	@ 0x28
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 fa7c 	bl	800210a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3720      	adds	r7, #32
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	2000001c 	.word	0x2000001c
 8001c24:	200002d4 	.word	0x200002d4
 8001c28:	080089c8 	.word	0x080089c8
 8001c2c:	20000024 	.word	0x20000024
 8001c30:	20000028 	.word	0x20000028

08001c34 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4a04      	ldr	r2, [pc, #16]	@ (8001c54 <BSP_PB_IRQHandler+0x20>)
 8001c44:	4413      	add	r3, r2
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 fb6a 	bl	8002320 <HAL_EXTI_IRQHandler>
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200002d4 	.word	0x200002d4

08001c58 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d903      	bls.n	8001c76 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c6e:	f06f 0301 	mvn.w	r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	e018      	b.n	8001ca8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	2294      	movs	r2, #148	@ 0x94
 8001c7a:	fb02 f303 	mul.w	r3, r2, r3
 8001c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb4 <BSP_COM_Init+0x5c>)
 8001c80:	4413      	add	r3, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f86e 	bl	8001d64 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	2294      	movs	r2, #148	@ 0x94
 8001c8c:	fb02 f303 	mul.w	r3, r2, r3
 8001c90:	4a08      	ldr	r2, [pc, #32]	@ (8001cb4 <BSP_COM_Init+0x5c>)
 8001c92:	4413      	add	r3, r2
 8001c94:	6839      	ldr	r1, [r7, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f80e 	bl	8001cb8 <MX_LPUART1_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001ca2:	f06f 0303 	mvn.w	r3, #3
 8001ca6:	e000      	b.n	8001caa <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200002dc 	.word	0x200002dc

08001cb8 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001cc2:	4b15      	ldr	r3, [pc, #84]	@ (8001d18 <MX_LPUART1_Init+0x60>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	220c      	movs	r2, #12
 8001cd6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	895b      	ldrh	r3, [r3, #10]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	891b      	ldrh	r3, [r3, #8]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	899b      	ldrh	r3, [r3, #12]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d04:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f003 fc24 	bl	8005554 <HAL_UART_Init>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000020 	.word	0x20000020

08001d1c <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001d24:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <__io_putchar+0x30>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	2394      	movs	r3, #148	@ 0x94
 8001d2c:	fb02 f303 	mul.w	r3, r2, r3
 8001d30:	4a07      	ldr	r2, [pc, #28]	@ (8001d50 <__io_putchar+0x34>)
 8001d32:	1898      	adds	r0, r3, r2
 8001d34:	1d39      	adds	r1, r7, #4
 8001d36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f003 fc5a 	bl	80055f4 <HAL_UART_Transmit>
  return ch;
 8001d40:	687b      	ldr	r3, [r7, #4]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000370 	.word	0x20000370
 8001d50:	200002dc 	.word	0x200002dc

08001d54 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f7ff fa23 	bl	80011a4 <BSP_PB_Callback>
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	@ 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001d6c:	4b22      	ldr	r3, [pc, #136]	@ (8001df8 <COM1_MspInit+0x94>)
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d70:	4a21      	ldr	r2, [pc, #132]	@ (8001df8 <COM1_MspInit+0x94>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d78:	4b1f      	ldr	r3, [pc, #124]	@ (8001df8 <COM1_MspInit+0x94>)
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001d84:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <COM1_MspInit+0x94>)
 8001d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d88:	4a1b      	ldr	r2, [pc, #108]	@ (8001df8 <COM1_MspInit+0x94>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d90:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <COM1_MspInit+0x94>)
 8001d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001d9c:	4b16      	ldr	r3, [pc, #88]	@ (8001df8 <COM1_MspInit+0x94>)
 8001d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da0:	4a15      	ldr	r2, [pc, #84]	@ (8001df8 <COM1_MspInit+0x94>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001da8:	4b13      	ldr	r3, [pc, #76]	@ (8001df8 <COM1_MspInit+0x94>)
 8001daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001db4:	2304      	movs	r3, #4
 8001db6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001dc4:	230c      	movs	r3, #12
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dd2:	f000 fad5 	bl	8002380 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001dd6:	2308      	movs	r3, #8
 8001dd8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001dde:	230c      	movs	r3, #12
 8001de0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dec:	f000 fac8 	bl	8002380 <HAL_GPIO_Init>
}
 8001df0:	bf00      	nop
 8001df2:	3728      	adds	r7, #40	@ 0x28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000

08001dfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e06:	2003      	movs	r0, #3
 8001e08:	f000 f95a 	bl	80020c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f000 f80d 	bl	8001e2c <HAL_InitTick>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	71fb      	strb	r3, [r7, #7]
 8001e1c:	e001      	b.n	8001e22 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e1e:	f7ff f9db 	bl	80011d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e22:	79fb      	ldrb	r3, [r7, #7]

}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e38:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <HAL_InitTick+0x68>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d022      	beq.n	8001e86 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e40:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <HAL_InitTick+0x6c>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <HAL_InitTick+0x68>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 f966 	bl	8002126 <HAL_SYSTICK_Config>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10f      	bne.n	8001e80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b0f      	cmp	r3, #15
 8001e64:	d809      	bhi.n	8001e7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e66:	2200      	movs	r2, #0
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6e:	f000 f932 	bl	80020d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e72:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <HAL_InitTick+0x70>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	e007      	b.n	8001e8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	73fb      	strb	r3, [r7, #15]
 8001e7e:	e004      	b.n	8001e8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e001      	b.n	8001e8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000030 	.word	0x20000030
 8001e98:	20000014 	.word	0x20000014
 8001e9c:	2000002c 	.word	0x2000002c

08001ea0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea4:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <HAL_IncTick+0x1c>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b05      	ldr	r3, [pc, #20]	@ (8001ec0 <HAL_IncTick+0x20>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4413      	add	r3, r2
 8001eae:	4a03      	ldr	r2, [pc, #12]	@ (8001ebc <HAL_IncTick+0x1c>)
 8001eb0:	6013      	str	r3, [r2, #0]
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	20000374 	.word	0x20000374
 8001ec0:	20000030 	.word	0x20000030

08001ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec8:	4b03      	ldr	r3, [pc, #12]	@ (8001ed8 <HAL_GetTick+0x14>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000374 	.word	0x20000374

08001edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee4:	f7ff ffee 	bl	8001ec4 <HAL_GetTick>
 8001ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d004      	beq.n	8001f00 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ef6:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <HAL_Delay+0x40>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4413      	add	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f00:	bf00      	nop
 8001f02:	f7ff ffdf 	bl	8001ec4 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d8f7      	bhi.n	8001f02 <HAL_Delay+0x26>
  {
  }
}
 8001f12:	bf00      	nop
 8001f14:	bf00      	nop
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000030 	.word	0x20000030

08001f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f30:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f52:	4a04      	ldr	r2, [pc, #16]	@ (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	60d3      	str	r3, [r2, #12]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f6c:	4b04      	ldr	r3, [pc, #16]	@ (8001f80 <__NVIC_GetPriorityGrouping+0x18>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 0307 	and.w	r3, r3, #7
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db0b      	blt.n	8001fae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	f003 021f 	and.w	r2, r3, #31
 8001f9c:	4907      	ldr	r1, [pc, #28]	@ (8001fbc <__NVIC_EnableIRQ+0x38>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	db0a      	blt.n	8001fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	490c      	ldr	r1, [pc, #48]	@ (800200c <__NVIC_SetPriority+0x4c>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	0112      	lsls	r2, r2, #4
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe8:	e00a      	b.n	8002000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4908      	ldr	r1, [pc, #32]	@ (8002010 <__NVIC_SetPriority+0x50>)
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	3b04      	subs	r3, #4
 8001ff8:	0112      	lsls	r2, r2, #4
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	761a      	strb	r2, [r3, #24]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000e100 	.word	0xe000e100
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	@ 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f1c3 0307 	rsb	r3, r3, #7
 800202e:	2b04      	cmp	r3, #4
 8002030:	bf28      	it	cs
 8002032:	2304      	movcs	r3, #4
 8002034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3304      	adds	r3, #4
 800203a:	2b06      	cmp	r3, #6
 800203c:	d902      	bls.n	8002044 <NVIC_EncodePriority+0x30>
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3b03      	subs	r3, #3
 8002042:	e000      	b.n	8002046 <NVIC_EncodePriority+0x32>
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	401a      	ands	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800205c:	f04f 31ff 	mov.w	r1, #4294967295
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43d9      	mvns	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	4313      	orrs	r3, r2
         );
}
 800206e:	4618      	mov	r0, r3
 8002070:	3724      	adds	r7, #36	@ 0x24
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800208c:	d301      	bcc.n	8002092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800208e:	2301      	movs	r3, #1
 8002090:	e00f      	b.n	80020b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002092:	4a0a      	ldr	r2, [pc, #40]	@ (80020bc <SysTick_Config+0x40>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209a:	210f      	movs	r1, #15
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
 80020a0:	f7ff ff8e 	bl	8001fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a4:	4b05      	ldr	r3, [pc, #20]	@ (80020bc <SysTick_Config+0x40>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020aa:	4b04      	ldr	r3, [pc, #16]	@ (80020bc <SysTick_Config+0x40>)
 80020ac:	2207      	movs	r2, #7
 80020ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	e000e010 	.word	0xe000e010

080020c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff29 	bl	8001f20 <__NVIC_SetPriorityGrouping>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4603      	mov	r3, r0
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020e4:	f7ff ff40 	bl	8001f68 <__NVIC_GetPriorityGrouping>
 80020e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	6978      	ldr	r0, [r7, #20]
 80020f0:	f7ff ff90 	bl	8002014 <NVIC_EncodePriority>
 80020f4:	4602      	mov	r2, r0
 80020f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff5f 	bl	8001fc0 <__NVIC_SetPriority>
}
 8002102:	bf00      	nop
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff33 	bl	8001f84 <__NVIC_EnableIRQ>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ffa4 	bl	800207c <SysTick_Config>
 8002134:	4603      	mov	r3, r0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800213e:	b480      	push	{r7}
 8002140:	b085      	sub	sp, #20
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d005      	beq.n	8002162 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2204      	movs	r2, #4
 800215a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	e037      	b.n	80021d2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 020e 	bic.w	r2, r2, #14
 8002170:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800217c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002180:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0201 	bic.w	r2, r2, #1
 8002190:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002196:	f003 021f 	and.w	r2, r3, #31
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	2101      	movs	r1, #1
 80021a0:	fa01 f202 	lsl.w	r2, r1, r2
 80021a4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021ae:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00c      	beq.n	80021d2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021c6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80021d0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d00d      	beq.n	8002224 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2204      	movs	r2, #4
 800220c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	73fb      	strb	r3, [r7, #15]
 8002222:	e047      	b.n	80022b4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 020e 	bic.w	r2, r2, #14
 8002232:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0201 	bic.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800224e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002252:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002258:	f003 021f 	and.w	r2, r3, #31
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	2101      	movs	r1, #1
 8002262:	fa01 f202 	lsl.w	r2, r1, r2
 8002266:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002270:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00c      	beq.n	8002294 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002284:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002288:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002292:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
    }
  }
  return status;
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80022be:	b480      	push	{r7}
 80022c0:	b087      	sub	sp, #28
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	460b      	mov	r3, r1
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 80022d0:	7afb      	ldrb	r3, [r7, #11]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d103      	bne.n	80022de <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	605a      	str	r2, [r3, #4]
      break;
 80022dc:	e005      	b.n	80022ea <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	75fb      	strb	r3, [r7, #23]
      break;
 80022e8:	bf00      	nop
  }

  return status;
 80022ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	371c      	adds	r7, #28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e003      	b.n	8002314 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002312:	2300      	movs	r3, #0
  }
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	0c1b      	lsrs	r3, r3, #16
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	2201      	movs	r2, #1
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	015a      	lsls	r2, r3, #5
 8002348:	4b0c      	ldr	r3, [pc, #48]	@ (800237c <HAL_EXTI_IRQHandler+0x5c>)
 800234a:	4413      	add	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4013      	ands	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4798      	blx	r3
    }
  }
}
 8002372:	bf00      	nop
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40010414 	.word	0x40010414

08002380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800238e:	e15a      	b.n	8002646 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	2101      	movs	r1, #1
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	fa01 f303 	lsl.w	r3, r1, r3
 800239c:	4013      	ands	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 814c 	beq.w	8002640 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d005      	beq.n	80023c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d130      	bne.n	8002422 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	2203      	movs	r2, #3
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023f6:	2201      	movs	r2, #1
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	091b      	lsrs	r3, r3, #4
 800240c:	f003 0201 	and.w	r2, r3, #1
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b03      	cmp	r3, #3
 800242c:	d017      	beq.n	800245e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	2203      	movs	r2, #3
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d123      	bne.n	80024b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	08da      	lsrs	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3208      	adds	r2, #8
 8002472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002476:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	220f      	movs	r2, #15
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4013      	ands	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	08da      	lsrs	r2, r3, #3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3208      	adds	r2, #8
 80024ac:	6939      	ldr	r1, [r7, #16]
 80024ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	2203      	movs	r2, #3
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0203 	and.w	r2, r3, #3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 80a6 	beq.w	8002640 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f4:	4b5b      	ldr	r3, [pc, #364]	@ (8002664 <HAL_GPIO_Init+0x2e4>)
 80024f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002664 <HAL_GPIO_Init+0x2e4>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002500:	4b58      	ldr	r3, [pc, #352]	@ (8002664 <HAL_GPIO_Init+0x2e4>)
 8002502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800250c:	4a56      	ldr	r2, [pc, #344]	@ (8002668 <HAL_GPIO_Init+0x2e8>)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002518:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	220f      	movs	r2, #15
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002536:	d01f      	beq.n	8002578 <HAL_GPIO_Init+0x1f8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a4c      	ldr	r2, [pc, #304]	@ (800266c <HAL_GPIO_Init+0x2ec>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d019      	beq.n	8002574 <HAL_GPIO_Init+0x1f4>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a4b      	ldr	r2, [pc, #300]	@ (8002670 <HAL_GPIO_Init+0x2f0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d013      	beq.n	8002570 <HAL_GPIO_Init+0x1f0>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a4a      	ldr	r2, [pc, #296]	@ (8002674 <HAL_GPIO_Init+0x2f4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d00d      	beq.n	800256c <HAL_GPIO_Init+0x1ec>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a49      	ldr	r2, [pc, #292]	@ (8002678 <HAL_GPIO_Init+0x2f8>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d007      	beq.n	8002568 <HAL_GPIO_Init+0x1e8>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a48      	ldr	r2, [pc, #288]	@ (800267c <HAL_GPIO_Init+0x2fc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d101      	bne.n	8002564 <HAL_GPIO_Init+0x1e4>
 8002560:	2305      	movs	r3, #5
 8002562:	e00a      	b.n	800257a <HAL_GPIO_Init+0x1fa>
 8002564:	2306      	movs	r3, #6
 8002566:	e008      	b.n	800257a <HAL_GPIO_Init+0x1fa>
 8002568:	2304      	movs	r3, #4
 800256a:	e006      	b.n	800257a <HAL_GPIO_Init+0x1fa>
 800256c:	2303      	movs	r3, #3
 800256e:	e004      	b.n	800257a <HAL_GPIO_Init+0x1fa>
 8002570:	2302      	movs	r3, #2
 8002572:	e002      	b.n	800257a <HAL_GPIO_Init+0x1fa>
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <HAL_GPIO_Init+0x1fa>
 8002578:	2300      	movs	r3, #0
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	f002 0203 	and.w	r2, r2, #3
 8002580:	0092      	lsls	r2, r2, #2
 8002582:	4093      	lsls	r3, r2
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800258a:	4937      	ldr	r1, [pc, #220]	@ (8002668 <HAL_GPIO_Init+0x2e8>)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	089b      	lsrs	r3, r3, #2
 8002590:	3302      	adds	r3, #2
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002598:	4b39      	ldr	r3, [pc, #228]	@ (8002680 <HAL_GPIO_Init+0x300>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025bc:	4a30      	ldr	r2, [pc, #192]	@ (8002680 <HAL_GPIO_Init+0x300>)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002680 <HAL_GPIO_Init+0x300>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4013      	ands	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025e6:	4a26      	ldr	r2, [pc, #152]	@ (8002680 <HAL_GPIO_Init+0x300>)
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80025ec:	4b24      	ldr	r3, [pc, #144]	@ (8002680 <HAL_GPIO_Init+0x300>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002610:	4a1b      	ldr	r2, [pc, #108]	@ (8002680 <HAL_GPIO_Init+0x300>)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002616:	4b1a      	ldr	r3, [pc, #104]	@ (8002680 <HAL_GPIO_Init+0x300>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	43db      	mvns	r3, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4013      	ands	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800263a:	4a11      	ldr	r2, [pc, #68]	@ (8002680 <HAL_GPIO_Init+0x300>)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	3301      	adds	r3, #1
 8002644:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	f47f ae9d 	bne.w	8002390 <HAL_GPIO_Init+0x10>
  }
}
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	371c      	adds	r7, #28
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	40021000 	.word	0x40021000
 8002668:	40010000 	.word	0x40010000
 800266c:	48000400 	.word	0x48000400
 8002670:	48000800 	.word	0x48000800
 8002674:	48000c00 	.word	0x48000c00
 8002678:	48001000 	.word	0x48001000
 800267c:	48001400 	.word	0x48001400
 8002680:	40010400 	.word	0x40010400

08002684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]
 8002690:	4613      	mov	r3, r2
 8002692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002694:	787b      	ldrb	r3, [r7, #1]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026a0:	e002      	b.n	80026a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026a2:	887a      	ldrh	r2, [r7, #2]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4013      	ands	r3, r2
 80026cc:	041a      	lsls	r2, r3, #16
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	43d9      	mvns	r1, r3
 80026d2:	887b      	ldrh	r3, [r7, #2]
 80026d4:	400b      	ands	r3, r1
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	619a      	str	r2, [r3, #24]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026f2:	4b08      	ldr	r3, [pc, #32]	@ (8002714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d006      	beq.n	800270c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026fe:	4a05      	ldr	r2, [pc, #20]	@ (8002714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002704:	88fb      	ldrh	r3, [r7, #6]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fd34 	bl	8001174 <HAL_GPIO_EXTI_Callback>
  }
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40010400 	.word	0x40010400

08002718 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e08d      	b.n	8002846 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d106      	bne.n	8002744 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7fd ffce 	bl	80006e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2224      	movs	r2, #36	@ 0x24
 8002748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002768:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002778:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d107      	bne.n	8002792 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	e006      	b.n	80027a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800279e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d108      	bne.n	80027ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	e007      	b.n	80027ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69d9      	ldr	r1, [r3, #28]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1a      	ldr	r2, [r3, #32]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2220      	movs	r2, #32
 8002832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af02      	add	r7, sp, #8
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	4608      	mov	r0, r1
 800285a:	4611      	mov	r1, r2
 800285c:	461a      	mov	r2, r3
 800285e:	4603      	mov	r3, r0
 8002860:	817b      	strh	r3, [r7, #10]
 8002862:	460b      	mov	r3, r1
 8002864:	813b      	strh	r3, [r7, #8]
 8002866:	4613      	mov	r3, r2
 8002868:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b20      	cmp	r3, #32
 8002874:	f040 80f9 	bne.w	8002a6a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <HAL_I2C_Mem_Write+0x34>
 800287e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800288a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0ed      	b.n	8002a6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_I2C_Mem_Write+0x4e>
 800289a:	2302      	movs	r3, #2
 800289c:	e0e6      	b.n	8002a6c <HAL_I2C_Mem_Write+0x21c>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028a6:	f7ff fb0d 	bl	8001ec4 <HAL_GetTick>
 80028aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	2319      	movs	r3, #25
 80028b2:	2201      	movs	r2, #1
 80028b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 fac3 	bl	8002e44 <I2C_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0d1      	b.n	8002a6c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2221      	movs	r2, #33	@ 0x21
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2240      	movs	r2, #64	@ 0x40
 80028d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a3a      	ldr	r2, [r7, #32]
 80028e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80028e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028f0:	88f8      	ldrh	r0, [r7, #6]
 80028f2:	893a      	ldrh	r2, [r7, #8]
 80028f4:	8979      	ldrh	r1, [r7, #10]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	4603      	mov	r3, r0
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 f9d3 	bl	8002cac <I2C_RequestMemoryWrite>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0a9      	b.n	8002a6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	2bff      	cmp	r3, #255	@ 0xff
 8002920:	d90e      	bls.n	8002940 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	22ff      	movs	r2, #255	@ 0xff
 8002926:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292c:	b2da      	uxtb	r2, r3
 800292e:	8979      	ldrh	r1, [r7, #10]
 8002930:	2300      	movs	r3, #0
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fc47 	bl	80031cc <I2C_TransferConfig>
 800293e:	e00f      	b.n	8002960 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294e:	b2da      	uxtb	r2, r3
 8002950:	8979      	ldrh	r1, [r7, #10]
 8002952:	2300      	movs	r3, #0
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 fc36 	bl	80031cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 fac6 	bl	8002ef6 <I2C_WaitOnTXISFlagUntilTimeout>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e07b      	b.n	8002a6c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	781a      	ldrb	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d034      	beq.n	8002a18 <HAL_I2C_Mem_Write+0x1c8>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d130      	bne.n	8002a18 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029bc:	2200      	movs	r2, #0
 80029be:	2180      	movs	r1, #128	@ 0x80
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 fa3f 	bl	8002e44 <I2C_WaitOnFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e04d      	b.n	8002a6c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2bff      	cmp	r3, #255	@ 0xff
 80029d8:	d90e      	bls.n	80029f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	22ff      	movs	r2, #255	@ 0xff
 80029de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	8979      	ldrh	r1, [r7, #10]
 80029e8:	2300      	movs	r3, #0
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fbeb 	bl	80031cc <I2C_TransferConfig>
 80029f6:	e00f      	b.n	8002a18 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	8979      	ldrh	r1, [r7, #10]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fbda 	bl	80031cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d19e      	bne.n	8002960 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 faac 	bl	8002f84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e01a      	b.n	8002a6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <HAL_I2C_Mem_Write+0x224>)
 8002a4a:	400b      	ands	r3, r1
 8002a4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e000      	b.n	8002a6c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a6a:	2302      	movs	r3, #2
  }
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	fe00e800 	.word	0xfe00e800

08002a78 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	4608      	mov	r0, r1
 8002a82:	4611      	mov	r1, r2
 8002a84:	461a      	mov	r2, r3
 8002a86:	4603      	mov	r3, r0
 8002a88:	817b      	strh	r3, [r7, #10]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	813b      	strh	r3, [r7, #8]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b20      	cmp	r3, #32
 8002a9c:	f040 80fd 	bne.w	8002c9a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_I2C_Mem_Read+0x34>
 8002aa6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d105      	bne.n	8002ab8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ab2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0f1      	b.n	8002c9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_I2C_Mem_Read+0x4e>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e0ea      	b.n	8002c9c <HAL_I2C_Mem_Read+0x224>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ace:	f7ff f9f9 	bl	8001ec4 <HAL_GetTick>
 8002ad2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	2319      	movs	r3, #25
 8002ada:	2201      	movs	r2, #1
 8002adc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f9af 	bl	8002e44 <I2C_WaitOnFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0d5      	b.n	8002c9c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2222      	movs	r2, #34	@ 0x22
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2240      	movs	r2, #64	@ 0x40
 8002afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a3a      	ldr	r2, [r7, #32]
 8002b0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b18:	88f8      	ldrh	r0, [r7, #6]
 8002b1a:	893a      	ldrh	r2, [r7, #8]
 8002b1c:	8979      	ldrh	r1, [r7, #10]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	9301      	str	r3, [sp, #4]
 8002b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	4603      	mov	r3, r0
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f913 	bl	8002d54 <I2C_RequestMemoryRead>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0ad      	b.n	8002c9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2bff      	cmp	r3, #255	@ 0xff
 8002b48:	d90e      	bls.n	8002b68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	22ff      	movs	r2, #255	@ 0xff
 8002b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	8979      	ldrh	r1, [r7, #10]
 8002b58:	4b52      	ldr	r3, [pc, #328]	@ (8002ca4 <HAL_I2C_Mem_Read+0x22c>)
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fb33 	bl	80031cc <I2C_TransferConfig>
 8002b66:	e00f      	b.n	8002b88 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	8979      	ldrh	r1, [r7, #10]
 8002b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca4 <HAL_I2C_Mem_Read+0x22c>)
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 fb22 	bl	80031cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2104      	movs	r1, #4
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f956 	bl	8002e44 <I2C_WaitOnFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e07c      	b.n	8002c9c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d034      	beq.n	8002c48 <HAL_I2C_Mem_Read+0x1d0>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d130      	bne.n	8002c48 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bec:	2200      	movs	r2, #0
 8002bee:	2180      	movs	r1, #128	@ 0x80
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f927 	bl	8002e44 <I2C_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e04d      	b.n	8002c9c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2bff      	cmp	r3, #255	@ 0xff
 8002c08:	d90e      	bls.n	8002c28 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	22ff      	movs	r2, #255	@ 0xff
 8002c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	8979      	ldrh	r1, [r7, #10]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 fad3 	bl	80031cc <I2C_TransferConfig>
 8002c26:	e00f      	b.n	8002c48 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	8979      	ldrh	r1, [r7, #10]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fac2 	bl	80031cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d19a      	bne.n	8002b88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f994 	bl	8002f84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e01a      	b.n	8002c9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <HAL_I2C_Mem_Read+0x230>)
 8002c7a:	400b      	ands	r3, r1
 8002c7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e000      	b.n	8002c9c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c9a:	2302      	movs	r3, #2
  }
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	80002400 	.word	0x80002400
 8002ca8:	fe00e800 	.word	0xfe00e800

08002cac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	4608      	mov	r0, r1
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4603      	mov	r3, r0
 8002cbc:	817b      	strh	r3, [r7, #10]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	813b      	strh	r3, [r7, #8]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	8979      	ldrh	r1, [r7, #10]
 8002ccc:	4b20      	ldr	r3, [pc, #128]	@ (8002d50 <I2C_RequestMemoryWrite+0xa4>)
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fa79 	bl	80031cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	69b9      	ldr	r1, [r7, #24]
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f909 	bl	8002ef6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e02c      	b.n	8002d48 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d105      	bne.n	8002d00 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cf4:	893b      	ldrh	r3, [r7, #8]
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cfe:	e015      	b.n	8002d2c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d00:	893b      	ldrh	r3, [r7, #8]
 8002d02:	0a1b      	lsrs	r3, r3, #8
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	69b9      	ldr	r1, [r7, #24]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f8ef 	bl	8002ef6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e012      	b.n	8002d48 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d22:	893b      	ldrh	r3, [r7, #8]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2200      	movs	r2, #0
 8002d34:	2180      	movs	r1, #128	@ 0x80
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f884 	bl	8002e44 <I2C_WaitOnFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	80002000 	.word	0x80002000

08002d54 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	4608      	mov	r0, r1
 8002d5e:	4611      	mov	r1, r2
 8002d60:	461a      	mov	r2, r3
 8002d62:	4603      	mov	r3, r0
 8002d64:	817b      	strh	r3, [r7, #10]
 8002d66:	460b      	mov	r3, r1
 8002d68:	813b      	strh	r3, [r7, #8]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	8979      	ldrh	r1, [r7, #10]
 8002d74:	4b20      	ldr	r3, [pc, #128]	@ (8002df8 <I2C_RequestMemoryRead+0xa4>)
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fa26 	bl	80031cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	69b9      	ldr	r1, [r7, #24]
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f8b6 	bl	8002ef6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e02c      	b.n	8002dee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d94:	88fb      	ldrh	r3, [r7, #6]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d105      	bne.n	8002da6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d9a:	893b      	ldrh	r3, [r7, #8]
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002da4:	e015      	b.n	8002dd2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002da6:	893b      	ldrh	r3, [r7, #8]
 8002da8:	0a1b      	lsrs	r3, r3, #8
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	69b9      	ldr	r1, [r7, #24]
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f89c 	bl	8002ef6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e012      	b.n	8002dee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dc8:	893b      	ldrh	r3, [r7, #8]
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2140      	movs	r1, #64	@ 0x40
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f831 	bl	8002e44 <I2C_WaitOnFlagUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	80002000 	.word	0x80002000

08002dfc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d103      	bne.n	8002e1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d007      	beq.n	8002e38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	619a      	str	r2, [r3, #24]
  }
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e54:	e03b      	b.n	8002ece <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	6839      	ldr	r1, [r7, #0]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f8d6 	bl	800300c <I2C_IsErrorOccurred>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e041      	b.n	8002eee <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d02d      	beq.n	8002ece <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e72:	f7ff f827 	bl	8001ec4 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d302      	bcc.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d122      	bne.n	8002ece <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	4013      	ands	r3, r2
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d113      	bne.n	8002ece <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	f043 0220 	orr.w	r2, r3, #32
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e00f      	b.n	8002eee <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699a      	ldr	r2, [r3, #24]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	bf0c      	ite	eq
 8002ede:	2301      	moveq	r3, #1
 8002ee0:	2300      	movne	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d0b4      	beq.n	8002e56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f02:	e033      	b.n	8002f6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f87f 	bl	800300c <I2C_IsErrorOccurred>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e031      	b.n	8002f7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1e:	d025      	beq.n	8002f6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f20:	f7fe ffd0 	bl	8001ec4 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d302      	bcc.n	8002f36 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d11a      	bne.n	8002f6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d013      	beq.n	8002f6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f48:	f043 0220 	orr.w	r2, r3, #32
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e007      	b.n	8002f7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d1c4      	bne.n	8002f04 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f90:	e02f      	b.n	8002ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f838 	bl	800300c <I2C_IsErrorOccurred>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e02d      	b.n	8003002 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7fe ff8d 	bl	8001ec4 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d11a      	bne.n	8002ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d013      	beq.n	8002ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fce:	f043 0220 	orr.w	r2, r3, #32
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e007      	b.n	8003002 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d1c8      	bne.n	8002f92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08a      	sub	sp, #40	@ 0x28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b00      	cmp	r3, #0
 8003036:	d068      	beq.n	800310a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2210      	movs	r2, #16
 800303e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003040:	e049      	b.n	80030d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d045      	beq.n	80030d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800304a:	f7fe ff3b 	bl	8001ec4 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	429a      	cmp	r2, r3
 8003058:	d302      	bcc.n	8003060 <I2C_IsErrorOccurred+0x54>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d13a      	bne.n	80030d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800306a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003072:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800307e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003082:	d121      	bne.n	80030c8 <I2C_IsErrorOccurred+0xbc>
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800308a:	d01d      	beq.n	80030c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800308c:	7cfb      	ldrb	r3, [r7, #19]
 800308e:	2b20      	cmp	r3, #32
 8003090:	d01a      	beq.n	80030c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030a2:	f7fe ff0f 	bl	8001ec4 <HAL_GetTick>
 80030a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030a8:	e00e      	b.n	80030c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030aa:	f7fe ff0b 	bl	8001ec4 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b19      	cmp	r3, #25
 80030b6:	d907      	bls.n	80030c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	f043 0320 	orr.w	r3, r3, #32
 80030be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80030c6:	e006      	b.n	80030d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d1e9      	bne.n	80030aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d003      	beq.n	80030ec <I2C_IsErrorOccurred+0xe0>
 80030e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0aa      	beq.n	8003042 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80030ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d103      	bne.n	80030fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2220      	movs	r2, #32
 80030fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	f043 0304 	orr.w	r3, r3, #4
 8003102:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00b      	beq.n	8003134 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800312c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00b      	beq.n	8003156 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	f043 0308 	orr.w	r3, r3, #8
 8003144:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800314e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00b      	beq.n	8003178 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	f043 0302 	orr.w	r3, r3, #2
 8003166:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003170:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003178:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01c      	beq.n	80031ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f7ff fe3b 	bl	8002dfc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b0d      	ldr	r3, [pc, #52]	@ (80031c8 <I2C_IsErrorOccurred+0x1bc>)
 8003192:	400b      	ands	r3, r1
 8003194:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	431a      	orrs	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80031ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3728      	adds	r7, #40	@ 0x28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	fe00e800 	.word	0xfe00e800

080031cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	607b      	str	r3, [r7, #4]
 80031d6:	460b      	mov	r3, r1
 80031d8:	817b      	strh	r3, [r7, #10]
 80031da:	4613      	mov	r3, r2
 80031dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031de:	897b      	ldrh	r3, [r7, #10]
 80031e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031e4:	7a7b      	ldrb	r3, [r7, #9]
 80031e6:	041b      	lsls	r3, r3, #16
 80031e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	0d5b      	lsrs	r3, r3, #21
 8003206:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800320a:	4b08      	ldr	r3, [pc, #32]	@ (800322c <I2C_TransferConfig+0x60>)
 800320c:	430b      	orrs	r3, r1
 800320e:	43db      	mvns	r3, r3
 8003210:	ea02 0103 	and.w	r1, r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	03ff63ff 	.word	0x03ff63ff

08003230 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b20      	cmp	r3, #32
 8003244:	d138      	bne.n	80032b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003250:	2302      	movs	r3, #2
 8003252:	e032      	b.n	80032ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	@ 0x24
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003282:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6819      	ldr	r1, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	e000      	b.n	80032ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032b8:	2302      	movs	r3, #2
  }
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b085      	sub	sp, #20
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d139      	bne.n	8003350 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e033      	b.n	8003352 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2224      	movs	r2, #36	@ 0x24
 80032f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0201 	bic.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003318:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	e000      	b.n	8003352 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003350:	2302      	movs	r3, #2
  }
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d141      	bne.n	80033f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800336e:	4b4b      	ldr	r3, [pc, #300]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800337a:	d131      	bne.n	80033e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800337c:	4b47      	ldr	r3, [pc, #284]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003382:	4a46      	ldr	r2, [pc, #280]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003384:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003388:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800338c:	4b43      	ldr	r3, [pc, #268]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003394:	4a41      	ldr	r2, [pc, #260]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003396:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800339a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800339c:	4b40      	ldr	r3, [pc, #256]	@ (80034a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2232      	movs	r2, #50	@ 0x32
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	4a3f      	ldr	r2, [pc, #252]	@ (80034a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	0c9b      	lsrs	r3, r3, #18
 80033ae:	3301      	adds	r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033b2:	e002      	b.n	80033ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ba:	4b38      	ldr	r3, [pc, #224]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c6:	d102      	bne.n	80033ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f2      	bne.n	80033b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033ce:	4b33      	ldr	r3, [pc, #204]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033da:	d158      	bne.n	800348e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e057      	b.n	8003490 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033e0:	4b2e      	ldr	r3, [pc, #184]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033e6:	4a2d      	ldr	r2, [pc, #180]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80033f0:	e04d      	b.n	800348e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033f8:	d141      	bne.n	800347e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033fa:	4b28      	ldr	r3, [pc, #160]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003406:	d131      	bne.n	800346c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003408:	4b24      	ldr	r3, [pc, #144]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800340e:	4a23      	ldr	r2, [pc, #140]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003414:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003418:	4b20      	ldr	r3, [pc, #128]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003420:	4a1e      	ldr	r2, [pc, #120]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003422:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003426:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003428:	4b1d      	ldr	r3, [pc, #116]	@ (80034a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2232      	movs	r2, #50	@ 0x32
 800342e:	fb02 f303 	mul.w	r3, r2, r3
 8003432:	4a1c      	ldr	r2, [pc, #112]	@ (80034a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	0c9b      	lsrs	r3, r3, #18
 800343a:	3301      	adds	r3, #1
 800343c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800343e:	e002      	b.n	8003446 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3b01      	subs	r3, #1
 8003444:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003446:	4b15      	ldr	r3, [pc, #84]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800344e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003452:	d102      	bne.n	800345a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f2      	bne.n	8003440 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800345a:	4b10      	ldr	r3, [pc, #64]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003466:	d112      	bne.n	800348e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e011      	b.n	8003490 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800346c:	4b0b      	ldr	r3, [pc, #44]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003472:	4a0a      	ldr	r2, [pc, #40]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003478:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800347c:	e007      	b.n	800348e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800347e:	4b07      	ldr	r3, [pc, #28]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003486:	4a05      	ldr	r2, [pc, #20]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003488:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800348c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	40007000 	.word	0x40007000
 80034a0:	20000014 	.word	0x20000014
 80034a4:	431bde83 	.word	0x431bde83

080034a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80034ac:	4b05      	ldr	r3, [pc, #20]	@ (80034c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	4a04      	ldr	r2, [pc, #16]	@ (80034c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034b6:	6093      	str	r3, [r2, #8]
}
 80034b8:	bf00      	nop
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40007000 	.word	0x40007000

080034c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e2fe      	b.n	8003ad8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d075      	beq.n	80035d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034e6:	4b97      	ldr	r3, [pc, #604]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034f0:	4b94      	ldr	r3, [pc, #592]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b0c      	cmp	r3, #12
 80034fe:	d102      	bne.n	8003506 <HAL_RCC_OscConfig+0x3e>
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b03      	cmp	r3, #3
 8003504:	d002      	beq.n	800350c <HAL_RCC_OscConfig+0x44>
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b08      	cmp	r3, #8
 800350a:	d10b      	bne.n	8003524 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800350c:	4b8d      	ldr	r3, [pc, #564]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d05b      	beq.n	80035d0 <HAL_RCC_OscConfig+0x108>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d157      	bne.n	80035d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e2d9      	b.n	8003ad8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800352c:	d106      	bne.n	800353c <HAL_RCC_OscConfig+0x74>
 800352e:	4b85      	ldr	r3, [pc, #532]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a84      	ldr	r2, [pc, #528]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 8003534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	e01d      	b.n	8003578 <HAL_RCC_OscConfig+0xb0>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003544:	d10c      	bne.n	8003560 <HAL_RCC_OscConfig+0x98>
 8003546:	4b7f      	ldr	r3, [pc, #508]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a7e      	ldr	r2, [pc, #504]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 800354c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	4b7c      	ldr	r3, [pc, #496]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a7b      	ldr	r2, [pc, #492]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 8003558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e00b      	b.n	8003578 <HAL_RCC_OscConfig+0xb0>
 8003560:	4b78      	ldr	r3, [pc, #480]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a77      	ldr	r2, [pc, #476]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 8003566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	4b75      	ldr	r3, [pc, #468]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a74      	ldr	r2, [pc, #464]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 8003572:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d013      	beq.n	80035a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fe fca0 	bl	8001ec4 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003588:	f7fe fc9c 	bl	8001ec4 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	@ 0x64
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e29e      	b.n	8003ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800359a:	4b6a      	ldr	r3, [pc, #424]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0xc0>
 80035a6:	e014      	b.n	80035d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe fc8c 	bl	8001ec4 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b0:	f7fe fc88 	bl	8001ec4 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	@ 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e28a      	b.n	8003ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035c2:	4b60      	ldr	r3, [pc, #384]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0xe8>
 80035ce:	e000      	b.n	80035d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d075      	beq.n	80036ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035de:	4b59      	ldr	r3, [pc, #356]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 030c 	and.w	r3, r3, #12
 80035e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035e8:	4b56      	ldr	r3, [pc, #344]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	2b0c      	cmp	r3, #12
 80035f6:	d102      	bne.n	80035fe <HAL_RCC_OscConfig+0x136>
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d002      	beq.n	8003604 <HAL_RCC_OscConfig+0x13c>
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b04      	cmp	r3, #4
 8003602:	d11f      	bne.n	8003644 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003604:	4b4f      	ldr	r3, [pc, #316]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_RCC_OscConfig+0x154>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e25d      	b.n	8003ad8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361c:	4b49      	ldr	r3, [pc, #292]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	061b      	lsls	r3, r3, #24
 800362a:	4946      	ldr	r1, [pc, #280]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 800362c:	4313      	orrs	r3, r2
 800362e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003630:	4b45      	ldr	r3, [pc, #276]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe fbf9 	bl	8001e2c <HAL_InitTick>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d043      	beq.n	80036c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e249      	b.n	8003ad8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d023      	beq.n	8003694 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800364c:	4b3d      	ldr	r3, [pc, #244]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a3c      	ldr	r2, [pc, #240]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 8003652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fe fc34 	bl	8001ec4 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003660:	f7fe fc30 	bl	8001ec4 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e232      	b.n	8003ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003672:	4b34      	ldr	r3, [pc, #208]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367e:	4b31      	ldr	r3, [pc, #196]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	061b      	lsls	r3, r3, #24
 800368c:	492d      	ldr	r1, [pc, #180]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 800368e:	4313      	orrs	r3, r2
 8003690:	604b      	str	r3, [r1, #4]
 8003692:	e01a      	b.n	80036ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003694:	4b2b      	ldr	r3, [pc, #172]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a2a      	ldr	r2, [pc, #168]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 800369a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800369e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe fc10 	bl	8001ec4 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a8:	f7fe fc0c 	bl	8001ec4 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e20e      	b.n	8003ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036ba:	4b22      	ldr	r3, [pc, #136]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x1e0>
 80036c6:	e000      	b.n	80036ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d041      	beq.n	800375a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01c      	beq.n	8003718 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036de:	4b19      	ldr	r3, [pc, #100]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 80036e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036e4:	4a17      	ldr	r2, [pc, #92]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ee:	f7fe fbe9 	bl	8001ec4 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f6:	f7fe fbe5 	bl	8001ec4 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e1e7      	b.n	8003ad8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003708:	4b0e      	ldr	r3, [pc, #56]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 800370a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0ef      	beq.n	80036f6 <HAL_RCC_OscConfig+0x22e>
 8003716:	e020      	b.n	800375a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003718:	4b0a      	ldr	r3, [pc, #40]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 800371a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800371e:	4a09      	ldr	r2, [pc, #36]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 8003720:	f023 0301 	bic.w	r3, r3, #1
 8003724:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003728:	f7fe fbcc 	bl	8001ec4 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800372e:	e00d      	b.n	800374c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003730:	f7fe fbc8 	bl	8001ec4 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d906      	bls.n	800374c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e1ca      	b.n	8003ad8 <HAL_RCC_OscConfig+0x610>
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000
 8003748:	2000002c 	.word	0x2000002c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800374c:	4b8c      	ldr	r3, [pc, #560]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 800374e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1ea      	bne.n	8003730 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 80a6 	beq.w	80038b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003768:	2300      	movs	r3, #0
 800376a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800376c:	4b84      	ldr	r3, [pc, #528]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_RCC_OscConfig+0x2b4>
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <HAL_RCC_OscConfig+0x2b6>
 800377c:	2300      	movs	r3, #0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00d      	beq.n	800379e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003782:	4b7f      	ldr	r3, [pc, #508]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 8003784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003786:	4a7e      	ldr	r2, [pc, #504]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 8003788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800378c:	6593      	str	r3, [r2, #88]	@ 0x58
 800378e:	4b7c      	ldr	r3, [pc, #496]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 8003790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800379a:	2301      	movs	r3, #1
 800379c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800379e:	4b79      	ldr	r3, [pc, #484]	@ (8003984 <HAL_RCC_OscConfig+0x4bc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d118      	bne.n	80037dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037aa:	4b76      	ldr	r3, [pc, #472]	@ (8003984 <HAL_RCC_OscConfig+0x4bc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a75      	ldr	r2, [pc, #468]	@ (8003984 <HAL_RCC_OscConfig+0x4bc>)
 80037b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b6:	f7fe fb85 	bl	8001ec4 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037be:	f7fe fb81 	bl	8001ec4 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e183      	b.n	8003ad8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003984 <HAL_RCC_OscConfig+0x4bc>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d108      	bne.n	80037f6 <HAL_RCC_OscConfig+0x32e>
 80037e4:	4b66      	ldr	r3, [pc, #408]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ea:	4a65      	ldr	r2, [pc, #404]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037f4:	e024      	b.n	8003840 <HAL_RCC_OscConfig+0x378>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b05      	cmp	r3, #5
 80037fc:	d110      	bne.n	8003820 <HAL_RCC_OscConfig+0x358>
 80037fe:	4b60      	ldr	r3, [pc, #384]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003804:	4a5e      	ldr	r2, [pc, #376]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 8003806:	f043 0304 	orr.w	r3, r3, #4
 800380a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800380e:	4b5c      	ldr	r3, [pc, #368]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003814:	4a5a      	ldr	r2, [pc, #360]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800381e:	e00f      	b.n	8003840 <HAL_RCC_OscConfig+0x378>
 8003820:	4b57      	ldr	r3, [pc, #348]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003826:	4a56      	ldr	r2, [pc, #344]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 8003828:	f023 0301 	bic.w	r3, r3, #1
 800382c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003830:	4b53      	ldr	r3, [pc, #332]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003836:	4a52      	ldr	r2, [pc, #328]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 8003838:	f023 0304 	bic.w	r3, r3, #4
 800383c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d016      	beq.n	8003876 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003848:	f7fe fb3c 	bl	8001ec4 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800384e:	e00a      	b.n	8003866 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003850:	f7fe fb38 	bl	8001ec4 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e138      	b.n	8003ad8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003866:	4b46      	ldr	r3, [pc, #280]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0ed      	beq.n	8003850 <HAL_RCC_OscConfig+0x388>
 8003874:	e015      	b.n	80038a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003876:	f7fe fb25 	bl	8001ec4 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800387c:	e00a      	b.n	8003894 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387e:	f7fe fb21 	bl	8001ec4 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	f241 3288 	movw	r2, #5000	@ 0x1388
 800388c:	4293      	cmp	r3, r2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e121      	b.n	8003ad8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003894:	4b3a      	ldr	r3, [pc, #232]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1ed      	bne.n	800387e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038a2:	7ffb      	ldrb	r3, [r7, #31]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d105      	bne.n	80038b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a8:	4b35      	ldr	r3, [pc, #212]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 80038aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ac:	4a34      	ldr	r2, [pc, #208]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 80038ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d03c      	beq.n	800393a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d01c      	beq.n	8003902 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 80038ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d8:	f7fe faf4 	bl	8001ec4 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038e0:	f7fe faf0 	bl	8001ec4 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e0f2      	b.n	8003ad8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038f2:	4b23      	ldr	r3, [pc, #140]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 80038f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0ef      	beq.n	80038e0 <HAL_RCC_OscConfig+0x418>
 8003900:	e01b      	b.n	800393a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003902:	4b1f      	ldr	r3, [pc, #124]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 8003904:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003908:	4a1d      	ldr	r2, [pc, #116]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 800390a:	f023 0301 	bic.w	r3, r3, #1
 800390e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003912:	f7fe fad7 	bl	8001ec4 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800391a:	f7fe fad3 	bl	8001ec4 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e0d5      	b.n	8003ad8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800392c:	4b14      	ldr	r3, [pc, #80]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 800392e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1ef      	bne.n	800391a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 80c9 	beq.w	8003ad6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003944:	4b0e      	ldr	r3, [pc, #56]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 030c 	and.w	r3, r3, #12
 800394c:	2b0c      	cmp	r3, #12
 800394e:	f000 8083 	beq.w	8003a58 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d15e      	bne.n	8003a18 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395a:	4b09      	ldr	r3, [pc, #36]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a08      	ldr	r2, [pc, #32]	@ (8003980 <HAL_RCC_OscConfig+0x4b8>)
 8003960:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003966:	f7fe faad 	bl	8001ec4 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800396c:	e00c      	b.n	8003988 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396e:	f7fe faa9 	bl	8001ec4 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d905      	bls.n	8003988 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e0ab      	b.n	8003ad8 <HAL_RCC_OscConfig+0x610>
 8003980:	40021000 	.word	0x40021000
 8003984:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003988:	4b55      	ldr	r3, [pc, #340]	@ (8003ae0 <HAL_RCC_OscConfig+0x618>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ec      	bne.n	800396e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003994:	4b52      	ldr	r3, [pc, #328]	@ (8003ae0 <HAL_RCC_OscConfig+0x618>)
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	4b52      	ldr	r3, [pc, #328]	@ (8003ae4 <HAL_RCC_OscConfig+0x61c>)
 800399a:	4013      	ands	r3, r2
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6a11      	ldr	r1, [r2, #32]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039a4:	3a01      	subs	r2, #1
 80039a6:	0112      	lsls	r2, r2, #4
 80039a8:	4311      	orrs	r1, r2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80039ae:	0212      	lsls	r2, r2, #8
 80039b0:	4311      	orrs	r1, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80039b6:	0852      	lsrs	r2, r2, #1
 80039b8:	3a01      	subs	r2, #1
 80039ba:	0552      	lsls	r2, r2, #21
 80039bc:	4311      	orrs	r1, r2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80039c2:	0852      	lsrs	r2, r2, #1
 80039c4:	3a01      	subs	r2, #1
 80039c6:	0652      	lsls	r2, r2, #25
 80039c8:	4311      	orrs	r1, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80039ce:	06d2      	lsls	r2, r2, #27
 80039d0:	430a      	orrs	r2, r1
 80039d2:	4943      	ldr	r1, [pc, #268]	@ (8003ae0 <HAL_RCC_OscConfig+0x618>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d8:	4b41      	ldr	r3, [pc, #260]	@ (8003ae0 <HAL_RCC_OscConfig+0x618>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a40      	ldr	r2, [pc, #256]	@ (8003ae0 <HAL_RCC_OscConfig+0x618>)
 80039de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039e4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ae0 <HAL_RCC_OscConfig+0x618>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4a3d      	ldr	r2, [pc, #244]	@ (8003ae0 <HAL_RCC_OscConfig+0x618>)
 80039ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fe fa68 	bl	8001ec4 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f8:	f7fe fa64 	bl	8001ec4 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e066      	b.n	8003ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a0a:	4b35      	ldr	r3, [pc, #212]	@ (8003ae0 <HAL_RCC_OscConfig+0x618>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCC_OscConfig+0x530>
 8003a16:	e05e      	b.n	8003ad6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a18:	4b31      	ldr	r3, [pc, #196]	@ (8003ae0 <HAL_RCC_OscConfig+0x618>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a30      	ldr	r2, [pc, #192]	@ (8003ae0 <HAL_RCC_OscConfig+0x618>)
 8003a1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a24:	f7fe fa4e 	bl	8001ec4 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a2c:	f7fe fa4a 	bl	8001ec4 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e04c      	b.n	8003ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a3e:	4b28      	ldr	r3, [pc, #160]	@ (8003ae0 <HAL_RCC_OscConfig+0x618>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f0      	bne.n	8003a2c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a4a:	4b25      	ldr	r3, [pc, #148]	@ (8003ae0 <HAL_RCC_OscConfig+0x618>)
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	4924      	ldr	r1, [pc, #144]	@ (8003ae0 <HAL_RCC_OscConfig+0x618>)
 8003a50:	4b25      	ldr	r3, [pc, #148]	@ (8003ae8 <HAL_RCC_OscConfig+0x620>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	60cb      	str	r3, [r1, #12]
 8003a56:	e03e      	b.n	8003ad6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e039      	b.n	8003ad8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a64:	4b1e      	ldr	r3, [pc, #120]	@ (8003ae0 <HAL_RCC_OscConfig+0x618>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f003 0203 	and.w	r2, r3, #3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d12c      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a82:	3b01      	subs	r3, #1
 8003a84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d123      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a94:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d11b      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d113      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d109      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac8:	085b      	lsrs	r3, r3, #1
 8003aca:	3b01      	subs	r3, #1
 8003acc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d001      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3720      	adds	r7, #32
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	019f800c 	.word	0x019f800c
 8003ae8:	feeefffc 	.word	0xfeeefffc

08003aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e11e      	b.n	8003d42 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b04:	4b91      	ldr	r3, [pc, #580]	@ (8003d4c <HAL_RCC_ClockConfig+0x260>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 030f 	and.w	r3, r3, #15
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d910      	bls.n	8003b34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b12:	4b8e      	ldr	r3, [pc, #568]	@ (8003d4c <HAL_RCC_ClockConfig+0x260>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f023 020f 	bic.w	r2, r3, #15
 8003b1a:	498c      	ldr	r1, [pc, #560]	@ (8003d4c <HAL_RCC_ClockConfig+0x260>)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b22:	4b8a      	ldr	r3, [pc, #552]	@ (8003d4c <HAL_RCC_ClockConfig+0x260>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e106      	b.n	8003d42 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d073      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d129      	bne.n	8003b9c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b48:	4b81      	ldr	r3, [pc, #516]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0f4      	b.n	8003d42 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b58:	f000 f99e 	bl	8003e98 <RCC_GetSysClockFreqFromPLLSource>
 8003b5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4a7c      	ldr	r2, [pc, #496]	@ (8003d54 <HAL_RCC_ClockConfig+0x268>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d93f      	bls.n	8003be6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b66:	4b7a      	ldr	r3, [pc, #488]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d009      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d033      	beq.n	8003be6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d12f      	bne.n	8003be6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b86:	4b72      	ldr	r3, [pc, #456]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b8e:	4a70      	ldr	r2, [pc, #448]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003b90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b96:	2380      	movs	r3, #128	@ 0x80
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	e024      	b.n	8003be6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d107      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ba4:	4b6a      	ldr	r3, [pc, #424]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d109      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0c6      	b.n	8003d42 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bb4:	4b66      	ldr	r3, [pc, #408]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0be      	b.n	8003d42 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003bc4:	f000 f8ce 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 8003bc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4a61      	ldr	r2, [pc, #388]	@ (8003d54 <HAL_RCC_ClockConfig+0x268>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d909      	bls.n	8003be6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bd2:	4b5f      	ldr	r3, [pc, #380]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bda:	4a5d      	ldr	r2, [pc, #372]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003bdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003be0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003be2:	2380      	movs	r3, #128	@ 0x80
 8003be4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003be6:	4b5a      	ldr	r3, [pc, #360]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f023 0203 	bic.w	r2, r3, #3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	4957      	ldr	r1, [pc, #348]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf8:	f7fe f964 	bl	8001ec4 <HAL_GetTick>
 8003bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfe:	e00a      	b.n	8003c16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c00:	f7fe f960 	bl	8001ec4 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e095      	b.n	8003d42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c16:	4b4e      	ldr	r3, [pc, #312]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 020c 	and.w	r2, r3, #12
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d1eb      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d023      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c40:	4b43      	ldr	r3, [pc, #268]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4a42      	ldr	r2, [pc, #264]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003c46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c4a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c58:	4b3d      	ldr	r3, [pc, #244]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c60:	4a3b      	ldr	r2, [pc, #236]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003c62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c68:	4b39      	ldr	r3, [pc, #228]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	4936      	ldr	r1, [pc, #216]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2b80      	cmp	r3, #128	@ 0x80
 8003c80:	d105      	bne.n	8003c8e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c82:	4b33      	ldr	r3, [pc, #204]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	4a32      	ldr	r2, [pc, #200]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003c88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c8c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8003d4c <HAL_RCC_ClockConfig+0x260>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d21d      	bcs.n	8003cd8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8003d4c <HAL_RCC_ClockConfig+0x260>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f023 020f 	bic.w	r2, r3, #15
 8003ca4:	4929      	ldr	r1, [pc, #164]	@ (8003d4c <HAL_RCC_ClockConfig+0x260>)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cac:	f7fe f90a 	bl	8001ec4 <HAL_GetTick>
 8003cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb4:	f7fe f906 	bl	8001ec4 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e03b      	b.n	8003d42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b20      	ldr	r3, [pc, #128]	@ (8003d4c <HAL_RCC_ClockConfig+0x260>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d1ed      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	4917      	ldr	r1, [pc, #92]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d02:	4b13      	ldr	r3, [pc, #76]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	490f      	ldr	r1, [pc, #60]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d16:	f000 f825 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d50 <HAL_RCC_ClockConfig+0x264>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	490c      	ldr	r1, [pc, #48]	@ (8003d58 <HAL_RCC_ClockConfig+0x26c>)
 8003d28:	5ccb      	ldrb	r3, [r1, r3]
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d32:	4a0a      	ldr	r2, [pc, #40]	@ (8003d5c <HAL_RCC_ClockConfig+0x270>)
 8003d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d36:	4b0a      	ldr	r3, [pc, #40]	@ (8003d60 <HAL_RCC_ClockConfig+0x274>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe f876 	bl	8001e2c <HAL_InitTick>
 8003d40:	4603      	mov	r3, r0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40022000 	.word	0x40022000
 8003d50:	40021000 	.word	0x40021000
 8003d54:	04c4b400 	.word	0x04c4b400
 8003d58:	080089b0 	.word	0x080089b0
 8003d5c:	20000014 	.word	0x20000014
 8003d60:	2000002c 	.word	0x2000002c

08003d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d6a:	4b2c      	ldr	r3, [pc, #176]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d102      	bne.n	8003d7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d76:	4b2a      	ldr	r3, [pc, #168]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	e047      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d7c:	4b27      	ldr	r3, [pc, #156]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 030c 	and.w	r3, r3, #12
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d102      	bne.n	8003d8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d88:	4b26      	ldr	r3, [pc, #152]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	e03e      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d8e:	4b23      	ldr	r3, [pc, #140]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 030c 	and.w	r3, r3, #12
 8003d96:	2b0c      	cmp	r3, #12
 8003d98:	d136      	bne.n	8003e08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d9a:	4b20      	ldr	r3, [pc, #128]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003da4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	091b      	lsrs	r3, r3, #4
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	3301      	adds	r3, #1
 8003db0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d10c      	bne.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003db8:	4a1a      	ldr	r2, [pc, #104]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc0:	4a16      	ldr	r2, [pc, #88]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dc2:	68d2      	ldr	r2, [r2, #12]
 8003dc4:	0a12      	lsrs	r2, r2, #8
 8003dc6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003dca:	fb02 f303 	mul.w	r3, r2, r3
 8003dce:	617b      	str	r3, [r7, #20]
      break;
 8003dd0:	e00c      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dd2:	4a13      	ldr	r2, [pc, #76]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dda:	4a10      	ldr	r2, [pc, #64]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ddc:	68d2      	ldr	r2, [r2, #12]
 8003dde:	0a12      	lsrs	r2, r2, #8
 8003de0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003de4:	fb02 f303 	mul.w	r3, r2, r3
 8003de8:	617b      	str	r3, [r7, #20]
      break;
 8003dea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dec:	4b0b      	ldr	r3, [pc, #44]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	0e5b      	lsrs	r3, r3, #25
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	3301      	adds	r3, #1
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	e001      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e0c:	693b      	ldr	r3, [r7, #16]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	371c      	adds	r7, #28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	00f42400 	.word	0x00f42400
 8003e24:	016e3600 	.word	0x016e3600

08003e28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e2c:	4b03      	ldr	r3, [pc, #12]	@ (8003e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	20000014 	.word	0x20000014

08003e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e44:	f7ff fff0 	bl	8003e28 <HAL_RCC_GetHCLKFreq>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	4b06      	ldr	r3, [pc, #24]	@ (8003e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	0a1b      	lsrs	r3, r3, #8
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	4904      	ldr	r1, [pc, #16]	@ (8003e68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e56:	5ccb      	ldrb	r3, [r1, r3]
 8003e58:	f003 031f 	and.w	r3, r3, #31
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40021000 	.word	0x40021000
 8003e68:	080089c0 	.word	0x080089c0

08003e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e70:	f7ff ffda 	bl	8003e28 <HAL_RCC_GetHCLKFreq>
 8003e74:	4602      	mov	r2, r0
 8003e76:	4b06      	ldr	r3, [pc, #24]	@ (8003e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	0adb      	lsrs	r3, r3, #11
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	4904      	ldr	r1, [pc, #16]	@ (8003e94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e82:	5ccb      	ldrb	r3, [r1, r3]
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021000 	.word	0x40021000
 8003e94:	080089c0 	.word	0x080089c0

08003e98 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	091b      	lsrs	r3, r3, #4
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d10c      	bne.n	8003ed6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ebc:	4a17      	ldr	r2, [pc, #92]	@ (8003f1c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec4:	4a14      	ldr	r2, [pc, #80]	@ (8003f18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ec6:	68d2      	ldr	r2, [r2, #12]
 8003ec8:	0a12      	lsrs	r2, r2, #8
 8003eca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ece:	fb02 f303 	mul.w	r3, r2, r3
 8003ed2:	617b      	str	r3, [r7, #20]
    break;
 8003ed4:	e00c      	b.n	8003ef0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ed6:	4a12      	ldr	r2, [pc, #72]	@ (8003f20 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ede:	4a0e      	ldr	r2, [pc, #56]	@ (8003f18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ee0:	68d2      	ldr	r2, [r2, #12]
 8003ee2:	0a12      	lsrs	r2, r2, #8
 8003ee4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ee8:	fb02 f303 	mul.w	r3, r2, r3
 8003eec:	617b      	str	r3, [r7, #20]
    break;
 8003eee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ef0:	4b09      	ldr	r3, [pc, #36]	@ (8003f18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	0e5b      	lsrs	r3, r3, #25
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	3301      	adds	r3, #1
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f08:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f0a:	687b      	ldr	r3, [r7, #4]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	016e3600 	.word	0x016e3600
 8003f20:	00f42400 	.word	0x00f42400

08003f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f30:	2300      	movs	r3, #0
 8003f32:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8098 	beq.w	8004072 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f42:	2300      	movs	r3, #0
 8003f44:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f46:	4b43      	ldr	r3, [pc, #268]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10d      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f52:	4b40      	ldr	r3, [pc, #256]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f56:	4a3f      	ldr	r2, [pc, #252]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f5e:	4b3d      	ldr	r3, [pc, #244]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f66:	60bb      	str	r3, [r7, #8]
 8003f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f6e:	4b3a      	ldr	r3, [pc, #232]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a39      	ldr	r2, [pc, #228]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f7a:	f7fd ffa3 	bl	8001ec4 <HAL_GetTick>
 8003f7e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f80:	e009      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f82:	f7fd ff9f 	bl	8001ec4 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d902      	bls.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	74fb      	strb	r3, [r7, #19]
        break;
 8003f94:	e005      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f96:	4b30      	ldr	r3, [pc, #192]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0ef      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003fa2:	7cfb      	ldrb	r3, [r7, #19]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d159      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fb2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01e      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d019      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fc4:	4b23      	ldr	r3, [pc, #140]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fd0:	4b20      	ldr	r3, [pc, #128]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd6:	4a1f      	ldr	r2, [pc, #124]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ff0:	4a18      	ldr	r2, [pc, #96]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d016      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004002:	f7fd ff5f 	bl	8001ec4 <HAL_GetTick>
 8004006:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004008:	e00b      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400a:	f7fd ff5b 	bl	8001ec4 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004018:	4293      	cmp	r3, r2
 800401a:	d902      	bls.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	74fb      	strb	r3, [r7, #19]
            break;
 8004020:	e006      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004022:	4b0c      	ldr	r3, [pc, #48]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0ec      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10b      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004036:	4b07      	ldr	r3, [pc, #28]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800403c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004044:	4903      	ldr	r1, [pc, #12]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800404c:	e008      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800404e:	7cfb      	ldrb	r3, [r7, #19]
 8004050:	74bb      	strb	r3, [r7, #18]
 8004052:	e005      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004054:	40021000 	.word	0x40021000
 8004058:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004060:	7c7b      	ldrb	r3, [r7, #17]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d105      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004066:	4ba6      	ldr	r3, [pc, #664]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800406a:	4aa5      	ldr	r2, [pc, #660]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004070:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800407e:	4ba0      	ldr	r3, [pc, #640]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004084:	f023 0203 	bic.w	r2, r3, #3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	499c      	ldr	r1, [pc, #624]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040a0:	4b97      	ldr	r3, [pc, #604]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a6:	f023 020c 	bic.w	r2, r3, #12
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	4994      	ldr	r1, [pc, #592]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040c2:	4b8f      	ldr	r3, [pc, #572]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	498b      	ldr	r1, [pc, #556]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040e4:	4b86      	ldr	r3, [pc, #536]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	4983      	ldr	r1, [pc, #524]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004106:	4b7e      	ldr	r3, [pc, #504]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	497a      	ldr	r1, [pc, #488]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004128:	4b75      	ldr	r3, [pc, #468]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	4972      	ldr	r1, [pc, #456]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800414a:	4b6d      	ldr	r3, [pc, #436]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004150:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	4969      	ldr	r1, [pc, #420]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800416c:	4b64      	ldr	r3, [pc, #400]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004172:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	4961      	ldr	r1, [pc, #388]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800418e:	4b5c      	ldr	r3, [pc, #368]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004194:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419c:	4958      	ldr	r1, [pc, #352]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d015      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041b0:	4b53      	ldr	r3, [pc, #332]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041be:	4950      	ldr	r1, [pc, #320]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041ce:	d105      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4a4a      	ldr	r2, [pc, #296]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041da:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d015      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041e8:	4b45      	ldr	r3, [pc, #276]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f6:	4942      	ldr	r1, [pc, #264]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004202:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004206:	d105      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004208:	4b3d      	ldr	r3, [pc, #244]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4a3c      	ldr	r2, [pc, #240]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800420e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004212:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d015      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004220:	4b37      	ldr	r3, [pc, #220]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004226:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422e:	4934      	ldr	r1, [pc, #208]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800423e:	d105      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004240:	4b2f      	ldr	r3, [pc, #188]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4a2e      	ldr	r2, [pc, #184]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004246:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800424a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d015      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004258:	4b29      	ldr	r3, [pc, #164]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004266:	4926      	ldr	r1, [pc, #152]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004272:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004276:	d105      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004278:	4b21      	ldr	r3, [pc, #132]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	4a20      	ldr	r2, [pc, #128]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004282:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d015      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004290:	4b1b      	ldr	r3, [pc, #108]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004296:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429e:	4918      	ldr	r1, [pc, #96]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042ae:	d105      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b0:	4b13      	ldr	r3, [pc, #76]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4a12      	ldr	r2, [pc, #72]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d015      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042c8:	4b0d      	ldr	r3, [pc, #52]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d6:	490a      	ldr	r1, [pc, #40]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042e6:	d105      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042e8:	4b05      	ldr	r3, [pc, #20]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4a04      	ldr	r2, [pc, #16]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80042f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40021000 	.word	0x40021000

08004304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e049      	b.n	80043aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fd fa12 	bl	8001754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3304      	adds	r3, #4
 8004340:	4619      	mov	r1, r3
 8004342:	4610      	mov	r0, r2
 8004344:	f000 fba4 	bl	8004a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e049      	b.n	8004458 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d106      	bne.n	80043de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f841 	bl	8004460 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2202      	movs	r2, #2
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3304      	adds	r3, #4
 80043ee:	4619      	mov	r1, r3
 80043f0:	4610      	mov	r0, r2
 80043f2:	f000 fb4d 	bl	8004a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d109      	bne.n	8004498 <HAL_TIM_PWM_Start+0x24>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b01      	cmp	r3, #1
 800448e:	bf14      	ite	ne
 8004490:	2301      	movne	r3, #1
 8004492:	2300      	moveq	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	e03c      	b.n	8004512 <HAL_TIM_PWM_Start+0x9e>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2b04      	cmp	r3, #4
 800449c:	d109      	bne.n	80044b2 <HAL_TIM_PWM_Start+0x3e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	bf14      	ite	ne
 80044aa:	2301      	movne	r3, #1
 80044ac:	2300      	moveq	r3, #0
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	e02f      	b.n	8004512 <HAL_TIM_PWM_Start+0x9e>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d109      	bne.n	80044cc <HAL_TIM_PWM_Start+0x58>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	bf14      	ite	ne
 80044c4:	2301      	movne	r3, #1
 80044c6:	2300      	moveq	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	e022      	b.n	8004512 <HAL_TIM_PWM_Start+0x9e>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b0c      	cmp	r3, #12
 80044d0:	d109      	bne.n	80044e6 <HAL_TIM_PWM_Start+0x72>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b01      	cmp	r3, #1
 80044dc:	bf14      	ite	ne
 80044de:	2301      	movne	r3, #1
 80044e0:	2300      	moveq	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	e015      	b.n	8004512 <HAL_TIM_PWM_Start+0x9e>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b10      	cmp	r3, #16
 80044ea:	d109      	bne.n	8004500 <HAL_TIM_PWM_Start+0x8c>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	bf14      	ite	ne
 80044f8:	2301      	movne	r3, #1
 80044fa:	2300      	moveq	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	e008      	b.n	8004512 <HAL_TIM_PWM_Start+0x9e>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b01      	cmp	r3, #1
 800450a:	bf14      	ite	ne
 800450c:	2301      	movne	r3, #1
 800450e:	2300      	moveq	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e097      	b.n	800464a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d104      	bne.n	800452a <HAL_TIM_PWM_Start+0xb6>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004528:	e023      	b.n	8004572 <HAL_TIM_PWM_Start+0xfe>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b04      	cmp	r3, #4
 800452e:	d104      	bne.n	800453a <HAL_TIM_PWM_Start+0xc6>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004538:	e01b      	b.n	8004572 <HAL_TIM_PWM_Start+0xfe>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b08      	cmp	r3, #8
 800453e:	d104      	bne.n	800454a <HAL_TIM_PWM_Start+0xd6>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004548:	e013      	b.n	8004572 <HAL_TIM_PWM_Start+0xfe>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b0c      	cmp	r3, #12
 800454e:	d104      	bne.n	800455a <HAL_TIM_PWM_Start+0xe6>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004558:	e00b      	b.n	8004572 <HAL_TIM_PWM_Start+0xfe>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b10      	cmp	r3, #16
 800455e:	d104      	bne.n	800456a <HAL_TIM_PWM_Start+0xf6>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004568:	e003      	b.n	8004572 <HAL_TIM_PWM_Start+0xfe>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2201      	movs	r2, #1
 8004578:	6839      	ldr	r1, [r7, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 feb6 	bl	80052ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a33      	ldr	r2, [pc, #204]	@ (8004654 <HAL_TIM_PWM_Start+0x1e0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d013      	beq.n	80045b2 <HAL_TIM_PWM_Start+0x13e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a32      	ldr	r2, [pc, #200]	@ (8004658 <HAL_TIM_PWM_Start+0x1e4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00e      	beq.n	80045b2 <HAL_TIM_PWM_Start+0x13e>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a30      	ldr	r2, [pc, #192]	@ (800465c <HAL_TIM_PWM_Start+0x1e8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d009      	beq.n	80045b2 <HAL_TIM_PWM_Start+0x13e>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a2f      	ldr	r2, [pc, #188]	@ (8004660 <HAL_TIM_PWM_Start+0x1ec>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d004      	beq.n	80045b2 <HAL_TIM_PWM_Start+0x13e>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004664 <HAL_TIM_PWM_Start+0x1f0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d101      	bne.n	80045b6 <HAL_TIM_PWM_Start+0x142>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <HAL_TIM_PWM_Start+0x144>
 80045b6:	2300      	movs	r3, #0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d007      	beq.n	80045cc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a20      	ldr	r2, [pc, #128]	@ (8004654 <HAL_TIM_PWM_Start+0x1e0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d018      	beq.n	8004608 <HAL_TIM_PWM_Start+0x194>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045de:	d013      	beq.n	8004608 <HAL_TIM_PWM_Start+0x194>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a20      	ldr	r2, [pc, #128]	@ (8004668 <HAL_TIM_PWM_Start+0x1f4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00e      	beq.n	8004608 <HAL_TIM_PWM_Start+0x194>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a1f      	ldr	r2, [pc, #124]	@ (800466c <HAL_TIM_PWM_Start+0x1f8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d009      	beq.n	8004608 <HAL_TIM_PWM_Start+0x194>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a17      	ldr	r2, [pc, #92]	@ (8004658 <HAL_TIM_PWM_Start+0x1e4>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d004      	beq.n	8004608 <HAL_TIM_PWM_Start+0x194>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a16      	ldr	r2, [pc, #88]	@ (800465c <HAL_TIM_PWM_Start+0x1e8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d115      	bne.n	8004634 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	4b18      	ldr	r3, [pc, #96]	@ (8004670 <HAL_TIM_PWM_Start+0x1fc>)
 8004610:	4013      	ands	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b06      	cmp	r3, #6
 8004618:	d015      	beq.n	8004646 <HAL_TIM_PWM_Start+0x1d2>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004620:	d011      	beq.n	8004646 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0201 	orr.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004632:	e008      	b.n	8004646 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	e000      	b.n	8004648 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004646:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40012c00 	.word	0x40012c00
 8004658:	40013400 	.word	0x40013400
 800465c:	40014000 	.word	0x40014000
 8004660:	40014400 	.word	0x40014400
 8004664:	40014800 	.word	0x40014800
 8004668:	40000400 	.word	0x40000400
 800466c:	40000800 	.word	0x40000800
 8004670:	00010007 	.word	0x00010007

08004674 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800468e:	2302      	movs	r3, #2
 8004690:	e0ff      	b.n	8004892 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b14      	cmp	r3, #20
 800469e:	f200 80f0 	bhi.w	8004882 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046a2:	a201      	add	r2, pc, #4	@ (adr r2, 80046a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a8:	080046fd 	.word	0x080046fd
 80046ac:	08004883 	.word	0x08004883
 80046b0:	08004883 	.word	0x08004883
 80046b4:	08004883 	.word	0x08004883
 80046b8:	0800473d 	.word	0x0800473d
 80046bc:	08004883 	.word	0x08004883
 80046c0:	08004883 	.word	0x08004883
 80046c4:	08004883 	.word	0x08004883
 80046c8:	0800477f 	.word	0x0800477f
 80046cc:	08004883 	.word	0x08004883
 80046d0:	08004883 	.word	0x08004883
 80046d4:	08004883 	.word	0x08004883
 80046d8:	080047bf 	.word	0x080047bf
 80046dc:	08004883 	.word	0x08004883
 80046e0:	08004883 	.word	0x08004883
 80046e4:	08004883 	.word	0x08004883
 80046e8:	08004801 	.word	0x08004801
 80046ec:	08004883 	.word	0x08004883
 80046f0:	08004883 	.word	0x08004883
 80046f4:	08004883 	.word	0x08004883
 80046f8:	08004841 	.word	0x08004841
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fa60 	bl	8004bc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0208 	orr.w	r2, r2, #8
 8004716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0204 	bic.w	r2, r2, #4
 8004726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6999      	ldr	r1, [r3, #24]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	619a      	str	r2, [r3, #24]
      break;
 800473a:	e0a5      	b.n	8004888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fad0 	bl	8004ce8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6999      	ldr	r1, [r3, #24]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	021a      	lsls	r2, r3, #8
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	619a      	str	r2, [r3, #24]
      break;
 800477c:	e084      	b.n	8004888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fb39 	bl	8004dfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0208 	orr.w	r2, r2, #8
 8004798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0204 	bic.w	r2, r2, #4
 80047a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69d9      	ldr	r1, [r3, #28]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	61da      	str	r2, [r3, #28]
      break;
 80047bc:	e064      	b.n	8004888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68b9      	ldr	r1, [r7, #8]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fba1 	bl	8004f0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69da      	ldr	r2, [r3, #28]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69da      	ldr	r2, [r3, #28]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69d9      	ldr	r1, [r3, #28]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	021a      	lsls	r2, r3, #8
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	61da      	str	r2, [r3, #28]
      break;
 80047fe:	e043      	b.n	8004888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fc0a 	bl	8005020 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0208 	orr.w	r2, r2, #8
 800481a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0204 	bic.w	r2, r2, #4
 800482a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800483e:	e023      	b.n	8004888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68b9      	ldr	r1, [r7, #8]
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fc4e 	bl	80050e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800485a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800486a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	021a      	lsls	r2, r3, #8
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004880:	e002      	b.n	8004888 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	75fb      	strb	r3, [r7, #23]
      break;
 8004886:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004890:	7dfb      	ldrb	r3, [r7, #23]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop

0800489c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_TIM_ConfigClockSource+0x1c>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e0de      	b.n	8004a76 <HAL_TIM_ConfigClockSource+0x1da>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80048d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a63      	ldr	r2, [pc, #396]	@ (8004a80 <HAL_TIM_ConfigClockSource+0x1e4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	f000 80a9 	beq.w	8004a4a <HAL_TIM_ConfigClockSource+0x1ae>
 80048f8:	4a61      	ldr	r2, [pc, #388]	@ (8004a80 <HAL_TIM_ConfigClockSource+0x1e4>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	f200 80ae 	bhi.w	8004a5c <HAL_TIM_ConfigClockSource+0x1c0>
 8004900:	4a60      	ldr	r2, [pc, #384]	@ (8004a84 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	f000 80a1 	beq.w	8004a4a <HAL_TIM_ConfigClockSource+0x1ae>
 8004908:	4a5e      	ldr	r2, [pc, #376]	@ (8004a84 <HAL_TIM_ConfigClockSource+0x1e8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	f200 80a6 	bhi.w	8004a5c <HAL_TIM_ConfigClockSource+0x1c0>
 8004910:	4a5d      	ldr	r2, [pc, #372]	@ (8004a88 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004912:	4293      	cmp	r3, r2
 8004914:	f000 8099 	beq.w	8004a4a <HAL_TIM_ConfigClockSource+0x1ae>
 8004918:	4a5b      	ldr	r2, [pc, #364]	@ (8004a88 <HAL_TIM_ConfigClockSource+0x1ec>)
 800491a:	4293      	cmp	r3, r2
 800491c:	f200 809e 	bhi.w	8004a5c <HAL_TIM_ConfigClockSource+0x1c0>
 8004920:	4a5a      	ldr	r2, [pc, #360]	@ (8004a8c <HAL_TIM_ConfigClockSource+0x1f0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	f000 8091 	beq.w	8004a4a <HAL_TIM_ConfigClockSource+0x1ae>
 8004928:	4a58      	ldr	r2, [pc, #352]	@ (8004a8c <HAL_TIM_ConfigClockSource+0x1f0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	f200 8096 	bhi.w	8004a5c <HAL_TIM_ConfigClockSource+0x1c0>
 8004930:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004934:	f000 8089 	beq.w	8004a4a <HAL_TIM_ConfigClockSource+0x1ae>
 8004938:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800493c:	f200 808e 	bhi.w	8004a5c <HAL_TIM_ConfigClockSource+0x1c0>
 8004940:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004944:	d03e      	beq.n	80049c4 <HAL_TIM_ConfigClockSource+0x128>
 8004946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800494a:	f200 8087 	bhi.w	8004a5c <HAL_TIM_ConfigClockSource+0x1c0>
 800494e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004952:	f000 8086 	beq.w	8004a62 <HAL_TIM_ConfigClockSource+0x1c6>
 8004956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800495a:	d87f      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x1c0>
 800495c:	2b70      	cmp	r3, #112	@ 0x70
 800495e:	d01a      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0xfa>
 8004960:	2b70      	cmp	r3, #112	@ 0x70
 8004962:	d87b      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x1c0>
 8004964:	2b60      	cmp	r3, #96	@ 0x60
 8004966:	d050      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x16e>
 8004968:	2b60      	cmp	r3, #96	@ 0x60
 800496a:	d877      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x1c0>
 800496c:	2b50      	cmp	r3, #80	@ 0x50
 800496e:	d03c      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x14e>
 8004970:	2b50      	cmp	r3, #80	@ 0x50
 8004972:	d873      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x1c0>
 8004974:	2b40      	cmp	r3, #64	@ 0x40
 8004976:	d058      	beq.n	8004a2a <HAL_TIM_ConfigClockSource+0x18e>
 8004978:	2b40      	cmp	r3, #64	@ 0x40
 800497a:	d86f      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x1c0>
 800497c:	2b30      	cmp	r3, #48	@ 0x30
 800497e:	d064      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x1ae>
 8004980:	2b30      	cmp	r3, #48	@ 0x30
 8004982:	d86b      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x1c0>
 8004984:	2b20      	cmp	r3, #32
 8004986:	d060      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x1ae>
 8004988:	2b20      	cmp	r3, #32
 800498a:	d867      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x1c0>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d05c      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x1ae>
 8004990:	2b10      	cmp	r3, #16
 8004992:	d05a      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x1ae>
 8004994:	e062      	b.n	8004a5c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049a6:	f000 fc81 	bl	80052ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	609a      	str	r2, [r3, #8]
      break;
 80049c2:	e04f      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049d4:	f000 fc6a 	bl	80052ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049e6:	609a      	str	r2, [r3, #8]
      break;
 80049e8:	e03c      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f6:	461a      	mov	r2, r3
 80049f8:	f000 fbdc 	bl	80051b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2150      	movs	r1, #80	@ 0x50
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fc35 	bl	8005272 <TIM_ITRx_SetConfig>
      break;
 8004a08:	e02c      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a16:	461a      	mov	r2, r3
 8004a18:	f000 fbfb 	bl	8005212 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2160      	movs	r1, #96	@ 0x60
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fc25 	bl	8005272 <TIM_ITRx_SetConfig>
      break;
 8004a28:	e01c      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a36:	461a      	mov	r2, r3
 8004a38:	f000 fbbc 	bl	80051b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2140      	movs	r1, #64	@ 0x40
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fc15 	bl	8005272 <TIM_ITRx_SetConfig>
      break;
 8004a48:	e00c      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4619      	mov	r1, r3
 8004a54:	4610      	mov	r0, r2
 8004a56:	f000 fc0c 	bl	8005272 <TIM_ITRx_SetConfig>
      break;
 8004a5a:	e003      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a60:	e000      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004a62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	00100070 	.word	0x00100070
 8004a84:	00100040 	.word	0x00100040
 8004a88:	00100030 	.word	0x00100030
 8004a8c:	00100020 	.word	0x00100020

08004a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a42      	ldr	r2, [pc, #264]	@ (8004bac <TIM_Base_SetConfig+0x11c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00f      	beq.n	8004ac8 <TIM_Base_SetConfig+0x38>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aae:	d00b      	beq.n	8004ac8 <TIM_Base_SetConfig+0x38>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a3f      	ldr	r2, [pc, #252]	@ (8004bb0 <TIM_Base_SetConfig+0x120>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d007      	beq.n	8004ac8 <TIM_Base_SetConfig+0x38>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a3e      	ldr	r2, [pc, #248]	@ (8004bb4 <TIM_Base_SetConfig+0x124>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d003      	beq.n	8004ac8 <TIM_Base_SetConfig+0x38>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a3d      	ldr	r2, [pc, #244]	@ (8004bb8 <TIM_Base_SetConfig+0x128>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d108      	bne.n	8004ada <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a33      	ldr	r2, [pc, #204]	@ (8004bac <TIM_Base_SetConfig+0x11c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d01b      	beq.n	8004b1a <TIM_Base_SetConfig+0x8a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae8:	d017      	beq.n	8004b1a <TIM_Base_SetConfig+0x8a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a30      	ldr	r2, [pc, #192]	@ (8004bb0 <TIM_Base_SetConfig+0x120>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d013      	beq.n	8004b1a <TIM_Base_SetConfig+0x8a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a2f      	ldr	r2, [pc, #188]	@ (8004bb4 <TIM_Base_SetConfig+0x124>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00f      	beq.n	8004b1a <TIM_Base_SetConfig+0x8a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a2e      	ldr	r2, [pc, #184]	@ (8004bb8 <TIM_Base_SetConfig+0x128>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00b      	beq.n	8004b1a <TIM_Base_SetConfig+0x8a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a2d      	ldr	r2, [pc, #180]	@ (8004bbc <TIM_Base_SetConfig+0x12c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d007      	beq.n	8004b1a <TIM_Base_SetConfig+0x8a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a2c      	ldr	r2, [pc, #176]	@ (8004bc0 <TIM_Base_SetConfig+0x130>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d003      	beq.n	8004b1a <TIM_Base_SetConfig+0x8a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a2b      	ldr	r2, [pc, #172]	@ (8004bc4 <TIM_Base_SetConfig+0x134>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d108      	bne.n	8004b2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a16      	ldr	r2, [pc, #88]	@ (8004bac <TIM_Base_SetConfig+0x11c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00f      	beq.n	8004b78 <TIM_Base_SetConfig+0xe8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a17      	ldr	r2, [pc, #92]	@ (8004bb8 <TIM_Base_SetConfig+0x128>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00b      	beq.n	8004b78 <TIM_Base_SetConfig+0xe8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a16      	ldr	r2, [pc, #88]	@ (8004bbc <TIM_Base_SetConfig+0x12c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d007      	beq.n	8004b78 <TIM_Base_SetConfig+0xe8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a15      	ldr	r2, [pc, #84]	@ (8004bc0 <TIM_Base_SetConfig+0x130>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_Base_SetConfig+0xe8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a14      	ldr	r2, [pc, #80]	@ (8004bc4 <TIM_Base_SetConfig+0x134>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d103      	bne.n	8004b80 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d105      	bne.n	8004b9e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f023 0201 	bic.w	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	611a      	str	r2, [r3, #16]
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40012c00 	.word	0x40012c00
 8004bb0:	40000400 	.word	0x40000400
 8004bb4:	40000800 	.word	0x40000800
 8004bb8:	40013400 	.word	0x40013400
 8004bbc:	40014000 	.word	0x40014000
 8004bc0:	40014400 	.word	0x40014400
 8004bc4:	40014800 	.word	0x40014800

08004bc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	f023 0201 	bic.w	r2, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0303 	bic.w	r3, r3, #3
 8004c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f023 0302 	bic.w	r3, r3, #2
 8004c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a2c      	ldr	r2, [pc, #176]	@ (8004cd4 <TIM_OC1_SetConfig+0x10c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00f      	beq.n	8004c48 <TIM_OC1_SetConfig+0x80>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a2b      	ldr	r2, [pc, #172]	@ (8004cd8 <TIM_OC1_SetConfig+0x110>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00b      	beq.n	8004c48 <TIM_OC1_SetConfig+0x80>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a2a      	ldr	r2, [pc, #168]	@ (8004cdc <TIM_OC1_SetConfig+0x114>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d007      	beq.n	8004c48 <TIM_OC1_SetConfig+0x80>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a29      	ldr	r2, [pc, #164]	@ (8004ce0 <TIM_OC1_SetConfig+0x118>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d003      	beq.n	8004c48 <TIM_OC1_SetConfig+0x80>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a28      	ldr	r2, [pc, #160]	@ (8004ce4 <TIM_OC1_SetConfig+0x11c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d10c      	bne.n	8004c62 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f023 0308 	bic.w	r3, r3, #8
 8004c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f023 0304 	bic.w	r3, r3, #4
 8004c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a1b      	ldr	r2, [pc, #108]	@ (8004cd4 <TIM_OC1_SetConfig+0x10c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00f      	beq.n	8004c8a <TIM_OC1_SetConfig+0xc2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8004cd8 <TIM_OC1_SetConfig+0x110>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d00b      	beq.n	8004c8a <TIM_OC1_SetConfig+0xc2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a19      	ldr	r2, [pc, #100]	@ (8004cdc <TIM_OC1_SetConfig+0x114>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d007      	beq.n	8004c8a <TIM_OC1_SetConfig+0xc2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a18      	ldr	r2, [pc, #96]	@ (8004ce0 <TIM_OC1_SetConfig+0x118>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d003      	beq.n	8004c8a <TIM_OC1_SetConfig+0xc2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a17      	ldr	r2, [pc, #92]	@ (8004ce4 <TIM_OC1_SetConfig+0x11c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d111      	bne.n	8004cae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	621a      	str	r2, [r3, #32]
}
 8004cc8:	bf00      	nop
 8004cca:	371c      	adds	r7, #28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	40012c00 	.word	0x40012c00
 8004cd8:	40013400 	.word	0x40013400
 8004cdc:	40014000 	.word	0x40014000
 8004ce0:	40014400 	.word	0x40014400
 8004ce4:	40014800 	.word	0x40014800

08004ce8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	f023 0210 	bic.w	r2, r3, #16
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	021b      	lsls	r3, r3, #8
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f023 0320 	bic.w	r3, r3, #32
 8004d36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a28      	ldr	r2, [pc, #160]	@ (8004de8 <TIM_OC2_SetConfig+0x100>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_OC2_SetConfig+0x6c>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a27      	ldr	r2, [pc, #156]	@ (8004dec <TIM_OC2_SetConfig+0x104>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d10d      	bne.n	8004d70 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a1d      	ldr	r2, [pc, #116]	@ (8004de8 <TIM_OC2_SetConfig+0x100>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00f      	beq.n	8004d98 <TIM_OC2_SetConfig+0xb0>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8004dec <TIM_OC2_SetConfig+0x104>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00b      	beq.n	8004d98 <TIM_OC2_SetConfig+0xb0>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a1b      	ldr	r2, [pc, #108]	@ (8004df0 <TIM_OC2_SetConfig+0x108>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d007      	beq.n	8004d98 <TIM_OC2_SetConfig+0xb0>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a1a      	ldr	r2, [pc, #104]	@ (8004df4 <TIM_OC2_SetConfig+0x10c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d003      	beq.n	8004d98 <TIM_OC2_SetConfig+0xb0>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a19      	ldr	r2, [pc, #100]	@ (8004df8 <TIM_OC2_SetConfig+0x110>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d113      	bne.n	8004dc0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004da6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	621a      	str	r2, [r3, #32]
}
 8004dda:	bf00      	nop
 8004ddc:	371c      	adds	r7, #28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40012c00 	.word	0x40012c00
 8004dec:	40013400 	.word	0x40013400
 8004df0:	40014000 	.word	0x40014000
 8004df4:	40014400 	.word	0x40014400
 8004df8:	40014800 	.word	0x40014800

08004dfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0303 	bic.w	r3, r3, #3
 8004e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	021b      	lsls	r3, r3, #8
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a27      	ldr	r2, [pc, #156]	@ (8004ef8 <TIM_OC3_SetConfig+0xfc>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d003      	beq.n	8004e66 <TIM_OC3_SetConfig+0x6a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a26      	ldr	r2, [pc, #152]	@ (8004efc <TIM_OC3_SetConfig+0x100>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d10d      	bne.n	8004e82 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	021b      	lsls	r3, r3, #8
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a1c      	ldr	r2, [pc, #112]	@ (8004ef8 <TIM_OC3_SetConfig+0xfc>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00f      	beq.n	8004eaa <TIM_OC3_SetConfig+0xae>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8004efc <TIM_OC3_SetConfig+0x100>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00b      	beq.n	8004eaa <TIM_OC3_SetConfig+0xae>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a1a      	ldr	r2, [pc, #104]	@ (8004f00 <TIM_OC3_SetConfig+0x104>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d007      	beq.n	8004eaa <TIM_OC3_SetConfig+0xae>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a19      	ldr	r2, [pc, #100]	@ (8004f04 <TIM_OC3_SetConfig+0x108>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d003      	beq.n	8004eaa <TIM_OC3_SetConfig+0xae>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a18      	ldr	r2, [pc, #96]	@ (8004f08 <TIM_OC3_SetConfig+0x10c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d113      	bne.n	8004ed2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	621a      	str	r2, [r3, #32]
}
 8004eec:	bf00      	nop
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	40012c00 	.word	0x40012c00
 8004efc:	40013400 	.word	0x40013400
 8004f00:	40014000 	.word	0x40014000
 8004f04:	40014400 	.word	0x40014400
 8004f08:	40014800 	.word	0x40014800

08004f0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	021b      	lsls	r3, r3, #8
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	031b      	lsls	r3, r3, #12
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a28      	ldr	r2, [pc, #160]	@ (800500c <TIM_OC4_SetConfig+0x100>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d003      	beq.n	8004f78 <TIM_OC4_SetConfig+0x6c>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a27      	ldr	r2, [pc, #156]	@ (8005010 <TIM_OC4_SetConfig+0x104>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d10d      	bne.n	8004f94 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	031b      	lsls	r3, r3, #12
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a1d      	ldr	r2, [pc, #116]	@ (800500c <TIM_OC4_SetConfig+0x100>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00f      	beq.n	8004fbc <TIM_OC4_SetConfig+0xb0>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005010 <TIM_OC4_SetConfig+0x104>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00b      	beq.n	8004fbc <TIM_OC4_SetConfig+0xb0>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8005014 <TIM_OC4_SetConfig+0x108>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d007      	beq.n	8004fbc <TIM_OC4_SetConfig+0xb0>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a1a      	ldr	r2, [pc, #104]	@ (8005018 <TIM_OC4_SetConfig+0x10c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d003      	beq.n	8004fbc <TIM_OC4_SetConfig+0xb0>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a19      	ldr	r2, [pc, #100]	@ (800501c <TIM_OC4_SetConfig+0x110>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d113      	bne.n	8004fe4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fc2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004fca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	019b      	lsls	r3, r3, #6
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	019b      	lsls	r3, r3, #6
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	621a      	str	r2, [r3, #32]
}
 8004ffe:	bf00      	nop
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40012c00 	.word	0x40012c00
 8005010:	40013400 	.word	0x40013400
 8005014:	40014000 	.word	0x40014000
 8005018:	40014400 	.word	0x40014400
 800501c:	40014800 	.word	0x40014800

08005020 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800504e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005064:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	041b      	lsls	r3, r3, #16
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a17      	ldr	r2, [pc, #92]	@ (80050d4 <TIM_OC5_SetConfig+0xb4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00f      	beq.n	800509a <TIM_OC5_SetConfig+0x7a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a16      	ldr	r2, [pc, #88]	@ (80050d8 <TIM_OC5_SetConfig+0xb8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00b      	beq.n	800509a <TIM_OC5_SetConfig+0x7a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a15      	ldr	r2, [pc, #84]	@ (80050dc <TIM_OC5_SetConfig+0xbc>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d007      	beq.n	800509a <TIM_OC5_SetConfig+0x7a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a14      	ldr	r2, [pc, #80]	@ (80050e0 <TIM_OC5_SetConfig+0xc0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d003      	beq.n	800509a <TIM_OC5_SetConfig+0x7a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a13      	ldr	r2, [pc, #76]	@ (80050e4 <TIM_OC5_SetConfig+0xc4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d109      	bne.n	80050ae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	021b      	lsls	r3, r3, #8
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	621a      	str	r2, [r3, #32]
}
 80050c8:	bf00      	nop
 80050ca:	371c      	adds	r7, #28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	40012c00 	.word	0x40012c00
 80050d8:	40013400 	.word	0x40013400
 80050dc:	40014000 	.word	0x40014000
 80050e0:	40014400 	.word	0x40014400
 80050e4:	40014800 	.word	0x40014800

080050e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800510e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800511a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	021b      	lsls	r3, r3, #8
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800512e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	051b      	lsls	r3, r3, #20
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a18      	ldr	r2, [pc, #96]	@ (80051a0 <TIM_OC6_SetConfig+0xb8>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d00f      	beq.n	8005164 <TIM_OC6_SetConfig+0x7c>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a17      	ldr	r2, [pc, #92]	@ (80051a4 <TIM_OC6_SetConfig+0xbc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00b      	beq.n	8005164 <TIM_OC6_SetConfig+0x7c>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a16      	ldr	r2, [pc, #88]	@ (80051a8 <TIM_OC6_SetConfig+0xc0>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d007      	beq.n	8005164 <TIM_OC6_SetConfig+0x7c>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a15      	ldr	r2, [pc, #84]	@ (80051ac <TIM_OC6_SetConfig+0xc4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d003      	beq.n	8005164 <TIM_OC6_SetConfig+0x7c>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a14      	ldr	r2, [pc, #80]	@ (80051b0 <TIM_OC6_SetConfig+0xc8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d109      	bne.n	8005178 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800516a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	029b      	lsls	r3, r3, #10
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	621a      	str	r2, [r3, #32]
}
 8005192:	bf00      	nop
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40012c00 	.word	0x40012c00
 80051a4:	40013400 	.word	0x40013400
 80051a8:	40014000 	.word	0x40014000
 80051ac:	40014400 	.word	0x40014400
 80051b0:	40014800 	.word	0x40014800

080051b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	f023 0201 	bic.w	r2, r3, #1
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f023 030a 	bic.w	r3, r3, #10
 80051f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	621a      	str	r2, [r3, #32]
}
 8005206:	bf00      	nop
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005212:	b480      	push	{r7}
 8005214:	b087      	sub	sp, #28
 8005216:	af00      	add	r7, sp, #0
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	f023 0210 	bic.w	r2, r3, #16
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800523c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	031b      	lsls	r3, r3, #12
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800524e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	621a      	str	r2, [r3, #32]
}
 8005266:	bf00      	nop
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005272:	b480      	push	{r7}
 8005274:	b085      	sub	sp, #20
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800528c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	f043 0307 	orr.w	r3, r3, #7
 8005298:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	609a      	str	r2, [r3, #8]
}
 80052a0:	bf00      	nop
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	021a      	lsls	r2, r3, #8
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	431a      	orrs	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	609a      	str	r2, [r3, #8]
}
 80052e0:	bf00      	nop
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f003 031f 	and.w	r3, r3, #31
 80052fe:	2201      	movs	r2, #1
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a1a      	ldr	r2, [r3, #32]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	43db      	mvns	r3, r3
 800530e:	401a      	ands	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a1a      	ldr	r2, [r3, #32]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f003 031f 	and.w	r3, r3, #31
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	fa01 f303 	lsl.w	r3, r1, r3
 8005324:	431a      	orrs	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	621a      	str	r2, [r3, #32]
}
 800532a:	bf00      	nop
 800532c:	371c      	adds	r7, #28
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
	...

08005338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800534c:	2302      	movs	r3, #2
 800534e:	e065      	b.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a2c      	ldr	r2, [pc, #176]	@ (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d004      	beq.n	8005384 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a2b      	ldr	r2, [pc, #172]	@ (800542c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d108      	bne.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800538a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800539c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d018      	beq.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053c6:	d013      	beq.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a18      	ldr	r2, [pc, #96]	@ (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00e      	beq.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a17      	ldr	r2, [pc, #92]	@ (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d009      	beq.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a12      	ldr	r2, [pc, #72]	@ (800542c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d004      	beq.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a13      	ldr	r2, [pc, #76]	@ (8005438 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d10c      	bne.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	40012c00 	.word	0x40012c00
 800542c:	40013400 	.word	0x40013400
 8005430:	40000400 	.word	0x40000400
 8005434:	40000800 	.word	0x40000800
 8005438:	40014000 	.word	0x40014000

0800543c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005454:	2302      	movs	r3, #2
 8005456:	e073      	b.n	8005540 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	041b      	lsls	r3, r3, #16
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a19      	ldr	r2, [pc, #100]	@ (800554c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d004      	beq.n	80054f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a18      	ldr	r2, [pc, #96]	@ (8005550 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d11c      	bne.n	800552e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fe:	051b      	lsls	r3, r3, #20
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	40012c00 	.word	0x40012c00
 8005550:	40013400 	.word	0x40013400

08005554 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e042      	b.n	80055ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556c:	2b00      	cmp	r3, #0
 800556e:	d106      	bne.n	800557e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7fc fa01 	bl	8001980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2224      	movs	r2, #36	@ 0x24
 8005582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0201 	bic.w	r2, r2, #1
 8005594:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 ff30 	bl	8006404 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fc61 	bl	8005e6c <UART_SetConfig>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e01b      	b.n	80055ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0201 	orr.w	r2, r2, #1
 80055e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 ffaf 	bl	8006548 <UART_CheckIdleState>
 80055ea:	4603      	mov	r3, r0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08a      	sub	sp, #40	@ 0x28
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	603b      	str	r3, [r7, #0]
 8005600:	4613      	mov	r3, r2
 8005602:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800560a:	2b20      	cmp	r3, #32
 800560c:	d17b      	bne.n	8005706 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <HAL_UART_Transmit+0x26>
 8005614:	88fb      	ldrh	r3, [r7, #6]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e074      	b.n	8005708 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2221      	movs	r2, #33	@ 0x21
 800562a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800562e:	f7fc fc49 	bl	8001ec4 <HAL_GetTick>
 8005632:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	88fa      	ldrh	r2, [r7, #6]
 8005638:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	88fa      	ldrh	r2, [r7, #6]
 8005640:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800564c:	d108      	bne.n	8005660 <HAL_UART_Transmit+0x6c>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d104      	bne.n	8005660 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005656:	2300      	movs	r3, #0
 8005658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	e003      	b.n	8005668 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005664:	2300      	movs	r3, #0
 8005666:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005668:	e030      	b.n	80056cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2200      	movs	r2, #0
 8005672:	2180      	movs	r1, #128	@ 0x80
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f001 f811 	bl	800669c <UART_WaitOnFlagUntilTimeout>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2220      	movs	r2, #32
 8005684:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e03d      	b.n	8005708 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10b      	bne.n	80056aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	3302      	adds	r3, #2
 80056a6:	61bb      	str	r3, [r7, #24]
 80056a8:	e007      	b.n	80056ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	781a      	ldrb	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	3301      	adds	r3, #1
 80056b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1c8      	bne.n	800566a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2200      	movs	r2, #0
 80056e0:	2140      	movs	r1, #64	@ 0x40
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 ffda 	bl	800669c <UART_WaitOnFlagUntilTimeout>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e006      	b.n	8005708 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	e000      	b.n	8005708 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005706:	2302      	movs	r3, #2
  }
}
 8005708:	4618      	mov	r0, r3
 800570a:	3720      	adds	r7, #32
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08a      	sub	sp, #40	@ 0x28
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	4613      	mov	r3, r2
 800571c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005724:	2b20      	cmp	r3, #32
 8005726:	d137      	bne.n	8005798 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <HAL_UART_Receive_IT+0x24>
 800572e:	88fb      	ldrh	r3, [r7, #6]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e030      	b.n	800579a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a18      	ldr	r2, [pc, #96]	@ (80057a4 <HAL_UART_Receive_IT+0x94>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d01f      	beq.n	8005788 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d018      	beq.n	8005788 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	e853 3f00 	ldrex	r3, [r3]
 8005762:	613b      	str	r3, [r7, #16]
   return(result);
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800576a:	627b      	str	r3, [r7, #36]	@ 0x24
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	461a      	mov	r2, r3
 8005772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005774:	623b      	str	r3, [r7, #32]
 8005776:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	69f9      	ldr	r1, [r7, #28]
 800577a:	6a3a      	ldr	r2, [r7, #32]
 800577c:	e841 2300 	strex	r3, r2, [r1]
 8005780:	61bb      	str	r3, [r7, #24]
   return(result);
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1e6      	bne.n	8005756 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005788:	88fb      	ldrh	r3, [r7, #6]
 800578a:	461a      	mov	r2, r3
 800578c:	68b9      	ldr	r1, [r7, #8]
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 fff2 	bl	8006778 <UART_Start_Receive_IT>
 8005794:	4603      	mov	r3, r0
 8005796:	e000      	b.n	800579a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005798:	2302      	movs	r3, #2
  }
}
 800579a:	4618      	mov	r0, r3
 800579c:	3728      	adds	r7, #40	@ 0x28
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	40008000 	.word	0x40008000

080057a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b0ba      	sub	sp, #232	@ 0xe8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80057d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80057d6:	4013      	ands	r3, r2
 80057d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80057dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d11b      	bne.n	800581c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057e8:	f003 0320 	and.w	r3, r3, #32
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d015      	beq.n	800581c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d105      	bne.n	8005808 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d009      	beq.n	800581c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 8300 	beq.w	8005e12 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	4798      	blx	r3
      }
      return;
 800581a:	e2fa      	b.n	8005e12 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800581c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8123 	beq.w	8005a6c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005826:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800582a:	4b8d      	ldr	r3, [pc, #564]	@ (8005a60 <HAL_UART_IRQHandler+0x2b8>)
 800582c:	4013      	ands	r3, r2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005832:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005836:	4b8b      	ldr	r3, [pc, #556]	@ (8005a64 <HAL_UART_IRQHandler+0x2bc>)
 8005838:	4013      	ands	r3, r2
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 8116 	beq.w	8005a6c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d011      	beq.n	8005870 <HAL_UART_IRQHandler+0xc8>
 800584c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00b      	beq.n	8005870 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2201      	movs	r2, #1
 800585e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005866:	f043 0201 	orr.w	r2, r3, #1
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d011      	beq.n	80058a0 <HAL_UART_IRQHandler+0xf8>
 800587c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00b      	beq.n	80058a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2202      	movs	r2, #2
 800588e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005896:	f043 0204 	orr.w	r2, r3, #4
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d011      	beq.n	80058d0 <HAL_UART_IRQHandler+0x128>
 80058ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00b      	beq.n	80058d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2204      	movs	r2, #4
 80058be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058c6:	f043 0202 	orr.w	r2, r3, #2
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d017      	beq.n	800590c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d105      	bne.n	80058f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80058e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80058ec:	4b5c      	ldr	r3, [pc, #368]	@ (8005a60 <HAL_UART_IRQHandler+0x2b8>)
 80058ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00b      	beq.n	800590c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2208      	movs	r2, #8
 80058fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005902:	f043 0208 	orr.w	r2, r3, #8
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800590c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005910:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005914:	2b00      	cmp	r3, #0
 8005916:	d012      	beq.n	800593e <HAL_UART_IRQHandler+0x196>
 8005918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800591c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00c      	beq.n	800593e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800592c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005934:	f043 0220 	orr.w	r2, r3, #32
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 8266 	beq.w	8005e16 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800594a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b00      	cmp	r3, #0
 8005954:	d013      	beq.n	800597e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d105      	bne.n	800596e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d007      	beq.n	800597e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005984:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005992:	2b40      	cmp	r3, #64	@ 0x40
 8005994:	d005      	beq.n	80059a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800599a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d054      	beq.n	8005a4c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f001 f80a 	bl	80069bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b2:	2b40      	cmp	r3, #64	@ 0x40
 80059b4:	d146      	bne.n	8005a44 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3308      	adds	r3, #8
 80059bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80059cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3308      	adds	r3, #8
 80059de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80059e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80059e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80059ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80059fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1d9      	bne.n	80059b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d017      	beq.n	8005a3c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a12:	4a15      	ldr	r2, [pc, #84]	@ (8005a68 <HAL_UART_IRQHandler+0x2c0>)
 8005a14:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fc fbe7 	bl	80021f0 <HAL_DMA_Abort_IT>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d019      	beq.n	8005a5c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005a36:	4610      	mov	r0, r2
 8005a38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a3a:	e00f      	b.n	8005a5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f9ff 	bl	8005e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a42:	e00b      	b.n	8005a5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f9fb 	bl	8005e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4a:	e007      	b.n	8005a5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f9f7 	bl	8005e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005a5a:	e1dc      	b.n	8005e16 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a5c:	bf00      	nop
    return;
 8005a5e:	e1da      	b.n	8005e16 <HAL_UART_IRQHandler+0x66e>
 8005a60:	10000001 	.word	0x10000001
 8005a64:	04000120 	.word	0x04000120
 8005a68:	08006a89 	.word	0x08006a89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	f040 8170 	bne.w	8005d56 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a7a:	f003 0310 	and.w	r3, r3, #16
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 8169 	beq.w	8005d56 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a88:	f003 0310 	and.w	r3, r3, #16
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 8162 	beq.w	8005d56 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2210      	movs	r2, #16
 8005a98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa4:	2b40      	cmp	r3, #64	@ 0x40
 8005aa6:	f040 80d8 	bne.w	8005c5a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ab8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 80af 	beq.w	8005c20 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005ac8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005acc:	429a      	cmp	r2, r3
 8005ace:	f080 80a7 	bcs.w	8005c20 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ad8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f040 8087 	bne.w	8005bfe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b1e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b2a:	e841 2300 	strex	r3, r2, [r1]
 8005b2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1da      	bne.n	8005af0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3308      	adds	r3, #8
 8005b40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b4c:	f023 0301 	bic.w	r3, r3, #1
 8005b50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3308      	adds	r3, #8
 8005b5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b5e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b62:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1e1      	bne.n	8005b3a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3308      	adds	r3, #8
 8005b7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b80:	e853 3f00 	ldrex	r3, [r3]
 8005b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3308      	adds	r3, #8
 8005b96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ba0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ba2:	e841 2300 	strex	r3, r2, [r1]
 8005ba6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ba8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1e3      	bne.n	8005b76 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005bca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bcc:	f023 0310 	bic.w	r3, r3, #16
 8005bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005bde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005be0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005be4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005be6:	e841 2300 	strex	r3, r2, [r1]
 8005bea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005bec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1e4      	bne.n	8005bbc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fc faa0 	bl	800213e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2202      	movs	r2, #2
 8005c02:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f91b 	bl	8005e54 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005c1e:	e0fc      	b.n	8005e1a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	f040 80f5 	bne.w	8005e1a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	f040 80eb 	bne.w	8005e1a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c50:	4619      	mov	r1, r3
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f8fe 	bl	8005e54 <HAL_UARTEx_RxEventCallback>
      return;
 8005c58:	e0df      	b.n	8005e1a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 80d1 	beq.w	8005e1e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005c7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 80cc 	beq.w	8005e1e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005caa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cb0:	e841 2300 	strex	r3, r2, [r1]
 8005cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e4      	bne.n	8005c86 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3308      	adds	r3, #8
 8005cc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc6:	e853 3f00 	ldrex	r3, [r3]
 8005cca:	623b      	str	r3, [r7, #32]
   return(result);
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cd2:	f023 0301 	bic.w	r3, r3, #1
 8005cd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3308      	adds	r3, #8
 8005ce0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ce4:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cec:	e841 2300 	strex	r3, r2, [r1]
 8005cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1e1      	bne.n	8005cbc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	e853 3f00 	ldrex	r3, [r3]
 8005d18:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f023 0310 	bic.w	r3, r3, #16
 8005d20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005d2e:	61fb      	str	r3, [r7, #28]
 8005d30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	69b9      	ldr	r1, [r7, #24]
 8005d34:	69fa      	ldr	r2, [r7, #28]
 8005d36:	e841 2300 	strex	r3, r2, [r1]
 8005d3a:	617b      	str	r3, [r7, #20]
   return(result);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1e4      	bne.n	8005d0c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2202      	movs	r2, #2
 8005d46:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f880 	bl	8005e54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d54:	e063      	b.n	8005e1e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00e      	beq.n	8005d80 <HAL_UART_IRQHandler+0x5d8>
 8005d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d008      	beq.n	8005d80 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005d76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f001 fbe3 	bl	8007544 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d7e:	e051      	b.n	8005e24 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d014      	beq.n	8005db6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d105      	bne.n	8005da4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d008      	beq.n	8005db6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d03a      	beq.n	8005e22 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	4798      	blx	r3
    }
    return;
 8005db4:	e035      	b.n	8005e22 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d009      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x62e>
 8005dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fe6c 	bl	8006aac <UART_EndTransmit_IT>
    return;
 8005dd4:	e026      	b.n	8005e24 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d009      	beq.n	8005df6 <HAL_UART_IRQHandler+0x64e>
 8005de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005de6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f001 fbbc 	bl	800756c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005df4:	e016      	b.n	8005e24 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d010      	beq.n	8005e24 <HAL_UART_IRQHandler+0x67c>
 8005e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	da0c      	bge.n	8005e24 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f001 fba4 	bl	8007558 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e10:	e008      	b.n	8005e24 <HAL_UART_IRQHandler+0x67c>
      return;
 8005e12:	bf00      	nop
 8005e14:	e006      	b.n	8005e24 <HAL_UART_IRQHandler+0x67c>
    return;
 8005e16:	bf00      	nop
 8005e18:	e004      	b.n	8005e24 <HAL_UART_IRQHandler+0x67c>
      return;
 8005e1a:	bf00      	nop
 8005e1c:	e002      	b.n	8005e24 <HAL_UART_IRQHandler+0x67c>
      return;
 8005e1e:	bf00      	nop
 8005e20:	e000      	b.n	8005e24 <HAL_UART_IRQHandler+0x67c>
    return;
 8005e22:	bf00      	nop
  }
}
 8005e24:	37e8      	adds	r7, #232	@ 0xe8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop

08005e2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e70:	b08c      	sub	sp, #48	@ 0x30
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	431a      	orrs	r2, r3
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	4bab      	ldr	r3, [pc, #684]	@ (8006148 <UART_SetConfig+0x2dc>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	6812      	ldr	r2, [r2, #0]
 8005ea2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ea4:	430b      	orrs	r3, r1
 8005ea6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	68da      	ldr	r2, [r3, #12]
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4aa0      	ldr	r2, [pc, #640]	@ (800614c <UART_SetConfig+0x2e0>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d004      	beq.n	8005ed8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005ee2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	6812      	ldr	r2, [r2, #0]
 8005eea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005eec:	430b      	orrs	r3, r1
 8005eee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef6:	f023 010f 	bic.w	r1, r3, #15
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a91      	ldr	r2, [pc, #580]	@ (8006150 <UART_SetConfig+0x2e4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d125      	bne.n	8005f5c <UART_SetConfig+0xf0>
 8005f10:	4b90      	ldr	r3, [pc, #576]	@ (8006154 <UART_SetConfig+0x2e8>)
 8005f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d81a      	bhi.n	8005f54 <UART_SetConfig+0xe8>
 8005f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f24 <UART_SetConfig+0xb8>)
 8005f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f24:	08005f35 	.word	0x08005f35
 8005f28:	08005f45 	.word	0x08005f45
 8005f2c:	08005f3d 	.word	0x08005f3d
 8005f30:	08005f4d 	.word	0x08005f4d
 8005f34:	2301      	movs	r3, #1
 8005f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f3a:	e0d6      	b.n	80060ea <UART_SetConfig+0x27e>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f42:	e0d2      	b.n	80060ea <UART_SetConfig+0x27e>
 8005f44:	2304      	movs	r3, #4
 8005f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f4a:	e0ce      	b.n	80060ea <UART_SetConfig+0x27e>
 8005f4c:	2308      	movs	r3, #8
 8005f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f52:	e0ca      	b.n	80060ea <UART_SetConfig+0x27e>
 8005f54:	2310      	movs	r3, #16
 8005f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f5a:	e0c6      	b.n	80060ea <UART_SetConfig+0x27e>
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a7d      	ldr	r2, [pc, #500]	@ (8006158 <UART_SetConfig+0x2ec>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d138      	bne.n	8005fd8 <UART_SetConfig+0x16c>
 8005f66:	4b7b      	ldr	r3, [pc, #492]	@ (8006154 <UART_SetConfig+0x2e8>)
 8005f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f6c:	f003 030c 	and.w	r3, r3, #12
 8005f70:	2b0c      	cmp	r3, #12
 8005f72:	d82d      	bhi.n	8005fd0 <UART_SetConfig+0x164>
 8005f74:	a201      	add	r2, pc, #4	@ (adr r2, 8005f7c <UART_SetConfig+0x110>)
 8005f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7a:	bf00      	nop
 8005f7c:	08005fb1 	.word	0x08005fb1
 8005f80:	08005fd1 	.word	0x08005fd1
 8005f84:	08005fd1 	.word	0x08005fd1
 8005f88:	08005fd1 	.word	0x08005fd1
 8005f8c:	08005fc1 	.word	0x08005fc1
 8005f90:	08005fd1 	.word	0x08005fd1
 8005f94:	08005fd1 	.word	0x08005fd1
 8005f98:	08005fd1 	.word	0x08005fd1
 8005f9c:	08005fb9 	.word	0x08005fb9
 8005fa0:	08005fd1 	.word	0x08005fd1
 8005fa4:	08005fd1 	.word	0x08005fd1
 8005fa8:	08005fd1 	.word	0x08005fd1
 8005fac:	08005fc9 	.word	0x08005fc9
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fb6:	e098      	b.n	80060ea <UART_SetConfig+0x27e>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fbe:	e094      	b.n	80060ea <UART_SetConfig+0x27e>
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fc6:	e090      	b.n	80060ea <UART_SetConfig+0x27e>
 8005fc8:	2308      	movs	r3, #8
 8005fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fce:	e08c      	b.n	80060ea <UART_SetConfig+0x27e>
 8005fd0:	2310      	movs	r3, #16
 8005fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fd6:	e088      	b.n	80060ea <UART_SetConfig+0x27e>
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a5f      	ldr	r2, [pc, #380]	@ (800615c <UART_SetConfig+0x2f0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d125      	bne.n	800602e <UART_SetConfig+0x1c2>
 8005fe2:	4b5c      	ldr	r3, [pc, #368]	@ (8006154 <UART_SetConfig+0x2e8>)
 8005fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005fec:	2b30      	cmp	r3, #48	@ 0x30
 8005fee:	d016      	beq.n	800601e <UART_SetConfig+0x1b2>
 8005ff0:	2b30      	cmp	r3, #48	@ 0x30
 8005ff2:	d818      	bhi.n	8006026 <UART_SetConfig+0x1ba>
 8005ff4:	2b20      	cmp	r3, #32
 8005ff6:	d00a      	beq.n	800600e <UART_SetConfig+0x1a2>
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d814      	bhi.n	8006026 <UART_SetConfig+0x1ba>
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <UART_SetConfig+0x19a>
 8006000:	2b10      	cmp	r3, #16
 8006002:	d008      	beq.n	8006016 <UART_SetConfig+0x1aa>
 8006004:	e00f      	b.n	8006026 <UART_SetConfig+0x1ba>
 8006006:	2300      	movs	r3, #0
 8006008:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800600c:	e06d      	b.n	80060ea <UART_SetConfig+0x27e>
 800600e:	2302      	movs	r3, #2
 8006010:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006014:	e069      	b.n	80060ea <UART_SetConfig+0x27e>
 8006016:	2304      	movs	r3, #4
 8006018:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800601c:	e065      	b.n	80060ea <UART_SetConfig+0x27e>
 800601e:	2308      	movs	r3, #8
 8006020:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006024:	e061      	b.n	80060ea <UART_SetConfig+0x27e>
 8006026:	2310      	movs	r3, #16
 8006028:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800602c:	e05d      	b.n	80060ea <UART_SetConfig+0x27e>
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a4b      	ldr	r2, [pc, #300]	@ (8006160 <UART_SetConfig+0x2f4>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d125      	bne.n	8006084 <UART_SetConfig+0x218>
 8006038:	4b46      	ldr	r3, [pc, #280]	@ (8006154 <UART_SetConfig+0x2e8>)
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800603e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006042:	2bc0      	cmp	r3, #192	@ 0xc0
 8006044:	d016      	beq.n	8006074 <UART_SetConfig+0x208>
 8006046:	2bc0      	cmp	r3, #192	@ 0xc0
 8006048:	d818      	bhi.n	800607c <UART_SetConfig+0x210>
 800604a:	2b80      	cmp	r3, #128	@ 0x80
 800604c:	d00a      	beq.n	8006064 <UART_SetConfig+0x1f8>
 800604e:	2b80      	cmp	r3, #128	@ 0x80
 8006050:	d814      	bhi.n	800607c <UART_SetConfig+0x210>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <UART_SetConfig+0x1f0>
 8006056:	2b40      	cmp	r3, #64	@ 0x40
 8006058:	d008      	beq.n	800606c <UART_SetConfig+0x200>
 800605a:	e00f      	b.n	800607c <UART_SetConfig+0x210>
 800605c:	2300      	movs	r3, #0
 800605e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006062:	e042      	b.n	80060ea <UART_SetConfig+0x27e>
 8006064:	2302      	movs	r3, #2
 8006066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800606a:	e03e      	b.n	80060ea <UART_SetConfig+0x27e>
 800606c:	2304      	movs	r3, #4
 800606e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006072:	e03a      	b.n	80060ea <UART_SetConfig+0x27e>
 8006074:	2308      	movs	r3, #8
 8006076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800607a:	e036      	b.n	80060ea <UART_SetConfig+0x27e>
 800607c:	2310      	movs	r3, #16
 800607e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006082:	e032      	b.n	80060ea <UART_SetConfig+0x27e>
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a30      	ldr	r2, [pc, #192]	@ (800614c <UART_SetConfig+0x2e0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d12a      	bne.n	80060e4 <UART_SetConfig+0x278>
 800608e:	4b31      	ldr	r3, [pc, #196]	@ (8006154 <UART_SetConfig+0x2e8>)
 8006090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006094:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006098:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800609c:	d01a      	beq.n	80060d4 <UART_SetConfig+0x268>
 800609e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060a2:	d81b      	bhi.n	80060dc <UART_SetConfig+0x270>
 80060a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060a8:	d00c      	beq.n	80060c4 <UART_SetConfig+0x258>
 80060aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060ae:	d815      	bhi.n	80060dc <UART_SetConfig+0x270>
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d003      	beq.n	80060bc <UART_SetConfig+0x250>
 80060b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060b8:	d008      	beq.n	80060cc <UART_SetConfig+0x260>
 80060ba:	e00f      	b.n	80060dc <UART_SetConfig+0x270>
 80060bc:	2300      	movs	r3, #0
 80060be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060c2:	e012      	b.n	80060ea <UART_SetConfig+0x27e>
 80060c4:	2302      	movs	r3, #2
 80060c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ca:	e00e      	b.n	80060ea <UART_SetConfig+0x27e>
 80060cc:	2304      	movs	r3, #4
 80060ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060d2:	e00a      	b.n	80060ea <UART_SetConfig+0x27e>
 80060d4:	2308      	movs	r3, #8
 80060d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060da:	e006      	b.n	80060ea <UART_SetConfig+0x27e>
 80060dc:	2310      	movs	r3, #16
 80060de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060e2:	e002      	b.n	80060ea <UART_SetConfig+0x27e>
 80060e4:	2310      	movs	r3, #16
 80060e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a17      	ldr	r2, [pc, #92]	@ (800614c <UART_SetConfig+0x2e0>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	f040 80a8 	bne.w	8006246 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060fa:	2b08      	cmp	r3, #8
 80060fc:	d834      	bhi.n	8006168 <UART_SetConfig+0x2fc>
 80060fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006104 <UART_SetConfig+0x298>)
 8006100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006104:	08006129 	.word	0x08006129
 8006108:	08006169 	.word	0x08006169
 800610c:	08006131 	.word	0x08006131
 8006110:	08006169 	.word	0x08006169
 8006114:	08006137 	.word	0x08006137
 8006118:	08006169 	.word	0x08006169
 800611c:	08006169 	.word	0x08006169
 8006120:	08006169 	.word	0x08006169
 8006124:	0800613f 	.word	0x0800613f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006128:	f7fd fe8a 	bl	8003e40 <HAL_RCC_GetPCLK1Freq>
 800612c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800612e:	e021      	b.n	8006174 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006130:	4b0c      	ldr	r3, [pc, #48]	@ (8006164 <UART_SetConfig+0x2f8>)
 8006132:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006134:	e01e      	b.n	8006174 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006136:	f7fd fe15 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 800613a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800613c:	e01a      	b.n	8006174 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800613e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006142:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006144:	e016      	b.n	8006174 <UART_SetConfig+0x308>
 8006146:	bf00      	nop
 8006148:	cfff69f3 	.word	0xcfff69f3
 800614c:	40008000 	.word	0x40008000
 8006150:	40013800 	.word	0x40013800
 8006154:	40021000 	.word	0x40021000
 8006158:	40004400 	.word	0x40004400
 800615c:	40004800 	.word	0x40004800
 8006160:	40004c00 	.word	0x40004c00
 8006164:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006172:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006176:	2b00      	cmp	r3, #0
 8006178:	f000 812a 	beq.w	80063d0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006180:	4a9e      	ldr	r2, [pc, #632]	@ (80063fc <UART_SetConfig+0x590>)
 8006182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006186:	461a      	mov	r2, r3
 8006188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618a:	fbb3 f3f2 	udiv	r3, r3, r2
 800618e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	4613      	mov	r3, r2
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	4413      	add	r3, r2
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	429a      	cmp	r2, r3
 800619e:	d305      	bcc.n	80061ac <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d903      	bls.n	80061b4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80061b2:	e10d      	b.n	80063d0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b6:	2200      	movs	r2, #0
 80061b8:	60bb      	str	r3, [r7, #8]
 80061ba:	60fa      	str	r2, [r7, #12]
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c0:	4a8e      	ldr	r2, [pc, #568]	@ (80063fc <UART_SetConfig+0x590>)
 80061c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2200      	movs	r2, #0
 80061ca:	603b      	str	r3, [r7, #0]
 80061cc:	607a      	str	r2, [r7, #4]
 80061ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80061d6:	f7fa f873 	bl	80002c0 <__aeabi_uldivmod>
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	4610      	mov	r0, r2
 80061e0:	4619      	mov	r1, r3
 80061e2:	f04f 0200 	mov.w	r2, #0
 80061e6:	f04f 0300 	mov.w	r3, #0
 80061ea:	020b      	lsls	r3, r1, #8
 80061ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80061f0:	0202      	lsls	r2, r0, #8
 80061f2:	6979      	ldr	r1, [r7, #20]
 80061f4:	6849      	ldr	r1, [r1, #4]
 80061f6:	0849      	lsrs	r1, r1, #1
 80061f8:	2000      	movs	r0, #0
 80061fa:	460c      	mov	r4, r1
 80061fc:	4605      	mov	r5, r0
 80061fe:	eb12 0804 	adds.w	r8, r2, r4
 8006202:	eb43 0905 	adc.w	r9, r3, r5
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	469a      	mov	sl, r3
 800620e:	4693      	mov	fp, r2
 8006210:	4652      	mov	r2, sl
 8006212:	465b      	mov	r3, fp
 8006214:	4640      	mov	r0, r8
 8006216:	4649      	mov	r1, r9
 8006218:	f7fa f852 	bl	80002c0 <__aeabi_uldivmod>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	4613      	mov	r3, r2
 8006222:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800622a:	d308      	bcc.n	800623e <UART_SetConfig+0x3d2>
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006232:	d204      	bcs.n	800623e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6a3a      	ldr	r2, [r7, #32]
 800623a:	60da      	str	r2, [r3, #12]
 800623c:	e0c8      	b.n	80063d0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006244:	e0c4      	b.n	80063d0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800624e:	d167      	bne.n	8006320 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006250:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006254:	2b08      	cmp	r3, #8
 8006256:	d828      	bhi.n	80062aa <UART_SetConfig+0x43e>
 8006258:	a201      	add	r2, pc, #4	@ (adr r2, 8006260 <UART_SetConfig+0x3f4>)
 800625a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625e:	bf00      	nop
 8006260:	08006285 	.word	0x08006285
 8006264:	0800628d 	.word	0x0800628d
 8006268:	08006295 	.word	0x08006295
 800626c:	080062ab 	.word	0x080062ab
 8006270:	0800629b 	.word	0x0800629b
 8006274:	080062ab 	.word	0x080062ab
 8006278:	080062ab 	.word	0x080062ab
 800627c:	080062ab 	.word	0x080062ab
 8006280:	080062a3 	.word	0x080062a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006284:	f7fd fddc 	bl	8003e40 <HAL_RCC_GetPCLK1Freq>
 8006288:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800628a:	e014      	b.n	80062b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800628c:	f7fd fdee 	bl	8003e6c <HAL_RCC_GetPCLK2Freq>
 8006290:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006292:	e010      	b.n	80062b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006294:	4b5a      	ldr	r3, [pc, #360]	@ (8006400 <UART_SetConfig+0x594>)
 8006296:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006298:	e00d      	b.n	80062b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800629a:	f7fd fd63 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 800629e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062a0:	e009      	b.n	80062b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062a8:	e005      	b.n	80062b6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80062b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 8089 	beq.w	80063d0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c2:	4a4e      	ldr	r2, [pc, #312]	@ (80063fc <UART_SetConfig+0x590>)
 80062c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062c8:	461a      	mov	r2, r3
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80062d0:	005a      	lsls	r2, r3, #1
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	085b      	lsrs	r3, r3, #1
 80062d8:	441a      	add	r2, r3
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	2b0f      	cmp	r3, #15
 80062e8:	d916      	bls.n	8006318 <UART_SetConfig+0x4ac>
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062f0:	d212      	bcs.n	8006318 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	f023 030f 	bic.w	r3, r3, #15
 80062fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	085b      	lsrs	r3, r3, #1
 8006300:	b29b      	uxth	r3, r3
 8006302:	f003 0307 	and.w	r3, r3, #7
 8006306:	b29a      	uxth	r2, r3
 8006308:	8bfb      	ldrh	r3, [r7, #30]
 800630a:	4313      	orrs	r3, r2
 800630c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	8bfa      	ldrh	r2, [r7, #30]
 8006314:	60da      	str	r2, [r3, #12]
 8006316:	e05b      	b.n	80063d0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800631e:	e057      	b.n	80063d0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006320:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006324:	2b08      	cmp	r3, #8
 8006326:	d828      	bhi.n	800637a <UART_SetConfig+0x50e>
 8006328:	a201      	add	r2, pc, #4	@ (adr r2, 8006330 <UART_SetConfig+0x4c4>)
 800632a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632e:	bf00      	nop
 8006330:	08006355 	.word	0x08006355
 8006334:	0800635d 	.word	0x0800635d
 8006338:	08006365 	.word	0x08006365
 800633c:	0800637b 	.word	0x0800637b
 8006340:	0800636b 	.word	0x0800636b
 8006344:	0800637b 	.word	0x0800637b
 8006348:	0800637b 	.word	0x0800637b
 800634c:	0800637b 	.word	0x0800637b
 8006350:	08006373 	.word	0x08006373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006354:	f7fd fd74 	bl	8003e40 <HAL_RCC_GetPCLK1Freq>
 8006358:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800635a:	e014      	b.n	8006386 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800635c:	f7fd fd86 	bl	8003e6c <HAL_RCC_GetPCLK2Freq>
 8006360:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006362:	e010      	b.n	8006386 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006364:	4b26      	ldr	r3, [pc, #152]	@ (8006400 <UART_SetConfig+0x594>)
 8006366:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006368:	e00d      	b.n	8006386 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800636a:	f7fd fcfb 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 800636e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006370:	e009      	b.n	8006386 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006372:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006376:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006378:	e005      	b.n	8006386 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006384:	bf00      	nop
    }

    if (pclk != 0U)
 8006386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006388:	2b00      	cmp	r3, #0
 800638a:	d021      	beq.n	80063d0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006390:	4a1a      	ldr	r2, [pc, #104]	@ (80063fc <UART_SetConfig+0x590>)
 8006392:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006396:	461a      	mov	r2, r3
 8006398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639a:	fbb3 f2f2 	udiv	r2, r3, r2
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	085b      	lsrs	r3, r3, #1
 80063a4:	441a      	add	r2, r3
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	2b0f      	cmp	r3, #15
 80063b4:	d909      	bls.n	80063ca <UART_SetConfig+0x55e>
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063bc:	d205      	bcs.n	80063ca <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	60da      	str	r2, [r3, #12]
 80063c8:	e002      	b.n	80063d0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2201      	movs	r2, #1
 80063dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2200      	movs	r2, #0
 80063e4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2200      	movs	r2, #0
 80063ea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80063ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3730      	adds	r7, #48	@ 0x30
 80063f4:	46bd      	mov	sp, r7
 80063f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063fa:	bf00      	nop
 80063fc:	080089cc 	.word	0x080089cc
 8006400:	00f42400 	.word	0x00f42400

08006404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006476:	f003 0304 	and.w	r3, r3, #4
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006498:	f003 0310 	and.w	r3, r3, #16
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00a      	beq.n	80064b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d01a      	beq.n	800651a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006502:	d10a      	bne.n	800651a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	605a      	str	r2, [r3, #4]
  }
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b098      	sub	sp, #96	@ 0x60
 800654c:	af02      	add	r7, sp, #8
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006558:	f7fb fcb4 	bl	8001ec4 <HAL_GetTick>
 800655c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b08      	cmp	r3, #8
 800656a:	d12f      	bne.n	80065cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800656c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006574:	2200      	movs	r2, #0
 8006576:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f88e 	bl	800669c <UART_WaitOnFlagUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d022      	beq.n	80065cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658e:	e853 3f00 	ldrex	r3, [r3]
 8006592:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006596:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800659a:	653b      	str	r3, [r7, #80]	@ 0x50
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80065a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065ac:	e841 2300 	strex	r3, r2, [r1]
 80065b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e6      	bne.n	8006586 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e063      	b.n	8006694 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0304 	and.w	r3, r3, #4
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	d149      	bne.n	800666e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065e2:	2200      	movs	r2, #0
 80065e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f857 	bl	800669c <UART_WaitOnFlagUntilTimeout>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d03c      	beq.n	800666e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fc:	e853 3f00 	ldrex	r3, [r3]
 8006600:	623b      	str	r3, [r7, #32]
   return(result);
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006608:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006612:	633b      	str	r3, [r7, #48]	@ 0x30
 8006614:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e6      	bne.n	80065f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3308      	adds	r3, #8
 800662c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	e853 3f00 	ldrex	r3, [r3]
 8006634:	60fb      	str	r3, [r7, #12]
   return(result);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f023 0301 	bic.w	r3, r3, #1
 800663c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3308      	adds	r3, #8
 8006644:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006646:	61fa      	str	r2, [r7, #28]
 8006648:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	69b9      	ldr	r1, [r7, #24]
 800664c:	69fa      	ldr	r2, [r7, #28]
 800664e:	e841 2300 	strex	r3, r2, [r1]
 8006652:	617b      	str	r3, [r7, #20]
   return(result);
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1e5      	bne.n	8006626 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2220      	movs	r2, #32
 800665e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e012      	b.n	8006694 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2220      	movs	r2, #32
 8006672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2220      	movs	r2, #32
 800667a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3758      	adds	r7, #88	@ 0x58
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	603b      	str	r3, [r7, #0]
 80066a8:	4613      	mov	r3, r2
 80066aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ac:	e04f      	b.n	800674e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b4:	d04b      	beq.n	800674e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b6:	f7fb fc05 	bl	8001ec4 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d302      	bcc.n	80066cc <UART_WaitOnFlagUntilTimeout+0x30>
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e04e      	b.n	800676e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0304 	and.w	r3, r3, #4
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d037      	beq.n	800674e <UART_WaitOnFlagUntilTimeout+0xb2>
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b80      	cmp	r3, #128	@ 0x80
 80066e2:	d034      	beq.n	800674e <UART_WaitOnFlagUntilTimeout+0xb2>
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2b40      	cmp	r3, #64	@ 0x40
 80066e8:	d031      	beq.n	800674e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d110      	bne.n	800671a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2208      	movs	r2, #8
 80066fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 f95b 	bl	80069bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2208      	movs	r2, #8
 800670a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e029      	b.n	800676e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006724:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006728:	d111      	bne.n	800674e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006732:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f941 	bl	80069bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2220      	movs	r2, #32
 800673e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e00f      	b.n	800676e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69da      	ldr	r2, [r3, #28]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4013      	ands	r3, r2
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	429a      	cmp	r2, r3
 800675c:	bf0c      	ite	eq
 800675e:	2301      	moveq	r3, #1
 8006760:	2300      	movne	r3, #0
 8006762:	b2db      	uxtb	r3, r3
 8006764:	461a      	mov	r2, r3
 8006766:	79fb      	ldrb	r3, [r7, #7]
 8006768:	429a      	cmp	r2, r3
 800676a:	d0a0      	beq.n	80066ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006778:	b480      	push	{r7}
 800677a:	b0a3      	sub	sp, #140	@ 0x8c
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	4613      	mov	r3, r2
 8006784:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	88fa      	ldrh	r2, [r7, #6]
 8006790:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	88fa      	ldrh	r2, [r7, #6]
 8006798:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067aa:	d10e      	bne.n	80067ca <UART_Start_Receive_IT+0x52>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d105      	bne.n	80067c0 <UART_Start_Receive_IT+0x48>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80067ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80067be:	e02d      	b.n	800681c <UART_Start_Receive_IT+0xa4>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	22ff      	movs	r2, #255	@ 0xff
 80067c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80067c8:	e028      	b.n	800681c <UART_Start_Receive_IT+0xa4>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10d      	bne.n	80067ee <UART_Start_Receive_IT+0x76>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d104      	bne.n	80067e4 <UART_Start_Receive_IT+0x6c>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	22ff      	movs	r2, #255	@ 0xff
 80067de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80067e2:	e01b      	b.n	800681c <UART_Start_Receive_IT+0xa4>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	227f      	movs	r2, #127	@ 0x7f
 80067e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80067ec:	e016      	b.n	800681c <UART_Start_Receive_IT+0xa4>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067f6:	d10d      	bne.n	8006814 <UART_Start_Receive_IT+0x9c>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <UART_Start_Receive_IT+0x92>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	227f      	movs	r2, #127	@ 0x7f
 8006804:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006808:	e008      	b.n	800681c <UART_Start_Receive_IT+0xa4>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	223f      	movs	r2, #63	@ 0x3f
 800680e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006812:	e003      	b.n	800681c <UART_Start_Receive_IT+0xa4>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2222      	movs	r2, #34	@ 0x22
 8006828:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3308      	adds	r3, #8
 8006832:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006836:	e853 3f00 	ldrex	r3, [r3]
 800683a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800683c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800683e:	f043 0301 	orr.w	r3, r3, #1
 8006842:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3308      	adds	r3, #8
 800684c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006850:	673a      	str	r2, [r7, #112]	@ 0x70
 8006852:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006856:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800685e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e3      	bne.n	800682c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800686c:	d14f      	bne.n	800690e <UART_Start_Receive_IT+0x196>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006874:	88fa      	ldrh	r2, [r7, #6]
 8006876:	429a      	cmp	r2, r3
 8006878:	d349      	bcc.n	800690e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006882:	d107      	bne.n	8006894 <UART_Start_Receive_IT+0x11c>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d103      	bne.n	8006894 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4a47      	ldr	r2, [pc, #284]	@ (80069ac <UART_Start_Receive_IT+0x234>)
 8006890:	675a      	str	r2, [r3, #116]	@ 0x74
 8006892:	e002      	b.n	800689a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4a46      	ldr	r2, [pc, #280]	@ (80069b0 <UART_Start_Receive_IT+0x238>)
 8006898:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d01a      	beq.n	80068d8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80068b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80068c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068c6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80068ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80068cc:	e841 2300 	strex	r3, r2, [r1]
 80068d0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80068d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1e4      	bne.n	80068a2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3308      	adds	r3, #8
 80068de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068e2:	e853 3f00 	ldrex	r3, [r3]
 80068e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3308      	adds	r3, #8
 80068f6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80068f8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80068fa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80068fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006900:	e841 2300 	strex	r3, r2, [r1]
 8006904:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e5      	bne.n	80068d8 <UART_Start_Receive_IT+0x160>
 800690c:	e046      	b.n	800699c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006916:	d107      	bne.n	8006928 <UART_Start_Receive_IT+0x1b0>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d103      	bne.n	8006928 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4a24      	ldr	r2, [pc, #144]	@ (80069b4 <UART_Start_Receive_IT+0x23c>)
 8006924:	675a      	str	r2, [r3, #116]	@ 0x74
 8006926:	e002      	b.n	800692e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4a23      	ldr	r2, [pc, #140]	@ (80069b8 <UART_Start_Receive_IT+0x240>)
 800692c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d019      	beq.n	800696a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800693e:	e853 3f00 	ldrex	r3, [r3]
 8006942:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006946:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800694a:	677b      	str	r3, [r7, #116]	@ 0x74
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	461a      	mov	r2, r3
 8006952:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006954:	637b      	str	r3, [r7, #52]	@ 0x34
 8006956:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006958:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800695a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800695c:	e841 2300 	strex	r3, r2, [r1]
 8006960:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1e6      	bne.n	8006936 <UART_Start_Receive_IT+0x1be>
 8006968:	e018      	b.n	800699c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	613b      	str	r3, [r7, #16]
   return(result);
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f043 0320 	orr.w	r3, r3, #32
 800697e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006988:	623b      	str	r3, [r7, #32]
 800698a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	69f9      	ldr	r1, [r7, #28]
 800698e:	6a3a      	ldr	r2, [r7, #32]
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	61bb      	str	r3, [r7, #24]
   return(result);
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e6      	bne.n	800696a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	378c      	adds	r7, #140	@ 0x8c
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	080071d9 	.word	0x080071d9
 80069b0:	08006e75 	.word	0x08006e75
 80069b4:	08006cbd 	.word	0x08006cbd
 80069b8:	08006b05 	.word	0x08006b05

080069bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069bc:	b480      	push	{r7}
 80069be:	b095      	sub	sp, #84	@ 0x54
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069cc:	e853 3f00 	ldrex	r3, [r3]
 80069d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80069e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069ea:	e841 2300 	strex	r3, r2, [r1]
 80069ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1e6      	bne.n	80069c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3308      	adds	r3, #8
 80069fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a0c:	f023 0301 	bic.w	r3, r3, #1
 8006a10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3308      	adds	r3, #8
 8006a18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e3      	bne.n	80069f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d118      	bne.n	8006a68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	e853 3f00 	ldrex	r3, [r3]
 8006a42:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f023 0310 	bic.w	r3, r3, #16
 8006a4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	461a      	mov	r2, r3
 8006a52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a54:	61bb      	str	r3, [r7, #24]
 8006a56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	6979      	ldr	r1, [r7, #20]
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	e841 2300 	strex	r3, r2, [r1]
 8006a60:	613b      	str	r3, [r7, #16]
   return(result);
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e6      	bne.n	8006a36 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006a7c:	bf00      	nop
 8006a7e:	3754      	adds	r7, #84	@ 0x54
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f7ff f9ce 	bl	8005e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006aa4:	bf00      	nop
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b088      	sub	sp, #32
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ac8:	61fb      	str	r3, [r7, #28]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	61bb      	str	r3, [r7, #24]
 8006ad4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	6979      	ldr	r1, [r7, #20]
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	e841 2300 	strex	r3, r2, [r1]
 8006ade:	613b      	str	r3, [r7, #16]
   return(result);
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e6      	bne.n	8006ab4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff f999 	bl	8005e2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006afa:	bf00      	nop
 8006afc:	3720      	adds	r7, #32
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b09c      	sub	sp, #112	@ 0x70
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006b12:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b1c:	2b22      	cmp	r3, #34	@ 0x22
 8006b1e:	f040 80be 	bne.w	8006c9e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b28:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006b30:	b2d9      	uxtb	r1, r3
 8006b32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b3c:	400a      	ands	r2, r1
 8006b3e:	b2d2      	uxtb	r2, r2
 8006b40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	3b01      	subs	r3, #1
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f040 80a1 	bne.w	8006cae <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	461a      	mov	r2, r3
 8006b88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e6      	bne.n	8006b6c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb0:	f023 0301 	bic.w	r3, r3, #1
 8006bb4:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3308      	adds	r3, #8
 8006bbc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006bbe:	647a      	str	r2, [r7, #68]	@ 0x44
 8006bc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006bc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bc6:	e841 2300 	strex	r3, r2, [r1]
 8006bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1e5      	bne.n	8006b9e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a33      	ldr	r2, [pc, #204]	@ (8006cb8 <UART_RxISR_8BIT+0x1b4>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d01f      	beq.n	8006c30 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d018      	beq.n	8006c30 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c06:	e853 3f00 	ldrex	r3, [r3]
 8006c0a:	623b      	str	r3, [r7, #32]
   return(result);
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c12:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c24:	e841 2300 	strex	r3, r2, [r1]
 8006c28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e6      	bne.n	8006bfe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d12e      	bne.n	8006c96 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 0310 	bic.w	r3, r3, #16
 8006c52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c5c:	61fb      	str	r3, [r7, #28]
 8006c5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	69b9      	ldr	r1, [r7, #24]
 8006c62:	69fa      	ldr	r2, [r7, #28]
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	617b      	str	r3, [r7, #20]
   return(result);
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e6      	bne.n	8006c3e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	f003 0310 	and.w	r3, r3, #16
 8006c7a:	2b10      	cmp	r3, #16
 8006c7c:	d103      	bne.n	8006c86 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2210      	movs	r2, #16
 8006c84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7ff f8e0 	bl	8005e54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c94:	e00b      	b.n	8006cae <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7fa fa1a 	bl	80010d0 <HAL_UART_RxCpltCallback>
}
 8006c9c:	e007      	b.n	8006cae <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	699a      	ldr	r2, [r3, #24]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f042 0208 	orr.w	r2, r2, #8
 8006cac:	619a      	str	r2, [r3, #24]
}
 8006cae:	bf00      	nop
 8006cb0:	3770      	adds	r7, #112	@ 0x70
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	40008000 	.word	0x40008000

08006cbc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b09c      	sub	sp, #112	@ 0x70
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006cca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cd4:	2b22      	cmp	r3, #34	@ 0x22
 8006cd6:	f040 80be 	bne.w	8006e56 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006cea:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006cee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006cf8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cfe:	1c9a      	adds	r2, r3, #2
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f040 80a1 	bne.w	8006e66 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006d32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d38:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d42:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d44:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006d50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e6      	bne.n	8006d24 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3308      	adds	r3, #8
 8006d5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d68:	f023 0301 	bic.w	r3, r3, #1
 8006d6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3308      	adds	r3, #8
 8006d74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d76:	643a      	str	r2, [r7, #64]	@ 0x40
 8006d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e5      	bne.n	8006d56 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a33      	ldr	r2, [pc, #204]	@ (8006e70 <UART_RxISR_16BIT+0x1b4>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d01f      	beq.n	8006de8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d018      	beq.n	8006de8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	e853 3f00 	ldrex	r3, [r3]
 8006dc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006dca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dd6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ddc:	e841 2300 	strex	r3, r2, [r1]
 8006de0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1e6      	bne.n	8006db6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d12e      	bne.n	8006e4e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	e853 3f00 	ldrex	r3, [r3]
 8006e02:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	f023 0310 	bic.w	r3, r3, #16
 8006e0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	461a      	mov	r2, r3
 8006e12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e14:	61bb      	str	r3, [r7, #24]
 8006e16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e18:	6979      	ldr	r1, [r7, #20]
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	e841 2300 	strex	r3, r2, [r1]
 8006e20:	613b      	str	r3, [r7, #16]
   return(result);
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e6      	bne.n	8006df6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	f003 0310 	and.w	r3, r3, #16
 8006e32:	2b10      	cmp	r3, #16
 8006e34:	d103      	bne.n	8006e3e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2210      	movs	r2, #16
 8006e3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e44:	4619      	mov	r1, r3
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7ff f804 	bl	8005e54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e4c:	e00b      	b.n	8006e66 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7fa f93e 	bl	80010d0 <HAL_UART_RxCpltCallback>
}
 8006e54:	e007      	b.n	8006e66 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	699a      	ldr	r2, [r3, #24]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f042 0208 	orr.w	r2, r2, #8
 8006e64:	619a      	str	r2, [r3, #24]
}
 8006e66:	bf00      	nop
 8006e68:	3770      	adds	r7, #112	@ 0x70
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	40008000 	.word	0x40008000

08006e74 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b0ac      	sub	sp, #176	@ 0xb0
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006e82:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	69db      	ldr	r3, [r3, #28]
 8006e8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006eaa:	2b22      	cmp	r3, #34	@ 0x22
 8006eac:	f040 8183 	bne.w	80071b6 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006eb6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006eba:	e126      	b.n	800710a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ec6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006eca:	b2d9      	uxtb	r1, r3
 8006ecc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed6:	400a      	ands	r2, r1
 8006ed8:	b2d2      	uxtb	r2, r2
 8006eda:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006f02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d053      	beq.n	8006fb6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d011      	beq.n	8006f3e <UART_RxISR_8BIT_FIFOEN+0xca>
 8006f1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00b      	beq.n	8006f3e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f34:	f043 0201 	orr.w	r2, r3, #1
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d011      	beq.n	8006f6e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006f4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00b      	beq.n	8006f6e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f64:	f043 0204 	orr.w	r2, r3, #4
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f72:	f003 0304 	and.w	r3, r3, #4
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d011      	beq.n	8006f9e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00b      	beq.n	8006f9e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2204      	movs	r2, #4
 8006f8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f94:	f043 0202 	orr.w	r2, r3, #2
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d006      	beq.n	8006fb6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7fe ff49 	bl	8005e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f040 80a3 	bne.w	800710a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fcc:	e853 3f00 	ldrex	r3, [r3]
 8006fd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006fd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fe6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006fe8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fea:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006fec:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006fee:	e841 2300 	strex	r3, r2, [r1]
 8006ff2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006ff4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1e4      	bne.n	8006fc4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3308      	adds	r3, #8
 8007000:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007002:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007004:	e853 3f00 	ldrex	r3, [r3]
 8007008:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800700a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800700c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007010:	f023 0301 	bic.w	r3, r3, #1
 8007014:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3308      	adds	r3, #8
 800701e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007022:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007024:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007028:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800702a:	e841 2300 	strex	r3, r2, [r1]
 800702e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007030:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1e1      	bne.n	8006ffa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2220      	movs	r2, #32
 800703a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a60      	ldr	r2, [pc, #384]	@ (80071d0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d021      	beq.n	8007098 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d01a      	beq.n	8007098 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007072:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007076:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007084:	657b      	str	r3, [r7, #84]	@ 0x54
 8007086:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007088:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800708a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800708c:	e841 2300 	strex	r3, r2, [r1]
 8007090:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1e4      	bne.n	8007062 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800709c:	2b01      	cmp	r3, #1
 800709e:	d130      	bne.n	8007102 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ae:	e853 3f00 	ldrex	r3, [r3]
 80070b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b6:	f023 0310 	bic.w	r3, r3, #16
 80070ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	461a      	mov	r2, r3
 80070c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80070ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070d0:	e841 2300 	strex	r3, r2, [r1]
 80070d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1e4      	bne.n	80070a6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	f003 0310 	and.w	r3, r3, #16
 80070e6:	2b10      	cmp	r3, #16
 80070e8:	d103      	bne.n	80070f2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2210      	movs	r2, #16
 80070f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7fe feaa 	bl	8005e54 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007100:	e00e      	b.n	8007120 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7f9 ffe4 	bl	80010d0 <HAL_UART_RxCpltCallback>
        break;
 8007108:	e00a      	b.n	8007120 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800710a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800710e:	2b00      	cmp	r3, #0
 8007110:	d006      	beq.n	8007120 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007116:	f003 0320 	and.w	r3, r3, #32
 800711a:	2b00      	cmp	r3, #0
 800711c:	f47f aece 	bne.w	8006ebc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007126:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800712a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800712e:	2b00      	cmp	r3, #0
 8007130:	d049      	beq.n	80071c6 <UART_RxISR_8BIT_FIFOEN+0x352>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007138:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800713c:	429a      	cmp	r2, r3
 800713e:	d242      	bcs.n	80071c6 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3308      	adds	r3, #8
 8007146:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	e853 3f00 	ldrex	r3, [r3]
 800714e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007156:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3308      	adds	r3, #8
 8007160:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007164:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007166:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007168:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800716a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800716c:	e841 2300 	strex	r3, r2, [r1]
 8007170:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1e3      	bne.n	8007140 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a16      	ldr	r2, [pc, #88]	@ (80071d4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800717c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	60bb      	str	r3, [r7, #8]
   return(result);
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	f043 0320 	orr.w	r3, r3, #32
 8007192:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80071a0:	61bb      	str	r3, [r7, #24]
 80071a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a4:	6979      	ldr	r1, [r7, #20]
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	e841 2300 	strex	r3, r2, [r1]
 80071ac:	613b      	str	r3, [r7, #16]
   return(result);
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e4      	bne.n	800717e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071b4:	e007      	b.n	80071c6 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	699a      	ldr	r2, [r3, #24]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f042 0208 	orr.w	r2, r2, #8
 80071c4:	619a      	str	r2, [r3, #24]
}
 80071c6:	bf00      	nop
 80071c8:	37b0      	adds	r7, #176	@ 0xb0
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	40008000 	.word	0x40008000
 80071d4:	08006b05 	.word	0x08006b05

080071d8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b0ae      	sub	sp, #184	@ 0xb8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80071e6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800720e:	2b22      	cmp	r3, #34	@ 0x22
 8007210:	f040 8187 	bne.w	8007522 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800721a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800721e:	e12a      	b.n	8007476 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007226:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800722e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007232:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007236:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800723a:	4013      	ands	r3, r2
 800723c:	b29a      	uxth	r2, r3
 800723e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007242:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007248:	1c9a      	adds	r2, r3, #2
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007254:	b29b      	uxth	r3, r3
 8007256:	3b01      	subs	r3, #1
 8007258:	b29a      	uxth	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800726a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800726e:	f003 0307 	and.w	r3, r3, #7
 8007272:	2b00      	cmp	r3, #0
 8007274:	d053      	beq.n	800731e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007276:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d011      	beq.n	80072a6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00b      	beq.n	80072a6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2201      	movs	r2, #1
 8007294:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800729c:	f043 0201 	orr.w	r2, r3, #1
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072aa:	f003 0302 	and.w	r3, r3, #2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d011      	beq.n	80072d6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80072b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00b      	beq.n	80072d6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2202      	movs	r2, #2
 80072c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072cc:	f043 0204 	orr.w	r2, r3, #4
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072da:	f003 0304 	and.w	r3, r3, #4
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d011      	beq.n	8007306 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80072e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00b      	beq.n	8007306 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2204      	movs	r2, #4
 80072f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072fc:	f043 0202 	orr.w	r2, r3, #2
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800730c:	2b00      	cmp	r3, #0
 800730e:	d006      	beq.n	800731e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f7fe fd95 	bl	8005e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007324:	b29b      	uxth	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	f040 80a5 	bne.w	8007476 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007332:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800733a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800733c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007340:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800734e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007352:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007354:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007356:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007360:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1e2      	bne.n	800732c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3308      	adds	r3, #8
 800736c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007370:	e853 3f00 	ldrex	r3, [r3]
 8007374:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007376:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007378:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800737c:	f023 0301 	bic.w	r3, r3, #1
 8007380:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3308      	adds	r3, #8
 800738a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800738e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007390:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007394:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800739c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1e1      	bne.n	8007366 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2220      	movs	r2, #32
 80073a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a60      	ldr	r2, [pc, #384]	@ (800753c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d021      	beq.n	8007404 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d01a      	beq.n	8007404 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073d6:	e853 3f00 	ldrex	r3, [r3]
 80073da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	461a      	mov	r2, r3
 80073ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80073f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073f2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073f8:	e841 2300 	strex	r3, r2, [r1]
 80073fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e4      	bne.n	80073ce <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007408:	2b01      	cmp	r3, #1
 800740a:	d130      	bne.n	800746e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741a:	e853 3f00 	ldrex	r3, [r3]
 800741e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007422:	f023 0310 	bic.w	r3, r3, #16
 8007426:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	461a      	mov	r2, r3
 8007430:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007434:	647b      	str	r3, [r7, #68]	@ 0x44
 8007436:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007438:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800743a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800743c:	e841 2300 	strex	r3, r2, [r1]
 8007440:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e4      	bne.n	8007412 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	f003 0310 	and.w	r3, r3, #16
 8007452:	2b10      	cmp	r3, #16
 8007454:	d103      	bne.n	800745e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2210      	movs	r2, #16
 800745c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7fe fcf4 	bl	8005e54 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800746c:	e00e      	b.n	800748c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7f9 fe2e 	bl	80010d0 <HAL_UART_RxCpltCallback>
        break;
 8007474:	e00a      	b.n	800748c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007476:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800747a:	2b00      	cmp	r3, #0
 800747c:	d006      	beq.n	800748c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800747e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007482:	f003 0320 	and.w	r3, r3, #32
 8007486:	2b00      	cmp	r3, #0
 8007488:	f47f aeca 	bne.w	8007220 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007492:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007496:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800749a:	2b00      	cmp	r3, #0
 800749c:	d049      	beq.n	8007532 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80074a4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d242      	bcs.n	8007532 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	3308      	adds	r3, #8
 80074b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b6:	e853 3f00 	ldrex	r3, [r3]
 80074ba:	623b      	str	r3, [r7, #32]
   return(result);
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	3308      	adds	r3, #8
 80074cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80074d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80074d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074d8:	e841 2300 	strex	r3, r2, [r1]
 80074dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e3      	bne.n	80074ac <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a16      	ldr	r2, [pc, #88]	@ (8007540 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80074e8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f043 0320 	orr.w	r3, r3, #32
 80074fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800750c:	61fb      	str	r3, [r7, #28]
 800750e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007510:	69b9      	ldr	r1, [r7, #24]
 8007512:	69fa      	ldr	r2, [r7, #28]
 8007514:	e841 2300 	strex	r3, r2, [r1]
 8007518:	617b      	str	r3, [r7, #20]
   return(result);
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1e4      	bne.n	80074ea <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007520:	e007      	b.n	8007532 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	699a      	ldr	r2, [r3, #24]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f042 0208 	orr.w	r2, r2, #8
 8007530:	619a      	str	r2, [r3, #24]
}
 8007532:	bf00      	nop
 8007534:	37b8      	adds	r7, #184	@ 0xb8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	40008000 	.word	0x40008000
 8007540:	08006cbd 	.word	0x08006cbd

08007544 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800758e:	2b01      	cmp	r3, #1
 8007590:	d101      	bne.n	8007596 <HAL_UARTEx_DisableFifoMode+0x16>
 8007592:	2302      	movs	r3, #2
 8007594:	e027      	b.n	80075e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2224      	movs	r2, #36	@ 0x24
 80075a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0201 	bic.w	r2, r2, #1
 80075bc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80075c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2220      	movs	r2, #32
 80075d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b084      	sub	sp, #16
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007602:	2b01      	cmp	r3, #1
 8007604:	d101      	bne.n	800760a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007606:	2302      	movs	r3, #2
 8007608:	e02d      	b.n	8007666 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2224      	movs	r2, #36	@ 0x24
 8007616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 0201 	bic.w	r2, r2, #1
 8007630:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	430a      	orrs	r2, r1
 8007644:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f850 	bl	80076ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2220      	movs	r2, #32
 8007658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800767e:	2b01      	cmp	r3, #1
 8007680:	d101      	bne.n	8007686 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007682:	2302      	movs	r3, #2
 8007684:	e02d      	b.n	80076e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2224      	movs	r2, #36	@ 0x24
 8007692:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 0201 	bic.w	r2, r2, #1
 80076ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f812 	bl	80076ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2220      	movs	r2, #32
 80076d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
	...

080076ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d108      	bne.n	800770e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800770c:	e031      	b.n	8007772 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800770e:	2308      	movs	r3, #8
 8007710:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007712:	2308      	movs	r3, #8
 8007714:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	0e5b      	lsrs	r3, r3, #25
 800771e:	b2db      	uxtb	r3, r3
 8007720:	f003 0307 	and.w	r3, r3, #7
 8007724:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	0f5b      	lsrs	r3, r3, #29
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f003 0307 	and.w	r3, r3, #7
 8007734:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007736:	7bbb      	ldrb	r3, [r7, #14]
 8007738:	7b3a      	ldrb	r2, [r7, #12]
 800773a:	4911      	ldr	r1, [pc, #68]	@ (8007780 <UARTEx_SetNbDataToProcess+0x94>)
 800773c:	5c8a      	ldrb	r2, [r1, r2]
 800773e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007742:	7b3a      	ldrb	r2, [r7, #12]
 8007744:	490f      	ldr	r1, [pc, #60]	@ (8007784 <UARTEx_SetNbDataToProcess+0x98>)
 8007746:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007748:	fb93 f3f2 	sdiv	r3, r3, r2
 800774c:	b29a      	uxth	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007754:	7bfb      	ldrb	r3, [r7, #15]
 8007756:	7b7a      	ldrb	r2, [r7, #13]
 8007758:	4909      	ldr	r1, [pc, #36]	@ (8007780 <UARTEx_SetNbDataToProcess+0x94>)
 800775a:	5c8a      	ldrb	r2, [r1, r2]
 800775c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007760:	7b7a      	ldrb	r2, [r7, #13]
 8007762:	4908      	ldr	r1, [pc, #32]	@ (8007784 <UARTEx_SetNbDataToProcess+0x98>)
 8007764:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007766:	fb93 f3f2 	sdiv	r3, r3, r2
 800776a:	b29a      	uxth	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007772:	bf00      	nop
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	080089e4 	.word	0x080089e4
 8007784:	080089ec 	.word	0x080089ec

08007788 <_strtol_l.constprop.0>:
 8007788:	2b24      	cmp	r3, #36	@ 0x24
 800778a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800778e:	4686      	mov	lr, r0
 8007790:	4690      	mov	r8, r2
 8007792:	d801      	bhi.n	8007798 <_strtol_l.constprop.0+0x10>
 8007794:	2b01      	cmp	r3, #1
 8007796:	d106      	bne.n	80077a6 <_strtol_l.constprop.0+0x1e>
 8007798:	f000 f9f2 	bl	8007b80 <__errno>
 800779c:	2316      	movs	r3, #22
 800779e:	6003      	str	r3, [r0, #0]
 80077a0:	2000      	movs	r0, #0
 80077a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a6:	4834      	ldr	r0, [pc, #208]	@ (8007878 <_strtol_l.constprop.0+0xf0>)
 80077a8:	460d      	mov	r5, r1
 80077aa:	462a      	mov	r2, r5
 80077ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077b0:	5d06      	ldrb	r6, [r0, r4]
 80077b2:	f016 0608 	ands.w	r6, r6, #8
 80077b6:	d1f8      	bne.n	80077aa <_strtol_l.constprop.0+0x22>
 80077b8:	2c2d      	cmp	r4, #45	@ 0x2d
 80077ba:	d12d      	bne.n	8007818 <_strtol_l.constprop.0+0x90>
 80077bc:	782c      	ldrb	r4, [r5, #0]
 80077be:	2601      	movs	r6, #1
 80077c0:	1c95      	adds	r5, r2, #2
 80077c2:	f033 0210 	bics.w	r2, r3, #16
 80077c6:	d109      	bne.n	80077dc <_strtol_l.constprop.0+0x54>
 80077c8:	2c30      	cmp	r4, #48	@ 0x30
 80077ca:	d12a      	bne.n	8007822 <_strtol_l.constprop.0+0x9a>
 80077cc:	782a      	ldrb	r2, [r5, #0]
 80077ce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80077d2:	2a58      	cmp	r2, #88	@ 0x58
 80077d4:	d125      	bne.n	8007822 <_strtol_l.constprop.0+0x9a>
 80077d6:	786c      	ldrb	r4, [r5, #1]
 80077d8:	2310      	movs	r3, #16
 80077da:	3502      	adds	r5, #2
 80077dc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80077e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80077e4:	2200      	movs	r2, #0
 80077e6:	fbbc f9f3 	udiv	r9, ip, r3
 80077ea:	4610      	mov	r0, r2
 80077ec:	fb03 ca19 	mls	sl, r3, r9, ip
 80077f0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80077f4:	2f09      	cmp	r7, #9
 80077f6:	d81b      	bhi.n	8007830 <_strtol_l.constprop.0+0xa8>
 80077f8:	463c      	mov	r4, r7
 80077fa:	42a3      	cmp	r3, r4
 80077fc:	dd27      	ble.n	800784e <_strtol_l.constprop.0+0xc6>
 80077fe:	1c57      	adds	r7, r2, #1
 8007800:	d007      	beq.n	8007812 <_strtol_l.constprop.0+0x8a>
 8007802:	4581      	cmp	r9, r0
 8007804:	d320      	bcc.n	8007848 <_strtol_l.constprop.0+0xc0>
 8007806:	d101      	bne.n	800780c <_strtol_l.constprop.0+0x84>
 8007808:	45a2      	cmp	sl, r4
 800780a:	db1d      	blt.n	8007848 <_strtol_l.constprop.0+0xc0>
 800780c:	fb00 4003 	mla	r0, r0, r3, r4
 8007810:	2201      	movs	r2, #1
 8007812:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007816:	e7eb      	b.n	80077f0 <_strtol_l.constprop.0+0x68>
 8007818:	2c2b      	cmp	r4, #43	@ 0x2b
 800781a:	bf04      	itt	eq
 800781c:	782c      	ldrbeq	r4, [r5, #0]
 800781e:	1c95      	addeq	r5, r2, #2
 8007820:	e7cf      	b.n	80077c2 <_strtol_l.constprop.0+0x3a>
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1da      	bne.n	80077dc <_strtol_l.constprop.0+0x54>
 8007826:	2c30      	cmp	r4, #48	@ 0x30
 8007828:	bf0c      	ite	eq
 800782a:	2308      	moveq	r3, #8
 800782c:	230a      	movne	r3, #10
 800782e:	e7d5      	b.n	80077dc <_strtol_l.constprop.0+0x54>
 8007830:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007834:	2f19      	cmp	r7, #25
 8007836:	d801      	bhi.n	800783c <_strtol_l.constprop.0+0xb4>
 8007838:	3c37      	subs	r4, #55	@ 0x37
 800783a:	e7de      	b.n	80077fa <_strtol_l.constprop.0+0x72>
 800783c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007840:	2f19      	cmp	r7, #25
 8007842:	d804      	bhi.n	800784e <_strtol_l.constprop.0+0xc6>
 8007844:	3c57      	subs	r4, #87	@ 0x57
 8007846:	e7d8      	b.n	80077fa <_strtol_l.constprop.0+0x72>
 8007848:	f04f 32ff 	mov.w	r2, #4294967295
 800784c:	e7e1      	b.n	8007812 <_strtol_l.constprop.0+0x8a>
 800784e:	1c53      	adds	r3, r2, #1
 8007850:	d108      	bne.n	8007864 <_strtol_l.constprop.0+0xdc>
 8007852:	2322      	movs	r3, #34	@ 0x22
 8007854:	f8ce 3000 	str.w	r3, [lr]
 8007858:	4660      	mov	r0, ip
 800785a:	f1b8 0f00 	cmp.w	r8, #0
 800785e:	d0a0      	beq.n	80077a2 <_strtol_l.constprop.0+0x1a>
 8007860:	1e69      	subs	r1, r5, #1
 8007862:	e006      	b.n	8007872 <_strtol_l.constprop.0+0xea>
 8007864:	b106      	cbz	r6, 8007868 <_strtol_l.constprop.0+0xe0>
 8007866:	4240      	negs	r0, r0
 8007868:	f1b8 0f00 	cmp.w	r8, #0
 800786c:	d099      	beq.n	80077a2 <_strtol_l.constprop.0+0x1a>
 800786e:	2a00      	cmp	r2, #0
 8007870:	d1f6      	bne.n	8007860 <_strtol_l.constprop.0+0xd8>
 8007872:	f8c8 1000 	str.w	r1, [r8]
 8007876:	e794      	b.n	80077a2 <_strtol_l.constprop.0+0x1a>
 8007878:	080089f5 	.word	0x080089f5

0800787c <strtol>:
 800787c:	4613      	mov	r3, r2
 800787e:	460a      	mov	r2, r1
 8007880:	4601      	mov	r1, r0
 8007882:	4802      	ldr	r0, [pc, #8]	@ (800788c <strtol+0x10>)
 8007884:	6800      	ldr	r0, [r0, #0]
 8007886:	f7ff bf7f 	b.w	8007788 <_strtol_l.constprop.0>
 800788a:	bf00      	nop
 800788c:	20000040 	.word	0x20000040

08007890 <std>:
 8007890:	2300      	movs	r3, #0
 8007892:	b510      	push	{r4, lr}
 8007894:	4604      	mov	r4, r0
 8007896:	e9c0 3300 	strd	r3, r3, [r0]
 800789a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800789e:	6083      	str	r3, [r0, #8]
 80078a0:	8181      	strh	r1, [r0, #12]
 80078a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80078a4:	81c2      	strh	r2, [r0, #14]
 80078a6:	6183      	str	r3, [r0, #24]
 80078a8:	4619      	mov	r1, r3
 80078aa:	2208      	movs	r2, #8
 80078ac:	305c      	adds	r0, #92	@ 0x5c
 80078ae:	f000 f906 	bl	8007abe <memset>
 80078b2:	4b0d      	ldr	r3, [pc, #52]	@ (80078e8 <std+0x58>)
 80078b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80078b6:	4b0d      	ldr	r3, [pc, #52]	@ (80078ec <std+0x5c>)
 80078b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80078ba:	4b0d      	ldr	r3, [pc, #52]	@ (80078f0 <std+0x60>)
 80078bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80078be:	4b0d      	ldr	r3, [pc, #52]	@ (80078f4 <std+0x64>)
 80078c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80078c2:	4b0d      	ldr	r3, [pc, #52]	@ (80078f8 <std+0x68>)
 80078c4:	6224      	str	r4, [r4, #32]
 80078c6:	429c      	cmp	r4, r3
 80078c8:	d006      	beq.n	80078d8 <std+0x48>
 80078ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80078ce:	4294      	cmp	r4, r2
 80078d0:	d002      	beq.n	80078d8 <std+0x48>
 80078d2:	33d0      	adds	r3, #208	@ 0xd0
 80078d4:	429c      	cmp	r4, r3
 80078d6:	d105      	bne.n	80078e4 <std+0x54>
 80078d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80078dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078e0:	f000 b978 	b.w	8007bd4 <__retarget_lock_init_recursive>
 80078e4:	bd10      	pop	{r4, pc}
 80078e6:	bf00      	nop
 80078e8:	08007a39 	.word	0x08007a39
 80078ec:	08007a5b 	.word	0x08007a5b
 80078f0:	08007a93 	.word	0x08007a93
 80078f4:	08007ab7 	.word	0x08007ab7
 80078f8:	20000378 	.word	0x20000378

080078fc <stdio_exit_handler>:
 80078fc:	4a02      	ldr	r2, [pc, #8]	@ (8007908 <stdio_exit_handler+0xc>)
 80078fe:	4903      	ldr	r1, [pc, #12]	@ (800790c <stdio_exit_handler+0x10>)
 8007900:	4803      	ldr	r0, [pc, #12]	@ (8007910 <stdio_exit_handler+0x14>)
 8007902:	f000 b869 	b.w	80079d8 <_fwalk_sglue>
 8007906:	bf00      	nop
 8007908:	20000034 	.word	0x20000034
 800790c:	08008475 	.word	0x08008475
 8007910:	20000044 	.word	0x20000044

08007914 <cleanup_stdio>:
 8007914:	6841      	ldr	r1, [r0, #4]
 8007916:	4b0c      	ldr	r3, [pc, #48]	@ (8007948 <cleanup_stdio+0x34>)
 8007918:	4299      	cmp	r1, r3
 800791a:	b510      	push	{r4, lr}
 800791c:	4604      	mov	r4, r0
 800791e:	d001      	beq.n	8007924 <cleanup_stdio+0x10>
 8007920:	f000 fda8 	bl	8008474 <_fflush_r>
 8007924:	68a1      	ldr	r1, [r4, #8]
 8007926:	4b09      	ldr	r3, [pc, #36]	@ (800794c <cleanup_stdio+0x38>)
 8007928:	4299      	cmp	r1, r3
 800792a:	d002      	beq.n	8007932 <cleanup_stdio+0x1e>
 800792c:	4620      	mov	r0, r4
 800792e:	f000 fda1 	bl	8008474 <_fflush_r>
 8007932:	68e1      	ldr	r1, [r4, #12]
 8007934:	4b06      	ldr	r3, [pc, #24]	@ (8007950 <cleanup_stdio+0x3c>)
 8007936:	4299      	cmp	r1, r3
 8007938:	d004      	beq.n	8007944 <cleanup_stdio+0x30>
 800793a:	4620      	mov	r0, r4
 800793c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007940:	f000 bd98 	b.w	8008474 <_fflush_r>
 8007944:	bd10      	pop	{r4, pc}
 8007946:	bf00      	nop
 8007948:	20000378 	.word	0x20000378
 800794c:	200003e0 	.word	0x200003e0
 8007950:	20000448 	.word	0x20000448

08007954 <global_stdio_init.part.0>:
 8007954:	b510      	push	{r4, lr}
 8007956:	4b0b      	ldr	r3, [pc, #44]	@ (8007984 <global_stdio_init.part.0+0x30>)
 8007958:	4c0b      	ldr	r4, [pc, #44]	@ (8007988 <global_stdio_init.part.0+0x34>)
 800795a:	4a0c      	ldr	r2, [pc, #48]	@ (800798c <global_stdio_init.part.0+0x38>)
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	4620      	mov	r0, r4
 8007960:	2200      	movs	r2, #0
 8007962:	2104      	movs	r1, #4
 8007964:	f7ff ff94 	bl	8007890 <std>
 8007968:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800796c:	2201      	movs	r2, #1
 800796e:	2109      	movs	r1, #9
 8007970:	f7ff ff8e 	bl	8007890 <std>
 8007974:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007978:	2202      	movs	r2, #2
 800797a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800797e:	2112      	movs	r1, #18
 8007980:	f7ff bf86 	b.w	8007890 <std>
 8007984:	200004b0 	.word	0x200004b0
 8007988:	20000378 	.word	0x20000378
 800798c:	080078fd 	.word	0x080078fd

08007990 <__sfp_lock_acquire>:
 8007990:	4801      	ldr	r0, [pc, #4]	@ (8007998 <__sfp_lock_acquire+0x8>)
 8007992:	f000 b920 	b.w	8007bd6 <__retarget_lock_acquire_recursive>
 8007996:	bf00      	nop
 8007998:	200004b9 	.word	0x200004b9

0800799c <__sfp_lock_release>:
 800799c:	4801      	ldr	r0, [pc, #4]	@ (80079a4 <__sfp_lock_release+0x8>)
 800799e:	f000 b91b 	b.w	8007bd8 <__retarget_lock_release_recursive>
 80079a2:	bf00      	nop
 80079a4:	200004b9 	.word	0x200004b9

080079a8 <__sinit>:
 80079a8:	b510      	push	{r4, lr}
 80079aa:	4604      	mov	r4, r0
 80079ac:	f7ff fff0 	bl	8007990 <__sfp_lock_acquire>
 80079b0:	6a23      	ldr	r3, [r4, #32]
 80079b2:	b11b      	cbz	r3, 80079bc <__sinit+0x14>
 80079b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079b8:	f7ff bff0 	b.w	800799c <__sfp_lock_release>
 80079bc:	4b04      	ldr	r3, [pc, #16]	@ (80079d0 <__sinit+0x28>)
 80079be:	6223      	str	r3, [r4, #32]
 80079c0:	4b04      	ldr	r3, [pc, #16]	@ (80079d4 <__sinit+0x2c>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1f5      	bne.n	80079b4 <__sinit+0xc>
 80079c8:	f7ff ffc4 	bl	8007954 <global_stdio_init.part.0>
 80079cc:	e7f2      	b.n	80079b4 <__sinit+0xc>
 80079ce:	bf00      	nop
 80079d0:	08007915 	.word	0x08007915
 80079d4:	200004b0 	.word	0x200004b0

080079d8 <_fwalk_sglue>:
 80079d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079dc:	4607      	mov	r7, r0
 80079de:	4688      	mov	r8, r1
 80079e0:	4614      	mov	r4, r2
 80079e2:	2600      	movs	r6, #0
 80079e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079e8:	f1b9 0901 	subs.w	r9, r9, #1
 80079ec:	d505      	bpl.n	80079fa <_fwalk_sglue+0x22>
 80079ee:	6824      	ldr	r4, [r4, #0]
 80079f0:	2c00      	cmp	r4, #0
 80079f2:	d1f7      	bne.n	80079e4 <_fwalk_sglue+0xc>
 80079f4:	4630      	mov	r0, r6
 80079f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079fa:	89ab      	ldrh	r3, [r5, #12]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d907      	bls.n	8007a10 <_fwalk_sglue+0x38>
 8007a00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a04:	3301      	adds	r3, #1
 8007a06:	d003      	beq.n	8007a10 <_fwalk_sglue+0x38>
 8007a08:	4629      	mov	r1, r5
 8007a0a:	4638      	mov	r0, r7
 8007a0c:	47c0      	blx	r8
 8007a0e:	4306      	orrs	r6, r0
 8007a10:	3568      	adds	r5, #104	@ 0x68
 8007a12:	e7e9      	b.n	80079e8 <_fwalk_sglue+0x10>

08007a14 <iprintf>:
 8007a14:	b40f      	push	{r0, r1, r2, r3}
 8007a16:	b507      	push	{r0, r1, r2, lr}
 8007a18:	4906      	ldr	r1, [pc, #24]	@ (8007a34 <iprintf+0x20>)
 8007a1a:	ab04      	add	r3, sp, #16
 8007a1c:	6808      	ldr	r0, [r1, #0]
 8007a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a22:	6881      	ldr	r1, [r0, #8]
 8007a24:	9301      	str	r3, [sp, #4]
 8007a26:	f000 f9fb 	bl	8007e20 <_vfiprintf_r>
 8007a2a:	b003      	add	sp, #12
 8007a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a30:	b004      	add	sp, #16
 8007a32:	4770      	bx	lr
 8007a34:	20000040 	.word	0x20000040

08007a38 <__sread>:
 8007a38:	b510      	push	{r4, lr}
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a40:	f000 f87a 	bl	8007b38 <_read_r>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	bfab      	itete	ge
 8007a48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a4c:	181b      	addge	r3, r3, r0
 8007a4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a52:	bfac      	ite	ge
 8007a54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a56:	81a3      	strhlt	r3, [r4, #12]
 8007a58:	bd10      	pop	{r4, pc}

08007a5a <__swrite>:
 8007a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5e:	461f      	mov	r7, r3
 8007a60:	898b      	ldrh	r3, [r1, #12]
 8007a62:	05db      	lsls	r3, r3, #23
 8007a64:	4605      	mov	r5, r0
 8007a66:	460c      	mov	r4, r1
 8007a68:	4616      	mov	r6, r2
 8007a6a:	d505      	bpl.n	8007a78 <__swrite+0x1e>
 8007a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a70:	2302      	movs	r3, #2
 8007a72:	2200      	movs	r2, #0
 8007a74:	f000 f84e 	bl	8007b14 <_lseek_r>
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a82:	81a3      	strh	r3, [r4, #12]
 8007a84:	4632      	mov	r2, r6
 8007a86:	463b      	mov	r3, r7
 8007a88:	4628      	mov	r0, r5
 8007a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a8e:	f000 b865 	b.w	8007b5c <_write_r>

08007a92 <__sseek>:
 8007a92:	b510      	push	{r4, lr}
 8007a94:	460c      	mov	r4, r1
 8007a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a9a:	f000 f83b 	bl	8007b14 <_lseek_r>
 8007a9e:	1c43      	adds	r3, r0, #1
 8007aa0:	89a3      	ldrh	r3, [r4, #12]
 8007aa2:	bf15      	itete	ne
 8007aa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007aa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007aaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007aae:	81a3      	strheq	r3, [r4, #12]
 8007ab0:	bf18      	it	ne
 8007ab2:	81a3      	strhne	r3, [r4, #12]
 8007ab4:	bd10      	pop	{r4, pc}

08007ab6 <__sclose>:
 8007ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aba:	f000 b81b 	b.w	8007af4 <_close_r>

08007abe <memset>:
 8007abe:	4402      	add	r2, r0
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d100      	bne.n	8007ac8 <memset+0xa>
 8007ac6:	4770      	bx	lr
 8007ac8:	f803 1b01 	strb.w	r1, [r3], #1
 8007acc:	e7f9      	b.n	8007ac2 <memset+0x4>

08007ace <strncmp>:
 8007ace:	b510      	push	{r4, lr}
 8007ad0:	b16a      	cbz	r2, 8007aee <strncmp+0x20>
 8007ad2:	3901      	subs	r1, #1
 8007ad4:	1884      	adds	r4, r0, r2
 8007ad6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ada:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d103      	bne.n	8007aea <strncmp+0x1c>
 8007ae2:	42a0      	cmp	r0, r4
 8007ae4:	d001      	beq.n	8007aea <strncmp+0x1c>
 8007ae6:	2a00      	cmp	r2, #0
 8007ae8:	d1f5      	bne.n	8007ad6 <strncmp+0x8>
 8007aea:	1ad0      	subs	r0, r2, r3
 8007aec:	bd10      	pop	{r4, pc}
 8007aee:	4610      	mov	r0, r2
 8007af0:	e7fc      	b.n	8007aec <strncmp+0x1e>
	...

08007af4 <_close_r>:
 8007af4:	b538      	push	{r3, r4, r5, lr}
 8007af6:	4d06      	ldr	r5, [pc, #24]	@ (8007b10 <_close_r+0x1c>)
 8007af8:	2300      	movs	r3, #0
 8007afa:	4604      	mov	r4, r0
 8007afc:	4608      	mov	r0, r1
 8007afe:	602b      	str	r3, [r5, #0]
 8007b00:	f7f9 fc10 	bl	8001324 <_close>
 8007b04:	1c43      	adds	r3, r0, #1
 8007b06:	d102      	bne.n	8007b0e <_close_r+0x1a>
 8007b08:	682b      	ldr	r3, [r5, #0]
 8007b0a:	b103      	cbz	r3, 8007b0e <_close_r+0x1a>
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	bd38      	pop	{r3, r4, r5, pc}
 8007b10:	200004b4 	.word	0x200004b4

08007b14 <_lseek_r>:
 8007b14:	b538      	push	{r3, r4, r5, lr}
 8007b16:	4d07      	ldr	r5, [pc, #28]	@ (8007b34 <_lseek_r+0x20>)
 8007b18:	4604      	mov	r4, r0
 8007b1a:	4608      	mov	r0, r1
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	2200      	movs	r2, #0
 8007b20:	602a      	str	r2, [r5, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	f7f9 fc25 	bl	8001372 <_lseek>
 8007b28:	1c43      	adds	r3, r0, #1
 8007b2a:	d102      	bne.n	8007b32 <_lseek_r+0x1e>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	b103      	cbz	r3, 8007b32 <_lseek_r+0x1e>
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	bd38      	pop	{r3, r4, r5, pc}
 8007b34:	200004b4 	.word	0x200004b4

08007b38 <_read_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	4d07      	ldr	r5, [pc, #28]	@ (8007b58 <_read_r+0x20>)
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	4608      	mov	r0, r1
 8007b40:	4611      	mov	r1, r2
 8007b42:	2200      	movs	r2, #0
 8007b44:	602a      	str	r2, [r5, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	f7f9 fbb3 	bl	80012b2 <_read>
 8007b4c:	1c43      	adds	r3, r0, #1
 8007b4e:	d102      	bne.n	8007b56 <_read_r+0x1e>
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	b103      	cbz	r3, 8007b56 <_read_r+0x1e>
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	bd38      	pop	{r3, r4, r5, pc}
 8007b58:	200004b4 	.word	0x200004b4

08007b5c <_write_r>:
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	4d07      	ldr	r5, [pc, #28]	@ (8007b7c <_write_r+0x20>)
 8007b60:	4604      	mov	r4, r0
 8007b62:	4608      	mov	r0, r1
 8007b64:	4611      	mov	r1, r2
 8007b66:	2200      	movs	r2, #0
 8007b68:	602a      	str	r2, [r5, #0]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	f7f9 fbbe 	bl	80012ec <_write>
 8007b70:	1c43      	adds	r3, r0, #1
 8007b72:	d102      	bne.n	8007b7a <_write_r+0x1e>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	b103      	cbz	r3, 8007b7a <_write_r+0x1e>
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	200004b4 	.word	0x200004b4

08007b80 <__errno>:
 8007b80:	4b01      	ldr	r3, [pc, #4]	@ (8007b88 <__errno+0x8>)
 8007b82:	6818      	ldr	r0, [r3, #0]
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	20000040 	.word	0x20000040

08007b8c <__libc_init_array>:
 8007b8c:	b570      	push	{r4, r5, r6, lr}
 8007b8e:	4d0d      	ldr	r5, [pc, #52]	@ (8007bc4 <__libc_init_array+0x38>)
 8007b90:	4c0d      	ldr	r4, [pc, #52]	@ (8007bc8 <__libc_init_array+0x3c>)
 8007b92:	1b64      	subs	r4, r4, r5
 8007b94:	10a4      	asrs	r4, r4, #2
 8007b96:	2600      	movs	r6, #0
 8007b98:	42a6      	cmp	r6, r4
 8007b9a:	d109      	bne.n	8007bb0 <__libc_init_array+0x24>
 8007b9c:	4d0b      	ldr	r5, [pc, #44]	@ (8007bcc <__libc_init_array+0x40>)
 8007b9e:	4c0c      	ldr	r4, [pc, #48]	@ (8007bd0 <__libc_init_array+0x44>)
 8007ba0:	f000 fdb8 	bl	8008714 <_init>
 8007ba4:	1b64      	subs	r4, r4, r5
 8007ba6:	10a4      	asrs	r4, r4, #2
 8007ba8:	2600      	movs	r6, #0
 8007baa:	42a6      	cmp	r6, r4
 8007bac:	d105      	bne.n	8007bba <__libc_init_array+0x2e>
 8007bae:	bd70      	pop	{r4, r5, r6, pc}
 8007bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb4:	4798      	blx	r3
 8007bb6:	3601      	adds	r6, #1
 8007bb8:	e7ee      	b.n	8007b98 <__libc_init_array+0xc>
 8007bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bbe:	4798      	blx	r3
 8007bc0:	3601      	adds	r6, #1
 8007bc2:	e7f2      	b.n	8007baa <__libc_init_array+0x1e>
 8007bc4:	08008b30 	.word	0x08008b30
 8007bc8:	08008b30 	.word	0x08008b30
 8007bcc:	08008b30 	.word	0x08008b30
 8007bd0:	08008b34 	.word	0x08008b34

08007bd4 <__retarget_lock_init_recursive>:
 8007bd4:	4770      	bx	lr

08007bd6 <__retarget_lock_acquire_recursive>:
 8007bd6:	4770      	bx	lr

08007bd8 <__retarget_lock_release_recursive>:
 8007bd8:	4770      	bx	lr
	...

08007bdc <_free_r>:
 8007bdc:	b538      	push	{r3, r4, r5, lr}
 8007bde:	4605      	mov	r5, r0
 8007be0:	2900      	cmp	r1, #0
 8007be2:	d041      	beq.n	8007c68 <_free_r+0x8c>
 8007be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007be8:	1f0c      	subs	r4, r1, #4
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	bfb8      	it	lt
 8007bee:	18e4      	addlt	r4, r4, r3
 8007bf0:	f000 f8e0 	bl	8007db4 <__malloc_lock>
 8007bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c6c <_free_r+0x90>)
 8007bf6:	6813      	ldr	r3, [r2, #0]
 8007bf8:	b933      	cbnz	r3, 8007c08 <_free_r+0x2c>
 8007bfa:	6063      	str	r3, [r4, #4]
 8007bfc:	6014      	str	r4, [r2, #0]
 8007bfe:	4628      	mov	r0, r5
 8007c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c04:	f000 b8dc 	b.w	8007dc0 <__malloc_unlock>
 8007c08:	42a3      	cmp	r3, r4
 8007c0a:	d908      	bls.n	8007c1e <_free_r+0x42>
 8007c0c:	6820      	ldr	r0, [r4, #0]
 8007c0e:	1821      	adds	r1, r4, r0
 8007c10:	428b      	cmp	r3, r1
 8007c12:	bf01      	itttt	eq
 8007c14:	6819      	ldreq	r1, [r3, #0]
 8007c16:	685b      	ldreq	r3, [r3, #4]
 8007c18:	1809      	addeq	r1, r1, r0
 8007c1a:	6021      	streq	r1, [r4, #0]
 8007c1c:	e7ed      	b.n	8007bfa <_free_r+0x1e>
 8007c1e:	461a      	mov	r2, r3
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	b10b      	cbz	r3, 8007c28 <_free_r+0x4c>
 8007c24:	42a3      	cmp	r3, r4
 8007c26:	d9fa      	bls.n	8007c1e <_free_r+0x42>
 8007c28:	6811      	ldr	r1, [r2, #0]
 8007c2a:	1850      	adds	r0, r2, r1
 8007c2c:	42a0      	cmp	r0, r4
 8007c2e:	d10b      	bne.n	8007c48 <_free_r+0x6c>
 8007c30:	6820      	ldr	r0, [r4, #0]
 8007c32:	4401      	add	r1, r0
 8007c34:	1850      	adds	r0, r2, r1
 8007c36:	4283      	cmp	r3, r0
 8007c38:	6011      	str	r1, [r2, #0]
 8007c3a:	d1e0      	bne.n	8007bfe <_free_r+0x22>
 8007c3c:	6818      	ldr	r0, [r3, #0]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	6053      	str	r3, [r2, #4]
 8007c42:	4408      	add	r0, r1
 8007c44:	6010      	str	r0, [r2, #0]
 8007c46:	e7da      	b.n	8007bfe <_free_r+0x22>
 8007c48:	d902      	bls.n	8007c50 <_free_r+0x74>
 8007c4a:	230c      	movs	r3, #12
 8007c4c:	602b      	str	r3, [r5, #0]
 8007c4e:	e7d6      	b.n	8007bfe <_free_r+0x22>
 8007c50:	6820      	ldr	r0, [r4, #0]
 8007c52:	1821      	adds	r1, r4, r0
 8007c54:	428b      	cmp	r3, r1
 8007c56:	bf04      	itt	eq
 8007c58:	6819      	ldreq	r1, [r3, #0]
 8007c5a:	685b      	ldreq	r3, [r3, #4]
 8007c5c:	6063      	str	r3, [r4, #4]
 8007c5e:	bf04      	itt	eq
 8007c60:	1809      	addeq	r1, r1, r0
 8007c62:	6021      	streq	r1, [r4, #0]
 8007c64:	6054      	str	r4, [r2, #4]
 8007c66:	e7ca      	b.n	8007bfe <_free_r+0x22>
 8007c68:	bd38      	pop	{r3, r4, r5, pc}
 8007c6a:	bf00      	nop
 8007c6c:	200004c0 	.word	0x200004c0

08007c70 <sbrk_aligned>:
 8007c70:	b570      	push	{r4, r5, r6, lr}
 8007c72:	4e0f      	ldr	r6, [pc, #60]	@ (8007cb0 <sbrk_aligned+0x40>)
 8007c74:	460c      	mov	r4, r1
 8007c76:	6831      	ldr	r1, [r6, #0]
 8007c78:	4605      	mov	r5, r0
 8007c7a:	b911      	cbnz	r1, 8007c82 <sbrk_aligned+0x12>
 8007c7c:	f000 fcb6 	bl	80085ec <_sbrk_r>
 8007c80:	6030      	str	r0, [r6, #0]
 8007c82:	4621      	mov	r1, r4
 8007c84:	4628      	mov	r0, r5
 8007c86:	f000 fcb1 	bl	80085ec <_sbrk_r>
 8007c8a:	1c43      	adds	r3, r0, #1
 8007c8c:	d103      	bne.n	8007c96 <sbrk_aligned+0x26>
 8007c8e:	f04f 34ff 	mov.w	r4, #4294967295
 8007c92:	4620      	mov	r0, r4
 8007c94:	bd70      	pop	{r4, r5, r6, pc}
 8007c96:	1cc4      	adds	r4, r0, #3
 8007c98:	f024 0403 	bic.w	r4, r4, #3
 8007c9c:	42a0      	cmp	r0, r4
 8007c9e:	d0f8      	beq.n	8007c92 <sbrk_aligned+0x22>
 8007ca0:	1a21      	subs	r1, r4, r0
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	f000 fca2 	bl	80085ec <_sbrk_r>
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d1f2      	bne.n	8007c92 <sbrk_aligned+0x22>
 8007cac:	e7ef      	b.n	8007c8e <sbrk_aligned+0x1e>
 8007cae:	bf00      	nop
 8007cb0:	200004bc 	.word	0x200004bc

08007cb4 <_malloc_r>:
 8007cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cb8:	1ccd      	adds	r5, r1, #3
 8007cba:	f025 0503 	bic.w	r5, r5, #3
 8007cbe:	3508      	adds	r5, #8
 8007cc0:	2d0c      	cmp	r5, #12
 8007cc2:	bf38      	it	cc
 8007cc4:	250c      	movcc	r5, #12
 8007cc6:	2d00      	cmp	r5, #0
 8007cc8:	4606      	mov	r6, r0
 8007cca:	db01      	blt.n	8007cd0 <_malloc_r+0x1c>
 8007ccc:	42a9      	cmp	r1, r5
 8007cce:	d904      	bls.n	8007cda <_malloc_r+0x26>
 8007cd0:	230c      	movs	r3, #12
 8007cd2:	6033      	str	r3, [r6, #0]
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007db0 <_malloc_r+0xfc>
 8007cde:	f000 f869 	bl	8007db4 <__malloc_lock>
 8007ce2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ce6:	461c      	mov	r4, r3
 8007ce8:	bb44      	cbnz	r4, 8007d3c <_malloc_r+0x88>
 8007cea:	4629      	mov	r1, r5
 8007cec:	4630      	mov	r0, r6
 8007cee:	f7ff ffbf 	bl	8007c70 <sbrk_aligned>
 8007cf2:	1c43      	adds	r3, r0, #1
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	d158      	bne.n	8007daa <_malloc_r+0xf6>
 8007cf8:	f8d8 4000 	ldr.w	r4, [r8]
 8007cfc:	4627      	mov	r7, r4
 8007cfe:	2f00      	cmp	r7, #0
 8007d00:	d143      	bne.n	8007d8a <_malloc_r+0xd6>
 8007d02:	2c00      	cmp	r4, #0
 8007d04:	d04b      	beq.n	8007d9e <_malloc_r+0xea>
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	4639      	mov	r1, r7
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	eb04 0903 	add.w	r9, r4, r3
 8007d10:	f000 fc6c 	bl	80085ec <_sbrk_r>
 8007d14:	4581      	cmp	r9, r0
 8007d16:	d142      	bne.n	8007d9e <_malloc_r+0xea>
 8007d18:	6821      	ldr	r1, [r4, #0]
 8007d1a:	1a6d      	subs	r5, r5, r1
 8007d1c:	4629      	mov	r1, r5
 8007d1e:	4630      	mov	r0, r6
 8007d20:	f7ff ffa6 	bl	8007c70 <sbrk_aligned>
 8007d24:	3001      	adds	r0, #1
 8007d26:	d03a      	beq.n	8007d9e <_malloc_r+0xea>
 8007d28:	6823      	ldr	r3, [r4, #0]
 8007d2a:	442b      	add	r3, r5
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	f8d8 3000 	ldr.w	r3, [r8]
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	bb62      	cbnz	r2, 8007d90 <_malloc_r+0xdc>
 8007d36:	f8c8 7000 	str.w	r7, [r8]
 8007d3a:	e00f      	b.n	8007d5c <_malloc_r+0xa8>
 8007d3c:	6822      	ldr	r2, [r4, #0]
 8007d3e:	1b52      	subs	r2, r2, r5
 8007d40:	d420      	bmi.n	8007d84 <_malloc_r+0xd0>
 8007d42:	2a0b      	cmp	r2, #11
 8007d44:	d917      	bls.n	8007d76 <_malloc_r+0xc2>
 8007d46:	1961      	adds	r1, r4, r5
 8007d48:	42a3      	cmp	r3, r4
 8007d4a:	6025      	str	r5, [r4, #0]
 8007d4c:	bf18      	it	ne
 8007d4e:	6059      	strne	r1, [r3, #4]
 8007d50:	6863      	ldr	r3, [r4, #4]
 8007d52:	bf08      	it	eq
 8007d54:	f8c8 1000 	streq.w	r1, [r8]
 8007d58:	5162      	str	r2, [r4, r5]
 8007d5a:	604b      	str	r3, [r1, #4]
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f000 f82f 	bl	8007dc0 <__malloc_unlock>
 8007d62:	f104 000b 	add.w	r0, r4, #11
 8007d66:	1d23      	adds	r3, r4, #4
 8007d68:	f020 0007 	bic.w	r0, r0, #7
 8007d6c:	1ac2      	subs	r2, r0, r3
 8007d6e:	bf1c      	itt	ne
 8007d70:	1a1b      	subne	r3, r3, r0
 8007d72:	50a3      	strne	r3, [r4, r2]
 8007d74:	e7af      	b.n	8007cd6 <_malloc_r+0x22>
 8007d76:	6862      	ldr	r2, [r4, #4]
 8007d78:	42a3      	cmp	r3, r4
 8007d7a:	bf0c      	ite	eq
 8007d7c:	f8c8 2000 	streq.w	r2, [r8]
 8007d80:	605a      	strne	r2, [r3, #4]
 8007d82:	e7eb      	b.n	8007d5c <_malloc_r+0xa8>
 8007d84:	4623      	mov	r3, r4
 8007d86:	6864      	ldr	r4, [r4, #4]
 8007d88:	e7ae      	b.n	8007ce8 <_malloc_r+0x34>
 8007d8a:	463c      	mov	r4, r7
 8007d8c:	687f      	ldr	r7, [r7, #4]
 8007d8e:	e7b6      	b.n	8007cfe <_malloc_r+0x4a>
 8007d90:	461a      	mov	r2, r3
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	42a3      	cmp	r3, r4
 8007d96:	d1fb      	bne.n	8007d90 <_malloc_r+0xdc>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	6053      	str	r3, [r2, #4]
 8007d9c:	e7de      	b.n	8007d5c <_malloc_r+0xa8>
 8007d9e:	230c      	movs	r3, #12
 8007da0:	6033      	str	r3, [r6, #0]
 8007da2:	4630      	mov	r0, r6
 8007da4:	f000 f80c 	bl	8007dc0 <__malloc_unlock>
 8007da8:	e794      	b.n	8007cd4 <_malloc_r+0x20>
 8007daa:	6005      	str	r5, [r0, #0]
 8007dac:	e7d6      	b.n	8007d5c <_malloc_r+0xa8>
 8007dae:	bf00      	nop
 8007db0:	200004c0 	.word	0x200004c0

08007db4 <__malloc_lock>:
 8007db4:	4801      	ldr	r0, [pc, #4]	@ (8007dbc <__malloc_lock+0x8>)
 8007db6:	f7ff bf0e 	b.w	8007bd6 <__retarget_lock_acquire_recursive>
 8007dba:	bf00      	nop
 8007dbc:	200004b8 	.word	0x200004b8

08007dc0 <__malloc_unlock>:
 8007dc0:	4801      	ldr	r0, [pc, #4]	@ (8007dc8 <__malloc_unlock+0x8>)
 8007dc2:	f7ff bf09 	b.w	8007bd8 <__retarget_lock_release_recursive>
 8007dc6:	bf00      	nop
 8007dc8:	200004b8 	.word	0x200004b8

08007dcc <__sfputc_r>:
 8007dcc:	6893      	ldr	r3, [r2, #8]
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	b410      	push	{r4}
 8007dd4:	6093      	str	r3, [r2, #8]
 8007dd6:	da08      	bge.n	8007dea <__sfputc_r+0x1e>
 8007dd8:	6994      	ldr	r4, [r2, #24]
 8007dda:	42a3      	cmp	r3, r4
 8007ddc:	db01      	blt.n	8007de2 <__sfputc_r+0x16>
 8007dde:	290a      	cmp	r1, #10
 8007de0:	d103      	bne.n	8007dea <__sfputc_r+0x1e>
 8007de2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007de6:	f000 bb6d 	b.w	80084c4 <__swbuf_r>
 8007dea:	6813      	ldr	r3, [r2, #0]
 8007dec:	1c58      	adds	r0, r3, #1
 8007dee:	6010      	str	r0, [r2, #0]
 8007df0:	7019      	strb	r1, [r3, #0]
 8007df2:	4608      	mov	r0, r1
 8007df4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <__sfputs_r>:
 8007dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dfc:	4606      	mov	r6, r0
 8007dfe:	460f      	mov	r7, r1
 8007e00:	4614      	mov	r4, r2
 8007e02:	18d5      	adds	r5, r2, r3
 8007e04:	42ac      	cmp	r4, r5
 8007e06:	d101      	bne.n	8007e0c <__sfputs_r+0x12>
 8007e08:	2000      	movs	r0, #0
 8007e0a:	e007      	b.n	8007e1c <__sfputs_r+0x22>
 8007e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e10:	463a      	mov	r2, r7
 8007e12:	4630      	mov	r0, r6
 8007e14:	f7ff ffda 	bl	8007dcc <__sfputc_r>
 8007e18:	1c43      	adds	r3, r0, #1
 8007e1a:	d1f3      	bne.n	8007e04 <__sfputs_r+0xa>
 8007e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e20 <_vfiprintf_r>:
 8007e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	460d      	mov	r5, r1
 8007e26:	b09d      	sub	sp, #116	@ 0x74
 8007e28:	4614      	mov	r4, r2
 8007e2a:	4698      	mov	r8, r3
 8007e2c:	4606      	mov	r6, r0
 8007e2e:	b118      	cbz	r0, 8007e38 <_vfiprintf_r+0x18>
 8007e30:	6a03      	ldr	r3, [r0, #32]
 8007e32:	b90b      	cbnz	r3, 8007e38 <_vfiprintf_r+0x18>
 8007e34:	f7ff fdb8 	bl	80079a8 <__sinit>
 8007e38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e3a:	07d9      	lsls	r1, r3, #31
 8007e3c:	d405      	bmi.n	8007e4a <_vfiprintf_r+0x2a>
 8007e3e:	89ab      	ldrh	r3, [r5, #12]
 8007e40:	059a      	lsls	r2, r3, #22
 8007e42:	d402      	bmi.n	8007e4a <_vfiprintf_r+0x2a>
 8007e44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e46:	f7ff fec6 	bl	8007bd6 <__retarget_lock_acquire_recursive>
 8007e4a:	89ab      	ldrh	r3, [r5, #12]
 8007e4c:	071b      	lsls	r3, r3, #28
 8007e4e:	d501      	bpl.n	8007e54 <_vfiprintf_r+0x34>
 8007e50:	692b      	ldr	r3, [r5, #16]
 8007e52:	b99b      	cbnz	r3, 8007e7c <_vfiprintf_r+0x5c>
 8007e54:	4629      	mov	r1, r5
 8007e56:	4630      	mov	r0, r6
 8007e58:	f000 fb72 	bl	8008540 <__swsetup_r>
 8007e5c:	b170      	cbz	r0, 8007e7c <_vfiprintf_r+0x5c>
 8007e5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e60:	07dc      	lsls	r4, r3, #31
 8007e62:	d504      	bpl.n	8007e6e <_vfiprintf_r+0x4e>
 8007e64:	f04f 30ff 	mov.w	r0, #4294967295
 8007e68:	b01d      	add	sp, #116	@ 0x74
 8007e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e6e:	89ab      	ldrh	r3, [r5, #12]
 8007e70:	0598      	lsls	r0, r3, #22
 8007e72:	d4f7      	bmi.n	8007e64 <_vfiprintf_r+0x44>
 8007e74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e76:	f7ff feaf 	bl	8007bd8 <__retarget_lock_release_recursive>
 8007e7a:	e7f3      	b.n	8007e64 <_vfiprintf_r+0x44>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e80:	2320      	movs	r3, #32
 8007e82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e86:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e8a:	2330      	movs	r3, #48	@ 0x30
 8007e8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800803c <_vfiprintf_r+0x21c>
 8007e90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e94:	f04f 0901 	mov.w	r9, #1
 8007e98:	4623      	mov	r3, r4
 8007e9a:	469a      	mov	sl, r3
 8007e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ea0:	b10a      	cbz	r2, 8007ea6 <_vfiprintf_r+0x86>
 8007ea2:	2a25      	cmp	r2, #37	@ 0x25
 8007ea4:	d1f9      	bne.n	8007e9a <_vfiprintf_r+0x7a>
 8007ea6:	ebba 0b04 	subs.w	fp, sl, r4
 8007eaa:	d00b      	beq.n	8007ec4 <_vfiprintf_r+0xa4>
 8007eac:	465b      	mov	r3, fp
 8007eae:	4622      	mov	r2, r4
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f7ff ffa1 	bl	8007dfa <__sfputs_r>
 8007eb8:	3001      	adds	r0, #1
 8007eba:	f000 80a7 	beq.w	800800c <_vfiprintf_r+0x1ec>
 8007ebe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ec0:	445a      	add	r2, fp
 8007ec2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 809f 	beq.w	800800c <_vfiprintf_r+0x1ec>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ed8:	f10a 0a01 	add.w	sl, sl, #1
 8007edc:	9304      	str	r3, [sp, #16]
 8007ede:	9307      	str	r3, [sp, #28]
 8007ee0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ee4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ee6:	4654      	mov	r4, sl
 8007ee8:	2205      	movs	r2, #5
 8007eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eee:	4853      	ldr	r0, [pc, #332]	@ (800803c <_vfiprintf_r+0x21c>)
 8007ef0:	f7f8 f996 	bl	8000220 <memchr>
 8007ef4:	9a04      	ldr	r2, [sp, #16]
 8007ef6:	b9d8      	cbnz	r0, 8007f30 <_vfiprintf_r+0x110>
 8007ef8:	06d1      	lsls	r1, r2, #27
 8007efa:	bf44      	itt	mi
 8007efc:	2320      	movmi	r3, #32
 8007efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f02:	0713      	lsls	r3, r2, #28
 8007f04:	bf44      	itt	mi
 8007f06:	232b      	movmi	r3, #43	@ 0x2b
 8007f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f10:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f12:	d015      	beq.n	8007f40 <_vfiprintf_r+0x120>
 8007f14:	9a07      	ldr	r2, [sp, #28]
 8007f16:	4654      	mov	r4, sl
 8007f18:	2000      	movs	r0, #0
 8007f1a:	f04f 0c0a 	mov.w	ip, #10
 8007f1e:	4621      	mov	r1, r4
 8007f20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f24:	3b30      	subs	r3, #48	@ 0x30
 8007f26:	2b09      	cmp	r3, #9
 8007f28:	d94b      	bls.n	8007fc2 <_vfiprintf_r+0x1a2>
 8007f2a:	b1b0      	cbz	r0, 8007f5a <_vfiprintf_r+0x13a>
 8007f2c:	9207      	str	r2, [sp, #28]
 8007f2e:	e014      	b.n	8007f5a <_vfiprintf_r+0x13a>
 8007f30:	eba0 0308 	sub.w	r3, r0, r8
 8007f34:	fa09 f303 	lsl.w	r3, r9, r3
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	9304      	str	r3, [sp, #16]
 8007f3c:	46a2      	mov	sl, r4
 8007f3e:	e7d2      	b.n	8007ee6 <_vfiprintf_r+0xc6>
 8007f40:	9b03      	ldr	r3, [sp, #12]
 8007f42:	1d19      	adds	r1, r3, #4
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	9103      	str	r1, [sp, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	bfbb      	ittet	lt
 8007f4c:	425b      	neglt	r3, r3
 8007f4e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f52:	9307      	strge	r3, [sp, #28]
 8007f54:	9307      	strlt	r3, [sp, #28]
 8007f56:	bfb8      	it	lt
 8007f58:	9204      	strlt	r2, [sp, #16]
 8007f5a:	7823      	ldrb	r3, [r4, #0]
 8007f5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f5e:	d10a      	bne.n	8007f76 <_vfiprintf_r+0x156>
 8007f60:	7863      	ldrb	r3, [r4, #1]
 8007f62:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f64:	d132      	bne.n	8007fcc <_vfiprintf_r+0x1ac>
 8007f66:	9b03      	ldr	r3, [sp, #12]
 8007f68:	1d1a      	adds	r2, r3, #4
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	9203      	str	r2, [sp, #12]
 8007f6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f72:	3402      	adds	r4, #2
 8007f74:	9305      	str	r3, [sp, #20]
 8007f76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800804c <_vfiprintf_r+0x22c>
 8007f7a:	7821      	ldrb	r1, [r4, #0]
 8007f7c:	2203      	movs	r2, #3
 8007f7e:	4650      	mov	r0, sl
 8007f80:	f7f8 f94e 	bl	8000220 <memchr>
 8007f84:	b138      	cbz	r0, 8007f96 <_vfiprintf_r+0x176>
 8007f86:	9b04      	ldr	r3, [sp, #16]
 8007f88:	eba0 000a 	sub.w	r0, r0, sl
 8007f8c:	2240      	movs	r2, #64	@ 0x40
 8007f8e:	4082      	lsls	r2, r0
 8007f90:	4313      	orrs	r3, r2
 8007f92:	3401      	adds	r4, #1
 8007f94:	9304      	str	r3, [sp, #16]
 8007f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f9a:	4829      	ldr	r0, [pc, #164]	@ (8008040 <_vfiprintf_r+0x220>)
 8007f9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fa0:	2206      	movs	r2, #6
 8007fa2:	f7f8 f93d 	bl	8000220 <memchr>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	d03f      	beq.n	800802a <_vfiprintf_r+0x20a>
 8007faa:	4b26      	ldr	r3, [pc, #152]	@ (8008044 <_vfiprintf_r+0x224>)
 8007fac:	bb1b      	cbnz	r3, 8007ff6 <_vfiprintf_r+0x1d6>
 8007fae:	9b03      	ldr	r3, [sp, #12]
 8007fb0:	3307      	adds	r3, #7
 8007fb2:	f023 0307 	bic.w	r3, r3, #7
 8007fb6:	3308      	adds	r3, #8
 8007fb8:	9303      	str	r3, [sp, #12]
 8007fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fbc:	443b      	add	r3, r7
 8007fbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fc0:	e76a      	b.n	8007e98 <_vfiprintf_r+0x78>
 8007fc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	2001      	movs	r0, #1
 8007fca:	e7a8      	b.n	8007f1e <_vfiprintf_r+0xfe>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	3401      	adds	r4, #1
 8007fd0:	9305      	str	r3, [sp, #20]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	f04f 0c0a 	mov.w	ip, #10
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fde:	3a30      	subs	r2, #48	@ 0x30
 8007fe0:	2a09      	cmp	r2, #9
 8007fe2:	d903      	bls.n	8007fec <_vfiprintf_r+0x1cc>
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d0c6      	beq.n	8007f76 <_vfiprintf_r+0x156>
 8007fe8:	9105      	str	r1, [sp, #20]
 8007fea:	e7c4      	b.n	8007f76 <_vfiprintf_r+0x156>
 8007fec:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e7f0      	b.n	8007fd8 <_vfiprintf_r+0x1b8>
 8007ff6:	ab03      	add	r3, sp, #12
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	462a      	mov	r2, r5
 8007ffc:	4b12      	ldr	r3, [pc, #72]	@ (8008048 <_vfiprintf_r+0x228>)
 8007ffe:	a904      	add	r1, sp, #16
 8008000:	4630      	mov	r0, r6
 8008002:	f3af 8000 	nop.w
 8008006:	4607      	mov	r7, r0
 8008008:	1c78      	adds	r0, r7, #1
 800800a:	d1d6      	bne.n	8007fba <_vfiprintf_r+0x19a>
 800800c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800800e:	07d9      	lsls	r1, r3, #31
 8008010:	d405      	bmi.n	800801e <_vfiprintf_r+0x1fe>
 8008012:	89ab      	ldrh	r3, [r5, #12]
 8008014:	059a      	lsls	r2, r3, #22
 8008016:	d402      	bmi.n	800801e <_vfiprintf_r+0x1fe>
 8008018:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800801a:	f7ff fddd 	bl	8007bd8 <__retarget_lock_release_recursive>
 800801e:	89ab      	ldrh	r3, [r5, #12]
 8008020:	065b      	lsls	r3, r3, #25
 8008022:	f53f af1f 	bmi.w	8007e64 <_vfiprintf_r+0x44>
 8008026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008028:	e71e      	b.n	8007e68 <_vfiprintf_r+0x48>
 800802a:	ab03      	add	r3, sp, #12
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	462a      	mov	r2, r5
 8008030:	4b05      	ldr	r3, [pc, #20]	@ (8008048 <_vfiprintf_r+0x228>)
 8008032:	a904      	add	r1, sp, #16
 8008034:	4630      	mov	r0, r6
 8008036:	f000 f879 	bl	800812c <_printf_i>
 800803a:	e7e4      	b.n	8008006 <_vfiprintf_r+0x1e6>
 800803c:	08008af5 	.word	0x08008af5
 8008040:	08008aff 	.word	0x08008aff
 8008044:	00000000 	.word	0x00000000
 8008048:	08007dfb 	.word	0x08007dfb
 800804c:	08008afb 	.word	0x08008afb

08008050 <_printf_common>:
 8008050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008054:	4616      	mov	r6, r2
 8008056:	4698      	mov	r8, r3
 8008058:	688a      	ldr	r2, [r1, #8]
 800805a:	690b      	ldr	r3, [r1, #16]
 800805c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008060:	4293      	cmp	r3, r2
 8008062:	bfb8      	it	lt
 8008064:	4613      	movlt	r3, r2
 8008066:	6033      	str	r3, [r6, #0]
 8008068:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800806c:	4607      	mov	r7, r0
 800806e:	460c      	mov	r4, r1
 8008070:	b10a      	cbz	r2, 8008076 <_printf_common+0x26>
 8008072:	3301      	adds	r3, #1
 8008074:	6033      	str	r3, [r6, #0]
 8008076:	6823      	ldr	r3, [r4, #0]
 8008078:	0699      	lsls	r1, r3, #26
 800807a:	bf42      	ittt	mi
 800807c:	6833      	ldrmi	r3, [r6, #0]
 800807e:	3302      	addmi	r3, #2
 8008080:	6033      	strmi	r3, [r6, #0]
 8008082:	6825      	ldr	r5, [r4, #0]
 8008084:	f015 0506 	ands.w	r5, r5, #6
 8008088:	d106      	bne.n	8008098 <_printf_common+0x48>
 800808a:	f104 0a19 	add.w	sl, r4, #25
 800808e:	68e3      	ldr	r3, [r4, #12]
 8008090:	6832      	ldr	r2, [r6, #0]
 8008092:	1a9b      	subs	r3, r3, r2
 8008094:	42ab      	cmp	r3, r5
 8008096:	dc26      	bgt.n	80080e6 <_printf_common+0x96>
 8008098:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800809c:	6822      	ldr	r2, [r4, #0]
 800809e:	3b00      	subs	r3, #0
 80080a0:	bf18      	it	ne
 80080a2:	2301      	movne	r3, #1
 80080a4:	0692      	lsls	r2, r2, #26
 80080a6:	d42b      	bmi.n	8008100 <_printf_common+0xb0>
 80080a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80080ac:	4641      	mov	r1, r8
 80080ae:	4638      	mov	r0, r7
 80080b0:	47c8      	blx	r9
 80080b2:	3001      	adds	r0, #1
 80080b4:	d01e      	beq.n	80080f4 <_printf_common+0xa4>
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	6922      	ldr	r2, [r4, #16]
 80080ba:	f003 0306 	and.w	r3, r3, #6
 80080be:	2b04      	cmp	r3, #4
 80080c0:	bf02      	ittt	eq
 80080c2:	68e5      	ldreq	r5, [r4, #12]
 80080c4:	6833      	ldreq	r3, [r6, #0]
 80080c6:	1aed      	subeq	r5, r5, r3
 80080c8:	68a3      	ldr	r3, [r4, #8]
 80080ca:	bf0c      	ite	eq
 80080cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080d0:	2500      	movne	r5, #0
 80080d2:	4293      	cmp	r3, r2
 80080d4:	bfc4      	itt	gt
 80080d6:	1a9b      	subgt	r3, r3, r2
 80080d8:	18ed      	addgt	r5, r5, r3
 80080da:	2600      	movs	r6, #0
 80080dc:	341a      	adds	r4, #26
 80080de:	42b5      	cmp	r5, r6
 80080e0:	d11a      	bne.n	8008118 <_printf_common+0xc8>
 80080e2:	2000      	movs	r0, #0
 80080e4:	e008      	b.n	80080f8 <_printf_common+0xa8>
 80080e6:	2301      	movs	r3, #1
 80080e8:	4652      	mov	r2, sl
 80080ea:	4641      	mov	r1, r8
 80080ec:	4638      	mov	r0, r7
 80080ee:	47c8      	blx	r9
 80080f0:	3001      	adds	r0, #1
 80080f2:	d103      	bne.n	80080fc <_printf_common+0xac>
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fc:	3501      	adds	r5, #1
 80080fe:	e7c6      	b.n	800808e <_printf_common+0x3e>
 8008100:	18e1      	adds	r1, r4, r3
 8008102:	1c5a      	adds	r2, r3, #1
 8008104:	2030      	movs	r0, #48	@ 0x30
 8008106:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800810a:	4422      	add	r2, r4
 800810c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008110:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008114:	3302      	adds	r3, #2
 8008116:	e7c7      	b.n	80080a8 <_printf_common+0x58>
 8008118:	2301      	movs	r3, #1
 800811a:	4622      	mov	r2, r4
 800811c:	4641      	mov	r1, r8
 800811e:	4638      	mov	r0, r7
 8008120:	47c8      	blx	r9
 8008122:	3001      	adds	r0, #1
 8008124:	d0e6      	beq.n	80080f4 <_printf_common+0xa4>
 8008126:	3601      	adds	r6, #1
 8008128:	e7d9      	b.n	80080de <_printf_common+0x8e>
	...

0800812c <_printf_i>:
 800812c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008130:	7e0f      	ldrb	r7, [r1, #24]
 8008132:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008134:	2f78      	cmp	r7, #120	@ 0x78
 8008136:	4691      	mov	r9, r2
 8008138:	4680      	mov	r8, r0
 800813a:	460c      	mov	r4, r1
 800813c:	469a      	mov	sl, r3
 800813e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008142:	d807      	bhi.n	8008154 <_printf_i+0x28>
 8008144:	2f62      	cmp	r7, #98	@ 0x62
 8008146:	d80a      	bhi.n	800815e <_printf_i+0x32>
 8008148:	2f00      	cmp	r7, #0
 800814a:	f000 80d2 	beq.w	80082f2 <_printf_i+0x1c6>
 800814e:	2f58      	cmp	r7, #88	@ 0x58
 8008150:	f000 80b9 	beq.w	80082c6 <_printf_i+0x19a>
 8008154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008158:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800815c:	e03a      	b.n	80081d4 <_printf_i+0xa8>
 800815e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008162:	2b15      	cmp	r3, #21
 8008164:	d8f6      	bhi.n	8008154 <_printf_i+0x28>
 8008166:	a101      	add	r1, pc, #4	@ (adr r1, 800816c <_printf_i+0x40>)
 8008168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800816c:	080081c5 	.word	0x080081c5
 8008170:	080081d9 	.word	0x080081d9
 8008174:	08008155 	.word	0x08008155
 8008178:	08008155 	.word	0x08008155
 800817c:	08008155 	.word	0x08008155
 8008180:	08008155 	.word	0x08008155
 8008184:	080081d9 	.word	0x080081d9
 8008188:	08008155 	.word	0x08008155
 800818c:	08008155 	.word	0x08008155
 8008190:	08008155 	.word	0x08008155
 8008194:	08008155 	.word	0x08008155
 8008198:	080082d9 	.word	0x080082d9
 800819c:	08008203 	.word	0x08008203
 80081a0:	08008293 	.word	0x08008293
 80081a4:	08008155 	.word	0x08008155
 80081a8:	08008155 	.word	0x08008155
 80081ac:	080082fb 	.word	0x080082fb
 80081b0:	08008155 	.word	0x08008155
 80081b4:	08008203 	.word	0x08008203
 80081b8:	08008155 	.word	0x08008155
 80081bc:	08008155 	.word	0x08008155
 80081c0:	0800829b 	.word	0x0800829b
 80081c4:	6833      	ldr	r3, [r6, #0]
 80081c6:	1d1a      	adds	r2, r3, #4
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	6032      	str	r2, [r6, #0]
 80081cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80081d4:	2301      	movs	r3, #1
 80081d6:	e09d      	b.n	8008314 <_printf_i+0x1e8>
 80081d8:	6833      	ldr	r3, [r6, #0]
 80081da:	6820      	ldr	r0, [r4, #0]
 80081dc:	1d19      	adds	r1, r3, #4
 80081de:	6031      	str	r1, [r6, #0]
 80081e0:	0606      	lsls	r6, r0, #24
 80081e2:	d501      	bpl.n	80081e8 <_printf_i+0xbc>
 80081e4:	681d      	ldr	r5, [r3, #0]
 80081e6:	e003      	b.n	80081f0 <_printf_i+0xc4>
 80081e8:	0645      	lsls	r5, r0, #25
 80081ea:	d5fb      	bpl.n	80081e4 <_printf_i+0xb8>
 80081ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80081f0:	2d00      	cmp	r5, #0
 80081f2:	da03      	bge.n	80081fc <_printf_i+0xd0>
 80081f4:	232d      	movs	r3, #45	@ 0x2d
 80081f6:	426d      	negs	r5, r5
 80081f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081fc:	4859      	ldr	r0, [pc, #356]	@ (8008364 <_printf_i+0x238>)
 80081fe:	230a      	movs	r3, #10
 8008200:	e011      	b.n	8008226 <_printf_i+0xfa>
 8008202:	6821      	ldr	r1, [r4, #0]
 8008204:	6833      	ldr	r3, [r6, #0]
 8008206:	0608      	lsls	r0, r1, #24
 8008208:	f853 5b04 	ldr.w	r5, [r3], #4
 800820c:	d402      	bmi.n	8008214 <_printf_i+0xe8>
 800820e:	0649      	lsls	r1, r1, #25
 8008210:	bf48      	it	mi
 8008212:	b2ad      	uxthmi	r5, r5
 8008214:	2f6f      	cmp	r7, #111	@ 0x6f
 8008216:	4853      	ldr	r0, [pc, #332]	@ (8008364 <_printf_i+0x238>)
 8008218:	6033      	str	r3, [r6, #0]
 800821a:	bf14      	ite	ne
 800821c:	230a      	movne	r3, #10
 800821e:	2308      	moveq	r3, #8
 8008220:	2100      	movs	r1, #0
 8008222:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008226:	6866      	ldr	r6, [r4, #4]
 8008228:	60a6      	str	r6, [r4, #8]
 800822a:	2e00      	cmp	r6, #0
 800822c:	bfa2      	ittt	ge
 800822e:	6821      	ldrge	r1, [r4, #0]
 8008230:	f021 0104 	bicge.w	r1, r1, #4
 8008234:	6021      	strge	r1, [r4, #0]
 8008236:	b90d      	cbnz	r5, 800823c <_printf_i+0x110>
 8008238:	2e00      	cmp	r6, #0
 800823a:	d04b      	beq.n	80082d4 <_printf_i+0x1a8>
 800823c:	4616      	mov	r6, r2
 800823e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008242:	fb03 5711 	mls	r7, r3, r1, r5
 8008246:	5dc7      	ldrb	r7, [r0, r7]
 8008248:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800824c:	462f      	mov	r7, r5
 800824e:	42bb      	cmp	r3, r7
 8008250:	460d      	mov	r5, r1
 8008252:	d9f4      	bls.n	800823e <_printf_i+0x112>
 8008254:	2b08      	cmp	r3, #8
 8008256:	d10b      	bne.n	8008270 <_printf_i+0x144>
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	07df      	lsls	r7, r3, #31
 800825c:	d508      	bpl.n	8008270 <_printf_i+0x144>
 800825e:	6923      	ldr	r3, [r4, #16]
 8008260:	6861      	ldr	r1, [r4, #4]
 8008262:	4299      	cmp	r1, r3
 8008264:	bfde      	ittt	le
 8008266:	2330      	movle	r3, #48	@ 0x30
 8008268:	f806 3c01 	strble.w	r3, [r6, #-1]
 800826c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008270:	1b92      	subs	r2, r2, r6
 8008272:	6122      	str	r2, [r4, #16]
 8008274:	f8cd a000 	str.w	sl, [sp]
 8008278:	464b      	mov	r3, r9
 800827a:	aa03      	add	r2, sp, #12
 800827c:	4621      	mov	r1, r4
 800827e:	4640      	mov	r0, r8
 8008280:	f7ff fee6 	bl	8008050 <_printf_common>
 8008284:	3001      	adds	r0, #1
 8008286:	d14a      	bne.n	800831e <_printf_i+0x1f2>
 8008288:	f04f 30ff 	mov.w	r0, #4294967295
 800828c:	b004      	add	sp, #16
 800828e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008292:	6823      	ldr	r3, [r4, #0]
 8008294:	f043 0320 	orr.w	r3, r3, #32
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	4833      	ldr	r0, [pc, #204]	@ (8008368 <_printf_i+0x23c>)
 800829c:	2778      	movs	r7, #120	@ 0x78
 800829e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	6831      	ldr	r1, [r6, #0]
 80082a6:	061f      	lsls	r7, r3, #24
 80082a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80082ac:	d402      	bmi.n	80082b4 <_printf_i+0x188>
 80082ae:	065f      	lsls	r7, r3, #25
 80082b0:	bf48      	it	mi
 80082b2:	b2ad      	uxthmi	r5, r5
 80082b4:	6031      	str	r1, [r6, #0]
 80082b6:	07d9      	lsls	r1, r3, #31
 80082b8:	bf44      	itt	mi
 80082ba:	f043 0320 	orrmi.w	r3, r3, #32
 80082be:	6023      	strmi	r3, [r4, #0]
 80082c0:	b11d      	cbz	r5, 80082ca <_printf_i+0x19e>
 80082c2:	2310      	movs	r3, #16
 80082c4:	e7ac      	b.n	8008220 <_printf_i+0xf4>
 80082c6:	4827      	ldr	r0, [pc, #156]	@ (8008364 <_printf_i+0x238>)
 80082c8:	e7e9      	b.n	800829e <_printf_i+0x172>
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	f023 0320 	bic.w	r3, r3, #32
 80082d0:	6023      	str	r3, [r4, #0]
 80082d2:	e7f6      	b.n	80082c2 <_printf_i+0x196>
 80082d4:	4616      	mov	r6, r2
 80082d6:	e7bd      	b.n	8008254 <_printf_i+0x128>
 80082d8:	6833      	ldr	r3, [r6, #0]
 80082da:	6825      	ldr	r5, [r4, #0]
 80082dc:	6961      	ldr	r1, [r4, #20]
 80082de:	1d18      	adds	r0, r3, #4
 80082e0:	6030      	str	r0, [r6, #0]
 80082e2:	062e      	lsls	r6, r5, #24
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	d501      	bpl.n	80082ec <_printf_i+0x1c0>
 80082e8:	6019      	str	r1, [r3, #0]
 80082ea:	e002      	b.n	80082f2 <_printf_i+0x1c6>
 80082ec:	0668      	lsls	r0, r5, #25
 80082ee:	d5fb      	bpl.n	80082e8 <_printf_i+0x1bc>
 80082f0:	8019      	strh	r1, [r3, #0]
 80082f2:	2300      	movs	r3, #0
 80082f4:	6123      	str	r3, [r4, #16]
 80082f6:	4616      	mov	r6, r2
 80082f8:	e7bc      	b.n	8008274 <_printf_i+0x148>
 80082fa:	6833      	ldr	r3, [r6, #0]
 80082fc:	1d1a      	adds	r2, r3, #4
 80082fe:	6032      	str	r2, [r6, #0]
 8008300:	681e      	ldr	r6, [r3, #0]
 8008302:	6862      	ldr	r2, [r4, #4]
 8008304:	2100      	movs	r1, #0
 8008306:	4630      	mov	r0, r6
 8008308:	f7f7 ff8a 	bl	8000220 <memchr>
 800830c:	b108      	cbz	r0, 8008312 <_printf_i+0x1e6>
 800830e:	1b80      	subs	r0, r0, r6
 8008310:	6060      	str	r0, [r4, #4]
 8008312:	6863      	ldr	r3, [r4, #4]
 8008314:	6123      	str	r3, [r4, #16]
 8008316:	2300      	movs	r3, #0
 8008318:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800831c:	e7aa      	b.n	8008274 <_printf_i+0x148>
 800831e:	6923      	ldr	r3, [r4, #16]
 8008320:	4632      	mov	r2, r6
 8008322:	4649      	mov	r1, r9
 8008324:	4640      	mov	r0, r8
 8008326:	47d0      	blx	sl
 8008328:	3001      	adds	r0, #1
 800832a:	d0ad      	beq.n	8008288 <_printf_i+0x15c>
 800832c:	6823      	ldr	r3, [r4, #0]
 800832e:	079b      	lsls	r3, r3, #30
 8008330:	d413      	bmi.n	800835a <_printf_i+0x22e>
 8008332:	68e0      	ldr	r0, [r4, #12]
 8008334:	9b03      	ldr	r3, [sp, #12]
 8008336:	4298      	cmp	r0, r3
 8008338:	bfb8      	it	lt
 800833a:	4618      	movlt	r0, r3
 800833c:	e7a6      	b.n	800828c <_printf_i+0x160>
 800833e:	2301      	movs	r3, #1
 8008340:	4632      	mov	r2, r6
 8008342:	4649      	mov	r1, r9
 8008344:	4640      	mov	r0, r8
 8008346:	47d0      	blx	sl
 8008348:	3001      	adds	r0, #1
 800834a:	d09d      	beq.n	8008288 <_printf_i+0x15c>
 800834c:	3501      	adds	r5, #1
 800834e:	68e3      	ldr	r3, [r4, #12]
 8008350:	9903      	ldr	r1, [sp, #12]
 8008352:	1a5b      	subs	r3, r3, r1
 8008354:	42ab      	cmp	r3, r5
 8008356:	dcf2      	bgt.n	800833e <_printf_i+0x212>
 8008358:	e7eb      	b.n	8008332 <_printf_i+0x206>
 800835a:	2500      	movs	r5, #0
 800835c:	f104 0619 	add.w	r6, r4, #25
 8008360:	e7f5      	b.n	800834e <_printf_i+0x222>
 8008362:	bf00      	nop
 8008364:	08008b06 	.word	0x08008b06
 8008368:	08008b17 	.word	0x08008b17

0800836c <__sflush_r>:
 800836c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008374:	0716      	lsls	r6, r2, #28
 8008376:	4605      	mov	r5, r0
 8008378:	460c      	mov	r4, r1
 800837a:	d454      	bmi.n	8008426 <__sflush_r+0xba>
 800837c:	684b      	ldr	r3, [r1, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	dc02      	bgt.n	8008388 <__sflush_r+0x1c>
 8008382:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008384:	2b00      	cmp	r3, #0
 8008386:	dd48      	ble.n	800841a <__sflush_r+0xae>
 8008388:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800838a:	2e00      	cmp	r6, #0
 800838c:	d045      	beq.n	800841a <__sflush_r+0xae>
 800838e:	2300      	movs	r3, #0
 8008390:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008394:	682f      	ldr	r7, [r5, #0]
 8008396:	6a21      	ldr	r1, [r4, #32]
 8008398:	602b      	str	r3, [r5, #0]
 800839a:	d030      	beq.n	80083fe <__sflush_r+0x92>
 800839c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800839e:	89a3      	ldrh	r3, [r4, #12]
 80083a0:	0759      	lsls	r1, r3, #29
 80083a2:	d505      	bpl.n	80083b0 <__sflush_r+0x44>
 80083a4:	6863      	ldr	r3, [r4, #4]
 80083a6:	1ad2      	subs	r2, r2, r3
 80083a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80083aa:	b10b      	cbz	r3, 80083b0 <__sflush_r+0x44>
 80083ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80083ae:	1ad2      	subs	r2, r2, r3
 80083b0:	2300      	movs	r3, #0
 80083b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083b4:	6a21      	ldr	r1, [r4, #32]
 80083b6:	4628      	mov	r0, r5
 80083b8:	47b0      	blx	r6
 80083ba:	1c43      	adds	r3, r0, #1
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	d106      	bne.n	80083ce <__sflush_r+0x62>
 80083c0:	6829      	ldr	r1, [r5, #0]
 80083c2:	291d      	cmp	r1, #29
 80083c4:	d82b      	bhi.n	800841e <__sflush_r+0xb2>
 80083c6:	4a2a      	ldr	r2, [pc, #168]	@ (8008470 <__sflush_r+0x104>)
 80083c8:	410a      	asrs	r2, r1
 80083ca:	07d6      	lsls	r6, r2, #31
 80083cc:	d427      	bmi.n	800841e <__sflush_r+0xb2>
 80083ce:	2200      	movs	r2, #0
 80083d0:	6062      	str	r2, [r4, #4]
 80083d2:	04d9      	lsls	r1, r3, #19
 80083d4:	6922      	ldr	r2, [r4, #16]
 80083d6:	6022      	str	r2, [r4, #0]
 80083d8:	d504      	bpl.n	80083e4 <__sflush_r+0x78>
 80083da:	1c42      	adds	r2, r0, #1
 80083dc:	d101      	bne.n	80083e2 <__sflush_r+0x76>
 80083de:	682b      	ldr	r3, [r5, #0]
 80083e0:	b903      	cbnz	r3, 80083e4 <__sflush_r+0x78>
 80083e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80083e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083e6:	602f      	str	r7, [r5, #0]
 80083e8:	b1b9      	cbz	r1, 800841a <__sflush_r+0xae>
 80083ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083ee:	4299      	cmp	r1, r3
 80083f0:	d002      	beq.n	80083f8 <__sflush_r+0x8c>
 80083f2:	4628      	mov	r0, r5
 80083f4:	f7ff fbf2 	bl	8007bdc <_free_r>
 80083f8:	2300      	movs	r3, #0
 80083fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80083fc:	e00d      	b.n	800841a <__sflush_r+0xae>
 80083fe:	2301      	movs	r3, #1
 8008400:	4628      	mov	r0, r5
 8008402:	47b0      	blx	r6
 8008404:	4602      	mov	r2, r0
 8008406:	1c50      	adds	r0, r2, #1
 8008408:	d1c9      	bne.n	800839e <__sflush_r+0x32>
 800840a:	682b      	ldr	r3, [r5, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d0c6      	beq.n	800839e <__sflush_r+0x32>
 8008410:	2b1d      	cmp	r3, #29
 8008412:	d001      	beq.n	8008418 <__sflush_r+0xac>
 8008414:	2b16      	cmp	r3, #22
 8008416:	d11e      	bne.n	8008456 <__sflush_r+0xea>
 8008418:	602f      	str	r7, [r5, #0]
 800841a:	2000      	movs	r0, #0
 800841c:	e022      	b.n	8008464 <__sflush_r+0xf8>
 800841e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008422:	b21b      	sxth	r3, r3
 8008424:	e01b      	b.n	800845e <__sflush_r+0xf2>
 8008426:	690f      	ldr	r7, [r1, #16]
 8008428:	2f00      	cmp	r7, #0
 800842a:	d0f6      	beq.n	800841a <__sflush_r+0xae>
 800842c:	0793      	lsls	r3, r2, #30
 800842e:	680e      	ldr	r6, [r1, #0]
 8008430:	bf08      	it	eq
 8008432:	694b      	ldreq	r3, [r1, #20]
 8008434:	600f      	str	r7, [r1, #0]
 8008436:	bf18      	it	ne
 8008438:	2300      	movne	r3, #0
 800843a:	eba6 0807 	sub.w	r8, r6, r7
 800843e:	608b      	str	r3, [r1, #8]
 8008440:	f1b8 0f00 	cmp.w	r8, #0
 8008444:	dde9      	ble.n	800841a <__sflush_r+0xae>
 8008446:	6a21      	ldr	r1, [r4, #32]
 8008448:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800844a:	4643      	mov	r3, r8
 800844c:	463a      	mov	r2, r7
 800844e:	4628      	mov	r0, r5
 8008450:	47b0      	blx	r6
 8008452:	2800      	cmp	r0, #0
 8008454:	dc08      	bgt.n	8008468 <__sflush_r+0xfc>
 8008456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800845a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800845e:	81a3      	strh	r3, [r4, #12]
 8008460:	f04f 30ff 	mov.w	r0, #4294967295
 8008464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008468:	4407      	add	r7, r0
 800846a:	eba8 0800 	sub.w	r8, r8, r0
 800846e:	e7e7      	b.n	8008440 <__sflush_r+0xd4>
 8008470:	dfbffffe 	.word	0xdfbffffe

08008474 <_fflush_r>:
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	690b      	ldr	r3, [r1, #16]
 8008478:	4605      	mov	r5, r0
 800847a:	460c      	mov	r4, r1
 800847c:	b913      	cbnz	r3, 8008484 <_fflush_r+0x10>
 800847e:	2500      	movs	r5, #0
 8008480:	4628      	mov	r0, r5
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	b118      	cbz	r0, 800848e <_fflush_r+0x1a>
 8008486:	6a03      	ldr	r3, [r0, #32]
 8008488:	b90b      	cbnz	r3, 800848e <_fflush_r+0x1a>
 800848a:	f7ff fa8d 	bl	80079a8 <__sinit>
 800848e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d0f3      	beq.n	800847e <_fflush_r+0xa>
 8008496:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008498:	07d0      	lsls	r0, r2, #31
 800849a:	d404      	bmi.n	80084a6 <_fflush_r+0x32>
 800849c:	0599      	lsls	r1, r3, #22
 800849e:	d402      	bmi.n	80084a6 <_fflush_r+0x32>
 80084a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084a2:	f7ff fb98 	bl	8007bd6 <__retarget_lock_acquire_recursive>
 80084a6:	4628      	mov	r0, r5
 80084a8:	4621      	mov	r1, r4
 80084aa:	f7ff ff5f 	bl	800836c <__sflush_r>
 80084ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084b0:	07da      	lsls	r2, r3, #31
 80084b2:	4605      	mov	r5, r0
 80084b4:	d4e4      	bmi.n	8008480 <_fflush_r+0xc>
 80084b6:	89a3      	ldrh	r3, [r4, #12]
 80084b8:	059b      	lsls	r3, r3, #22
 80084ba:	d4e1      	bmi.n	8008480 <_fflush_r+0xc>
 80084bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084be:	f7ff fb8b 	bl	8007bd8 <__retarget_lock_release_recursive>
 80084c2:	e7dd      	b.n	8008480 <_fflush_r+0xc>

080084c4 <__swbuf_r>:
 80084c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c6:	460e      	mov	r6, r1
 80084c8:	4614      	mov	r4, r2
 80084ca:	4605      	mov	r5, r0
 80084cc:	b118      	cbz	r0, 80084d6 <__swbuf_r+0x12>
 80084ce:	6a03      	ldr	r3, [r0, #32]
 80084d0:	b90b      	cbnz	r3, 80084d6 <__swbuf_r+0x12>
 80084d2:	f7ff fa69 	bl	80079a8 <__sinit>
 80084d6:	69a3      	ldr	r3, [r4, #24]
 80084d8:	60a3      	str	r3, [r4, #8]
 80084da:	89a3      	ldrh	r3, [r4, #12]
 80084dc:	071a      	lsls	r2, r3, #28
 80084de:	d501      	bpl.n	80084e4 <__swbuf_r+0x20>
 80084e0:	6923      	ldr	r3, [r4, #16]
 80084e2:	b943      	cbnz	r3, 80084f6 <__swbuf_r+0x32>
 80084e4:	4621      	mov	r1, r4
 80084e6:	4628      	mov	r0, r5
 80084e8:	f000 f82a 	bl	8008540 <__swsetup_r>
 80084ec:	b118      	cbz	r0, 80084f6 <__swbuf_r+0x32>
 80084ee:	f04f 37ff 	mov.w	r7, #4294967295
 80084f2:	4638      	mov	r0, r7
 80084f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	6922      	ldr	r2, [r4, #16]
 80084fa:	1a98      	subs	r0, r3, r2
 80084fc:	6963      	ldr	r3, [r4, #20]
 80084fe:	b2f6      	uxtb	r6, r6
 8008500:	4283      	cmp	r3, r0
 8008502:	4637      	mov	r7, r6
 8008504:	dc05      	bgt.n	8008512 <__swbuf_r+0x4e>
 8008506:	4621      	mov	r1, r4
 8008508:	4628      	mov	r0, r5
 800850a:	f7ff ffb3 	bl	8008474 <_fflush_r>
 800850e:	2800      	cmp	r0, #0
 8008510:	d1ed      	bne.n	80084ee <__swbuf_r+0x2a>
 8008512:	68a3      	ldr	r3, [r4, #8]
 8008514:	3b01      	subs	r3, #1
 8008516:	60a3      	str	r3, [r4, #8]
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	6022      	str	r2, [r4, #0]
 800851e:	701e      	strb	r6, [r3, #0]
 8008520:	6962      	ldr	r2, [r4, #20]
 8008522:	1c43      	adds	r3, r0, #1
 8008524:	429a      	cmp	r2, r3
 8008526:	d004      	beq.n	8008532 <__swbuf_r+0x6e>
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	07db      	lsls	r3, r3, #31
 800852c:	d5e1      	bpl.n	80084f2 <__swbuf_r+0x2e>
 800852e:	2e0a      	cmp	r6, #10
 8008530:	d1df      	bne.n	80084f2 <__swbuf_r+0x2e>
 8008532:	4621      	mov	r1, r4
 8008534:	4628      	mov	r0, r5
 8008536:	f7ff ff9d 	bl	8008474 <_fflush_r>
 800853a:	2800      	cmp	r0, #0
 800853c:	d0d9      	beq.n	80084f2 <__swbuf_r+0x2e>
 800853e:	e7d6      	b.n	80084ee <__swbuf_r+0x2a>

08008540 <__swsetup_r>:
 8008540:	b538      	push	{r3, r4, r5, lr}
 8008542:	4b29      	ldr	r3, [pc, #164]	@ (80085e8 <__swsetup_r+0xa8>)
 8008544:	4605      	mov	r5, r0
 8008546:	6818      	ldr	r0, [r3, #0]
 8008548:	460c      	mov	r4, r1
 800854a:	b118      	cbz	r0, 8008554 <__swsetup_r+0x14>
 800854c:	6a03      	ldr	r3, [r0, #32]
 800854e:	b90b      	cbnz	r3, 8008554 <__swsetup_r+0x14>
 8008550:	f7ff fa2a 	bl	80079a8 <__sinit>
 8008554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008558:	0719      	lsls	r1, r3, #28
 800855a:	d422      	bmi.n	80085a2 <__swsetup_r+0x62>
 800855c:	06da      	lsls	r2, r3, #27
 800855e:	d407      	bmi.n	8008570 <__swsetup_r+0x30>
 8008560:	2209      	movs	r2, #9
 8008562:	602a      	str	r2, [r5, #0]
 8008564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008568:	81a3      	strh	r3, [r4, #12]
 800856a:	f04f 30ff 	mov.w	r0, #4294967295
 800856e:	e033      	b.n	80085d8 <__swsetup_r+0x98>
 8008570:	0758      	lsls	r0, r3, #29
 8008572:	d512      	bpl.n	800859a <__swsetup_r+0x5a>
 8008574:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008576:	b141      	cbz	r1, 800858a <__swsetup_r+0x4a>
 8008578:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800857c:	4299      	cmp	r1, r3
 800857e:	d002      	beq.n	8008586 <__swsetup_r+0x46>
 8008580:	4628      	mov	r0, r5
 8008582:	f7ff fb2b 	bl	8007bdc <_free_r>
 8008586:	2300      	movs	r3, #0
 8008588:	6363      	str	r3, [r4, #52]	@ 0x34
 800858a:	89a3      	ldrh	r3, [r4, #12]
 800858c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008590:	81a3      	strh	r3, [r4, #12]
 8008592:	2300      	movs	r3, #0
 8008594:	6063      	str	r3, [r4, #4]
 8008596:	6923      	ldr	r3, [r4, #16]
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	89a3      	ldrh	r3, [r4, #12]
 800859c:	f043 0308 	orr.w	r3, r3, #8
 80085a0:	81a3      	strh	r3, [r4, #12]
 80085a2:	6923      	ldr	r3, [r4, #16]
 80085a4:	b94b      	cbnz	r3, 80085ba <__swsetup_r+0x7a>
 80085a6:	89a3      	ldrh	r3, [r4, #12]
 80085a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80085ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085b0:	d003      	beq.n	80085ba <__swsetup_r+0x7a>
 80085b2:	4621      	mov	r1, r4
 80085b4:	4628      	mov	r0, r5
 80085b6:	f000 f84f 	bl	8008658 <__smakebuf_r>
 80085ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085be:	f013 0201 	ands.w	r2, r3, #1
 80085c2:	d00a      	beq.n	80085da <__swsetup_r+0x9a>
 80085c4:	2200      	movs	r2, #0
 80085c6:	60a2      	str	r2, [r4, #8]
 80085c8:	6962      	ldr	r2, [r4, #20]
 80085ca:	4252      	negs	r2, r2
 80085cc:	61a2      	str	r2, [r4, #24]
 80085ce:	6922      	ldr	r2, [r4, #16]
 80085d0:	b942      	cbnz	r2, 80085e4 <__swsetup_r+0xa4>
 80085d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80085d6:	d1c5      	bne.n	8008564 <__swsetup_r+0x24>
 80085d8:	bd38      	pop	{r3, r4, r5, pc}
 80085da:	0799      	lsls	r1, r3, #30
 80085dc:	bf58      	it	pl
 80085de:	6962      	ldrpl	r2, [r4, #20]
 80085e0:	60a2      	str	r2, [r4, #8]
 80085e2:	e7f4      	b.n	80085ce <__swsetup_r+0x8e>
 80085e4:	2000      	movs	r0, #0
 80085e6:	e7f7      	b.n	80085d8 <__swsetup_r+0x98>
 80085e8:	20000040 	.word	0x20000040

080085ec <_sbrk_r>:
 80085ec:	b538      	push	{r3, r4, r5, lr}
 80085ee:	4d06      	ldr	r5, [pc, #24]	@ (8008608 <_sbrk_r+0x1c>)
 80085f0:	2300      	movs	r3, #0
 80085f2:	4604      	mov	r4, r0
 80085f4:	4608      	mov	r0, r1
 80085f6:	602b      	str	r3, [r5, #0]
 80085f8:	f7f8 fec8 	bl	800138c <_sbrk>
 80085fc:	1c43      	adds	r3, r0, #1
 80085fe:	d102      	bne.n	8008606 <_sbrk_r+0x1a>
 8008600:	682b      	ldr	r3, [r5, #0]
 8008602:	b103      	cbz	r3, 8008606 <_sbrk_r+0x1a>
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	bd38      	pop	{r3, r4, r5, pc}
 8008608:	200004b4 	.word	0x200004b4

0800860c <__swhatbuf_r>:
 800860c:	b570      	push	{r4, r5, r6, lr}
 800860e:	460c      	mov	r4, r1
 8008610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008614:	2900      	cmp	r1, #0
 8008616:	b096      	sub	sp, #88	@ 0x58
 8008618:	4615      	mov	r5, r2
 800861a:	461e      	mov	r6, r3
 800861c:	da0d      	bge.n	800863a <__swhatbuf_r+0x2e>
 800861e:	89a3      	ldrh	r3, [r4, #12]
 8008620:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008624:	f04f 0100 	mov.w	r1, #0
 8008628:	bf14      	ite	ne
 800862a:	2340      	movne	r3, #64	@ 0x40
 800862c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008630:	2000      	movs	r0, #0
 8008632:	6031      	str	r1, [r6, #0]
 8008634:	602b      	str	r3, [r5, #0]
 8008636:	b016      	add	sp, #88	@ 0x58
 8008638:	bd70      	pop	{r4, r5, r6, pc}
 800863a:	466a      	mov	r2, sp
 800863c:	f000 f848 	bl	80086d0 <_fstat_r>
 8008640:	2800      	cmp	r0, #0
 8008642:	dbec      	blt.n	800861e <__swhatbuf_r+0x12>
 8008644:	9901      	ldr	r1, [sp, #4]
 8008646:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800864a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800864e:	4259      	negs	r1, r3
 8008650:	4159      	adcs	r1, r3
 8008652:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008656:	e7eb      	b.n	8008630 <__swhatbuf_r+0x24>

08008658 <__smakebuf_r>:
 8008658:	898b      	ldrh	r3, [r1, #12]
 800865a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800865c:	079d      	lsls	r5, r3, #30
 800865e:	4606      	mov	r6, r0
 8008660:	460c      	mov	r4, r1
 8008662:	d507      	bpl.n	8008674 <__smakebuf_r+0x1c>
 8008664:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008668:	6023      	str	r3, [r4, #0]
 800866a:	6123      	str	r3, [r4, #16]
 800866c:	2301      	movs	r3, #1
 800866e:	6163      	str	r3, [r4, #20]
 8008670:	b003      	add	sp, #12
 8008672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008674:	ab01      	add	r3, sp, #4
 8008676:	466a      	mov	r2, sp
 8008678:	f7ff ffc8 	bl	800860c <__swhatbuf_r>
 800867c:	9f00      	ldr	r7, [sp, #0]
 800867e:	4605      	mov	r5, r0
 8008680:	4639      	mov	r1, r7
 8008682:	4630      	mov	r0, r6
 8008684:	f7ff fb16 	bl	8007cb4 <_malloc_r>
 8008688:	b948      	cbnz	r0, 800869e <__smakebuf_r+0x46>
 800868a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800868e:	059a      	lsls	r2, r3, #22
 8008690:	d4ee      	bmi.n	8008670 <__smakebuf_r+0x18>
 8008692:	f023 0303 	bic.w	r3, r3, #3
 8008696:	f043 0302 	orr.w	r3, r3, #2
 800869a:	81a3      	strh	r3, [r4, #12]
 800869c:	e7e2      	b.n	8008664 <__smakebuf_r+0xc>
 800869e:	89a3      	ldrh	r3, [r4, #12]
 80086a0:	6020      	str	r0, [r4, #0]
 80086a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086a6:	81a3      	strh	r3, [r4, #12]
 80086a8:	9b01      	ldr	r3, [sp, #4]
 80086aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80086ae:	b15b      	cbz	r3, 80086c8 <__smakebuf_r+0x70>
 80086b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086b4:	4630      	mov	r0, r6
 80086b6:	f000 f81d 	bl	80086f4 <_isatty_r>
 80086ba:	b128      	cbz	r0, 80086c8 <__smakebuf_r+0x70>
 80086bc:	89a3      	ldrh	r3, [r4, #12]
 80086be:	f023 0303 	bic.w	r3, r3, #3
 80086c2:	f043 0301 	orr.w	r3, r3, #1
 80086c6:	81a3      	strh	r3, [r4, #12]
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	431d      	orrs	r5, r3
 80086cc:	81a5      	strh	r5, [r4, #12]
 80086ce:	e7cf      	b.n	8008670 <__smakebuf_r+0x18>

080086d0 <_fstat_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4d07      	ldr	r5, [pc, #28]	@ (80086f0 <_fstat_r+0x20>)
 80086d4:	2300      	movs	r3, #0
 80086d6:	4604      	mov	r4, r0
 80086d8:	4608      	mov	r0, r1
 80086da:	4611      	mov	r1, r2
 80086dc:	602b      	str	r3, [r5, #0]
 80086de:	f7f8 fe2d 	bl	800133c <_fstat>
 80086e2:	1c43      	adds	r3, r0, #1
 80086e4:	d102      	bne.n	80086ec <_fstat_r+0x1c>
 80086e6:	682b      	ldr	r3, [r5, #0]
 80086e8:	b103      	cbz	r3, 80086ec <_fstat_r+0x1c>
 80086ea:	6023      	str	r3, [r4, #0]
 80086ec:	bd38      	pop	{r3, r4, r5, pc}
 80086ee:	bf00      	nop
 80086f0:	200004b4 	.word	0x200004b4

080086f4 <_isatty_r>:
 80086f4:	b538      	push	{r3, r4, r5, lr}
 80086f6:	4d06      	ldr	r5, [pc, #24]	@ (8008710 <_isatty_r+0x1c>)
 80086f8:	2300      	movs	r3, #0
 80086fa:	4604      	mov	r4, r0
 80086fc:	4608      	mov	r0, r1
 80086fe:	602b      	str	r3, [r5, #0]
 8008700:	f7f8 fe2c 	bl	800135c <_isatty>
 8008704:	1c43      	adds	r3, r0, #1
 8008706:	d102      	bne.n	800870e <_isatty_r+0x1a>
 8008708:	682b      	ldr	r3, [r5, #0]
 800870a:	b103      	cbz	r3, 800870e <_isatty_r+0x1a>
 800870c:	6023      	str	r3, [r4, #0]
 800870e:	bd38      	pop	{r3, r4, r5, pc}
 8008710:	200004b4 	.word	0x200004b4

08008714 <_init>:
 8008714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008716:	bf00      	nop
 8008718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800871a:	bc08      	pop	{r3}
 800871c:	469e      	mov	lr, r3
 800871e:	4770      	bx	lr

08008720 <_fini>:
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	bf00      	nop
 8008724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008726:	bc08      	pop	{r3}
 8008728:	469e      	mov	lr, r3
 800872a:	4770      	bx	lr
