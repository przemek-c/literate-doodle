
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000828c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  0800846c  0800846c  0000946c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008838  08008838  0000a080  2**0
                  CONTENTS
  4 .ARM          00000008  08008838  08008838  00009838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008840  08008840  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008840  08008840  00009840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008844  08008844  00009844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08008848  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  20000080  080088c8  0000a080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  080088c8  0000a494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000195fe  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003552  00000000  00000000  000236ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  00026c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001116  00000000  00000000  000281f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021523  00000000  00000000  00029306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c720  00000000  00000000  0004a829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdd81  00000000  00000000  00066f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134cca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006458  00000000  00000000  00134d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0013b168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008454 	.word	0x08008454

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	08008454 	.word	0x08008454

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ba:	4a1a      	ldr	r2, [pc, #104]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c2:	4b18      	ldr	r3, [pc, #96]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ce:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	4a14      	ldr	r2, [pc, #80]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005d4:	f043 0320 	orr.w	r3, r3, #32
 80005d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005da:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	f003 0320 	and.w	r3, r3, #32
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <MX_GPIO_Init+0x74>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	4a08      	ldr	r2, [pc, #32]	@ (8000624 <MX_GPIO_Init+0x74>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <MX_GPIO_Init+0x74>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000

08000628 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800062c:	4b1b      	ldr	r3, [pc, #108]	@ (800069c <MX_I2C1_Init+0x74>)
 800062e:	4a1c      	ldr	r2, [pc, #112]	@ (80006a0 <MX_I2C1_Init+0x78>)
 8000630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8000632:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <MX_I2C1_Init+0x74>)
 8000634:	4a1b      	ldr	r2, [pc, #108]	@ (80006a4 <MX_I2C1_Init+0x7c>)
 8000636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000638:	4b18      	ldr	r3, [pc, #96]	@ (800069c <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063e:	4b17      	ldr	r3, [pc, #92]	@ (800069c <MX_I2C1_Init+0x74>)
 8000640:	2201      	movs	r2, #1
 8000642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b15      	ldr	r3, [pc, #84]	@ (800069c <MX_I2C1_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b14      	ldr	r3, [pc, #80]	@ (800069c <MX_I2C1_Init+0x74>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000650:	4b12      	ldr	r3, [pc, #72]	@ (800069c <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000656:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_I2C1_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065c:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000662:	480e      	ldr	r0, [pc, #56]	@ (800069c <MX_I2C1_Init+0x74>)
 8000664:	f001 fef8 	bl	8002458 <HAL_I2C_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800066e:	f000 fc6d 	bl	8000f4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000672:	2100      	movs	r1, #0
 8000674:	4809      	ldr	r0, [pc, #36]	@ (800069c <MX_I2C1_Init+0x74>)
 8000676:	f002 fc7b 	bl	8002f70 <HAL_I2CEx_ConfigAnalogFilter>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000680:	f000 fc64 	bl	8000f4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000684:	2100      	movs	r1, #0
 8000686:	4805      	ldr	r0, [pc, #20]	@ (800069c <MX_I2C1_Init+0x74>)
 8000688:	f002 fcbd 	bl	8003006 <HAL_I2CEx_ConfigDigitalFilter>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000692:	f000 fc5b 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000009c 	.word	0x2000009c
 80006a0:	40005400 	.word	0x40005400
 80006a4:	40b285c2 	.word	0x40b285c2

080006a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b09a      	sub	sp, #104	@ 0x68
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	2244      	movs	r2, #68	@ 0x44
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f007 f898 	bl	80077fe <memset>
  if(i2cHandle->Instance==I2C1)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a1f      	ldr	r2, [pc, #124]	@ (8000750 <HAL_I2C_MspInit+0xa8>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d136      	bne.n	8000746 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006d8:	2340      	movs	r3, #64	@ 0x40
 80006da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 fabd 	bl	8003c64 <HAL_RCCEx_PeriphCLKConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80006f0:	f000 fc2c 	bl	8000f4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f4:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 80006f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f8:	4a16      	ldr	r2, [pc, #88]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 80006fa:	f043 0302 	orr.w	r3, r3, #2
 80006fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 8000702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000704:	f003 0302 	and.w	r3, r3, #2
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800070c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000710:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000712:	2312      	movs	r3, #18
 8000714:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800071e:	2304      	movs	r3, #4
 8000720:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000722:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000726:	4619      	mov	r1, r3
 8000728:	480b      	ldr	r0, [pc, #44]	@ (8000758 <HAL_I2C_MspInit+0xb0>)
 800072a:	f001 fce1 	bl	80020f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 8000730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000732:	4a08      	ldr	r2, [pc, #32]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 8000734:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000738:	6593      	str	r3, [r2, #88]	@ 0x58
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 800073c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800073e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000746:	bf00      	nop
 8000748:	3768      	adds	r7, #104	@ 0x68
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40005400 	.word	0x40005400
 8000754:	40021000 	.word	0x40021000
 8000758:	48000400 	.word	0x48000400

0800075c <imu_write_register>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Write to an IMU register
void imu_write_register(uint8_t reg, uint8_t value) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af04      	add	r7, sp, #16
 8000762:	4603      	mov	r3, r0
 8000764:	460a      	mov	r2, r1
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	4613      	mov	r3, r2
 800076a:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 1000);
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	b29a      	uxth	r2, r3
 8000770:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000774:	9302      	str	r3, [sp, #8]
 8000776:	2301      	movs	r3, #1
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	1dbb      	adds	r3, r7, #6
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	2301      	movs	r3, #1
 8000780:	21d4      	movs	r1, #212	@ 0xd4
 8000782:	4803      	ldr	r0, [pc, #12]	@ (8000790 <imu_write_register+0x34>)
 8000784:	f001 ff04 	bl	8002590 <HAL_I2C_Mem_Write>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	2000009c 	.word	0x2000009c

08000794 <imu_read_registers>:

// Read from IMU registers
void imu_read_registers(uint8_t reg, uint8_t *data, uint16_t len) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af04      	add	r7, sp, #16
 800079a:	4603      	mov	r3, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	71fb      	strb	r3, [r7, #7]
 80007a0:	4613      	mov	r3, r2
 80007a2:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, len, 1000);
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ac:	9302      	str	r3, [sp, #8]
 80007ae:	88bb      	ldrh	r3, [r7, #4]
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	21d4      	movs	r1, #212	@ 0xd4
 80007ba:	4803      	ldr	r0, [pc, #12]	@ (80007c8 <imu_read_registers+0x34>)
 80007bc:	f001 fffc 	bl	80027b8 <HAL_I2C_Mem_Read>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2000009c 	.word	0x2000009c

080007cc <imu_init>:

// Initialize the IMU
void imu_init(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
    uint8_t whoami;
    imu_read_registers(0x0F, &whoami, 1);  // Read WHO_AM_I register
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	2201      	movs	r2, #1
 80007d6:	4619      	mov	r1, r3
 80007d8:	200f      	movs	r0, #15
 80007da:	f7ff ffdb 	bl	8000794 <imu_read_registers>
    if (whoami != WHO_AM_I_VALUE) {
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b6c      	cmp	r3, #108	@ 0x6c
 80007e2:	d006      	beq.n	80007f2 <imu_init+0x26>
        printf("IMU not found: 0x%02X\n\r", whoami);
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	4619      	mov	r1, r3
 80007e8:	480a      	ldr	r0, [pc, #40]	@ (8000814 <imu_init+0x48>)
 80007ea:	f006 ffb3 	bl	8007754 <iprintf>
        while (1);  // Hang if IMU not detected
 80007ee:	bf00      	nop
 80007f0:	e7fd      	b.n	80007ee <imu_init+0x22>
    }
    imu_write_register(0x12, 0x40);  // CTRL3_C: Enable Block Data Update (BDU)
 80007f2:	2140      	movs	r1, #64	@ 0x40
 80007f4:	2012      	movs	r0, #18
 80007f6:	f7ff ffb1 	bl	800075c <imu_write_register>
    imu_write_register(0x10, 0x64);  // CTRL1_XL: 104 Hz, ±8g (was 0x60 for ±2g)
 80007fa:	2164      	movs	r1, #100	@ 0x64
 80007fc:	2010      	movs	r0, #16
 80007fe:	f7ff ffad 	bl	800075c <imu_write_register>
    imu_write_register(0x11, 0x64);  // CTRL2_G: 104 Hz, ±500 dps (was 0x6C for ±2000 dps)
 8000802:	2164      	movs	r1, #100	@ 0x64
 8000804:	2011      	movs	r0, #17
 8000806:	f7ff ffa9 	bl	800075c <imu_write_register>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	0800846c 	.word	0x0800846c

08000818 <imu_read_accel>:

// Read accelerometer data
void imu_read_accel(imu_data_t *accel) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
    uint8_t buffer[6];
    imu_read_registers(0x28, buffer, 6);  // OUTX_L_XL to OUTZ_H_XL
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2206      	movs	r2, #6
 8000826:	4619      	mov	r1, r3
 8000828:	2028      	movs	r0, #40	@ 0x28
 800082a:	f7ff ffb3 	bl	8000794 <imu_read_registers>
    accel->x = (int16_t)(buffer[0] | (buffer[1] << 8));
 800082e:	7a3b      	ldrb	r3, [r7, #8]
 8000830:	b21a      	sxth	r2, r3
 8000832:	7a7b      	ldrb	r3, [r7, #9]
 8000834:	021b      	lsls	r3, r3, #8
 8000836:	b21b      	sxth	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	b21a      	sxth	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	801a      	strh	r2, [r3, #0]
    accel->y = (int16_t)(buffer[2] | (buffer[3] << 8));
 8000840:	7abb      	ldrb	r3, [r7, #10]
 8000842:	b21a      	sxth	r2, r3
 8000844:	7afb      	ldrb	r3, [r7, #11]
 8000846:	021b      	lsls	r3, r3, #8
 8000848:	b21b      	sxth	r3, r3
 800084a:	4313      	orrs	r3, r2
 800084c:	b21a      	sxth	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	805a      	strh	r2, [r3, #2]
    accel->z = (int16_t)(buffer[4] | (buffer[5] << 8));
 8000852:	7b3b      	ldrb	r3, [r7, #12]
 8000854:	b21a      	sxth	r2, r3
 8000856:	7b7b      	ldrb	r3, [r7, #13]
 8000858:	021b      	lsls	r3, r3, #8
 800085a:	b21b      	sxth	r3, r3
 800085c:	4313      	orrs	r3, r2
 800085e:	b21a      	sxth	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	809a      	strh	r2, [r3, #4]
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <imu_read_gyro>:

// Read gyroscope data
void imu_read_gyro(imu_data_t *gyro) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
    uint8_t buffer[6];
    imu_read_registers(0x22, buffer, 6);  // OUTX_L_G to OUTZ_H_G
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	2206      	movs	r2, #6
 800087a:	4619      	mov	r1, r3
 800087c:	2022      	movs	r0, #34	@ 0x22
 800087e:	f7ff ff89 	bl	8000794 <imu_read_registers>
    gyro->x = (int16_t)(buffer[0] | (buffer[1] << 8));
 8000882:	7a3b      	ldrb	r3, [r7, #8]
 8000884:	b21a      	sxth	r2, r3
 8000886:	7a7b      	ldrb	r3, [r7, #9]
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b21b      	sxth	r3, r3
 800088c:	4313      	orrs	r3, r2
 800088e:	b21a      	sxth	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	801a      	strh	r2, [r3, #0]
    gyro->y = (int16_t)(buffer[2] | (buffer[3] << 8));
 8000894:	7abb      	ldrb	r3, [r7, #10]
 8000896:	b21a      	sxth	r2, r3
 8000898:	7afb      	ldrb	r3, [r7, #11]
 800089a:	021b      	lsls	r3, r3, #8
 800089c:	b21b      	sxth	r3, r3
 800089e:	4313      	orrs	r3, r2
 80008a0:	b21a      	sxth	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	805a      	strh	r2, [r3, #2]
    gyro->z = (int16_t)(buffer[4] | (buffer[5] << 8));
 80008a6:	7b3b      	ldrb	r3, [r7, #12]
 80008a8:	b21a      	sxth	r2, r3
 80008aa:	7b7b      	ldrb	r3, [r7, #13]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b21b      	sxth	r3, r3
 80008b0:	4313      	orrs	r3, r2
 80008b2:	b21a      	sxth	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	809a      	strh	r2, [r3, #4]
}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <parseMessage>:
// UART parsing message
// there was a problem with first char so I change ptr++ to ptr += 2
// and Python code sends two [[ but here it sees only one
// weird but it works like that

void parseMessage(char* msg) {
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b08b      	sub	sp, #44	@ 0x2c
 80008c4:	af02      	add	r7, sp, #8
 80008c6:	6078      	str	r0, [r7, #4]
  if (!msg) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d103      	bne.n	80008d6 <parseMessage+0x16>
      printf("Error: Null message pointer\n\r");
 80008ce:	4886      	ldr	r0, [pc, #536]	@ (8000ae8 <parseMessage+0x228>)
 80008d0:	f006 ff40 	bl	8007754 <iprintf>
      return;
 80008d4:	e105      	b.n	8000ae2 <parseMessage+0x222>
  }

  printf("Original message: %s\n\r", msg);  // Debug original message
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	4884      	ldr	r0, [pc, #528]	@ (8000aec <parseMessage+0x22c>)
 80008da:	f006 ff3b 	bl	8007754 <iprintf>
  char* ptr = msg;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	61fb      	str	r3, [r7, #28]
  

  // First, let's check and skip the opening bracket
  if (*ptr == '[') {
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b5b      	cmp	r3, #91	@ 0x5b
 80008e8:	d107      	bne.n	80008fa <parseMessage+0x3a>
      // ptr++;
      ptr += 2;
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3302      	adds	r3, #2
 80008ee:	61fb      	str	r3, [r7, #28]
      printf("After bracket check, ptr points to: %s\n\r", ptr);
 80008f0:	69f9      	ldr	r1, [r7, #28]
 80008f2:	487f      	ldr	r0, [pc, #508]	@ (8000af0 <parseMessage+0x230>)
 80008f4:	f006 ff2e 	bl	8007754 <iprintf>
 80008f8:	e0d0      	b.n	8000a9c <parseMessage+0x1dc>
  } else {
      printf("Error: Message doesn't start with [\n\r");
 80008fa:	487e      	ldr	r0, [pc, #504]	@ (8000af4 <parseMessage+0x234>)
 80008fc:	f006 ff2a 	bl	8007754 <iprintf>
      // ptr++;
      ptr += 2;
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	3302      	adds	r3, #2
 8000904:	61fb      	str	r3, [r7, #28]
  }
  
  // Parse all fields in sequence
  while (*ptr != ']' && *ptr != '\0') {
 8000906:	e0c9      	b.n	8000a9c <parseMessage+0x1dc>
      printf("Current parsing position: '%s'\n\r", ptr);  // Show exactly what we're looking at
 8000908:	69f9      	ldr	r1, [r7, #28]
 800090a:	487b      	ldr	r0, [pc, #492]	@ (8000af8 <parseMessage+0x238>)
 800090c:	f006 ff22 	bl	8007754 <iprintf>
      
      // Print the first few characters for debugging
      printf("Next 3 chars: '%c%c%c'\n\r", ptr[0], ptr[1], ptr[2]);
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3301      	adds	r3, #1
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3302      	adds	r3, #2
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4875      	ldr	r0, [pc, #468]	@ (8000afc <parseMessage+0x23c>)
 8000926:	f006 ff15 	bl	8007754 <iprintf>
      
      if (strncmp(ptr, "S:", 2) == 0) {
 800092a:	2202      	movs	r2, #2
 800092c:	4974      	ldr	r1, [pc, #464]	@ (8000b00 <parseMessage+0x240>)
 800092e:	69f8      	ldr	r0, [r7, #28]
 8000930:	f006 ff6d 	bl	800780e <strncmp>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d116      	bne.n	8000968 <parseMessage+0xa8>
          ptr += 2;  // Skip "S:"
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3302      	adds	r3, #2
 800093e:	61fb      	str	r3, [r7, #28]
          if (*ptr != '\0') {  // Safety check
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	f000 809e 	beq.w	8000a86 <parseMessage+0x1c6>
              Steering = *ptr;
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	781a      	ldrb	r2, [r3, #0]
 800094e:	4b6d      	ldr	r3, [pc, #436]	@ (8000b04 <parseMessage+0x244>)
 8000950:	701a      	strb	r2, [r3, #0]
              printf("Found Steering: %c\n\r", Steering);
 8000952:	4b6c      	ldr	r3, [pc, #432]	@ (8000b04 <parseMessage+0x244>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	4619      	mov	r1, r3
 800095a:	486b      	ldr	r0, [pc, #428]	@ (8000b08 <parseMessage+0x248>)
 800095c:	f006 fefa 	bl	8007754 <iprintf>
              ptr++;
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	3301      	adds	r3, #1
 8000964:	61fb      	str	r3, [r7, #28]
 8000966:	e08e      	b.n	8000a86 <parseMessage+0x1c6>
          }
      }
      else if (strncmp(ptr, "G:", 2) == 0) {
 8000968:	2202      	movs	r2, #2
 800096a:	4968      	ldr	r1, [pc, #416]	@ (8000b0c <parseMessage+0x24c>)
 800096c:	69f8      	ldr	r0, [r7, #28]
 800096e:	f006 ff4e 	bl	800780e <strncmp>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d115      	bne.n	80009a4 <parseMessage+0xe4>
          ptr += 2;  // Skip "G:"
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	3302      	adds	r3, #2
 800097c:	61fb      	str	r3, [r7, #28]
          if (*ptr != '\0') {  // Safety check
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d07f      	beq.n	8000a86 <parseMessage+0x1c6>
              Gear = *ptr;
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	781a      	ldrb	r2, [r3, #0]
 800098a:	4b61      	ldr	r3, [pc, #388]	@ (8000b10 <parseMessage+0x250>)
 800098c:	701a      	strb	r2, [r3, #0]
              printf("Found Gear: %c\n\r", Gear);
 800098e:	4b60      	ldr	r3, [pc, #384]	@ (8000b10 <parseMessage+0x250>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4619      	mov	r1, r3
 8000996:	485f      	ldr	r0, [pc, #380]	@ (8000b14 <parseMessage+0x254>)
 8000998:	f006 fedc 	bl	8007754 <iprintf>
              ptr++;
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	3301      	adds	r3, #1
 80009a0:	61fb      	str	r3, [r7, #28]
 80009a2:	e070      	b.n	8000a86 <parseMessage+0x1c6>
          }
      }
      else if (strncmp(ptr, "T:", 2) == 0) {
 80009a4:	2202      	movs	r2, #2
 80009a6:	495c      	ldr	r1, [pc, #368]	@ (8000b18 <parseMessage+0x258>)
 80009a8:	69f8      	ldr	r0, [r7, #28]
 80009aa:	f006 ff30 	bl	800780e <strncmp>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d115      	bne.n	80009e0 <parseMessage+0x120>
          ptr += 2;  // Skip "T:"
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	3302      	adds	r3, #2
 80009b8:	61fb      	str	r3, [r7, #28]
          if (*ptr != '\0') {  // Safety check
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d061      	beq.n	8000a86 <parseMessage+0x1c6>
              Type = *ptr;
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	781a      	ldrb	r2, [r3, #0]
 80009c6:	4b55      	ldr	r3, [pc, #340]	@ (8000b1c <parseMessage+0x25c>)
 80009c8:	701a      	strb	r2, [r3, #0]
              printf("Found Type: %c\n\r", Type);
 80009ca:	4b54      	ldr	r3, [pc, #336]	@ (8000b1c <parseMessage+0x25c>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4619      	mov	r1, r3
 80009d2:	4853      	ldr	r0, [pc, #332]	@ (8000b20 <parseMessage+0x260>)
 80009d4:	f006 febe 	bl	8007754 <iprintf>
              ptr++;
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	3301      	adds	r3, #1
 80009dc:	61fb      	str	r3, [r7, #28]
 80009de:	e052      	b.n	8000a86 <parseMessage+0x1c6>
          }
      }
      else if (strncmp(ptr, "V:", 2) == 0) {
 80009e0:	2202      	movs	r2, #2
 80009e2:	4950      	ldr	r1, [pc, #320]	@ (8000b24 <parseMessage+0x264>)
 80009e4:	69f8      	ldr	r0, [r7, #28]
 80009e6:	f006 ff12 	bl	800780e <strncmp>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d11c      	bne.n	8000a2a <parseMessage+0x16a>
          ptr += 2;  // Skip "V:"
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	3302      	adds	r3, #2
 80009f4:	61fb      	str	r3, [r7, #28]
          char* endPtr;
          long temp = strtol(ptr, &endPtr, 10);
 80009f6:	f107 0310 	add.w	r3, r7, #16
 80009fa:	220a      	movs	r2, #10
 80009fc:	4619      	mov	r1, r3
 80009fe:	69f8      	ldr	r0, [r7, #28]
 8000a00:	f006 fddc 	bl	80075bc <strtol>
 8000a04:	6178      	str	r0, [r7, #20]
          if (endPtr != ptr) {
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	69fa      	ldr	r2, [r7, #28]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d03b      	beq.n	8000a86 <parseMessage+0x1c6>
              Velocity = (uint8_t)temp;
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b45      	ldr	r3, [pc, #276]	@ (8000b28 <parseMessage+0x268>)
 8000a14:	701a      	strb	r2, [r3, #0]
              printf("Found Velocity: %d\n\r", Velocity);
 8000a16:	4b44      	ldr	r3, [pc, #272]	@ (8000b28 <parseMessage+0x268>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4843      	ldr	r0, [pc, #268]	@ (8000b2c <parseMessage+0x26c>)
 8000a20:	f006 fe98 	bl	8007754 <iprintf>
              ptr = endPtr;
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	e02d      	b.n	8000a86 <parseMessage+0x1c6>
          }
      }
      else if (strncmp(ptr, "D:", 2) == 0) {
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	4940      	ldr	r1, [pc, #256]	@ (8000b30 <parseMessage+0x270>)
 8000a2e:	69f8      	ldr	r0, [r7, #28]
 8000a30:	f006 feed 	bl	800780e <strncmp>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d11c      	bne.n	8000a74 <parseMessage+0x1b4>
          ptr += 2;  // Skip "D:"
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3302      	adds	r3, #2
 8000a3e:	61fb      	str	r3, [r7, #28]
          char* endPtr;
          long temp = strtol(ptr, &endPtr, 10);
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	220a      	movs	r2, #10
 8000a46:	4619      	mov	r1, r3
 8000a48:	69f8      	ldr	r0, [r7, #28]
 8000a4a:	f006 fdb7 	bl	80075bc <strtol>
 8000a4e:	61b8      	str	r0, [r7, #24]
          if (endPtr != ptr) {
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	69fa      	ldr	r2, [r7, #28]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d016      	beq.n	8000a86 <parseMessage+0x1c6>
              Duration = (uint8_t)temp;
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	4b35      	ldr	r3, [pc, #212]	@ (8000b34 <parseMessage+0x274>)
 8000a5e:	701a      	strb	r2, [r3, #0]
              printf("Found Duration: %d\n\r", Duration);
 8000a60:	4b34      	ldr	r3, [pc, #208]	@ (8000b34 <parseMessage+0x274>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4619      	mov	r1, r3
 8000a68:	4833      	ldr	r0, [pc, #204]	@ (8000b38 <parseMessage+0x278>)
 8000a6a:	f006 fe73 	bl	8007754 <iprintf>
              ptr = endPtr;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	61fb      	str	r3, [r7, #28]
 8000a72:	e008      	b.n	8000a86 <parseMessage+0x1c6>
          }
      }
      else {
          // If we don't recognize the field, skip one character
          printf("Skipping unknown character: %c\n\r", *ptr);
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4830      	ldr	r0, [pc, #192]	@ (8000b3c <parseMessage+0x27c>)
 8000a7c:	f006 fe6a 	bl	8007754 <iprintf>
          ptr++;
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	3301      	adds	r3, #1
 8000a84:	61fb      	str	r3, [r7, #28]
      }
      
      // Skip comma if present
      if (*ptr == ',') {
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b2c      	cmp	r3, #44	@ 0x2c
 8000a8c:	d106      	bne.n	8000a9c <parseMessage+0x1dc>
          ptr++;
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3301      	adds	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
          printf("Skipped comma, now at: %s\n\r", ptr);
 8000a94:	69f9      	ldr	r1, [r7, #28]
 8000a96:	482a      	ldr	r0, [pc, #168]	@ (8000b40 <parseMessage+0x280>)
 8000a98:	f006 fe5c 	bl	8007754 <iprintf>
  while (*ptr != ']' && *ptr != '\0') {
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b5d      	cmp	r3, #93	@ 0x5d
 8000aa2:	d004      	beq.n	8000aae <parseMessage+0x1ee>
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	f47f af2d 	bne.w	8000908 <parseMessage+0x48>
      }
  }
  
  printf("Final parsed values - S:%c G:%c T:%c V:%d D:%d\n\r", 
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <parseMessage+0x244>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <parseMessage+0x250>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	4618      	mov	r0, r3
 8000abe:	4b17      	ldr	r3, [pc, #92]	@ (8000b1c <parseMessage+0x25c>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	461c      	mov	r4, r3
 8000ac6:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <parseMessage+0x268>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <parseMessage+0x274>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	9301      	str	r3, [sp, #4]
 8000ad6:	9200      	str	r2, [sp, #0]
 8000ad8:	4623      	mov	r3, r4
 8000ada:	4602      	mov	r2, r0
 8000adc:	4819      	ldr	r0, [pc, #100]	@ (8000b44 <parseMessage+0x284>)
 8000ade:	f006 fe39 	bl	8007754 <iprintf>
         Steering, Gear, Type, Velocity, Duration);
}
 8000ae2:	3724      	adds	r7, #36	@ 0x24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd90      	pop	{r4, r7, pc}
 8000ae8:	08008484 	.word	0x08008484
 8000aec:	080084a4 	.word	0x080084a4
 8000af0:	080084bc 	.word	0x080084bc
 8000af4:	080084e8 	.word	0x080084e8
 8000af8:	08008510 	.word	0x08008510
 8000afc:	08008534 	.word	0x08008534
 8000b00:	08008550 	.word	0x08008550
 8000b04:	20000000 	.word	0x20000000
 8000b08:	08008554 	.word	0x08008554
 8000b0c:	0800856c 	.word	0x0800856c
 8000b10:	20000001 	.word	0x20000001
 8000b14:	08008570 	.word	0x08008570
 8000b18:	08008584 	.word	0x08008584
 8000b1c:	20000002 	.word	0x20000002
 8000b20:	08008588 	.word	0x08008588
 8000b24:	0800859c 	.word	0x0800859c
 8000b28:	20000126 	.word	0x20000126
 8000b2c:	080085a0 	.word	0x080085a0
 8000b30:	080085b8 	.word	0x080085b8
 8000b34:	20000127 	.word	0x20000127
 8000b38:	080085bc 	.word	0x080085bc
 8000b3c:	080085d4 	.word	0x080085d4
 8000b40:	080085f8 	.word	0x080085f8
 8000b44:	08008614 	.word	0x08008614

08000b48 <runMotor>:

void runMotor(char gear, char type, uint8_t velocity) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
 8000b52:	460b      	mov	r3, r1
 8000b54:	71bb      	strb	r3, [r7, #6]
 8000b56:	4613      	mov	r3, r2
 8000b58:	717b      	strb	r3, [r7, #5]
  //Gear = *gear;
  
  switch (Gear)
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <runMotor+0x54>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b42      	cmp	r3, #66	@ 0x42
 8000b62:	d015      	beq.n	8000b90 <runMotor+0x48>
 8000b64:	2b46      	cmp	r3, #70	@ 0x46
 8000b66:	d10b      	bne.n	8000b80 <runMotor+0x38>
  {
  case 'F': // F tj 70
    // motorForward
    // Set PWM
	  int PWM1 = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
	  PWM1 = 30;
 8000b6c:	231e      	movs	r3, #30
 8000b6e:	60fb      	str	r3, [r7, #12]
    TIM8->CCR2 = PWM1;
 8000b70:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba0 <runMotor+0x58>)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000b76:	2104      	movs	r1, #4
 8000b78:	480a      	ldr	r0, [pc, #40]	@ (8000ba4 <runMotor+0x5c>)
 8000b7a:	f003 fb1b 	bl	80041b4 <HAL_TIM_PWM_Start>
    while(1){
        TIM8->CCR2 = PWM1;
        HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
    }
    */
    break;
 8000b7e:	e008      	b.n	8000b92 <runMotor+0x4a>
  case 'B':
    // motorBackward();
    break;
  default:
    TIM8->CCR2 = 0;
 8000b80:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <runMotor+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000b86:	2104      	movs	r1, #4
 8000b88:	4806      	ldr	r0, [pc, #24]	@ (8000ba4 <runMotor+0x5c>)
 8000b8a:	f003 fb13 	bl	80041b4 <HAL_TIM_PWM_Start>
    break;
 8000b8e:	e000      	b.n	8000b92 <runMotor+0x4a>
    break;
 8000b90:	bf00      	nop
  }
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000001 	.word	0x20000001
 8000ba0:	40013400 	.word	0x40013400
 8000ba4:	200001c4 	.word	0x200001c4

08000ba8 <Steer>:

void Steer(char steering) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
	int PWMtoSteer = 30;
 8000bb2:	231e      	movs	r3, #30
 8000bb4:	60fb      	str	r3, [r7, #12]
  //Gear = *gear;
  
    switch (Steering)
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <Steer+0x80>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b4c      	cmp	r3, #76	@ 0x4c
 8000bbe:	d002      	beq.n	8000bc6 <Steer+0x1e>
 8000bc0:	2b52      	cmp	r3, #82	@ 0x52
 8000bc2:	d00f      	beq.n	8000be4 <Steer+0x3c>
 8000bc4:	e01d      	b.n	8000c02 <Steer+0x5a>
    {
    case 'L':
    	// one to zero
        TIM3->CCR2 = 0;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	@ (8000c2c <Steer+0x84>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	639a      	str	r2, [r3, #56]	@ 0x38
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000bcc:	2104      	movs	r1, #4
 8000bce:	4818      	ldr	r0, [pc, #96]	@ (8000c30 <Steer+0x88>)
 8000bd0:	f003 faf0 	bl	80041b4 <HAL_TIM_PWM_Start>
    	// second to run
        TIM4->CCR1 = PWMtoSteer;
 8000bd4:	4a17      	ldr	r2, [pc, #92]	@ (8000c34 <Steer+0x8c>)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	6353      	str	r3, [r2, #52]	@ 0x34
        HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4816      	ldr	r0, [pc, #88]	@ (8000c38 <Steer+0x90>)
 8000bde:	f003 fae9 	bl	80041b4 <HAL_TIM_PWM_Start>
      break;
 8000be2:	e01d      	b.n	8000c20 <Steer+0x78>
    case 'R':
    	// one to zero
        TIM4->CCR1 = 0;
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <Steer+0x8c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000bea:	2100      	movs	r1, #0
 8000bec:	4812      	ldr	r0, [pc, #72]	@ (8000c38 <Steer+0x90>)
 8000bee:	f003 fae1 	bl	80041b4 <HAL_TIM_PWM_Start>
    	// second to run
        TIM3->CCR2 = PWMtoSteer;
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c2c <Steer+0x84>)
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	6393      	str	r3, [r2, #56]	@ 0x38
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	480d      	ldr	r0, [pc, #52]	@ (8000c30 <Steer+0x88>)
 8000bfc:	f003 fada 	bl	80041b4 <HAL_TIM_PWM_Start>
      break;
 8000c00:	e00e      	b.n	8000c20 <Steer+0x78>
    default:
    	// both to zero
        TIM4->CCR1 = 0;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <Steer+0x8c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	480b      	ldr	r0, [pc, #44]	@ (8000c38 <Steer+0x90>)
 8000c0c:	f003 fad2 	bl	80041b4 <HAL_TIM_PWM_Start>
    	// both to zero
        TIM3->CCR2 = 0;
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <Steer+0x84>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	639a      	str	r2, [r3, #56]	@ 0x38
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c16:	2104      	movs	r1, #4
 8000c18:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <Steer+0x88>)
 8000c1a:	f003 facb 	bl	80041b4 <HAL_TIM_PWM_Start>
      break;
 8000c1e:	bf00      	nop
    }
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	40000400 	.word	0x40000400
 8000c30:	2000012c 	.word	0x2000012c
 8000c34:	40000800 	.word	0x40000800
 8000c38:	20000178 	.word	0x20000178

08000c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	@ 0x28
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c42:	f000 ff93 	bl	8001b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c46:	f000 f8cf 	bl	8000de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4a:	f7ff fcb1 	bl	80005b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c4e:	f7ff fceb 	bl	8000628 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000c52:	f000 fd01 	bl	8001658 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000c56:	f000 fa99 	bl	800118c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c5a:	f000 fb0d 	bl	8001278 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000c5e:	f000 fb81 	bl	8001364 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rxBuffer[0], 1);
 8000c62:	2201      	movs	r2, #1
 8000c64:	4953      	ldr	r1, [pc, #332]	@ (8000db4 <main+0x178>)
 8000c66:	4854      	ldr	r0, [pc, #336]	@ (8000db8 <main+0x17c>)
 8000c68:	f004 fbf2 	bl	8005450 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f000 fdc9 	bl	8001804 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000c72:	2101      	movs	r1, #1
 8000c74:	2000      	movs	r0, #0
 8000c76:	f000 fe27 	bl	80018c8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000c7a:	4b50      	ldr	r3, [pc, #320]	@ (8000dbc <main+0x180>)
 8000c7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c80:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000c82:	4b4e      	ldr	r3, [pc, #312]	@ (8000dbc <main+0x180>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000c88:	4b4c      	ldr	r3, [pc, #304]	@ (8000dbc <main+0x180>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000c8e:	4b4b      	ldr	r3, [pc, #300]	@ (8000dbc <main+0x180>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000c94:	4b49      	ldr	r3, [pc, #292]	@ (8000dbc <main+0x180>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000c9a:	4948      	ldr	r1, [pc, #288]	@ (8000dbc <main+0x180>)
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f000 fe93 	bl	80019c8 <BSP_COM_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <main+0x70>
  {
    Error_Handler();
 8000ca8:	f000 f950 	bl	8000f4c <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000cac:	4844      	ldr	r0, [pc, #272]	@ (8000dc0 <main+0x184>)
 8000cae:	f006 fd51 	bl	8007754 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 fddc 	bl	8001870 <BSP_LED_On>

  imu_init();  // Initialize the IMU after peripherals are set up
 8000cb8:	f7ff fd88 	bl	80007cc <imu_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (messageComplete) {
 8000cbc:	4b41      	ldr	r3, [pc, #260]	@ (8000dc4 <main+0x188>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d005      	beq.n	8000cd2 <main+0x96>
      parseMessage((char*)rxBuffer);
 8000cc6:	483b      	ldr	r0, [pc, #236]	@ (8000db4 <main+0x178>)
 8000cc8:	f7ff fdfa 	bl	80008c0 <parseMessage>
      messageComplete = 0;
 8000ccc:	4b3d      	ldr	r3, [pc, #244]	@ (8000dc4 <main+0x188>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
    }
    runMotor(Gear, Type, Velocity);
 8000cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8000dc8 <main+0x18c>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	4a3c      	ldr	r2, [pc, #240]	@ (8000dcc <main+0x190>)
 8000cda:	7812      	ldrb	r2, [r2, #0]
 8000cdc:	b2d1      	uxtb	r1, r2
 8000cde:	4a3c      	ldr	r2, [pc, #240]	@ (8000dd0 <main+0x194>)
 8000ce0:	7812      	ldrb	r2, [r2, #0]
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff2f 	bl	8000b48 <runMotor>
    Steer(Steering);
 8000cea:	4b3a      	ldr	r3, [pc, #232]	@ (8000dd4 <main+0x198>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff59 	bl	8000ba8 <Steer>
    }
   */


    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000cf6:	4b38      	ldr	r3, [pc, #224]	@ (8000dd8 <main+0x19c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d1de      	bne.n	8000cbc <main+0x80>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000cfe:	4b36      	ldr	r3, [pc, #216]	@ (8000dd8 <main+0x19c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000d04:	2000      	movs	r0, #0
 8000d06:	f000 fdc9 	bl	800189c <BSP_LED_Toggle>

      /* ..... Perform your action ..... */
      printf("Let's do this !\n\r");
 8000d0a:	4834      	ldr	r0, [pc, #208]	@ (8000ddc <main+0x1a0>)
 8000d0c:	f006 fd22 	bl	8007754 <iprintf>
      // grok code starts
      imu_data_t accel, gyro;
      imu_read_accel(&accel);
 8000d10:	f107 0308 	add.w	r3, r7, #8
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fd7f 	bl	8000818 <imu_read_accel>
      imu_read_gyro(&gyro);
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fda5 	bl	800086c <imu_read_gyro>

      // Compute scaled values using integer arithmetic
      int32_t accel_ug_x = (int32_t)accel.x * ACCEL_SENSITIVITY_UG;
 8000d22:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d26:	461a      	mov	r2, r3
 8000d28:	23f4      	movs	r3, #244	@ 0xf4
 8000d2a:	fb02 f303 	mul.w	r3, r2, r3
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
      int32_t accel_ug_y = (int32_t)accel.y * ACCEL_SENSITIVITY_UG;
 8000d30:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d34:	461a      	mov	r2, r3
 8000d36:	23f4      	movs	r3, #244	@ 0xf4
 8000d38:	fb02 f303 	mul.w	r3, r2, r3
 8000d3c:	623b      	str	r3, [r7, #32]
      int32_t accel_ug_z = (int32_t)accel.z * ACCEL_SENSITIVITY_UG;
 8000d3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d42:	461a      	mov	r2, r3
 8000d44:	23f4      	movs	r3, #244	@ 0xf4
 8000d46:	fb02 f303 	mul.w	r3, r2, r3
 8000d4a:	61fb      	str	r3, [r7, #28]
      int32_t gyro_udps_x = (int32_t)gyro.x * GYRO_SENSITIVITY_UDPS;
 8000d4c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d50:	461a      	mov	r2, r3
 8000d52:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000d56:	fb02 f303 	mul.w	r3, r2, r3
 8000d5a:	61bb      	str	r3, [r7, #24]
      int32_t gyro_udps_y = (int32_t)gyro.y * GYRO_SENSITIVITY_UDPS;
 8000d5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d60:	461a      	mov	r2, r3
 8000d62:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000d66:	fb02 f303 	mul.w	r3, r2, r3
 8000d6a:	617b      	str	r3, [r7, #20]
      int32_t gyro_udps_z = (int32_t)gyro.z * GYRO_SENSITIVITY_UDPS;
 8000d6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d70:	461a      	mov	r2, r3
 8000d72:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000d76:	fb02 f303 	mul.w	r3, r2, r3
 8000d7a:	613b      	str	r3, [r7, #16]

      // printing
      printf("Accel [ug]: X=%ld, Y=%ld, Z=%ld\n\r",
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	6a3a      	ldr	r2, [r7, #32]
 8000d80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000d82:	4817      	ldr	r0, [pc, #92]	@ (8000de0 <main+0x1a4>)
 8000d84:	f006 fce6 	bl	8007754 <iprintf>
              accel_ug_x, accel_ug_y, accel_ug_z);
      printf("Gyro [mdps]: X=%ld, Y=%ld, Z=%ld\n\r",
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	69b9      	ldr	r1, [r7, #24]
 8000d8e:	4815      	ldr	r0, [pc, #84]	@ (8000de4 <main+0x1a8>)
 8000d90:	f006 fce0 	bl	8007754 <iprintf>
                    gyro_udps_x, gyro_udps_y, gyro_udps_z);

      HAL_Delay(100);
 8000d94:	2064      	movs	r0, #100	@ 0x64
 8000d96:	f000 ff59 	bl	8001c4c <HAL_Delay>

      runMotor(Gear, Type, Velocity);
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc8 <main+0x18c>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <main+0x190>)
 8000da2:	7812      	ldrb	r2, [r2, #0]
 8000da4:	b2d1      	uxtb	r1, r2
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <main+0x194>)
 8000da8:	7812      	ldrb	r2, [r2, #0]
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fecb 	bl	8000b48 <runMotor>
    if (messageComplete) {
 8000db2:	e783      	b.n	8000cbc <main+0x80>
 8000db4:	20000104 	.word	0x20000104
 8000db8:	20000210 	.word	0x20000210
 8000dbc:	200000f0 	.word	0x200000f0
 8000dc0:	08008648 	.word	0x08008648
 8000dc4:	20000125 	.word	0x20000125
 8000dc8:	20000001 	.word	0x20000001
 8000dcc:	20000002 	.word	0x20000002
 8000dd0:	20000126 	.word	0x20000126
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000100 	.word	0x20000100
 8000ddc:	08008664 	.word	0x08008664
 8000de0:	08008678 	.word	0x08008678
 8000de4:	0800869c 	.word	0x0800869c

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b094      	sub	sp, #80	@ 0x50
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0318 	add.w	r3, r7, #24
 8000df2:	2238      	movs	r2, #56	@ 0x38
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f006 fd01 	bl	80077fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f002 f948 	bl	80030a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1a:	2340      	movs	r3, #64	@ 0x40
 8000e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e22:	2302      	movs	r3, #2
 8000e24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e26:	2304      	movs	r3, #4
 8000e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e2a:	2355      	movs	r3, #85	@ 0x55
 8000e2c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e32:	2302      	movs	r3, #2
 8000e34:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3a:	f107 0318 	add.w	r3, r7, #24
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 f9e2 	bl	8003208 <HAL_RCC_OscConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e4a:	f000 f87f 	bl	8000f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4e:	230f      	movs	r3, #15
 8000e50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e52:	2303      	movs	r3, #3
 8000e54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2104      	movs	r1, #4
 8000e66:	4618      	mov	r0, r3
 8000e68:	f002 fce0 	bl	800382c <HAL_RCC_ClockConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e72:	f000 f86b 	bl	8000f4c <Error_Handler>
  }
}
 8000e76:	bf00      	nop
 8000e78:	3750      	adds	r7, #80	@ 0x50
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a20      	ldr	r2, [pc, #128]	@ (8000f10 <HAL_UART_RxCpltCallback+0x90>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d13b      	bne.n	8000f0a <HAL_UART_RxCpltCallback+0x8a>
      if (rxIndex == 0 && rxBuffer[0] != START_MARKER) {
 8000e92:	4b20      	ldr	r3, [pc, #128]	@ (8000f14 <HAL_UART_RxCpltCallback+0x94>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d109      	bne.n	8000eb0 <HAL_UART_RxCpltCallback+0x30>
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f18 <HAL_UART_RxCpltCallback+0x98>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b5b      	cmp	r3, #91	@ 0x5b
 8000ea2:	d005      	beq.n	8000eb0 <HAL_UART_RxCpltCallback+0x30>
          // Wait for start marker
          HAL_UART_Receive_IT(&huart1, &rxBuffer[0], 1);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	491c      	ldr	r1, [pc, #112]	@ (8000f18 <HAL_UART_RxCpltCallback+0x98>)
 8000ea8:	481c      	ldr	r0, [pc, #112]	@ (8000f1c <HAL_UART_RxCpltCallback+0x9c>)
 8000eaa:	f004 fad1 	bl	8005450 <HAL_UART_Receive_IT>
          return;
 8000eae:	e02c      	b.n	8000f0a <HAL_UART_RxCpltCallback+0x8a>
      }
      
      if (rxBuffer[rxIndex] == END_MARKER) {
 8000eb0:	4b18      	ldr	r3, [pc, #96]	@ (8000f14 <HAL_UART_RxCpltCallback+0x94>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b17      	ldr	r3, [pc, #92]	@ (8000f18 <HAL_UART_RxCpltCallback+0x98>)
 8000eba:	5c9b      	ldrb	r3, [r3, r2]
 8000ebc:	2b5d      	cmp	r3, #93	@ 0x5d
 8000ebe:	d10d      	bne.n	8000edc <HAL_UART_RxCpltCallback+0x5c>
          // Message complete
          rxBuffer[rxIndex + 1] = '\0';  // Null terminate
 8000ec0:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <HAL_UART_RxCpltCallback+0x94>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	4a13      	ldr	r2, [pc, #76]	@ (8000f18 <HAL_UART_RxCpltCallback+0x98>)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	54d1      	strb	r1, [r2, r3]
          messageComplete = 1;
 8000ece:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <HAL_UART_RxCpltCallback+0xa0>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]
          rxIndex = 0;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <HAL_UART_RxCpltCallback+0x94>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
 8000eda:	e00b      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x74>
      } else if (rxIndex < RX_BUFFER_SIZE - 2) {
 8000edc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <HAL_UART_RxCpltCallback+0x94>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b1d      	cmp	r3, #29
 8000ee4:	d806      	bhi.n	8000ef4 <HAL_UART_RxCpltCallback+0x74>
          rxIndex++;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <HAL_UART_RxCpltCallback+0x94>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	3301      	adds	r3, #1
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <HAL_UART_RxCpltCallback+0x94>)
 8000ef2:	701a      	strb	r2, [r3, #0]
      }
      
      // Continue receiving
      HAL_UART_Receive_IT(&huart1, &rxBuffer[rxIndex], 1);
 8000ef4:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <HAL_UART_RxCpltCallback+0x94>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_UART_RxCpltCallback+0x98>)
 8000efe:	4413      	add	r3, r2
 8000f00:	2201      	movs	r2, #1
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <HAL_UART_RxCpltCallback+0x9c>)
 8000f06:	f004 faa3 	bl	8005450 <HAL_UART_Receive_IT>
  }
}
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40013800 	.word	0x40013800
 8000f14:	20000124 	.word	0x20000124
 8000f18:	20000104 	.word	0x20000104
 8000f1c:	20000210 	.word	0x20000210
 8000f20:	20000125 	.word	0x20000125

08000f24 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000f34:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <BSP_PB_Callback+0x24>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	601a      	str	r2, [r3, #0]
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000100 	.word	0x20000100

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <Error_Handler+0x8>

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <HAL_MspInit+0x44>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f62:	4a0e      	ldr	r2, [pc, #56]	@ (8000f9c <HAL_MspInit+0x44>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <HAL_MspInit+0x44>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <HAL_MspInit+0x44>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7a:	4a08      	ldr	r2, [pc, #32]	@ (8000f9c <HAL_MspInit+0x44>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f80:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <HAL_MspInit+0x44>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f8e:	f002 f92b 	bl	80031e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <BusFault_Handler+0x4>

08000fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <UsageFault_Handler+0x4>

08000fc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff6:	f000 fe0b 	bl	8001c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001004:	4802      	ldr	r0, [pc, #8]	@ (8001010 <USART1_IRQHandler+0x10>)
 8001006:	f004 fa6f 	bl	80054e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000210 	.word	0x20000210

08001014 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001018:	2000      	movs	r0, #0
 800101a:	f000 fcc3 	bl	80019a4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}

08001022 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	e00a      	b.n	800104a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001034:	f3af 8000 	nop.w
 8001038:	4601      	mov	r1, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1c5a      	adds	r2, r3, #1
 800103e:	60ba      	str	r2, [r7, #8]
 8001040:	b2ca      	uxtb	r2, r1
 8001042:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3301      	adds	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	429a      	cmp	r2, r3
 8001050:	dbf0      	blt.n	8001034 <_read+0x12>
  }

  return len;
 8001052:	687b      	ldr	r3, [r7, #4]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	e009      	b.n	8001082 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	60ba      	str	r2, [r7, #8]
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fd08 	bl	8001a8c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	3301      	adds	r3, #1
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	429a      	cmp	r2, r3
 8001088:	dbf1      	blt.n	800106e <_write+0x12>
  }
  return len;
 800108a:	687b      	ldr	r3, [r7, #4]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_close>:

int _close(int file)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010bc:	605a      	str	r2, [r3, #4]
  return 0;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_isatty>:

int _isatty(int file)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010d4:	2301      	movs	r3, #1
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b085      	sub	sp, #20
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001104:	4a14      	ldr	r2, [pc, #80]	@ (8001158 <_sbrk+0x5c>)
 8001106:	4b15      	ldr	r3, [pc, #84]	@ (800115c <_sbrk+0x60>)
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001110:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001118:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <_sbrk+0x64>)
 800111a:	4a12      	ldr	r2, [pc, #72]	@ (8001164 <_sbrk+0x68>)
 800111c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111e:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	429a      	cmp	r2, r3
 800112a:	d207      	bcs.n	800113c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800112c:	f006 fbc8 	bl	80078c0 <__errno>
 8001130:	4603      	mov	r3, r0
 8001132:	220c      	movs	r2, #12
 8001134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	e009      	b.n	8001150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800113c:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001142:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	4a05      	ldr	r2, [pc, #20]	@ (8001160 <_sbrk+0x64>)
 800114c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114e:	68fb      	ldr	r3, [r7, #12]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20008000 	.word	0x20008000
 800115c:	00000400 	.word	0x00000400
 8001160:	20000128 	.word	0x20000128
 8001164:	20000498 	.word	0x20000498

08001168 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <SystemInit+0x20>)
 800116e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001172:	4a05      	ldr	r2, [pc, #20]	@ (8001188 <SystemInit+0x20>)
 8001174:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001178:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08e      	sub	sp, #56	@ 0x38
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001192:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]
 80011ba:	615a      	str	r2, [r3, #20]
 80011bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011be:	4b2c      	ldr	r3, [pc, #176]	@ (8001270 <MX_TIM3_Init+0xe4>)
 80011c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001274 <MX_TIM3_Init+0xe8>)
 80011c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 80011c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001270 <MX_TIM3_Init+0xe4>)
 80011c6:	22a9      	movs	r2, #169	@ 0xa9
 80011c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ca:	4b29      	ldr	r3, [pc, #164]	@ (8001270 <MX_TIM3_Init+0xe4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32;
 80011d0:	4b27      	ldr	r3, [pc, #156]	@ (8001270 <MX_TIM3_Init+0xe4>)
 80011d2:	2220      	movs	r2, #32
 80011d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d6:	4b26      	ldr	r3, [pc, #152]	@ (8001270 <MX_TIM3_Init+0xe4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011dc:	4b24      	ldr	r3, [pc, #144]	@ (8001270 <MX_TIM3_Init+0xe4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011e2:	4823      	ldr	r0, [pc, #140]	@ (8001270 <MX_TIM3_Init+0xe4>)
 80011e4:	f002 ff2e 	bl	8004044 <HAL_TIM_Base_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80011ee:	f7ff fead 	bl	8000f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011fc:	4619      	mov	r1, r3
 80011fe:	481c      	ldr	r0, [pc, #112]	@ (8001270 <MX_TIM3_Init+0xe4>)
 8001200:	f003 f9ec 	bl	80045dc <HAL_TIM_ConfigClockSource>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800120a:	f7ff fe9f 	bl	8000f4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800120e:	4818      	ldr	r0, [pc, #96]	@ (8001270 <MX_TIM3_Init+0xe4>)
 8001210:	f002 ff6f 	bl	80040f2 <HAL_TIM_PWM_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800121a:	f7ff fe97 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	4619      	mov	r1, r3
 800122c:	4810      	ldr	r0, [pc, #64]	@ (8001270 <MX_TIM3_Init+0xe4>)
 800122e:	f003 ff23 	bl	8005078 <HAL_TIMEx_MasterConfigSynchronization>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001238:	f7ff fe88 	bl	8000f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800123c:	2360      	movs	r3, #96	@ 0x60
 800123e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800124c:	463b      	mov	r3, r7
 800124e:	2204      	movs	r2, #4
 8001250:	4619      	mov	r1, r3
 8001252:	4807      	ldr	r0, [pc, #28]	@ (8001270 <MX_TIM3_Init+0xe4>)
 8001254:	f003 f8ae 	bl	80043b4 <HAL_TIM_PWM_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800125e:	f7ff fe75 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001262:	4803      	ldr	r0, [pc, #12]	@ (8001270 <MX_TIM3_Init+0xe4>)
 8001264:	f000 f976 	bl	8001554 <HAL_TIM_MspPostInit>

}
 8001268:	bf00      	nop
 800126a:	3738      	adds	r7, #56	@ 0x38
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	2000012c 	.word	0x2000012c
 8001274:	40000400 	.word	0x40000400

08001278 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08e      	sub	sp, #56	@ 0x38
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001298:	463b      	mov	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
 80012a6:	615a      	str	r2, [r3, #20]
 80012a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012aa:	4b2c      	ldr	r3, [pc, #176]	@ (800135c <MX_TIM4_Init+0xe4>)
 80012ac:	4a2c      	ldr	r2, [pc, #176]	@ (8001360 <MX_TIM4_Init+0xe8>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 170-1;
 80012b0:	4b2a      	ldr	r3, [pc, #168]	@ (800135c <MX_TIM4_Init+0xe4>)
 80012b2:	22a9      	movs	r2, #169	@ 0xa9
 80012b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b29      	ldr	r3, [pc, #164]	@ (800135c <MX_TIM4_Init+0xe4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 32;
 80012bc:	4b27      	ldr	r3, [pc, #156]	@ (800135c <MX_TIM4_Init+0xe4>)
 80012be:	2220      	movs	r2, #32
 80012c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c2:	4b26      	ldr	r3, [pc, #152]	@ (800135c <MX_TIM4_Init+0xe4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c8:	4b24      	ldr	r3, [pc, #144]	@ (800135c <MX_TIM4_Init+0xe4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012ce:	4823      	ldr	r0, [pc, #140]	@ (800135c <MX_TIM4_Init+0xe4>)
 80012d0:	f002 feb8 	bl	8004044 <HAL_TIM_Base_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80012da:	f7ff fe37 	bl	8000f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012e8:	4619      	mov	r1, r3
 80012ea:	481c      	ldr	r0, [pc, #112]	@ (800135c <MX_TIM4_Init+0xe4>)
 80012ec:	f003 f976 	bl	80045dc <HAL_TIM_ConfigClockSource>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80012f6:	f7ff fe29 	bl	8000f4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012fa:	4818      	ldr	r0, [pc, #96]	@ (800135c <MX_TIM4_Init+0xe4>)
 80012fc:	f002 fef9 	bl	80040f2 <HAL_TIM_PWM_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001306:	f7ff fe21 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4619      	mov	r1, r3
 8001318:	4810      	ldr	r0, [pc, #64]	@ (800135c <MX_TIM4_Init+0xe4>)
 800131a:	f003 fead 	bl	8005078 <HAL_TIMEx_MasterConfigSynchronization>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001324:	f7ff fe12 	bl	8000f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001328:	2360      	movs	r3, #96	@ 0x60
 800132a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	2200      	movs	r2, #0
 800133c:	4619      	mov	r1, r3
 800133e:	4807      	ldr	r0, [pc, #28]	@ (800135c <MX_TIM4_Init+0xe4>)
 8001340:	f003 f838 	bl	80043b4 <HAL_TIM_PWM_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800134a:	f7ff fdff 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800134e:	4803      	ldr	r0, [pc, #12]	@ (800135c <MX_TIM4_Init+0xe4>)
 8001350:	f000 f900 	bl	8001554 <HAL_TIM_MspPostInit>

}
 8001354:	bf00      	nop
 8001356:	3738      	adds	r7, #56	@ 0x38
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000178 	.word	0x20000178
 8001360:	40000800 	.word	0x40000800

08001364 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b09c      	sub	sp, #112	@ 0x70
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001384:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
 8001394:	615a      	str	r2, [r3, #20]
 8001396:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	2234      	movs	r2, #52	@ 0x34
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f006 fa2d 	bl	80077fe <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80013a4:	4b45      	ldr	r3, [pc, #276]	@ (80014bc <MX_TIM8_Init+0x158>)
 80013a6:	4a46      	ldr	r2, [pc, #280]	@ (80014c0 <MX_TIM8_Init+0x15c>)
 80013a8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 170-1;
 80013aa:	4b44      	ldr	r3, [pc, #272]	@ (80014bc <MX_TIM8_Init+0x158>)
 80013ac:	22a9      	movs	r2, #169	@ 0xa9
 80013ae:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b0:	4b42      	ldr	r3, [pc, #264]	@ (80014bc <MX_TIM8_Init+0x158>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 32;
 80013b6:	4b41      	ldr	r3, [pc, #260]	@ (80014bc <MX_TIM8_Init+0x158>)
 80013b8:	2220      	movs	r2, #32
 80013ba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013bc:	4b3f      	ldr	r3, [pc, #252]	@ (80014bc <MX_TIM8_Init+0x158>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013c2:	4b3e      	ldr	r3, [pc, #248]	@ (80014bc <MX_TIM8_Init+0x158>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c8:	4b3c      	ldr	r3, [pc, #240]	@ (80014bc <MX_TIM8_Init+0x158>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80013ce:	483b      	ldr	r0, [pc, #236]	@ (80014bc <MX_TIM8_Init+0x158>)
 80013d0:	f002 fe38 	bl	8004044 <HAL_TIM_Base_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80013da:	f7ff fdb7 	bl	8000f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80013e4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80013e8:	4619      	mov	r1, r3
 80013ea:	4834      	ldr	r0, [pc, #208]	@ (80014bc <MX_TIM8_Init+0x158>)
 80013ec:	f003 f8f6 	bl	80045dc <HAL_TIM_ConfigClockSource>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80013f6:	f7ff fda9 	bl	8000f4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80013fa:	4830      	ldr	r0, [pc, #192]	@ (80014bc <MX_TIM8_Init+0x158>)
 80013fc:	f002 fe79 	bl	80040f2 <HAL_TIM_PWM_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001406:	f7ff fda1 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001416:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800141a:	4619      	mov	r1, r3
 800141c:	4827      	ldr	r0, [pc, #156]	@ (80014bc <MX_TIM8_Init+0x158>)
 800141e:	f003 fe2b 	bl	8005078 <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001428:	f7ff fd90 	bl	8000f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142c:	2360      	movs	r3, #96	@ 0x60
 800142e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001434:	2300      	movs	r3, #0
 8001436:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001438:	2300      	movs	r3, #0
 800143a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001448:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800144c:	2204      	movs	r2, #4
 800144e:	4619      	mov	r1, r3
 8001450:	481a      	ldr	r0, [pc, #104]	@ (80014bc <MX_TIM8_Init+0x158>)
 8001452:	f002 ffaf 	bl	80043b4 <HAL_TIM_PWM_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 800145c:	f7ff fd76 	bl	8000f4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001474:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001478:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001486:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800148a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001490:	2300      	movs	r3, #0
 8001492:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	4619      	mov	r1, r3
 800149c:	4807      	ldr	r0, [pc, #28]	@ (80014bc <MX_TIM8_Init+0x158>)
 800149e:	f003 fe6d 	bl	800517c <HAL_TIMEx_ConfigBreakDeadTime>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 80014a8:	f7ff fd50 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80014ac:	4803      	ldr	r0, [pc, #12]	@ (80014bc <MX_TIM8_Init+0x158>)
 80014ae:	f000 f851 	bl	8001554 <HAL_TIM_MspPostInit>

}
 80014b2:	bf00      	nop
 80014b4:	3770      	adds	r7, #112	@ 0x70
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200001c4 	.word	0x200001c4
 80014c0:	40013400 	.word	0x40013400

080014c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b087      	sub	sp, #28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001544 <HAL_TIM_Base_MspInit+0x80>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d10c      	bne.n	80014f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <HAL_TIM_Base_MspInit+0x84>)
 80014d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014da:	4a1b      	ldr	r2, [pc, #108]	@ (8001548 <HAL_TIM_Base_MspInit+0x84>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014e2:	4b19      	ldr	r3, [pc, #100]	@ (8001548 <HAL_TIM_Base_MspInit+0x84>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80014ee:	e022      	b.n	8001536 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a15      	ldr	r2, [pc, #84]	@ (800154c <HAL_TIM_Base_MspInit+0x88>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d10c      	bne.n	8001514 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014fa:	4b13      	ldr	r3, [pc, #76]	@ (8001548 <HAL_TIM_Base_MspInit+0x84>)
 80014fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fe:	4a12      	ldr	r2, [pc, #72]	@ (8001548 <HAL_TIM_Base_MspInit+0x84>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6593      	str	r3, [r2, #88]	@ 0x58
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <HAL_TIM_Base_MspInit+0x84>)
 8001508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
}
 8001512:	e010      	b.n	8001536 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM8)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0d      	ldr	r2, [pc, #52]	@ (8001550 <HAL_TIM_Base_MspInit+0x8c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d10b      	bne.n	8001536 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_TIM_Base_MspInit+0x84>)
 8001520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001522:	4a09      	ldr	r2, [pc, #36]	@ (8001548 <HAL_TIM_Base_MspInit+0x84>)
 8001524:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001528:	6613      	str	r3, [r2, #96]	@ 0x60
 800152a:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <HAL_TIM_Base_MspInit+0x84>)
 800152c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800152e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
}
 8001536:	bf00      	nop
 8001538:	371c      	adds	r7, #28
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40000400 	.word	0x40000400
 8001548:	40021000 	.word	0x40021000
 800154c:	40000800 	.word	0x40000800
 8001550:	40013400 	.word	0x40013400

08001554 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	@ 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a33      	ldr	r2, [pc, #204]	@ (8001640 <HAL_TIM_MspPostInit+0xec>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d11d      	bne.n	80015b2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b33      	ldr	r3, [pc, #204]	@ (8001644 <HAL_TIM_MspPostInit+0xf0>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	4a32      	ldr	r2, [pc, #200]	@ (8001644 <HAL_TIM_MspPostInit+0xf0>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001582:	4b30      	ldr	r3, [pc, #192]	@ (8001644 <HAL_TIM_MspPostInit+0xf0>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800158e:	2380      	movs	r3, #128	@ 0x80
 8001590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800159e:	2302      	movs	r3, #2
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ac:	f000 fda0 	bl	80020f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80015b0:	e042      	b.n	8001638 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM4)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a24      	ldr	r2, [pc, #144]	@ (8001648 <HAL_TIM_MspPostInit+0xf4>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d11c      	bne.n	80015f6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015bc:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <HAL_TIM_MspPostInit+0xf0>)
 80015be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c0:	4a20      	ldr	r2, [pc, #128]	@ (8001644 <HAL_TIM_MspPostInit+0xf0>)
 80015c2:	f043 0302 	orr.w	r3, r3, #2
 80015c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001644 <HAL_TIM_MspPostInit+0xf0>)
 80015ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015d4:	2340      	movs	r3, #64	@ 0x40
 80015d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015e4:	2302      	movs	r3, #2
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	4817      	ldr	r0, [pc, #92]	@ (800164c <HAL_TIM_MspPostInit+0xf8>)
 80015f0:	f000 fd7e 	bl	80020f0 <HAL_GPIO_Init>
}
 80015f4:	e020      	b.n	8001638 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a15      	ldr	r2, [pc, #84]	@ (8001650 <HAL_TIM_MspPostInit+0xfc>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d11b      	bne.n	8001638 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001600:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <HAL_TIM_MspPostInit+0xf0>)
 8001602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001604:	4a0f      	ldr	r2, [pc, #60]	@ (8001644 <HAL_TIM_MspPostInit+0xf0>)
 8001606:	f043 0304 	orr.w	r3, r3, #4
 800160a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800160c:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <HAL_TIM_MspPostInit+0xf0>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001618:	2380      	movs	r3, #128	@ 0x80
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001628:	2304      	movs	r3, #4
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4808      	ldr	r0, [pc, #32]	@ (8001654 <HAL_TIM_MspPostInit+0x100>)
 8001634:	f000 fd5c 	bl	80020f0 <HAL_GPIO_Init>
}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	@ 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40000400 	.word	0x40000400
 8001644:	40021000 	.word	0x40021000
 8001648:	40000800 	.word	0x40000800
 800164c:	48000400 	.word	0x48000400
 8001650:	40013400 	.word	0x40013400
 8001654:	48000800 	.word	0x48000800

08001658 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800165c:	4b22      	ldr	r3, [pc, #136]	@ (80016e8 <MX_USART1_UART_Init+0x90>)
 800165e:	4a23      	ldr	r2, [pc, #140]	@ (80016ec <MX_USART1_UART_Init+0x94>)
 8001660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001662:	4b21      	ldr	r3, [pc, #132]	@ (80016e8 <MX_USART1_UART_Init+0x90>)
 8001664:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b1f      	ldr	r3, [pc, #124]	@ (80016e8 <MX_USART1_UART_Init+0x90>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b1d      	ldr	r3, [pc, #116]	@ (80016e8 <MX_USART1_UART_Init+0x90>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001676:	4b1c      	ldr	r3, [pc, #112]	@ (80016e8 <MX_USART1_UART_Init+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b1a      	ldr	r3, [pc, #104]	@ (80016e8 <MX_USART1_UART_Init+0x90>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <MX_USART1_UART_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <MX_USART1_UART_Init+0x90>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168e:	4b16      	ldr	r3, [pc, #88]	@ (80016e8 <MX_USART1_UART_Init+0x90>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001694:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <MX_USART1_UART_Init+0x90>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169a:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <MX_USART1_UART_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a0:	4811      	ldr	r0, [pc, #68]	@ (80016e8 <MX_USART1_UART_Init+0x90>)
 80016a2:	f003 fdf7 	bl	8005294 <HAL_UART_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016ac:	f7ff fc4e 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b0:	2100      	movs	r1, #0
 80016b2:	480d      	ldr	r0, [pc, #52]	@ (80016e8 <MX_USART1_UART_Init+0x90>)
 80016b4:	f005 fe3d 	bl	8007332 <HAL_UARTEx_SetTxFifoThreshold>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016be:	f7ff fc45 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c2:	2100      	movs	r1, #0
 80016c4:	4808      	ldr	r0, [pc, #32]	@ (80016e8 <MX_USART1_UART_Init+0x90>)
 80016c6:	f005 fe72 	bl	80073ae <HAL_UARTEx_SetRxFifoThreshold>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016d0:	f7ff fc3c 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016d4:	4804      	ldr	r0, [pc, #16]	@ (80016e8 <MX_USART1_UART_Init+0x90>)
 80016d6:	f005 fdf3 	bl	80072c0 <HAL_UARTEx_DisableFifoMode>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016e0:	f7ff fc34 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000210 	.word	0x20000210
 80016ec:	40013800 	.word	0x40013800

080016f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b09a      	sub	sp, #104	@ 0x68
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	2244      	movs	r2, #68	@ 0x44
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f006 f874 	bl	80077fe <memset>
  if(uartHandle->Instance==USART1)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a22      	ldr	r2, [pc, #136]	@ (80017a4 <HAL_UART_MspInit+0xb4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d13d      	bne.n	800179c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001720:	2301      	movs	r3, #1
 8001722:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	4618      	mov	r0, r3
 800172e:	f002 fa99 	bl	8003c64 <HAL_RCCEx_PeriphCLKConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001738:	f7ff fc08 	bl	8000f4c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800173c:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <HAL_UART_MspInit+0xb8>)
 800173e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001740:	4a19      	ldr	r2, [pc, #100]	@ (80017a8 <HAL_UART_MspInit+0xb8>)
 8001742:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001746:	6613      	str	r3, [r2, #96]	@ 0x60
 8001748:	4b17      	ldr	r3, [pc, #92]	@ (80017a8 <HAL_UART_MspInit+0xb8>)
 800174a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001754:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <HAL_UART_MspInit+0xb8>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001758:	4a13      	ldr	r2, [pc, #76]	@ (80017a8 <HAL_UART_MspInit+0xb8>)
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001760:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <HAL_UART_MspInit+0xb8>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800176c:	2330      	movs	r3, #48	@ 0x30
 800176e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800177c:	2307      	movs	r3, #7
 800177e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001780:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001784:	4619      	mov	r1, r3
 8001786:	4809      	ldr	r0, [pc, #36]	@ (80017ac <HAL_UART_MspInit+0xbc>)
 8001788:	f000 fcb2 	bl	80020f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	2100      	movs	r1, #0
 8001790:	2025      	movs	r0, #37	@ 0x25
 8001792:	f000 fb58 	bl	8001e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001796:	2025      	movs	r0, #37	@ 0x25
 8001798:	f000 fb6f 	bl	8001e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800179c:	bf00      	nop
 800179e:	3768      	adds	r7, #104	@ 0x68
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40013800 	.word	0x40013800
 80017a8:	40021000 	.word	0x40021000
 80017ac:	48000800 	.word	0x48000800

080017b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017b0:	480d      	ldr	r0, [pc, #52]	@ (80017e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017b2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80017b4:	f7ff fcd8 	bl	8001168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b8:	480c      	ldr	r0, [pc, #48]	@ (80017ec <LoopForever+0x6>)
  ldr r1, =_edata
 80017ba:	490d      	ldr	r1, [pc, #52]	@ (80017f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017bc:	4a0d      	ldr	r2, [pc, #52]	@ (80017f4 <LoopForever+0xe>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017c0:	e002      	b.n	80017c8 <LoopCopyDataInit>

080017c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c6:	3304      	adds	r3, #4

080017c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017cc:	d3f9      	bcc.n	80017c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ce:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017d0:	4c0a      	ldr	r4, [pc, #40]	@ (80017fc <LoopForever+0x16>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d4:	e001      	b.n	80017da <LoopFillZerobss>

080017d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d8:	3204      	adds	r2, #4

080017da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017dc:	d3fb      	bcc.n	80017d6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80017de:	f006 f875 	bl	80078cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017e2:	f7ff fa2b 	bl	8000c3c <main>

080017e6 <LoopForever>:

LoopForever:
    b LoopForever
 80017e6:	e7fe      	b.n	80017e6 <LoopForever>
  ldr   r0, =_estack
 80017e8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80017ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80017f4:	08008848 	.word	0x08008848
  ldr r2, =_sbss
 80017f8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80017fc:	20000494 	.word	0x20000494

08001800 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001800:	e7fe      	b.n	8001800 <ADC1_2_IRQHandler>
	...

08001804 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 800180e:	4b16      	ldr	r3, [pc, #88]	@ (8001868 <BSP_LED_Init+0x64>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001812:	4a15      	ldr	r2, [pc, #84]	@ (8001868 <BSP_LED_Init+0x64>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800181a:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <BSP_LED_Init+0x64>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8001826:	2320      	movs	r3, #32
 8001828:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	4a0c      	ldr	r2, [pc, #48]	@ (800186c <BSP_LED_Init+0x68>)
 800183a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183e:	f107 020c 	add.w	r2, r7, #12
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fc53 	bl	80020f0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	4a07      	ldr	r2, [pc, #28]	@ (800186c <BSP_LED_Init+0x68>)
 800184e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001852:	2120      	movs	r1, #32
 8001854:	2200      	movs	r2, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f000 fdcc 	bl	80023f4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3720      	adds	r7, #32
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	20000008 	.word	0x20000008

08001870 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	4a06      	ldr	r2, [pc, #24]	@ (8001898 <BSP_LED_On+0x28>)
 800187e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001882:	2120      	movs	r1, #32
 8001884:	2201      	movs	r2, #1
 8001886:	4618      	mov	r0, r3
 8001888:	f000 fdb4 	bl	80023f4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000008 	.word	0x20000008

0800189c <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	4a06      	ldr	r2, [pc, #24]	@ (80018c4 <BSP_LED_Toggle+0x28>)
 80018aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ae:	2220      	movs	r2, #32
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 fdb6 	bl	8002424 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000008 	.word	0x20000008

080018c8 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	460a      	mov	r2, r1
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	4613      	mov	r3, r2
 80018d6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 80018d8:	4b2c      	ldr	r3, [pc, #176]	@ (800198c <BSP_PB_Init+0xc4>)
 80018da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018dc:	4a2b      	ldr	r2, [pc, #172]	@ (800198c <BSP_PB_Init+0xc4>)
 80018de:	f043 0304 	orr.w	r3, r3, #4
 80018e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e4:	4b29      	ldr	r3, [pc, #164]	@ (800198c <BSP_PB_Init+0xc4>)
 80018e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 80018f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018f4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80018f6:	2302      	movs	r3, #2
 80018f8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80018fe:	79bb      	ldrb	r3, [r7, #6]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10c      	bne.n	800191e <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001904:	2300      	movs	r3, #0
 8001906:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	4a21      	ldr	r2, [pc, #132]	@ (8001990 <BSP_PB_Init+0xc8>)
 800190c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001910:	f107 020c 	add.w	r2, r7, #12
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f000 fbea 	bl	80020f0 <HAL_GPIO_Init>
 800191c:	e031      	b.n	8001982 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800191e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001922:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	4a1a      	ldr	r2, [pc, #104]	@ (8001990 <BSP_PB_Init+0xc8>)
 8001928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192c:	f107 020c 	add.w	r2, r7, #12
 8001930:	4611      	mov	r1, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f000 fbdc 	bl	80020f0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4a15      	ldr	r2, [pc, #84]	@ (8001994 <BSP_PB_Init+0xcc>)
 800193e:	441a      	add	r2, r3
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	4915      	ldr	r1, [pc, #84]	@ (8001998 <BSP_PB_Init+0xd0>)
 8001944:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001948:	4619      	mov	r1, r3
 800194a:	4610      	mov	r0, r2
 800194c:	f000 fb8c 	bl	8002068 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4a0f      	ldr	r2, [pc, #60]	@ (8001994 <BSP_PB_Init+0xcc>)
 8001956:	1898      	adds	r0, r3, r2
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	4a10      	ldr	r2, [pc, #64]	@ (800199c <BSP_PB_Init+0xd4>)
 800195c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001960:	461a      	mov	r2, r3
 8001962:	2100      	movs	r1, #0
 8001964:	f000 fb63 	bl	800202e <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001968:	2028      	movs	r0, #40	@ 0x28
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	4a0c      	ldr	r2, [pc, #48]	@ (80019a0 <BSP_PB_Init+0xd8>)
 800196e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001972:	2200      	movs	r2, #0
 8001974:	4619      	mov	r1, r3
 8001976:	f000 fa66 	bl	8001e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800197a:	2328      	movs	r3, #40	@ 0x28
 800197c:	4618      	mov	r0, r3
 800197e:	f000 fa7c 	bl	8001e7a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3720      	adds	r7, #32
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40021000 	.word	0x40021000
 8001990:	2000000c 	.word	0x2000000c
 8001994:	200002a4 	.word	0x200002a4
 8001998:	080086d8 	.word	0x080086d8
 800199c:	20000014 	.word	0x20000014
 80019a0:	20000018 	.word	0x20000018

080019a4 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <BSP_PB_IRQHandler+0x20>)
 80019b4:	4413      	add	r3, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 fb6a 	bl	8002090 <HAL_EXTI_IRQHandler>
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200002a4 	.word	0x200002a4

080019c8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d903      	bls.n	80019e6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019de:	f06f 0301 	mvn.w	r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	e018      	b.n	8001a18 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	2294      	movs	r2, #148	@ 0x94
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001a24 <BSP_COM_Init+0x5c>)
 80019f0:	4413      	add	r3, r2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f86e 	bl	8001ad4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	2294      	movs	r2, #148	@ 0x94
 80019fc:	fb02 f303 	mul.w	r3, r2, r3
 8001a00:	4a08      	ldr	r2, [pc, #32]	@ (8001a24 <BSP_COM_Init+0x5c>)
 8001a02:	4413      	add	r3, r2
 8001a04:	6839      	ldr	r1, [r7, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f80e 	bl	8001a28 <MX_LPUART1_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001a12:	f06f 0303 	mvn.w	r3, #3
 8001a16:	e000      	b.n	8001a1a <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001a18:	68fb      	ldr	r3, [r7, #12]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200002ac 	.word	0x200002ac

08001a28 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <MX_LPUART1_Init+0x60>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	220c      	movs	r2, #12
 8001a46:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	895b      	ldrh	r3, [r3, #10]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	891b      	ldrh	r3, [r3, #8]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	899b      	ldrh	r3, [r3, #12]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a74:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f003 fc0c 	bl	8005294 <HAL_UART_Init>
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000010 	.word	0x20000010

08001a8c <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001a94:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <__io_putchar+0x30>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	2394      	movs	r3, #148	@ 0x94
 8001a9c:	fb02 f303 	mul.w	r3, r2, r3
 8001aa0:	4a07      	ldr	r2, [pc, #28]	@ (8001ac0 <__io_putchar+0x34>)
 8001aa2:	1898      	adds	r0, r3, r2
 8001aa4:	1d39      	adds	r1, r7, #4
 8001aa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f003 fc42 	bl	8005334 <HAL_UART_Transmit>
  return ch;
 8001ab0:	687b      	ldr	r3, [r7, #4]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000340 	.word	0x20000340
 8001ac0:	200002ac 	.word	0x200002ac

08001ac4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f7ff fa2b 	bl	8000f24 <BSP_PB_Callback>
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	@ 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001adc:	4b22      	ldr	r3, [pc, #136]	@ (8001b68 <COM1_MspInit+0x94>)
 8001ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae0:	4a21      	ldr	r2, [pc, #132]	@ (8001b68 <COM1_MspInit+0x94>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b68 <COM1_MspInit+0x94>)
 8001aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001af4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b68 <COM1_MspInit+0x94>)
 8001af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b68 <COM1_MspInit+0x94>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b00:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <COM1_MspInit+0x94>)
 8001b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001b0c:	4b16      	ldr	r3, [pc, #88]	@ (8001b68 <COM1_MspInit+0x94>)
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b10:	4a15      	ldr	r2, [pc, #84]	@ (8001b68 <COM1_MspInit+0x94>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001b18:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <COM1_MspInit+0x94>)
 8001b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001b24:	2304      	movs	r3, #4
 8001b26:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001b34:	230c      	movs	r3, #12
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b42:	f000 fad5 	bl	80020f0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001b46:	2308      	movs	r3, #8
 8001b48:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001b4e:	230c      	movs	r3, #12
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b5c:	f000 fac8 	bl	80020f0 <HAL_GPIO_Init>
}
 8001b60:	bf00      	nop
 8001b62:	3728      	adds	r7, #40	@ 0x28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000

08001b6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b76:	2003      	movs	r0, #3
 8001b78:	f000 f95a 	bl	8001e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f000 f80d 	bl	8001b9c <HAL_InitTick>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d002      	beq.n	8001b8e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	71fb      	strb	r3, [r7, #7]
 8001b8c:	e001      	b.n	8001b92 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b8e:	f7ff f9e3 	bl	8000f58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b92:	79fb      	ldrb	r3, [r7, #7]

}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ba8:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <HAL_InitTick+0x68>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d022      	beq.n	8001bf6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001bb0:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <HAL_InitTick+0x6c>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b13      	ldr	r3, [pc, #76]	@ (8001c04 <HAL_InitTick+0x68>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 f966 	bl	8001e96 <HAL_SYSTICK_Config>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10f      	bne.n	8001bf0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b0f      	cmp	r3, #15
 8001bd4:	d809      	bhi.n	8001bea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	f04f 30ff 	mov.w	r0, #4294967295
 8001bde:	f000 f932 	bl	8001e46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001be2:	4a0a      	ldr	r2, [pc, #40]	@ (8001c0c <HAL_InitTick+0x70>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	e007      	b.n	8001bfa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	73fb      	strb	r3, [r7, #15]
 8001bee:	e004      	b.n	8001bfa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
 8001bf4:	e001      	b.n	8001bfa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000020 	.word	0x20000020
 8001c08:	20000004 	.word	0x20000004
 8001c0c:	2000001c 	.word	0x2000001c

08001c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c14:	4b05      	ldr	r3, [pc, #20]	@ (8001c2c <HAL_IncTick+0x1c>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b05      	ldr	r3, [pc, #20]	@ (8001c30 <HAL_IncTick+0x20>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	4a03      	ldr	r2, [pc, #12]	@ (8001c2c <HAL_IncTick+0x1c>)
 8001c20:	6013      	str	r3, [r2, #0]
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	20000344 	.word	0x20000344
 8001c30:	20000020 	.word	0x20000020

08001c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b03      	ldr	r3, [pc, #12]	@ (8001c48 <HAL_GetTick+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000344 	.word	0x20000344

08001c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff ffee 	bl	8001c34 <HAL_GetTick>
 8001c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d004      	beq.n	8001c70 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c66:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <HAL_Delay+0x40>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c70:	bf00      	nop
 8001c72:	f7ff ffdf 	bl	8001c34 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d8f7      	bhi.n	8001c72 <HAL_Delay+0x26>
  {
  }
}
 8001c82:	bf00      	nop
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000020 	.word	0x20000020

08001c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cac:	4013      	ands	r3, r2
 8001cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc2:	4a04      	ldr	r2, [pc, #16]	@ (8001cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	60d3      	str	r3, [r2, #12]
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cdc:	4b04      	ldr	r3, [pc, #16]	@ (8001cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	f003 0307 	and.w	r3, r3, #7
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	db0b      	blt.n	8001d1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	f003 021f 	and.w	r2, r3, #31
 8001d0c:	4907      	ldr	r1, [pc, #28]	@ (8001d2c <__NVIC_EnableIRQ+0x38>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	2001      	movs	r0, #1
 8001d16:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000e100 	.word	0xe000e100

08001d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	db0a      	blt.n	8001d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	490c      	ldr	r1, [pc, #48]	@ (8001d7c <__NVIC_SetPriority+0x4c>)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	0112      	lsls	r2, r2, #4
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	440b      	add	r3, r1
 8001d54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d58:	e00a      	b.n	8001d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4908      	ldr	r1, [pc, #32]	@ (8001d80 <__NVIC_SetPriority+0x50>)
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	3b04      	subs	r3, #4
 8001d68:	0112      	lsls	r2, r2, #4
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	761a      	strb	r2, [r3, #24]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000e100 	.word	0xe000e100
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b089      	sub	sp, #36	@ 0x24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f1c3 0307 	rsb	r3, r3, #7
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	bf28      	it	cs
 8001da2:	2304      	movcs	r3, #4
 8001da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3304      	adds	r3, #4
 8001daa:	2b06      	cmp	r3, #6
 8001dac:	d902      	bls.n	8001db4 <NVIC_EncodePriority+0x30>
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3b03      	subs	r3, #3
 8001db2:	e000      	b.n	8001db6 <NVIC_EncodePriority+0x32>
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd6:	43d9      	mvns	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	4313      	orrs	r3, r2
         );
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3724      	adds	r7, #36	@ 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dfc:	d301      	bcc.n	8001e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00f      	b.n	8001e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e02:	4a0a      	ldr	r2, [pc, #40]	@ (8001e2c <SysTick_Config+0x40>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0a:	210f      	movs	r1, #15
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	f7ff ff8e 	bl	8001d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e14:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <SysTick_Config+0x40>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1a:	4b04      	ldr	r3, [pc, #16]	@ (8001e2c <SysTick_Config+0x40>)
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	e000e010 	.word	0xe000e010

08001e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff ff29 	bl	8001c90 <__NVIC_SetPriorityGrouping>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e54:	f7ff ff40 	bl	8001cd8 <__NVIC_GetPriorityGrouping>
 8001e58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	6978      	ldr	r0, [r7, #20]
 8001e60:	f7ff ff90 	bl	8001d84 <NVIC_EncodePriority>
 8001e64:	4602      	mov	r2, r0
 8001e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff5f 	bl	8001d30 <__NVIC_SetPriority>
}
 8001e72:	bf00      	nop
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff33 	bl	8001cf4 <__NVIC_EnableIRQ>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff ffa4 	bl	8001dec <SysTick_Config>
 8001ea4:	4603      	mov	r3, r0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b085      	sub	sp, #20
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d005      	beq.n	8001ed2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2204      	movs	r2, #4
 8001eca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e037      	b.n	8001f42 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 020e 	bic.w	r2, r2, #14
 8001ee0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ef0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0201 	bic.w	r2, r2, #1
 8001f00:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f06:	f003 021f 	and.w	r2, r3, #31
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	2101      	movs	r1, #1
 8001f10:	fa01 f202 	lsl.w	r2, r1, r2
 8001f14:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f1e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00c      	beq.n	8001f42 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f36:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001f40:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d00d      	beq.n	8001f94 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	73fb      	strb	r3, [r7, #15]
 8001f92:	e047      	b.n	8002024 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 020e 	bic.w	r2, r2, #14
 8001fa2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0201 	bic.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc8:	f003 021f 	and.w	r2, r3, #31
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fe0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00c      	beq.n	8002004 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ff8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002002:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
    }
  }
  return status;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800202e:	b480      	push	{r7}
 8002030:	b087      	sub	sp, #28
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	460b      	mov	r3, r1
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8002040:	7afb      	ldrb	r3, [r7, #11]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d103      	bne.n	800204e <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	605a      	str	r2, [r3, #4]
      break;
 800204c:	e005      	b.n	800205a <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	75fb      	strb	r3, [r7, #23]
      break;
 8002058:	bf00      	nop
  }

  return status;
 800205a:	7dfb      	ldrb	r3, [r7, #23]
}
 800205c:	4618      	mov	r0, r3
 800205e:	371c      	adds	r7, #28
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e003      	b.n	8002084 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002082:	2300      	movs	r3, #0
  }
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0c1b      	lsrs	r3, r3, #16
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	2201      	movs	r2, #1
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	015a      	lsls	r2, r3, #5
 80020b8:	4b0c      	ldr	r3, [pc, #48]	@ (80020ec <HAL_EXTI_IRQHandler+0x5c>)
 80020ba:	4413      	add	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d009      	beq.n	80020e2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4798      	blx	r3
    }
  }
}
 80020e2:	bf00      	nop
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40010414 	.word	0x40010414

080020f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020fe:	e15a      	b.n	80023b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2101      	movs	r1, #1
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	4013      	ands	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 814c 	beq.w	80023b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b01      	cmp	r3, #1
 8002122:	d005      	beq.n	8002130 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800212c:	2b02      	cmp	r3, #2
 800212e:	d130      	bne.n	8002192 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002166:	2201      	movs	r2, #1
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4013      	ands	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	f003 0201 	and.w	r2, r3, #1
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b03      	cmp	r3, #3
 800219c:	d017      	beq.n	80021ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	2203      	movs	r2, #3
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d123      	bne.n	8002222 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	08da      	lsrs	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3208      	adds	r2, #8
 80021e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4013      	ands	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	08da      	lsrs	r2, r3, #3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3208      	adds	r2, #8
 800221c:	6939      	ldr	r1, [r7, #16]
 800221e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2203      	movs	r2, #3
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 0203 	and.w	r2, r3, #3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 80a6 	beq.w	80023b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002264:	4b5b      	ldr	r3, [pc, #364]	@ (80023d4 <HAL_GPIO_Init+0x2e4>)
 8002266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002268:	4a5a      	ldr	r2, [pc, #360]	@ (80023d4 <HAL_GPIO_Init+0x2e4>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002270:	4b58      	ldr	r3, [pc, #352]	@ (80023d4 <HAL_GPIO_Init+0x2e4>)
 8002272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800227c:	4a56      	ldr	r2, [pc, #344]	@ (80023d8 <HAL_GPIO_Init+0x2e8>)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	3302      	adds	r3, #2
 8002284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002288:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	220f      	movs	r2, #15
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022a6:	d01f      	beq.n	80022e8 <HAL_GPIO_Init+0x1f8>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a4c      	ldr	r2, [pc, #304]	@ (80023dc <HAL_GPIO_Init+0x2ec>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d019      	beq.n	80022e4 <HAL_GPIO_Init+0x1f4>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a4b      	ldr	r2, [pc, #300]	@ (80023e0 <HAL_GPIO_Init+0x2f0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d013      	beq.n	80022e0 <HAL_GPIO_Init+0x1f0>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a4a      	ldr	r2, [pc, #296]	@ (80023e4 <HAL_GPIO_Init+0x2f4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d00d      	beq.n	80022dc <HAL_GPIO_Init+0x1ec>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a49      	ldr	r2, [pc, #292]	@ (80023e8 <HAL_GPIO_Init+0x2f8>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d007      	beq.n	80022d8 <HAL_GPIO_Init+0x1e8>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a48      	ldr	r2, [pc, #288]	@ (80023ec <HAL_GPIO_Init+0x2fc>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d101      	bne.n	80022d4 <HAL_GPIO_Init+0x1e4>
 80022d0:	2305      	movs	r3, #5
 80022d2:	e00a      	b.n	80022ea <HAL_GPIO_Init+0x1fa>
 80022d4:	2306      	movs	r3, #6
 80022d6:	e008      	b.n	80022ea <HAL_GPIO_Init+0x1fa>
 80022d8:	2304      	movs	r3, #4
 80022da:	e006      	b.n	80022ea <HAL_GPIO_Init+0x1fa>
 80022dc:	2303      	movs	r3, #3
 80022de:	e004      	b.n	80022ea <HAL_GPIO_Init+0x1fa>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e002      	b.n	80022ea <HAL_GPIO_Init+0x1fa>
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <HAL_GPIO_Init+0x1fa>
 80022e8:	2300      	movs	r3, #0
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	f002 0203 	and.w	r2, r2, #3
 80022f0:	0092      	lsls	r2, r2, #2
 80022f2:	4093      	lsls	r3, r2
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022fa:	4937      	ldr	r1, [pc, #220]	@ (80023d8 <HAL_GPIO_Init+0x2e8>)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	089b      	lsrs	r3, r3, #2
 8002300:	3302      	adds	r3, #2
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002308:	4b39      	ldr	r3, [pc, #228]	@ (80023f0 <HAL_GPIO_Init+0x300>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	43db      	mvns	r3, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800232c:	4a30      	ldr	r2, [pc, #192]	@ (80023f0 <HAL_GPIO_Init+0x300>)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002332:	4b2f      	ldr	r3, [pc, #188]	@ (80023f0 <HAL_GPIO_Init+0x300>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	43db      	mvns	r3, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002356:	4a26      	ldr	r2, [pc, #152]	@ (80023f0 <HAL_GPIO_Init+0x300>)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800235c:	4b24      	ldr	r3, [pc, #144]	@ (80023f0 <HAL_GPIO_Init+0x300>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	43db      	mvns	r3, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4013      	ands	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002380:	4a1b      	ldr	r2, [pc, #108]	@ (80023f0 <HAL_GPIO_Init+0x300>)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002386:	4b1a      	ldr	r3, [pc, #104]	@ (80023f0 <HAL_GPIO_Init+0x300>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023aa:	4a11      	ldr	r2, [pc, #68]	@ (80023f0 <HAL_GPIO_Init+0x300>)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	3301      	adds	r3, #1
 80023b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f47f ae9d 	bne.w	8002100 <HAL_GPIO_Init+0x10>
  }
}
 80023c6:	bf00      	nop
 80023c8:	bf00      	nop
 80023ca:	371c      	adds	r7, #28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40010000 	.word	0x40010000
 80023dc:	48000400 	.word	0x48000400
 80023e0:	48000800 	.word	0x48000800
 80023e4:	48000c00 	.word	0x48000c00
 80023e8:	48001000 	.word	0x48001000
 80023ec:	48001400 	.word	0x48001400
 80023f0:	40010400 	.word	0x40010400

080023f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]
 8002400:	4613      	mov	r3, r2
 8002402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002404:	787b      	ldrb	r3, [r7, #1]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002410:	e002      	b.n	8002418 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002412:	887a      	ldrh	r2, [r7, #2]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002436:	887a      	ldrh	r2, [r7, #2]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4013      	ands	r3, r2
 800243c:	041a      	lsls	r2, r3, #16
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	43d9      	mvns	r1, r3
 8002442:	887b      	ldrh	r3, [r7, #2]
 8002444:	400b      	ands	r3, r1
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	619a      	str	r2, [r3, #24]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e08d      	b.n	8002586 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d106      	bne.n	8002484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe f912 	bl	80006a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2224      	movs	r2, #36	@ 0x24
 8002488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d107      	bne.n	80024d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	e006      	b.n	80024e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80024de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d108      	bne.n	80024fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	e007      	b.n	800250a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002508:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002518:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800251c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800252c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69d9      	ldr	r1, [r3, #28]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1a      	ldr	r2, [r3, #32]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	4608      	mov	r0, r1
 800259a:	4611      	mov	r1, r2
 800259c:	461a      	mov	r2, r3
 800259e:	4603      	mov	r3, r0
 80025a0:	817b      	strh	r3, [r7, #10]
 80025a2:	460b      	mov	r3, r1
 80025a4:	813b      	strh	r3, [r7, #8]
 80025a6:	4613      	mov	r3, r2
 80025a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	f040 80f9 	bne.w	80027aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <HAL_I2C_Mem_Write+0x34>
 80025be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d105      	bne.n	80025d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025ca:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0ed      	b.n	80027ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_I2C_Mem_Write+0x4e>
 80025da:	2302      	movs	r3, #2
 80025dc:	e0e6      	b.n	80027ac <HAL_I2C_Mem_Write+0x21c>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025e6:	f7ff fb25 	bl	8001c34 <HAL_GetTick>
 80025ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	2319      	movs	r3, #25
 80025f2:	2201      	movs	r2, #1
 80025f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 fac3 	bl	8002b84 <I2C_WaitOnFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0d1      	b.n	80027ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2221      	movs	r2, #33	@ 0x21
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2240      	movs	r2, #64	@ 0x40
 8002614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a3a      	ldr	r2, [r7, #32]
 8002622:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002628:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002630:	88f8      	ldrh	r0, [r7, #6]
 8002632:	893a      	ldrh	r2, [r7, #8]
 8002634:	8979      	ldrh	r1, [r7, #10]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	4603      	mov	r3, r0
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f9d3 	bl	80029ec <I2C_RequestMemoryWrite>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0a9      	b.n	80027ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800265c:	b29b      	uxth	r3, r3
 800265e:	2bff      	cmp	r3, #255	@ 0xff
 8002660:	d90e      	bls.n	8002680 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	22ff      	movs	r2, #255	@ 0xff
 8002666:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800266c:	b2da      	uxtb	r2, r3
 800266e:	8979      	ldrh	r1, [r7, #10]
 8002670:	2300      	movs	r3, #0
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fc47 	bl	8002f0c <I2C_TransferConfig>
 800267e:	e00f      	b.n	80026a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800268e:	b2da      	uxtb	r2, r3
 8002690:	8979      	ldrh	r1, [r7, #10]
 8002692:	2300      	movs	r3, #0
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fc36 	bl	8002f0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 fac6 	bl	8002c36 <I2C_WaitOnTXISFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e07b      	b.n	80027ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	781a      	ldrb	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d034      	beq.n	8002758 <HAL_I2C_Mem_Write+0x1c8>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d130      	bne.n	8002758 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fc:	2200      	movs	r2, #0
 80026fe:	2180      	movs	r1, #128	@ 0x80
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 fa3f 	bl	8002b84 <I2C_WaitOnFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e04d      	b.n	80027ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002714:	b29b      	uxth	r3, r3
 8002716:	2bff      	cmp	r3, #255	@ 0xff
 8002718:	d90e      	bls.n	8002738 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	22ff      	movs	r2, #255	@ 0xff
 800271e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002724:	b2da      	uxtb	r2, r3
 8002726:	8979      	ldrh	r1, [r7, #10]
 8002728:	2300      	movs	r3, #0
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 fbeb 	bl	8002f0c <I2C_TransferConfig>
 8002736:	e00f      	b.n	8002758 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002746:	b2da      	uxtb	r2, r3
 8002748:	8979      	ldrh	r1, [r7, #10]
 800274a:	2300      	movs	r3, #0
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fbda 	bl	8002f0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d19e      	bne.n	80026a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 faac 	bl	8002cc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e01a      	b.n	80027ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2220      	movs	r2, #32
 800277c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b0a      	ldr	r3, [pc, #40]	@ (80027b4 <HAL_I2C_Mem_Write+0x224>)
 800278a:	400b      	ands	r3, r1
 800278c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	e000      	b.n	80027ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80027aa:	2302      	movs	r3, #2
  }
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	fe00e800 	.word	0xfe00e800

080027b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	4608      	mov	r0, r1
 80027c2:	4611      	mov	r1, r2
 80027c4:	461a      	mov	r2, r3
 80027c6:	4603      	mov	r3, r0
 80027c8:	817b      	strh	r3, [r7, #10]
 80027ca:	460b      	mov	r3, r1
 80027cc:	813b      	strh	r3, [r7, #8]
 80027ce:	4613      	mov	r3, r2
 80027d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b20      	cmp	r3, #32
 80027dc:	f040 80fd 	bne.w	80029da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_I2C_Mem_Read+0x34>
 80027e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d105      	bne.n	80027f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027f2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0f1      	b.n	80029dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_I2C_Mem_Read+0x4e>
 8002802:	2302      	movs	r3, #2
 8002804:	e0ea      	b.n	80029dc <HAL_I2C_Mem_Read+0x224>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800280e:	f7ff fa11 	bl	8001c34 <HAL_GetTick>
 8002812:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	2319      	movs	r3, #25
 800281a:	2201      	movs	r2, #1
 800281c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f9af 	bl	8002b84 <I2C_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0d5      	b.n	80029dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2222      	movs	r2, #34	@ 0x22
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2240      	movs	r2, #64	@ 0x40
 800283c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a3a      	ldr	r2, [r7, #32]
 800284a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002850:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002858:	88f8      	ldrh	r0, [r7, #6]
 800285a:	893a      	ldrh	r2, [r7, #8]
 800285c:	8979      	ldrh	r1, [r7, #10]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	4603      	mov	r3, r0
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f913 	bl	8002a94 <I2C_RequestMemoryRead>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0ad      	b.n	80029dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	2bff      	cmp	r3, #255	@ 0xff
 8002888:	d90e      	bls.n	80028a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	22ff      	movs	r2, #255	@ 0xff
 800288e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002894:	b2da      	uxtb	r2, r3
 8002896:	8979      	ldrh	r1, [r7, #10]
 8002898:	4b52      	ldr	r3, [pc, #328]	@ (80029e4 <HAL_I2C_Mem_Read+0x22c>)
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 fb33 	bl	8002f0c <I2C_TransferConfig>
 80028a6:	e00f      	b.n	80028c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	8979      	ldrh	r1, [r7, #10]
 80028ba:	4b4a      	ldr	r3, [pc, #296]	@ (80029e4 <HAL_I2C_Mem_Read+0x22c>)
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fb22 	bl	8002f0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ce:	2200      	movs	r2, #0
 80028d0:	2104      	movs	r1, #4
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f956 	bl	8002b84 <I2C_WaitOnFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e07c      	b.n	80029dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d034      	beq.n	8002988 <HAL_I2C_Mem_Read+0x1d0>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002922:	2b00      	cmp	r3, #0
 8002924:	d130      	bne.n	8002988 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292c:	2200      	movs	r2, #0
 800292e:	2180      	movs	r1, #128	@ 0x80
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f927 	bl	8002b84 <I2C_WaitOnFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e04d      	b.n	80029dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	2bff      	cmp	r3, #255	@ 0xff
 8002948:	d90e      	bls.n	8002968 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	22ff      	movs	r2, #255	@ 0xff
 800294e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002954:	b2da      	uxtb	r2, r3
 8002956:	8979      	ldrh	r1, [r7, #10]
 8002958:	2300      	movs	r3, #0
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 fad3 	bl	8002f0c <I2C_TransferConfig>
 8002966:	e00f      	b.n	8002988 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002976:	b2da      	uxtb	r2, r3
 8002978:	8979      	ldrh	r1, [r7, #10]
 800297a:	2300      	movs	r3, #0
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 fac2 	bl	8002f0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d19a      	bne.n	80028c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f994 	bl	8002cc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e01a      	b.n	80029dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2220      	movs	r2, #32
 80029ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b0b      	ldr	r3, [pc, #44]	@ (80029e8 <HAL_I2C_Mem_Read+0x230>)
 80029ba:	400b      	ands	r3, r1
 80029bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e000      	b.n	80029dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80029da:	2302      	movs	r3, #2
  }
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	80002400 	.word	0x80002400
 80029e8:	fe00e800 	.word	0xfe00e800

080029ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	4608      	mov	r0, r1
 80029f6:	4611      	mov	r1, r2
 80029f8:	461a      	mov	r2, r3
 80029fa:	4603      	mov	r3, r0
 80029fc:	817b      	strh	r3, [r7, #10]
 80029fe:	460b      	mov	r3, r1
 8002a00:	813b      	strh	r3, [r7, #8]
 8002a02:	4613      	mov	r3, r2
 8002a04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	8979      	ldrh	r1, [r7, #10]
 8002a0c:	4b20      	ldr	r3, [pc, #128]	@ (8002a90 <I2C_RequestMemoryWrite+0xa4>)
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 fa79 	bl	8002f0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	69b9      	ldr	r1, [r7, #24]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f909 	bl	8002c36 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e02c      	b.n	8002a88 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a2e:	88fb      	ldrh	r3, [r7, #6]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d105      	bne.n	8002a40 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a34:	893b      	ldrh	r3, [r7, #8]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a3e:	e015      	b.n	8002a6c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a40:	893b      	ldrh	r3, [r7, #8]
 8002a42:	0a1b      	lsrs	r3, r3, #8
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	69b9      	ldr	r1, [r7, #24]
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f8ef 	bl	8002c36 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e012      	b.n	8002a88 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a62:	893b      	ldrh	r3, [r7, #8]
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2200      	movs	r2, #0
 8002a74:	2180      	movs	r1, #128	@ 0x80
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f884 	bl	8002b84 <I2C_WaitOnFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	80002000 	.word	0x80002000

08002a94 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	4608      	mov	r0, r1
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	817b      	strh	r3, [r7, #10]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	813b      	strh	r3, [r7, #8]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	8979      	ldrh	r1, [r7, #10]
 8002ab4:	4b20      	ldr	r3, [pc, #128]	@ (8002b38 <I2C_RequestMemoryRead+0xa4>)
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 fa26 	bl	8002f0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	69b9      	ldr	r1, [r7, #24]
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f8b6 	bl	8002c36 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e02c      	b.n	8002b2e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d105      	bne.n	8002ae6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ada:	893b      	ldrh	r3, [r7, #8]
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ae4:	e015      	b.n	8002b12 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ae6:	893b      	ldrh	r3, [r7, #8]
 8002ae8:	0a1b      	lsrs	r3, r3, #8
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	69b9      	ldr	r1, [r7, #24]
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f89c 	bl	8002c36 <I2C_WaitOnTXISFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e012      	b.n	8002b2e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b08:	893b      	ldrh	r3, [r7, #8]
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2140      	movs	r1, #64	@ 0x40
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f831 	bl	8002b84 <I2C_WaitOnFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	80002000 	.word	0x80002000

08002b3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d103      	bne.n	8002b5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2200      	movs	r2, #0
 8002b58:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d007      	beq.n	8002b78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	619a      	str	r2, [r3, #24]
  }
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	4613      	mov	r3, r2
 8002b92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b94:	e03b      	b.n	8002c0e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	6839      	ldr	r1, [r7, #0]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f8d6 	bl	8002d4c <I2C_IsErrorOccurred>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e041      	b.n	8002c2e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d02d      	beq.n	8002c0e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb2:	f7ff f83f 	bl	8001c34 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d302      	bcc.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d122      	bne.n	8002c0e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d113      	bne.n	8002c0e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bea:	f043 0220 	orr.w	r2, r3, #32
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e00f      	b.n	8002c2e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699a      	ldr	r2, [r3, #24]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4013      	ands	r3, r2
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	bf0c      	ite	eq
 8002c1e:	2301      	moveq	r3, #1
 8002c20:	2300      	movne	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d0b4      	beq.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c42:	e033      	b.n	8002cac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	68b9      	ldr	r1, [r7, #8]
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 f87f 	bl	8002d4c <I2C_IsErrorOccurred>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e031      	b.n	8002cbc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5e:	d025      	beq.n	8002cac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c60:	f7fe ffe8 	bl	8001c34 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d302      	bcc.n	8002c76 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d11a      	bne.n	8002cac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d013      	beq.n	8002cac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c88:	f043 0220 	orr.w	r2, r3, #32
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e007      	b.n	8002cbc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d1c4      	bne.n	8002c44 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cd0:	e02f      	b.n	8002d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f838 	bl	8002d4c <I2C_IsErrorOccurred>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e02d      	b.n	8002d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce6:	f7fe ffa5 	bl	8001c34 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d302      	bcc.n	8002cfc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d11a      	bne.n	8002d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d013      	beq.n	8002d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0e:	f043 0220 	orr.w	r2, r3, #32
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e007      	b.n	8002d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d1c8      	bne.n	8002cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	@ 0x28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d068      	beq.n	8002e4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2210      	movs	r2, #16
 8002d7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d80:	e049      	b.n	8002e16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d88:	d045      	beq.n	8002e16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d8a:	f7fe ff53 	bl	8001c34 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d302      	bcc.n	8002da0 <I2C_IsErrorOccurred+0x54>
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d13a      	bne.n	8002e16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002daa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002db2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dc2:	d121      	bne.n	8002e08 <I2C_IsErrorOccurred+0xbc>
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dca:	d01d      	beq.n	8002e08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d01a      	beq.n	8002e08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002de0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002de2:	f7fe ff27 	bl	8001c34 <HAL_GetTick>
 8002de6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002de8:	e00e      	b.n	8002e08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002dea:	f7fe ff23 	bl	8001c34 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b19      	cmp	r3, #25
 8002df6:	d907      	bls.n	8002e08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	f043 0320 	orr.w	r3, r3, #32
 8002dfe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002e06:	e006      	b.n	8002e16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d1e9      	bne.n	8002dea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d003      	beq.n	8002e2c <I2C_IsErrorOccurred+0xe0>
 8002e24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0aa      	beq.n	8002d82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d103      	bne.n	8002e3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	f043 0304 	orr.w	r3, r3, #4
 8002e42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00b      	beq.n	8002e74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	f043 0308 	orr.w	r3, r3, #8
 8002e84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00b      	beq.n	8002eb8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	f043 0302 	orr.w	r3, r3, #2
 8002ea6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d01c      	beq.n	8002efa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f7ff fe3b 	bl	8002b3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6859      	ldr	r1, [r3, #4]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8002f08 <I2C_IsErrorOccurred+0x1bc>)
 8002ed2:	400b      	ands	r3, r1
 8002ed4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	431a      	orrs	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002efa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3728      	adds	r7, #40	@ 0x28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	fe00e800 	.word	0xfe00e800

08002f0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	607b      	str	r3, [r7, #4]
 8002f16:	460b      	mov	r3, r1
 8002f18:	817b      	strh	r3, [r7, #10]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f1e:	897b      	ldrh	r3, [r7, #10]
 8002f20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f24:	7a7b      	ldrb	r3, [r7, #9]
 8002f26:	041b      	lsls	r3, r3, #16
 8002f28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	0d5b      	lsrs	r3, r3, #21
 8002f46:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002f4a:	4b08      	ldr	r3, [pc, #32]	@ (8002f6c <I2C_TransferConfig+0x60>)
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	ea02 0103 	and.w	r1, r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f5e:	bf00      	nop
 8002f60:	371c      	adds	r7, #28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	03ff63ff 	.word	0x03ff63ff

08002f70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	d138      	bne.n	8002ff8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e032      	b.n	8002ffa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2224      	movs	r2, #36	@ 0x24
 8002fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0201 	bic.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6819      	ldr	r1, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	e000      	b.n	8002ffa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ff8:	2302      	movs	r3, #2
  }
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003006:	b480      	push	{r7}
 8003008:	b085      	sub	sp, #20
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b20      	cmp	r3, #32
 800301a:	d139      	bne.n	8003090 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003026:	2302      	movs	r3, #2
 8003028:	e033      	b.n	8003092 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2224      	movs	r2, #36	@ 0x24
 8003036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0201 	bic.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003058:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	021b      	lsls	r3, r3, #8
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4313      	orrs	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	e000      	b.n	8003092 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003090:	2302      	movs	r3, #2
  }
}
 8003092:	4618      	mov	r0, r3
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
	...

080030a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d141      	bne.n	8003132 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030ae:	4b4b      	ldr	r3, [pc, #300]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ba:	d131      	bne.n	8003120 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030bc:	4b47      	ldr	r3, [pc, #284]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030c2:	4a46      	ldr	r2, [pc, #280]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030cc:	4b43      	ldr	r3, [pc, #268]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030d4:	4a41      	ldr	r2, [pc, #260]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030dc:	4b40      	ldr	r3, [pc, #256]	@ (80031e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2232      	movs	r2, #50	@ 0x32
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	4a3f      	ldr	r2, [pc, #252]	@ (80031e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	0c9b      	lsrs	r3, r3, #18
 80030ee:	3301      	adds	r3, #1
 80030f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030f2:	e002      	b.n	80030fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030fa:	4b38      	ldr	r3, [pc, #224]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003106:	d102      	bne.n	800310e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f2      	bne.n	80030f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800310e:	4b33      	ldr	r3, [pc, #204]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800311a:	d158      	bne.n	80031ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e057      	b.n	80031d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003120:	4b2e      	ldr	r3, [pc, #184]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003126:	4a2d      	ldr	r2, [pc, #180]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003128:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800312c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003130:	e04d      	b.n	80031ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003138:	d141      	bne.n	80031be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800313a:	4b28      	ldr	r3, [pc, #160]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003146:	d131      	bne.n	80031ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003148:	4b24      	ldr	r3, [pc, #144]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800314a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800314e:	4a23      	ldr	r2, [pc, #140]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003154:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003158:	4b20      	ldr	r3, [pc, #128]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003160:	4a1e      	ldr	r2, [pc, #120]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003162:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003166:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003168:	4b1d      	ldr	r3, [pc, #116]	@ (80031e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2232      	movs	r2, #50	@ 0x32
 800316e:	fb02 f303 	mul.w	r3, r2, r3
 8003172:	4a1c      	ldr	r2, [pc, #112]	@ (80031e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	0c9b      	lsrs	r3, r3, #18
 800317a:	3301      	adds	r3, #1
 800317c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800317e:	e002      	b.n	8003186 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3b01      	subs	r3, #1
 8003184:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003186:	4b15      	ldr	r3, [pc, #84]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003192:	d102      	bne.n	800319a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f2      	bne.n	8003180 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800319a:	4b10      	ldr	r3, [pc, #64]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a6:	d112      	bne.n	80031ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e011      	b.n	80031d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031ac:	4b0b      	ldr	r3, [pc, #44]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031b2:	4a0a      	ldr	r2, [pc, #40]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80031bc:	e007      	b.n	80031ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031be:	4b07      	ldr	r3, [pc, #28]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031c6:	4a05      	ldr	r2, [pc, #20]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	40007000 	.word	0x40007000
 80031e0:	20000004 	.word	0x20000004
 80031e4:	431bde83 	.word	0x431bde83

080031e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80031ec:	4b05      	ldr	r3, [pc, #20]	@ (8003204 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	4a04      	ldr	r2, [pc, #16]	@ (8003204 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80031f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031f6:	6093      	str	r3, [r2, #8]
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40007000 	.word	0x40007000

08003208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e2fe      	b.n	8003818 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d075      	beq.n	8003312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003226:	4b97      	ldr	r3, [pc, #604]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003230:	4b94      	ldr	r3, [pc, #592]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	2b0c      	cmp	r3, #12
 800323e:	d102      	bne.n	8003246 <HAL_RCC_OscConfig+0x3e>
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2b03      	cmp	r3, #3
 8003244:	d002      	beq.n	800324c <HAL_RCC_OscConfig+0x44>
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	2b08      	cmp	r3, #8
 800324a:	d10b      	bne.n	8003264 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324c:	4b8d      	ldr	r3, [pc, #564]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d05b      	beq.n	8003310 <HAL_RCC_OscConfig+0x108>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d157      	bne.n	8003310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e2d9      	b.n	8003818 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800326c:	d106      	bne.n	800327c <HAL_RCC_OscConfig+0x74>
 800326e:	4b85      	ldr	r3, [pc, #532]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a84      	ldr	r2, [pc, #528]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e01d      	b.n	80032b8 <HAL_RCC_OscConfig+0xb0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003284:	d10c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x98>
 8003286:	4b7f      	ldr	r3, [pc, #508]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a7e      	ldr	r2, [pc, #504]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 800328c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	4b7c      	ldr	r3, [pc, #496]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a7b      	ldr	r2, [pc, #492]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 8003298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e00b      	b.n	80032b8 <HAL_RCC_OscConfig+0xb0>
 80032a0:	4b78      	ldr	r3, [pc, #480]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a77      	ldr	r2, [pc, #476]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 80032a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	4b75      	ldr	r3, [pc, #468]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a74      	ldr	r2, [pc, #464]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 80032b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d013      	beq.n	80032e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fe fcb8 	bl	8001c34 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c8:	f7fe fcb4 	bl	8001c34 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	@ 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e29e      	b.n	8003818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032da:	4b6a      	ldr	r3, [pc, #424]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0xc0>
 80032e6:	e014      	b.n	8003312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fe fca4 	bl	8001c34 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f0:	f7fe fca0 	bl	8001c34 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	@ 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e28a      	b.n	8003818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003302:	4b60      	ldr	r3, [pc, #384]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0xe8>
 800330e:	e000      	b.n	8003312 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d075      	beq.n	800340a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800331e:	4b59      	ldr	r3, [pc, #356]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003328:	4b56      	ldr	r3, [pc, #344]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	2b0c      	cmp	r3, #12
 8003336:	d102      	bne.n	800333e <HAL_RCC_OscConfig+0x136>
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d002      	beq.n	8003344 <HAL_RCC_OscConfig+0x13c>
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b04      	cmp	r3, #4
 8003342:	d11f      	bne.n	8003384 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003344:	4b4f      	ldr	r3, [pc, #316]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_RCC_OscConfig+0x154>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e25d      	b.n	8003818 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335c:	4b49      	ldr	r3, [pc, #292]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	061b      	lsls	r3, r3, #24
 800336a:	4946      	ldr	r1, [pc, #280]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 800336c:	4313      	orrs	r3, r2
 800336e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003370:	4b45      	ldr	r3, [pc, #276]	@ (8003488 <HAL_RCC_OscConfig+0x280>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe fc11 	bl	8001b9c <HAL_InitTick>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d043      	beq.n	8003408 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e249      	b.n	8003818 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d023      	beq.n	80033d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800338c:	4b3d      	ldr	r3, [pc, #244]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a3c      	ldr	r2, [pc, #240]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 8003392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fe fc4c 	bl	8001c34 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a0:	f7fe fc48 	bl	8001c34 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e232      	b.n	8003818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033b2:	4b34      	ldr	r3, [pc, #208]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033be:	4b31      	ldr	r3, [pc, #196]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	061b      	lsls	r3, r3, #24
 80033cc:	492d      	ldr	r1, [pc, #180]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	604b      	str	r3, [r1, #4]
 80033d2:	e01a      	b.n	800340a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2a      	ldr	r2, [pc, #168]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 80033da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fe fc28 	bl	8001c34 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e8:	f7fe fc24 	bl	8001c34 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e20e      	b.n	8003818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033fa:	4b22      	ldr	r3, [pc, #136]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x1e0>
 8003406:	e000      	b.n	800340a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003408:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d041      	beq.n	800349a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d01c      	beq.n	8003458 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800341e:	4b19      	ldr	r3, [pc, #100]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 8003420:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003424:	4a17      	ldr	r2, [pc, #92]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342e:	f7fe fc01 	bl	8001c34 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003436:	f7fe fbfd 	bl	8001c34 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e1e7      	b.n	8003818 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003448:	4b0e      	ldr	r3, [pc, #56]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 800344a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0ef      	beq.n	8003436 <HAL_RCC_OscConfig+0x22e>
 8003456:	e020      	b.n	800349a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003458:	4b0a      	ldr	r3, [pc, #40]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 800345a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800345e:	4a09      	ldr	r2, [pc, #36]	@ (8003484 <HAL_RCC_OscConfig+0x27c>)
 8003460:	f023 0301 	bic.w	r3, r3, #1
 8003464:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003468:	f7fe fbe4 	bl	8001c34 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800346e:	e00d      	b.n	800348c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003470:	f7fe fbe0 	bl	8001c34 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d906      	bls.n	800348c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e1ca      	b.n	8003818 <HAL_RCC_OscConfig+0x610>
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000
 8003488:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800348c:	4b8c      	ldr	r3, [pc, #560]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 800348e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1ea      	bne.n	8003470 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 80a6 	beq.w	80035f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a8:	2300      	movs	r3, #0
 80034aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034ac:	4b84      	ldr	r3, [pc, #528]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 80034ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_RCC_OscConfig+0x2b4>
 80034b8:	2301      	movs	r3, #1
 80034ba:	e000      	b.n	80034be <HAL_RCC_OscConfig+0x2b6>
 80034bc:	2300      	movs	r3, #0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00d      	beq.n	80034de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c2:	4b7f      	ldr	r3, [pc, #508]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c6:	4a7e      	ldr	r2, [pc, #504]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 80034c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80034ce:	4b7c      	ldr	r3, [pc, #496]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 80034d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034da:	2301      	movs	r3, #1
 80034dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034de:	4b79      	ldr	r3, [pc, #484]	@ (80036c4 <HAL_RCC_OscConfig+0x4bc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d118      	bne.n	800351c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034ea:	4b76      	ldr	r3, [pc, #472]	@ (80036c4 <HAL_RCC_OscConfig+0x4bc>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a75      	ldr	r2, [pc, #468]	@ (80036c4 <HAL_RCC_OscConfig+0x4bc>)
 80034f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f6:	f7fe fb9d 	bl	8001c34 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fe:	f7fe fb99 	bl	8001c34 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e183      	b.n	8003818 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003510:	4b6c      	ldr	r3, [pc, #432]	@ (80036c4 <HAL_RCC_OscConfig+0x4bc>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d108      	bne.n	8003536 <HAL_RCC_OscConfig+0x32e>
 8003524:	4b66      	ldr	r3, [pc, #408]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352a:	4a65      	ldr	r2, [pc, #404]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003534:	e024      	b.n	8003580 <HAL_RCC_OscConfig+0x378>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b05      	cmp	r3, #5
 800353c:	d110      	bne.n	8003560 <HAL_RCC_OscConfig+0x358>
 800353e:	4b60      	ldr	r3, [pc, #384]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 8003540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003544:	4a5e      	ldr	r2, [pc, #376]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 8003546:	f043 0304 	orr.w	r3, r3, #4
 800354a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800354e:	4b5c      	ldr	r3, [pc, #368]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003554:	4a5a      	ldr	r2, [pc, #360]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800355e:	e00f      	b.n	8003580 <HAL_RCC_OscConfig+0x378>
 8003560:	4b57      	ldr	r3, [pc, #348]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003566:	4a56      	ldr	r2, [pc, #344]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 8003568:	f023 0301 	bic.w	r3, r3, #1
 800356c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003570:	4b53      	ldr	r3, [pc, #332]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003576:	4a52      	ldr	r2, [pc, #328]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 8003578:	f023 0304 	bic.w	r3, r3, #4
 800357c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d016      	beq.n	80035b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fe fb54 	bl	8001c34 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800358e:	e00a      	b.n	80035a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003590:	f7fe fb50 	bl	8001c34 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800359e:	4293      	cmp	r3, r2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e138      	b.n	8003818 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a6:	4b46      	ldr	r3, [pc, #280]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0ed      	beq.n	8003590 <HAL_RCC_OscConfig+0x388>
 80035b4:	e015      	b.n	80035e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b6:	f7fe fb3d 	bl	8001c34 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035bc:	e00a      	b.n	80035d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035be:	f7fe fb39 	bl	8001c34 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e121      	b.n	8003818 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035d4:	4b3a      	ldr	r3, [pc, #232]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1ed      	bne.n	80035be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035e2:	7ffb      	ldrb	r3, [r7, #31]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d105      	bne.n	80035f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e8:	4b35      	ldr	r3, [pc, #212]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 80035ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ec:	4a34      	ldr	r2, [pc, #208]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 80035ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d03c      	beq.n	800367a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01c      	beq.n	8003642 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003608:	4b2d      	ldr	r3, [pc, #180]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 800360a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800360e:	4a2c      	ldr	r2, [pc, #176]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003618:	f7fe fb0c 	bl	8001c34 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003620:	f7fe fb08 	bl	8001c34 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e0f2      	b.n	8003818 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003632:	4b23      	ldr	r3, [pc, #140]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 8003634:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0ef      	beq.n	8003620 <HAL_RCC_OscConfig+0x418>
 8003640:	e01b      	b.n	800367a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003642:	4b1f      	ldr	r3, [pc, #124]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 8003644:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003648:	4a1d      	ldr	r2, [pc, #116]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003652:	f7fe faef 	bl	8001c34 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800365a:	f7fe faeb 	bl	8001c34 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e0d5      	b.n	8003818 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800366c:	4b14      	ldr	r3, [pc, #80]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 800366e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ef      	bne.n	800365a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 80c9 	beq.w	8003816 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003684:	4b0e      	ldr	r3, [pc, #56]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 030c 	and.w	r3, r3, #12
 800368c:	2b0c      	cmp	r3, #12
 800368e:	f000 8083 	beq.w	8003798 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d15e      	bne.n	8003758 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	4b09      	ldr	r3, [pc, #36]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a08      	ldr	r2, [pc, #32]	@ (80036c0 <HAL_RCC_OscConfig+0x4b8>)
 80036a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a6:	f7fe fac5 	bl	8001c34 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ac:	e00c      	b.n	80036c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ae:	f7fe fac1 	bl	8001c34 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d905      	bls.n	80036c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e0ab      	b.n	8003818 <HAL_RCC_OscConfig+0x610>
 80036c0:	40021000 	.word	0x40021000
 80036c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c8:	4b55      	ldr	r3, [pc, #340]	@ (8003820 <HAL_RCC_OscConfig+0x618>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1ec      	bne.n	80036ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d4:	4b52      	ldr	r3, [pc, #328]	@ (8003820 <HAL_RCC_OscConfig+0x618>)
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	4b52      	ldr	r3, [pc, #328]	@ (8003824 <HAL_RCC_OscConfig+0x61c>)
 80036da:	4013      	ands	r3, r2
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6a11      	ldr	r1, [r2, #32]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036e4:	3a01      	subs	r2, #1
 80036e6:	0112      	lsls	r2, r2, #4
 80036e8:	4311      	orrs	r1, r2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80036ee:	0212      	lsls	r2, r2, #8
 80036f0:	4311      	orrs	r1, r2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80036f6:	0852      	lsrs	r2, r2, #1
 80036f8:	3a01      	subs	r2, #1
 80036fa:	0552      	lsls	r2, r2, #21
 80036fc:	4311      	orrs	r1, r2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003702:	0852      	lsrs	r2, r2, #1
 8003704:	3a01      	subs	r2, #1
 8003706:	0652      	lsls	r2, r2, #25
 8003708:	4311      	orrs	r1, r2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800370e:	06d2      	lsls	r2, r2, #27
 8003710:	430a      	orrs	r2, r1
 8003712:	4943      	ldr	r1, [pc, #268]	@ (8003820 <HAL_RCC_OscConfig+0x618>)
 8003714:	4313      	orrs	r3, r2
 8003716:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003718:	4b41      	ldr	r3, [pc, #260]	@ (8003820 <HAL_RCC_OscConfig+0x618>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a40      	ldr	r2, [pc, #256]	@ (8003820 <HAL_RCC_OscConfig+0x618>)
 800371e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003722:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003724:	4b3e      	ldr	r3, [pc, #248]	@ (8003820 <HAL_RCC_OscConfig+0x618>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4a3d      	ldr	r2, [pc, #244]	@ (8003820 <HAL_RCC_OscConfig+0x618>)
 800372a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800372e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7fe fa80 	bl	8001c34 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003738:	f7fe fa7c 	bl	8001c34 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e066      	b.n	8003818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800374a:	4b35      	ldr	r3, [pc, #212]	@ (8003820 <HAL_RCC_OscConfig+0x618>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0x530>
 8003756:	e05e      	b.n	8003816 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003758:	4b31      	ldr	r3, [pc, #196]	@ (8003820 <HAL_RCC_OscConfig+0x618>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a30      	ldr	r2, [pc, #192]	@ (8003820 <HAL_RCC_OscConfig+0x618>)
 800375e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fe fa66 	bl	8001c34 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376c:	f7fe fa62 	bl	8001c34 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e04c      	b.n	8003818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800377e:	4b28      	ldr	r3, [pc, #160]	@ (8003820 <HAL_RCC_OscConfig+0x618>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800378a:	4b25      	ldr	r3, [pc, #148]	@ (8003820 <HAL_RCC_OscConfig+0x618>)
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	4924      	ldr	r1, [pc, #144]	@ (8003820 <HAL_RCC_OscConfig+0x618>)
 8003790:	4b25      	ldr	r3, [pc, #148]	@ (8003828 <HAL_RCC_OscConfig+0x620>)
 8003792:	4013      	ands	r3, r2
 8003794:	60cb      	str	r3, [r1, #12]
 8003796:	e03e      	b.n	8003816 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e039      	b.n	8003818 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80037a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003820 <HAL_RCC_OscConfig+0x618>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f003 0203 	and.w	r2, r3, #3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d12c      	bne.n	8003812 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	3b01      	subs	r3, #1
 80037c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d123      	bne.n	8003812 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d11b      	bne.n	8003812 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d113      	bne.n	8003812 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f4:	085b      	lsrs	r3, r3, #1
 80037f6:	3b01      	subs	r3, #1
 80037f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d109      	bne.n	8003812 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003808:	085b      	lsrs	r3, r3, #1
 800380a:	3b01      	subs	r3, #1
 800380c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d001      	beq.n	8003816 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3720      	adds	r7, #32
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021000 	.word	0x40021000
 8003824:	019f800c 	.word	0x019f800c
 8003828:	feeefffc 	.word	0xfeeefffc

0800382c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e11e      	b.n	8003a82 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003844:	4b91      	ldr	r3, [pc, #580]	@ (8003a8c <HAL_RCC_ClockConfig+0x260>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 030f 	and.w	r3, r3, #15
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d910      	bls.n	8003874 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003852:	4b8e      	ldr	r3, [pc, #568]	@ (8003a8c <HAL_RCC_ClockConfig+0x260>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 020f 	bic.w	r2, r3, #15
 800385a:	498c      	ldr	r1, [pc, #560]	@ (8003a8c <HAL_RCC_ClockConfig+0x260>)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	4313      	orrs	r3, r2
 8003860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003862:	4b8a      	ldr	r3, [pc, #552]	@ (8003a8c <HAL_RCC_ClockConfig+0x260>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d001      	beq.n	8003874 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e106      	b.n	8003a82 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d073      	beq.n	8003968 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d129      	bne.n	80038dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003888:	4b81      	ldr	r3, [pc, #516]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0f4      	b.n	8003a82 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003898:	f000 f99e 	bl	8003bd8 <RCC_GetSysClockFreqFromPLLSource>
 800389c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4a7c      	ldr	r2, [pc, #496]	@ (8003a94 <HAL_RCC_ClockConfig+0x268>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d93f      	bls.n	8003926 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80038a6:	4b7a      	ldr	r3, [pc, #488]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d033      	beq.n	8003926 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d12f      	bne.n	8003926 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038c6:	4b72      	ldr	r3, [pc, #456]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038ce:	4a70      	ldr	r2, [pc, #448]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 80038d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038d6:	2380      	movs	r3, #128	@ 0x80
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	e024      	b.n	8003926 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d107      	bne.n	80038f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d109      	bne.n	8003904 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0c6      	b.n	8003a82 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038f4:	4b66      	ldr	r3, [pc, #408]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0be      	b.n	8003a82 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003904:	f000 f8ce 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8003908:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4a61      	ldr	r2, [pc, #388]	@ (8003a94 <HAL_RCC_ClockConfig+0x268>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d909      	bls.n	8003926 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003912:	4b5f      	ldr	r3, [pc, #380]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800391a:	4a5d      	ldr	r2, [pc, #372]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 800391c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003920:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003922:	2380      	movs	r3, #128	@ 0x80
 8003924:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003926:	4b5a      	ldr	r3, [pc, #360]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f023 0203 	bic.w	r2, r3, #3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4957      	ldr	r1, [pc, #348]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 8003934:	4313      	orrs	r3, r2
 8003936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003938:	f7fe f97c 	bl	8001c34 <HAL_GetTick>
 800393c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393e:	e00a      	b.n	8003956 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003940:	f7fe f978 	bl	8001c34 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800394e:	4293      	cmp	r3, r2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e095      	b.n	8003a82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	4b4e      	ldr	r3, [pc, #312]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 020c 	and.w	r2, r3, #12
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	429a      	cmp	r2, r3
 8003966:	d1eb      	bne.n	8003940 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d023      	beq.n	80039bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003980:	4b43      	ldr	r3, [pc, #268]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4a42      	ldr	r2, [pc, #264]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 8003986:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800398a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d007      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003998:	4b3d      	ldr	r3, [pc, #244]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80039a0:	4a3b      	ldr	r2, [pc, #236]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 80039a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80039a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a8:	4b39      	ldr	r3, [pc, #228]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	4936      	ldr	r1, [pc, #216]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
 80039ba:	e008      	b.n	80039ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2b80      	cmp	r3, #128	@ 0x80
 80039c0:	d105      	bne.n	80039ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80039c2:	4b33      	ldr	r3, [pc, #204]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	4a32      	ldr	r2, [pc, #200]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 80039c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039ce:	4b2f      	ldr	r3, [pc, #188]	@ (8003a8c <HAL_RCC_ClockConfig+0x260>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d21d      	bcs.n	8003a18 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039dc:	4b2b      	ldr	r3, [pc, #172]	@ (8003a8c <HAL_RCC_ClockConfig+0x260>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 020f 	bic.w	r2, r3, #15
 80039e4:	4929      	ldr	r1, [pc, #164]	@ (8003a8c <HAL_RCC_ClockConfig+0x260>)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039ec:	f7fe f922 	bl	8001c34 <HAL_GetTick>
 80039f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	e00a      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f4:	f7fe f91e 	bl	8001c34 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e03b      	b.n	8003a82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b20      	ldr	r3, [pc, #128]	@ (8003a8c <HAL_RCC_ClockConfig+0x260>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d1ed      	bne.n	80039f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a24:	4b1a      	ldr	r3, [pc, #104]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	4917      	ldr	r1, [pc, #92]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d009      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a42:	4b13      	ldr	r3, [pc, #76]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	490f      	ldr	r1, [pc, #60]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a56:	f000 f825 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a90 <HAL_RCC_ClockConfig+0x264>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	490c      	ldr	r1, [pc, #48]	@ (8003a98 <HAL_RCC_ClockConfig+0x26c>)
 8003a68:	5ccb      	ldrb	r3, [r1, r3]
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a72:	4a0a      	ldr	r2, [pc, #40]	@ (8003a9c <HAL_RCC_ClockConfig+0x270>)
 8003a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a76:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa0 <HAL_RCC_ClockConfig+0x274>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fe f88e 	bl	8001b9c <HAL_InitTick>
 8003a80:	4603      	mov	r3, r0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40022000 	.word	0x40022000
 8003a90:	40021000 	.word	0x40021000
 8003a94:	04c4b400 	.word	0x04c4b400
 8003a98:	080086c0 	.word	0x080086c0
 8003a9c:	20000004 	.word	0x20000004
 8003aa0:	2000001c 	.word	0x2000001c

08003aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d102      	bne.n	8003abc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	e047      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003abc:	4b27      	ldr	r3, [pc, #156]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d102      	bne.n	8003ace <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ac8:	4b26      	ldr	r3, [pc, #152]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	e03e      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003ace:	4b23      	ldr	r3, [pc, #140]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
 8003ad6:	2b0c      	cmp	r3, #12
 8003ad8:	d136      	bne.n	8003b48 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ada:	4b20      	ldr	r3, [pc, #128]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	3301      	adds	r3, #1
 8003af0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d10c      	bne.n	8003b12 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003af8:	4a1a      	ldr	r2, [pc, #104]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b00:	4a16      	ldr	r2, [pc, #88]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b02:	68d2      	ldr	r2, [r2, #12]
 8003b04:	0a12      	lsrs	r2, r2, #8
 8003b06:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	617b      	str	r3, [r7, #20]
      break;
 8003b10:	e00c      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b12:	4a13      	ldr	r2, [pc, #76]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1a:	4a10      	ldr	r2, [pc, #64]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b1c:	68d2      	ldr	r2, [r2, #12]
 8003b1e:	0a12      	lsrs	r2, r2, #8
 8003b20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b24:	fb02 f303 	mul.w	r3, r2, r3
 8003b28:	617b      	str	r3, [r7, #20]
      break;
 8003b2a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	0e5b      	lsrs	r3, r3, #25
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	3301      	adds	r3, #1
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	e001      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003b4c:	693b      	ldr	r3, [r7, #16]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	00f42400 	.word	0x00f42400
 8003b64:	016e3600 	.word	0x016e3600

08003b68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	@ (8003b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20000004 	.word	0x20000004

08003b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b84:	f7ff fff0 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	0a1b      	lsrs	r3, r3, #8
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4904      	ldr	r1, [pc, #16]	@ (8003ba8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b96:	5ccb      	ldrb	r3, [r1, r3]
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	080086d0 	.word	0x080086d0

08003bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bb0:	f7ff ffda 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b06      	ldr	r3, [pc, #24]	@ (8003bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	0adb      	lsrs	r3, r3, #11
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	4904      	ldr	r1, [pc, #16]	@ (8003bd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bc2:	5ccb      	ldrb	r3, [r1, r3]
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	080086d0 	.word	0x080086d0

08003bd8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bde:	4b1e      	ldr	r3, [pc, #120]	@ (8003c58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003be8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	091b      	lsrs	r3, r3, #4
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	2b03      	cmp	r3, #3
 8003bfa:	d10c      	bne.n	8003c16 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bfc:	4a17      	ldr	r2, [pc, #92]	@ (8003c5c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c04:	4a14      	ldr	r2, [pc, #80]	@ (8003c58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c06:	68d2      	ldr	r2, [r2, #12]
 8003c08:	0a12      	lsrs	r2, r2, #8
 8003c0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c0e:	fb02 f303 	mul.w	r3, r2, r3
 8003c12:	617b      	str	r3, [r7, #20]
    break;
 8003c14:	e00c      	b.n	8003c30 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c16:	4a12      	ldr	r2, [pc, #72]	@ (8003c60 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8003c58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c20:	68d2      	ldr	r2, [r2, #12]
 8003c22:	0a12      	lsrs	r2, r2, #8
 8003c24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c28:	fb02 f303 	mul.w	r3, r2, r3
 8003c2c:	617b      	str	r3, [r7, #20]
    break;
 8003c2e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c30:	4b09      	ldr	r3, [pc, #36]	@ (8003c58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	0e5b      	lsrs	r3, r3, #25
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c48:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003c4a:	687b      	ldr	r3, [r7, #4]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	371c      	adds	r7, #28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	016e3600 	.word	0x016e3600
 8003c60:	00f42400 	.word	0x00f42400

08003c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c70:	2300      	movs	r3, #0
 8003c72:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8098 	beq.w	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c82:	2300      	movs	r3, #0
 8003c84:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c86:	4b43      	ldr	r3, [pc, #268]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10d      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c92:	4b40      	ldr	r3, [pc, #256]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c96:	4a3f      	ldr	r2, [pc, #252]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c9e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca6:	60bb      	str	r3, [r7, #8]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003caa:	2301      	movs	r3, #1
 8003cac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cae:	4b3a      	ldr	r3, [pc, #232]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a39      	ldr	r2, [pc, #228]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cba:	f7fd ffbb 	bl	8001c34 <HAL_GetTick>
 8003cbe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cc0:	e009      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc2:	f7fd ffb7 	bl	8001c34 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d902      	bls.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	74fb      	strb	r3, [r7, #19]
        break;
 8003cd4:	e005      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cd6:	4b30      	ldr	r3, [pc, #192]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0ef      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003ce2:	7cfb      	ldrb	r3, [r7, #19]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d159      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cf2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d01e      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d019      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d04:	4b23      	ldr	r3, [pc, #140]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d10:	4b20      	ldr	r3, [pc, #128]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d16:	4a1f      	ldr	r2, [pc, #124]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d20:	4b1c      	ldr	r3, [pc, #112]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d26:	4a1b      	ldr	r2, [pc, #108]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d30:	4a18      	ldr	r2, [pc, #96]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d016      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d42:	f7fd ff77 	bl	8001c34 <HAL_GetTick>
 8003d46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d48:	e00b      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4a:	f7fd ff73 	bl	8001c34 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d902      	bls.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	74fb      	strb	r3, [r7, #19]
            break;
 8003d60:	e006      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d62:	4b0c      	ldr	r3, [pc, #48]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0ec      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10b      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d76:	4b07      	ldr	r3, [pc, #28]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d84:	4903      	ldr	r1, [pc, #12]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d8c:	e008      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d8e:	7cfb      	ldrb	r3, [r7, #19]
 8003d90:	74bb      	strb	r3, [r7, #18]
 8003d92:	e005      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9c:	7cfb      	ldrb	r3, [r7, #19]
 8003d9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003da0:	7c7b      	ldrb	r3, [r7, #17]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d105      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da6:	4ba6      	ldr	r3, [pc, #664]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003daa:	4aa5      	ldr	r2, [pc, #660]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003db0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dbe:	4ba0      	ldr	r3, [pc, #640]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc4:	f023 0203 	bic.w	r2, r3, #3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	499c      	ldr	r1, [pc, #624]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003de0:	4b97      	ldr	r3, [pc, #604]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de6:	f023 020c 	bic.w	r2, r3, #12
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	4994      	ldr	r1, [pc, #592]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e02:	4b8f      	ldr	r3, [pc, #572]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	498b      	ldr	r1, [pc, #556]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e24:	4b86      	ldr	r3, [pc, #536]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	4983      	ldr	r1, [pc, #524]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e46:	4b7e      	ldr	r3, [pc, #504]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e4c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	497a      	ldr	r1, [pc, #488]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e68:	4b75      	ldr	r3, [pc, #468]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e6e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	4972      	ldr	r1, [pc, #456]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e90:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	4969      	ldr	r1, [pc, #420]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003eac:	4b64      	ldr	r3, [pc, #400]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	4961      	ldr	r1, [pc, #388]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ece:	4b5c      	ldr	r3, [pc, #368]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	4958      	ldr	r1, [pc, #352]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d015      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ef0:	4b53      	ldr	r3, [pc, #332]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efe:	4950      	ldr	r1, [pc, #320]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f0e:	d105      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f10:	4b4b      	ldr	r3, [pc, #300]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4a4a      	ldr	r2, [pc, #296]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f1a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d015      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f28:	4b45      	ldr	r3, [pc, #276]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f36:	4942      	ldr	r1, [pc, #264]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f46:	d105      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f48:	4b3d      	ldr	r3, [pc, #244]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	4a3c      	ldr	r2, [pc, #240]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f52:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d015      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f60:	4b37      	ldr	r3, [pc, #220]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f66:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	4934      	ldr	r1, [pc, #208]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f7e:	d105      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f80:	4b2f      	ldr	r3, [pc, #188]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	4a2e      	ldr	r2, [pc, #184]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d015      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f98:	4b29      	ldr	r3, [pc, #164]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa6:	4926      	ldr	r1, [pc, #152]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fb6:	d105      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fb8:	4b21      	ldr	r3, [pc, #132]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4a20      	ldr	r2, [pc, #128]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fc2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d015      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fde:	4918      	ldr	r1, [pc, #96]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fee:	d105      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ff0:	4b13      	ldr	r3, [pc, #76]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4a12      	ldr	r2, [pc, #72]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ffa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d015      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004008:	4b0d      	ldr	r3, [pc, #52]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004016:	490a      	ldr	r1, [pc, #40]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004022:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004026:	d105      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004028:	4b05      	ldr	r3, [pc, #20]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	4a04      	ldr	r2, [pc, #16]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004032:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004034:	7cbb      	ldrb	r3, [r7, #18]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40021000 	.word	0x40021000

08004044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e049      	b.n	80040ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fd fa2a 	bl	80014c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3304      	adds	r3, #4
 8004080:	4619      	mov	r1, r3
 8004082:	4610      	mov	r0, r2
 8004084:	f000 fba4 	bl	80047d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e049      	b.n	8004198 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d106      	bne.n	800411e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f841 	bl	80041a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2202      	movs	r2, #2
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	3304      	adds	r3, #4
 800412e:	4619      	mov	r1, r3
 8004130:	4610      	mov	r0, r2
 8004132:	f000 fb4d 	bl	80047d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d109      	bne.n	80041d8 <HAL_TIM_PWM_Start+0x24>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	bf14      	ite	ne
 80041d0:	2301      	movne	r3, #1
 80041d2:	2300      	moveq	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	e03c      	b.n	8004252 <HAL_TIM_PWM_Start+0x9e>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d109      	bne.n	80041f2 <HAL_TIM_PWM_Start+0x3e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	bf14      	ite	ne
 80041ea:	2301      	movne	r3, #1
 80041ec:	2300      	moveq	r3, #0
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	e02f      	b.n	8004252 <HAL_TIM_PWM_Start+0x9e>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d109      	bne.n	800420c <HAL_TIM_PWM_Start+0x58>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b01      	cmp	r3, #1
 8004202:	bf14      	ite	ne
 8004204:	2301      	movne	r3, #1
 8004206:	2300      	moveq	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	e022      	b.n	8004252 <HAL_TIM_PWM_Start+0x9e>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b0c      	cmp	r3, #12
 8004210:	d109      	bne.n	8004226 <HAL_TIM_PWM_Start+0x72>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b01      	cmp	r3, #1
 800421c:	bf14      	ite	ne
 800421e:	2301      	movne	r3, #1
 8004220:	2300      	moveq	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	e015      	b.n	8004252 <HAL_TIM_PWM_Start+0x9e>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b10      	cmp	r3, #16
 800422a:	d109      	bne.n	8004240 <HAL_TIM_PWM_Start+0x8c>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b01      	cmp	r3, #1
 8004236:	bf14      	ite	ne
 8004238:	2301      	movne	r3, #1
 800423a:	2300      	moveq	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	e008      	b.n	8004252 <HAL_TIM_PWM_Start+0x9e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	bf14      	ite	ne
 800424c:	2301      	movne	r3, #1
 800424e:	2300      	moveq	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e097      	b.n	800438a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d104      	bne.n	800426a <HAL_TIM_PWM_Start+0xb6>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004268:	e023      	b.n	80042b2 <HAL_TIM_PWM_Start+0xfe>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b04      	cmp	r3, #4
 800426e:	d104      	bne.n	800427a <HAL_TIM_PWM_Start+0xc6>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004278:	e01b      	b.n	80042b2 <HAL_TIM_PWM_Start+0xfe>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b08      	cmp	r3, #8
 800427e:	d104      	bne.n	800428a <HAL_TIM_PWM_Start+0xd6>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004288:	e013      	b.n	80042b2 <HAL_TIM_PWM_Start+0xfe>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b0c      	cmp	r3, #12
 800428e:	d104      	bne.n	800429a <HAL_TIM_PWM_Start+0xe6>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004298:	e00b      	b.n	80042b2 <HAL_TIM_PWM_Start+0xfe>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b10      	cmp	r3, #16
 800429e:	d104      	bne.n	80042aa <HAL_TIM_PWM_Start+0xf6>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042a8:	e003      	b.n	80042b2 <HAL_TIM_PWM_Start+0xfe>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2202      	movs	r2, #2
 80042ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2201      	movs	r2, #1
 80042b8:	6839      	ldr	r1, [r7, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 feb6 	bl	800502c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a33      	ldr	r2, [pc, #204]	@ (8004394 <HAL_TIM_PWM_Start+0x1e0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d013      	beq.n	80042f2 <HAL_TIM_PWM_Start+0x13e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a32      	ldr	r2, [pc, #200]	@ (8004398 <HAL_TIM_PWM_Start+0x1e4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00e      	beq.n	80042f2 <HAL_TIM_PWM_Start+0x13e>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a30      	ldr	r2, [pc, #192]	@ (800439c <HAL_TIM_PWM_Start+0x1e8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d009      	beq.n	80042f2 <HAL_TIM_PWM_Start+0x13e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a2f      	ldr	r2, [pc, #188]	@ (80043a0 <HAL_TIM_PWM_Start+0x1ec>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d004      	beq.n	80042f2 <HAL_TIM_PWM_Start+0x13e>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a2d      	ldr	r2, [pc, #180]	@ (80043a4 <HAL_TIM_PWM_Start+0x1f0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_PWM_Start+0x142>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <HAL_TIM_PWM_Start+0x144>
 80042f6:	2300      	movs	r3, #0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d007      	beq.n	800430c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800430a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a20      	ldr	r2, [pc, #128]	@ (8004394 <HAL_TIM_PWM_Start+0x1e0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d018      	beq.n	8004348 <HAL_TIM_PWM_Start+0x194>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800431e:	d013      	beq.n	8004348 <HAL_TIM_PWM_Start+0x194>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a20      	ldr	r2, [pc, #128]	@ (80043a8 <HAL_TIM_PWM_Start+0x1f4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00e      	beq.n	8004348 <HAL_TIM_PWM_Start+0x194>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a1f      	ldr	r2, [pc, #124]	@ (80043ac <HAL_TIM_PWM_Start+0x1f8>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d009      	beq.n	8004348 <HAL_TIM_PWM_Start+0x194>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a17      	ldr	r2, [pc, #92]	@ (8004398 <HAL_TIM_PWM_Start+0x1e4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d004      	beq.n	8004348 <HAL_TIM_PWM_Start+0x194>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a16      	ldr	r2, [pc, #88]	@ (800439c <HAL_TIM_PWM_Start+0x1e8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d115      	bne.n	8004374 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	4b18      	ldr	r3, [pc, #96]	@ (80043b0 <HAL_TIM_PWM_Start+0x1fc>)
 8004350:	4013      	ands	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b06      	cmp	r3, #6
 8004358:	d015      	beq.n	8004386 <HAL_TIM_PWM_Start+0x1d2>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004360:	d011      	beq.n	8004386 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0201 	orr.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004372:	e008      	b.n	8004386 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	e000      	b.n	8004388 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004386:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40012c00 	.word	0x40012c00
 8004398:	40013400 	.word	0x40013400
 800439c:	40014000 	.word	0x40014000
 80043a0:	40014400 	.word	0x40014400
 80043a4:	40014800 	.word	0x40014800
 80043a8:	40000400 	.word	0x40000400
 80043ac:	40000800 	.word	0x40000800
 80043b0:	00010007 	.word	0x00010007

080043b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e0ff      	b.n	80045d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b14      	cmp	r3, #20
 80043de:	f200 80f0 	bhi.w	80045c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80043e2:	a201      	add	r2, pc, #4	@ (adr r2, 80043e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e8:	0800443d 	.word	0x0800443d
 80043ec:	080045c3 	.word	0x080045c3
 80043f0:	080045c3 	.word	0x080045c3
 80043f4:	080045c3 	.word	0x080045c3
 80043f8:	0800447d 	.word	0x0800447d
 80043fc:	080045c3 	.word	0x080045c3
 8004400:	080045c3 	.word	0x080045c3
 8004404:	080045c3 	.word	0x080045c3
 8004408:	080044bf 	.word	0x080044bf
 800440c:	080045c3 	.word	0x080045c3
 8004410:	080045c3 	.word	0x080045c3
 8004414:	080045c3 	.word	0x080045c3
 8004418:	080044ff 	.word	0x080044ff
 800441c:	080045c3 	.word	0x080045c3
 8004420:	080045c3 	.word	0x080045c3
 8004424:	080045c3 	.word	0x080045c3
 8004428:	08004541 	.word	0x08004541
 800442c:	080045c3 	.word	0x080045c3
 8004430:	080045c3 	.word	0x080045c3
 8004434:	080045c3 	.word	0x080045c3
 8004438:	08004581 	.word	0x08004581
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fa60 	bl	8004908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699a      	ldr	r2, [r3, #24]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0208 	orr.w	r2, r2, #8
 8004456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699a      	ldr	r2, [r3, #24]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0204 	bic.w	r2, r2, #4
 8004466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6999      	ldr	r1, [r3, #24]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	691a      	ldr	r2, [r3, #16]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	619a      	str	r2, [r3, #24]
      break;
 800447a:	e0a5      	b.n	80045c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fad0 	bl	8004a28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699a      	ldr	r2, [r3, #24]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6999      	ldr	r1, [r3, #24]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	021a      	lsls	r2, r3, #8
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	619a      	str	r2, [r3, #24]
      break;
 80044bc:	e084      	b.n	80045c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68b9      	ldr	r1, [r7, #8]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 fb39 	bl	8004b3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69da      	ldr	r2, [r3, #28]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0208 	orr.w	r2, r2, #8
 80044d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69da      	ldr	r2, [r3, #28]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0204 	bic.w	r2, r2, #4
 80044e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69d9      	ldr	r1, [r3, #28]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	61da      	str	r2, [r3, #28]
      break;
 80044fc:	e064      	b.n	80045c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fba1 	bl	8004c4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69da      	ldr	r2, [r3, #28]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69d9      	ldr	r1, [r3, #28]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	021a      	lsls	r2, r3, #8
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	61da      	str	r2, [r3, #28]
      break;
 800453e:	e043      	b.n	80045c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68b9      	ldr	r1, [r7, #8]
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fc0a 	bl	8004d60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0208 	orr.w	r2, r2, #8
 800455a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0204 	bic.w	r2, r2, #4
 800456a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800457e:	e023      	b.n	80045c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68b9      	ldr	r1, [r7, #8]
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fc4e 	bl	8004e28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800459a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045aa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	021a      	lsls	r2, r3, #8
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80045c0:	e002      	b.n	80045c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	75fb      	strb	r3, [r7, #23]
      break;
 80045c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop

080045dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_TIM_ConfigClockSource+0x1c>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e0de      	b.n	80047b6 <HAL_TIM_ConfigClockSource+0x1da>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004616:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800461a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004622:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a63      	ldr	r2, [pc, #396]	@ (80047c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	f000 80a9 	beq.w	800478a <HAL_TIM_ConfigClockSource+0x1ae>
 8004638:	4a61      	ldr	r2, [pc, #388]	@ (80047c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	f200 80ae 	bhi.w	800479c <HAL_TIM_ConfigClockSource+0x1c0>
 8004640:	4a60      	ldr	r2, [pc, #384]	@ (80047c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	f000 80a1 	beq.w	800478a <HAL_TIM_ConfigClockSource+0x1ae>
 8004648:	4a5e      	ldr	r2, [pc, #376]	@ (80047c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	f200 80a6 	bhi.w	800479c <HAL_TIM_ConfigClockSource+0x1c0>
 8004650:	4a5d      	ldr	r2, [pc, #372]	@ (80047c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004652:	4293      	cmp	r3, r2
 8004654:	f000 8099 	beq.w	800478a <HAL_TIM_ConfigClockSource+0x1ae>
 8004658:	4a5b      	ldr	r2, [pc, #364]	@ (80047c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800465a:	4293      	cmp	r3, r2
 800465c:	f200 809e 	bhi.w	800479c <HAL_TIM_ConfigClockSource+0x1c0>
 8004660:	4a5a      	ldr	r2, [pc, #360]	@ (80047cc <HAL_TIM_ConfigClockSource+0x1f0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	f000 8091 	beq.w	800478a <HAL_TIM_ConfigClockSource+0x1ae>
 8004668:	4a58      	ldr	r2, [pc, #352]	@ (80047cc <HAL_TIM_ConfigClockSource+0x1f0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	f200 8096 	bhi.w	800479c <HAL_TIM_ConfigClockSource+0x1c0>
 8004670:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004674:	f000 8089 	beq.w	800478a <HAL_TIM_ConfigClockSource+0x1ae>
 8004678:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800467c:	f200 808e 	bhi.w	800479c <HAL_TIM_ConfigClockSource+0x1c0>
 8004680:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004684:	d03e      	beq.n	8004704 <HAL_TIM_ConfigClockSource+0x128>
 8004686:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800468a:	f200 8087 	bhi.w	800479c <HAL_TIM_ConfigClockSource+0x1c0>
 800468e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004692:	f000 8086 	beq.w	80047a2 <HAL_TIM_ConfigClockSource+0x1c6>
 8004696:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800469a:	d87f      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x1c0>
 800469c:	2b70      	cmp	r3, #112	@ 0x70
 800469e:	d01a      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0xfa>
 80046a0:	2b70      	cmp	r3, #112	@ 0x70
 80046a2:	d87b      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x1c0>
 80046a4:	2b60      	cmp	r3, #96	@ 0x60
 80046a6:	d050      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x16e>
 80046a8:	2b60      	cmp	r3, #96	@ 0x60
 80046aa:	d877      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x1c0>
 80046ac:	2b50      	cmp	r3, #80	@ 0x50
 80046ae:	d03c      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x14e>
 80046b0:	2b50      	cmp	r3, #80	@ 0x50
 80046b2:	d873      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x1c0>
 80046b4:	2b40      	cmp	r3, #64	@ 0x40
 80046b6:	d058      	beq.n	800476a <HAL_TIM_ConfigClockSource+0x18e>
 80046b8:	2b40      	cmp	r3, #64	@ 0x40
 80046ba:	d86f      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x1c0>
 80046bc:	2b30      	cmp	r3, #48	@ 0x30
 80046be:	d064      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x1ae>
 80046c0:	2b30      	cmp	r3, #48	@ 0x30
 80046c2:	d86b      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x1c0>
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d060      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x1ae>
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d867      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x1c0>
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d05c      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x1ae>
 80046d0:	2b10      	cmp	r3, #16
 80046d2:	d05a      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x1ae>
 80046d4:	e062      	b.n	800479c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046e6:	f000 fc81 	bl	8004fec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	609a      	str	r2, [r3, #8]
      break;
 8004702:	e04f      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004714:	f000 fc6a 	bl	8004fec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004726:	609a      	str	r2, [r3, #8]
      break;
 8004728:	e03c      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004736:	461a      	mov	r2, r3
 8004738:	f000 fbdc 	bl	8004ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2150      	movs	r1, #80	@ 0x50
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fc35 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004748:	e02c      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004756:	461a      	mov	r2, r3
 8004758:	f000 fbfb 	bl	8004f52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2160      	movs	r1, #96	@ 0x60
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fc25 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004768:	e01c      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004776:	461a      	mov	r2, r3
 8004778:	f000 fbbc 	bl	8004ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2140      	movs	r1, #64	@ 0x40
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fc15 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004788:	e00c      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4619      	mov	r1, r3
 8004794:	4610      	mov	r0, r2
 8004796:	f000 fc0c 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 800479a:	e003      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
      break;
 80047a0:	e000      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80047a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	00100070 	.word	0x00100070
 80047c4:	00100040 	.word	0x00100040
 80047c8:	00100030 	.word	0x00100030
 80047cc:	00100020 	.word	0x00100020

080047d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a42      	ldr	r2, [pc, #264]	@ (80048ec <TIM_Base_SetConfig+0x11c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00f      	beq.n	8004808 <TIM_Base_SetConfig+0x38>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047ee:	d00b      	beq.n	8004808 <TIM_Base_SetConfig+0x38>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a3f      	ldr	r2, [pc, #252]	@ (80048f0 <TIM_Base_SetConfig+0x120>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d007      	beq.n	8004808 <TIM_Base_SetConfig+0x38>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a3e      	ldr	r2, [pc, #248]	@ (80048f4 <TIM_Base_SetConfig+0x124>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <TIM_Base_SetConfig+0x38>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a3d      	ldr	r2, [pc, #244]	@ (80048f8 <TIM_Base_SetConfig+0x128>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d108      	bne.n	800481a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800480e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a33      	ldr	r2, [pc, #204]	@ (80048ec <TIM_Base_SetConfig+0x11c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d01b      	beq.n	800485a <TIM_Base_SetConfig+0x8a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004828:	d017      	beq.n	800485a <TIM_Base_SetConfig+0x8a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a30      	ldr	r2, [pc, #192]	@ (80048f0 <TIM_Base_SetConfig+0x120>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d013      	beq.n	800485a <TIM_Base_SetConfig+0x8a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a2f      	ldr	r2, [pc, #188]	@ (80048f4 <TIM_Base_SetConfig+0x124>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00f      	beq.n	800485a <TIM_Base_SetConfig+0x8a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a2e      	ldr	r2, [pc, #184]	@ (80048f8 <TIM_Base_SetConfig+0x128>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00b      	beq.n	800485a <TIM_Base_SetConfig+0x8a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a2d      	ldr	r2, [pc, #180]	@ (80048fc <TIM_Base_SetConfig+0x12c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d007      	beq.n	800485a <TIM_Base_SetConfig+0x8a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a2c      	ldr	r2, [pc, #176]	@ (8004900 <TIM_Base_SetConfig+0x130>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d003      	beq.n	800485a <TIM_Base_SetConfig+0x8a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2b      	ldr	r2, [pc, #172]	@ (8004904 <TIM_Base_SetConfig+0x134>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d108      	bne.n	800486c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a16      	ldr	r2, [pc, #88]	@ (80048ec <TIM_Base_SetConfig+0x11c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d00f      	beq.n	80048b8 <TIM_Base_SetConfig+0xe8>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a17      	ldr	r2, [pc, #92]	@ (80048f8 <TIM_Base_SetConfig+0x128>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00b      	beq.n	80048b8 <TIM_Base_SetConfig+0xe8>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a16      	ldr	r2, [pc, #88]	@ (80048fc <TIM_Base_SetConfig+0x12c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d007      	beq.n	80048b8 <TIM_Base_SetConfig+0xe8>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a15      	ldr	r2, [pc, #84]	@ (8004900 <TIM_Base_SetConfig+0x130>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d003      	beq.n	80048b8 <TIM_Base_SetConfig+0xe8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a14      	ldr	r2, [pc, #80]	@ (8004904 <TIM_Base_SetConfig+0x134>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d103      	bne.n	80048c0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d105      	bne.n	80048de <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f023 0201 	bic.w	r2, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	611a      	str	r2, [r3, #16]
  }
}
 80048de:	bf00      	nop
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40012c00 	.word	0x40012c00
 80048f0:	40000400 	.word	0x40000400
 80048f4:	40000800 	.word	0x40000800
 80048f8:	40013400 	.word	0x40013400
 80048fc:	40014000 	.word	0x40014000
 8004900:	40014400 	.word	0x40014400
 8004904:	40014800 	.word	0x40014800

08004908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	f023 0201 	bic.w	r2, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800493a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0303 	bic.w	r3, r3, #3
 8004942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f023 0302 	bic.w	r3, r3, #2
 8004954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a2c      	ldr	r2, [pc, #176]	@ (8004a14 <TIM_OC1_SetConfig+0x10c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00f      	beq.n	8004988 <TIM_OC1_SetConfig+0x80>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a2b      	ldr	r2, [pc, #172]	@ (8004a18 <TIM_OC1_SetConfig+0x110>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00b      	beq.n	8004988 <TIM_OC1_SetConfig+0x80>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a2a      	ldr	r2, [pc, #168]	@ (8004a1c <TIM_OC1_SetConfig+0x114>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d007      	beq.n	8004988 <TIM_OC1_SetConfig+0x80>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a29      	ldr	r2, [pc, #164]	@ (8004a20 <TIM_OC1_SetConfig+0x118>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d003      	beq.n	8004988 <TIM_OC1_SetConfig+0x80>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a28      	ldr	r2, [pc, #160]	@ (8004a24 <TIM_OC1_SetConfig+0x11c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d10c      	bne.n	80049a2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f023 0308 	bic.w	r3, r3, #8
 800498e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f023 0304 	bic.w	r3, r3, #4
 80049a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004a14 <TIM_OC1_SetConfig+0x10c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00f      	beq.n	80049ca <TIM_OC1_SetConfig+0xc2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004a18 <TIM_OC1_SetConfig+0x110>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00b      	beq.n	80049ca <TIM_OC1_SetConfig+0xc2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a19      	ldr	r2, [pc, #100]	@ (8004a1c <TIM_OC1_SetConfig+0x114>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d007      	beq.n	80049ca <TIM_OC1_SetConfig+0xc2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a18      	ldr	r2, [pc, #96]	@ (8004a20 <TIM_OC1_SetConfig+0x118>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d003      	beq.n	80049ca <TIM_OC1_SetConfig+0xc2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a17      	ldr	r2, [pc, #92]	@ (8004a24 <TIM_OC1_SetConfig+0x11c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d111      	bne.n	80049ee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	621a      	str	r2, [r3, #32]
}
 8004a08:	bf00      	nop
 8004a0a:	371c      	adds	r7, #28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	40012c00 	.word	0x40012c00
 8004a18:	40013400 	.word	0x40013400
 8004a1c:	40014000 	.word	0x40014000
 8004a20:	40014400 	.word	0x40014400
 8004a24:	40014800 	.word	0x40014800

08004a28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f023 0210 	bic.w	r2, r3, #16
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f023 0320 	bic.w	r3, r3, #32
 8004a76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a28      	ldr	r2, [pc, #160]	@ (8004b28 <TIM_OC2_SetConfig+0x100>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d003      	beq.n	8004a94 <TIM_OC2_SetConfig+0x6c>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a27      	ldr	r2, [pc, #156]	@ (8004b2c <TIM_OC2_SetConfig+0x104>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d10d      	bne.n	8004ab0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	011b      	lsls	r3, r3, #4
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a1d      	ldr	r2, [pc, #116]	@ (8004b28 <TIM_OC2_SetConfig+0x100>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d00f      	beq.n	8004ad8 <TIM_OC2_SetConfig+0xb0>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a1c      	ldr	r2, [pc, #112]	@ (8004b2c <TIM_OC2_SetConfig+0x104>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00b      	beq.n	8004ad8 <TIM_OC2_SetConfig+0xb0>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8004b30 <TIM_OC2_SetConfig+0x108>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d007      	beq.n	8004ad8 <TIM_OC2_SetConfig+0xb0>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a1a      	ldr	r2, [pc, #104]	@ (8004b34 <TIM_OC2_SetConfig+0x10c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d003      	beq.n	8004ad8 <TIM_OC2_SetConfig+0xb0>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a19      	ldr	r2, [pc, #100]	@ (8004b38 <TIM_OC2_SetConfig+0x110>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d113      	bne.n	8004b00 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ade:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	621a      	str	r2, [r3, #32]
}
 8004b1a:	bf00      	nop
 8004b1c:	371c      	adds	r7, #28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40012c00 	.word	0x40012c00
 8004b2c:	40013400 	.word	0x40013400
 8004b30:	40014000 	.word	0x40014000
 8004b34:	40014400 	.word	0x40014400
 8004b38:	40014800 	.word	0x40014800

08004b3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 0303 	bic.w	r3, r3, #3
 8004b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a27      	ldr	r2, [pc, #156]	@ (8004c38 <TIM_OC3_SetConfig+0xfc>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d003      	beq.n	8004ba6 <TIM_OC3_SetConfig+0x6a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a26      	ldr	r2, [pc, #152]	@ (8004c3c <TIM_OC3_SetConfig+0x100>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d10d      	bne.n	8004bc2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c38 <TIM_OC3_SetConfig+0xfc>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00f      	beq.n	8004bea <TIM_OC3_SetConfig+0xae>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8004c3c <TIM_OC3_SetConfig+0x100>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00b      	beq.n	8004bea <TIM_OC3_SetConfig+0xae>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8004c40 <TIM_OC3_SetConfig+0x104>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d007      	beq.n	8004bea <TIM_OC3_SetConfig+0xae>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a19      	ldr	r2, [pc, #100]	@ (8004c44 <TIM_OC3_SetConfig+0x108>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d003      	beq.n	8004bea <TIM_OC3_SetConfig+0xae>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a18      	ldr	r2, [pc, #96]	@ (8004c48 <TIM_OC3_SetConfig+0x10c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d113      	bne.n	8004c12 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	621a      	str	r2, [r3, #32]
}
 8004c2c:	bf00      	nop
 8004c2e:	371c      	adds	r7, #28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	40012c00 	.word	0x40012c00
 8004c3c:	40013400 	.word	0x40013400
 8004c40:	40014000 	.word	0x40014000
 8004c44:	40014400 	.word	0x40014400
 8004c48:	40014800 	.word	0x40014800

08004c4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	031b      	lsls	r3, r3, #12
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a28      	ldr	r2, [pc, #160]	@ (8004d4c <TIM_OC4_SetConfig+0x100>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d003      	beq.n	8004cb8 <TIM_OC4_SetConfig+0x6c>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a27      	ldr	r2, [pc, #156]	@ (8004d50 <TIM_OC4_SetConfig+0x104>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d10d      	bne.n	8004cd4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	031b      	lsls	r3, r3, #12
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8004d4c <TIM_OC4_SetConfig+0x100>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d00f      	beq.n	8004cfc <TIM_OC4_SetConfig+0xb0>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a1c      	ldr	r2, [pc, #112]	@ (8004d50 <TIM_OC4_SetConfig+0x104>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00b      	beq.n	8004cfc <TIM_OC4_SetConfig+0xb0>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d54 <TIM_OC4_SetConfig+0x108>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d007      	beq.n	8004cfc <TIM_OC4_SetConfig+0xb0>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a1a      	ldr	r2, [pc, #104]	@ (8004d58 <TIM_OC4_SetConfig+0x10c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <TIM_OC4_SetConfig+0xb0>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a19      	ldr	r2, [pc, #100]	@ (8004d5c <TIM_OC4_SetConfig+0x110>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d113      	bne.n	8004d24 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d02:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004d0a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	019b      	lsls	r3, r3, #6
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	019b      	lsls	r3, r3, #6
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	621a      	str	r2, [r3, #32]
}
 8004d3e:	bf00      	nop
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40012c00 	.word	0x40012c00
 8004d50:	40013400 	.word	0x40013400
 8004d54:	40014000 	.word	0x40014000
 8004d58:	40014400 	.word	0x40014400
 8004d5c:	40014800 	.word	0x40014800

08004d60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004da4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	041b      	lsls	r3, r3, #16
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a17      	ldr	r2, [pc, #92]	@ (8004e14 <TIM_OC5_SetConfig+0xb4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00f      	beq.n	8004dda <TIM_OC5_SetConfig+0x7a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a16      	ldr	r2, [pc, #88]	@ (8004e18 <TIM_OC5_SetConfig+0xb8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00b      	beq.n	8004dda <TIM_OC5_SetConfig+0x7a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a15      	ldr	r2, [pc, #84]	@ (8004e1c <TIM_OC5_SetConfig+0xbc>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d007      	beq.n	8004dda <TIM_OC5_SetConfig+0x7a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a14      	ldr	r2, [pc, #80]	@ (8004e20 <TIM_OC5_SetConfig+0xc0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d003      	beq.n	8004dda <TIM_OC5_SetConfig+0x7a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a13      	ldr	r2, [pc, #76]	@ (8004e24 <TIM_OC5_SetConfig+0xc4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d109      	bne.n	8004dee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004de0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	621a      	str	r2, [r3, #32]
}
 8004e08:	bf00      	nop
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	40012c00 	.word	0x40012c00
 8004e18:	40013400 	.word	0x40013400
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	40014400 	.word	0x40014400
 8004e24:	40014800 	.word	0x40014800

08004e28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	051b      	lsls	r3, r3, #20
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a18      	ldr	r2, [pc, #96]	@ (8004ee0 <TIM_OC6_SetConfig+0xb8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00f      	beq.n	8004ea4 <TIM_OC6_SetConfig+0x7c>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a17      	ldr	r2, [pc, #92]	@ (8004ee4 <TIM_OC6_SetConfig+0xbc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00b      	beq.n	8004ea4 <TIM_OC6_SetConfig+0x7c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a16      	ldr	r2, [pc, #88]	@ (8004ee8 <TIM_OC6_SetConfig+0xc0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d007      	beq.n	8004ea4 <TIM_OC6_SetConfig+0x7c>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a15      	ldr	r2, [pc, #84]	@ (8004eec <TIM_OC6_SetConfig+0xc4>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <TIM_OC6_SetConfig+0x7c>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a14      	ldr	r2, [pc, #80]	@ (8004ef0 <TIM_OC6_SetConfig+0xc8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d109      	bne.n	8004eb8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	029b      	lsls	r3, r3, #10
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	621a      	str	r2, [r3, #32]
}
 8004ed2:	bf00      	nop
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40012c00 	.word	0x40012c00
 8004ee4:	40013400 	.word	0x40013400
 8004ee8:	40014000 	.word	0x40014000
 8004eec:	40014400 	.word	0x40014400
 8004ef0:	40014800 	.word	0x40014800

08004ef4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	f023 0201 	bic.w	r2, r3, #1
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f023 030a 	bic.w	r3, r3, #10
 8004f30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	621a      	str	r2, [r3, #32]
}
 8004f46:	bf00      	nop
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b087      	sub	sp, #28
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	f023 0210 	bic.w	r2, r3, #16
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	031b      	lsls	r3, r3, #12
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	621a      	str	r2, [r3, #32]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004fc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f043 0307 	orr.w	r3, r3, #7
 8004fd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	609a      	str	r2, [r3, #8]
}
 8004fe0:	bf00      	nop
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005006:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	021a      	lsls	r2, r3, #8
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	431a      	orrs	r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4313      	orrs	r3, r2
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	609a      	str	r2, [r3, #8]
}
 8005020:	bf00      	nop
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f003 031f 	and.w	r3, r3, #31
 800503e:	2201      	movs	r2, #1
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a1a      	ldr	r2, [r3, #32]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	43db      	mvns	r3, r3
 800504e:	401a      	ands	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a1a      	ldr	r2, [r3, #32]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f003 031f 	and.w	r3, r3, #31
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	fa01 f303 	lsl.w	r3, r1, r3
 8005064:	431a      	orrs	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	621a      	str	r2, [r3, #32]
}
 800506a:	bf00      	nop
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800508c:	2302      	movs	r3, #2
 800508e:	e065      	b.n	800515c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005168 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d004      	beq.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a2b      	ldr	r2, [pc, #172]	@ (800516c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d108      	bne.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80050ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80050dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005168 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d018      	beq.n	8005130 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005106:	d013      	beq.n	8005130 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a18      	ldr	r2, [pc, #96]	@ (8005170 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00e      	beq.n	8005130 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a17      	ldr	r2, [pc, #92]	@ (8005174 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d009      	beq.n	8005130 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a12      	ldr	r2, [pc, #72]	@ (800516c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d004      	beq.n	8005130 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a13      	ldr	r2, [pc, #76]	@ (8005178 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d10c      	bne.n	800514a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005136:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	4313      	orrs	r3, r2
 8005140:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	40012c00 	.word	0x40012c00
 800516c:	40013400 	.word	0x40013400
 8005170:	40000400 	.word	0x40000400
 8005174:	40000800 	.word	0x40000800
 8005178:	40014000 	.word	0x40014000

0800517c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005194:	2302      	movs	r3, #2
 8005196:	e073      	b.n	8005280 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	041b      	lsls	r3, r3, #16
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a19      	ldr	r2, [pc, #100]	@ (800528c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d004      	beq.n	8005234 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a18      	ldr	r2, [pc, #96]	@ (8005290 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d11c      	bne.n	800526e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523e:	051b      	lsls	r3, r3, #20
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	40012c00 	.word	0x40012c00
 8005290:	40013400 	.word	0x40013400

08005294 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e042      	b.n	800532c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d106      	bne.n	80052be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7fc fa19 	bl	80016f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2224      	movs	r2, #36	@ 0x24
 80052c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0201 	bic.w	r2, r2, #1
 80052d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 ff30 	bl	8006144 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fc61 	bl	8005bac <UART_SetConfig>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d101      	bne.n	80052f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e01b      	b.n	800532c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005302:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005312:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0201 	orr.w	r2, r2, #1
 8005322:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 ffaf 	bl	8006288 <UART_CheckIdleState>
 800532a:	4603      	mov	r3, r0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08a      	sub	sp, #40	@ 0x28
 8005338:	af02      	add	r7, sp, #8
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	4613      	mov	r3, r2
 8005342:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800534a:	2b20      	cmp	r3, #32
 800534c:	d17b      	bne.n	8005446 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <HAL_UART_Transmit+0x26>
 8005354:	88fb      	ldrh	r3, [r7, #6]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e074      	b.n	8005448 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2221      	movs	r2, #33	@ 0x21
 800536a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800536e:	f7fc fc61 	bl	8001c34 <HAL_GetTick>
 8005372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	88fa      	ldrh	r2, [r7, #6]
 8005378:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	88fa      	ldrh	r2, [r7, #6]
 8005380:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800538c:	d108      	bne.n	80053a0 <HAL_UART_Transmit+0x6c>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d104      	bne.n	80053a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005396:	2300      	movs	r3, #0
 8005398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	61bb      	str	r3, [r7, #24]
 800539e:	e003      	b.n	80053a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053a4:	2300      	movs	r3, #0
 80053a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053a8:	e030      	b.n	800540c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2200      	movs	r2, #0
 80053b2:	2180      	movs	r1, #128	@ 0x80
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f001 f811 	bl	80063dc <UART_WaitOnFlagUntilTimeout>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e03d      	b.n	8005448 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10b      	bne.n	80053ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	3302      	adds	r3, #2
 80053e6:	61bb      	str	r3, [r7, #24]
 80053e8:	e007      	b.n	80053fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	781a      	ldrb	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	3301      	adds	r3, #1
 80053f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005400:	b29b      	uxth	r3, r3
 8005402:	3b01      	subs	r3, #1
 8005404:	b29a      	uxth	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1c8      	bne.n	80053aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2200      	movs	r2, #0
 8005420:	2140      	movs	r1, #64	@ 0x40
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 ffda 	bl	80063dc <UART_WaitOnFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d005      	beq.n	800543a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2220      	movs	r2, #32
 8005432:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e006      	b.n	8005448 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2220      	movs	r2, #32
 800543e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	e000      	b.n	8005448 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005446:	2302      	movs	r3, #2
  }
}
 8005448:	4618      	mov	r0, r3
 800544a:	3720      	adds	r7, #32
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b08a      	sub	sp, #40	@ 0x28
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	4613      	mov	r3, r2
 800545c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005464:	2b20      	cmp	r3, #32
 8005466:	d137      	bne.n	80054d8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <HAL_UART_Receive_IT+0x24>
 800546e:	88fb      	ldrh	r3, [r7, #6]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e030      	b.n	80054da <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a18      	ldr	r2, [pc, #96]	@ (80054e4 <HAL_UART_Receive_IT+0x94>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d01f      	beq.n	80054c8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d018      	beq.n	80054c8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	613b      	str	r3, [r7, #16]
   return(result);
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	461a      	mov	r2, r3
 80054b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b4:	623b      	str	r3, [r7, #32]
 80054b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	69f9      	ldr	r1, [r7, #28]
 80054ba:	6a3a      	ldr	r2, [r7, #32]
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e6      	bne.n	8005496 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054c8:	88fb      	ldrh	r3, [r7, #6]
 80054ca:	461a      	mov	r2, r3
 80054cc:	68b9      	ldr	r1, [r7, #8]
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 fff2 	bl	80064b8 <UART_Start_Receive_IT>
 80054d4:	4603      	mov	r3, r0
 80054d6:	e000      	b.n	80054da <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054d8:	2302      	movs	r3, #2
  }
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3728      	adds	r7, #40	@ 0x28
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40008000 	.word	0x40008000

080054e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b0ba      	sub	sp, #232	@ 0xe8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800550e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005512:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005516:	4013      	ands	r3, r2
 8005518:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800551c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d11b      	bne.n	800555c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005528:	f003 0320 	and.w	r3, r3, #32
 800552c:	2b00      	cmp	r3, #0
 800552e:	d015      	beq.n	800555c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005534:	f003 0320 	and.w	r3, r3, #32
 8005538:	2b00      	cmp	r3, #0
 800553a:	d105      	bne.n	8005548 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800553c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d009      	beq.n	800555c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 8300 	beq.w	8005b52 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	4798      	blx	r3
      }
      return;
 800555a:	e2fa      	b.n	8005b52 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800555c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 8123 	beq.w	80057ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005566:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800556a:	4b8d      	ldr	r3, [pc, #564]	@ (80057a0 <HAL_UART_IRQHandler+0x2b8>)
 800556c:	4013      	ands	r3, r2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005572:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005576:	4b8b      	ldr	r3, [pc, #556]	@ (80057a4 <HAL_UART_IRQHandler+0x2bc>)
 8005578:	4013      	ands	r3, r2
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 8116 	beq.w	80057ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d011      	beq.n	80055b0 <HAL_UART_IRQHandler+0xc8>
 800558c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00b      	beq.n	80055b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2201      	movs	r2, #1
 800559e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a6:	f043 0201 	orr.w	r2, r3, #1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d011      	beq.n	80055e0 <HAL_UART_IRQHandler+0xf8>
 80055bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00b      	beq.n	80055e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2202      	movs	r2, #2
 80055ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d6:	f043 0204 	orr.w	r2, r3, #4
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d011      	beq.n	8005610 <HAL_UART_IRQHandler+0x128>
 80055ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00b      	beq.n	8005610 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2204      	movs	r2, #4
 80055fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005606:	f043 0202 	orr.w	r2, r3, #2
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005614:	f003 0308 	and.w	r3, r3, #8
 8005618:	2b00      	cmp	r3, #0
 800561a:	d017      	beq.n	800564c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800561c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b00      	cmp	r3, #0
 8005626:	d105      	bne.n	8005634 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005628:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800562c:	4b5c      	ldr	r3, [pc, #368]	@ (80057a0 <HAL_UART_IRQHandler+0x2b8>)
 800562e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00b      	beq.n	800564c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2208      	movs	r2, #8
 800563a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005642:	f043 0208 	orr.w	r2, r3, #8
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800564c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005650:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005654:	2b00      	cmp	r3, #0
 8005656:	d012      	beq.n	800567e <HAL_UART_IRQHandler+0x196>
 8005658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800565c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00c      	beq.n	800567e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800566c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005674:	f043 0220 	orr.w	r2, r3, #32
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 8266 	beq.w	8005b56 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800568a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b00      	cmp	r3, #0
 8005694:	d013      	beq.n	80056be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d105      	bne.n	80056ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d007      	beq.n	80056be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d2:	2b40      	cmp	r3, #64	@ 0x40
 80056d4:	d005      	beq.n	80056e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d054      	beq.n	800578c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f001 f80a 	bl	80066fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f2:	2b40      	cmp	r3, #64	@ 0x40
 80056f4:	d146      	bne.n	8005784 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3308      	adds	r3, #8
 80056fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800570c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005710:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005714:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3308      	adds	r3, #8
 800571e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005722:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005726:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800572e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005732:	e841 2300 	strex	r3, r2, [r1]
 8005736:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800573a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1d9      	bne.n	80056f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005748:	2b00      	cmp	r3, #0
 800574a:	d017      	beq.n	800577c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005752:	4a15      	ldr	r2, [pc, #84]	@ (80057a8 <HAL_UART_IRQHandler+0x2c0>)
 8005754:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800575c:	4618      	mov	r0, r3
 800575e:	f7fc fbff 	bl	8001f60 <HAL_DMA_Abort_IT>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d019      	beq.n	800579c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800576e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005776:	4610      	mov	r0, r2
 8005778:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800577a:	e00f      	b.n	800579c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f9ff 	bl	8005b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005782:	e00b      	b.n	800579c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f9fb 	bl	8005b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800578a:	e007      	b.n	800579c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f9f7 	bl	8005b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800579a:	e1dc      	b.n	8005b56 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800579c:	bf00      	nop
    return;
 800579e:	e1da      	b.n	8005b56 <HAL_UART_IRQHandler+0x66e>
 80057a0:	10000001 	.word	0x10000001
 80057a4:	04000120 	.word	0x04000120
 80057a8:	080067c9 	.word	0x080067c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	f040 8170 	bne.w	8005a96 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80057b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ba:	f003 0310 	and.w	r3, r3, #16
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 8169 	beq.w	8005a96 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057c8:	f003 0310 	and.w	r3, r3, #16
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 8162 	beq.w	8005a96 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2210      	movs	r2, #16
 80057d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e4:	2b40      	cmp	r3, #64	@ 0x40
 80057e6:	f040 80d8 	bne.w	800599a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 80af 	beq.w	8005960 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005808:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800580c:	429a      	cmp	r2, r3
 800580e:	f080 80a7 	bcs.w	8005960 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005818:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b00      	cmp	r3, #0
 800582c:	f040 8087 	bne.w	800593e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005844:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800584c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800585a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800585e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005866:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800586a:	e841 2300 	strex	r3, r2, [r1]
 800586e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005872:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1da      	bne.n	8005830 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3308      	adds	r3, #8
 8005880:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005882:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800588a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800588c:	f023 0301 	bic.w	r3, r3, #1
 8005890:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3308      	adds	r3, #8
 800589a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800589e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80058a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80058a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80058b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e1      	bne.n	800587a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3308      	adds	r3, #8
 80058bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80058c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3308      	adds	r3, #8
 80058d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80058da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80058dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80058e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80058e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e3      	bne.n	80058b6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005904:	e853 3f00 	ldrex	r3, [r3]
 8005908:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800590a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800590c:	f023 0310 	bic.w	r3, r3, #16
 8005910:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
 800591a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800591e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005920:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005922:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005924:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005926:	e841 2300 	strex	r3, r2, [r1]
 800592a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800592c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1e4      	bne.n	80058fc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005938:	4618      	mov	r0, r3
 800593a:	f7fc fab8 	bl	8001eae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2202      	movs	r2, #2
 8005942:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005950:	b29b      	uxth	r3, r3
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	b29b      	uxth	r3, r3
 8005956:	4619      	mov	r1, r3
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f91b 	bl	8005b94 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800595e:	e0fc      	b.n	8005b5a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800596a:	429a      	cmp	r2, r3
 800596c:	f040 80f5 	bne.w	8005b5a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0320 	and.w	r3, r3, #32
 800597e:	2b20      	cmp	r3, #32
 8005980:	f040 80eb 	bne.w	8005b5a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005990:	4619      	mov	r1, r3
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f8fe 	bl	8005b94 <HAL_UARTEx_RxEventCallback>
      return;
 8005998:	e0df      	b.n	8005b5a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 80d1 	beq.w	8005b5e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80059bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 80cc 	beq.w	8005b5e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ce:	e853 3f00 	ldrex	r3, [r3]
 80059d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	461a      	mov	r2, r3
 80059e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80059e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80059ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e4      	bne.n	80059c6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3308      	adds	r3, #8
 8005a02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	623b      	str	r3, [r7, #32]
   return(result);
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a12:	f023 0301 	bic.w	r3, r3, #1
 8005a16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3308      	adds	r3, #8
 8005a20:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a24:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a2c:	e841 2300 	strex	r3, r2, [r1]
 8005a30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1e1      	bne.n	80059fc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	e853 3f00 	ldrex	r3, [r3]
 8005a58:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f023 0310 	bic.w	r3, r3, #16
 8005a60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005a6e:	61fb      	str	r3, [r7, #28]
 8005a70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	69b9      	ldr	r1, [r7, #24]
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	e841 2300 	strex	r3, r2, [r1]
 8005a7a:	617b      	str	r3, [r7, #20]
   return(result);
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e4      	bne.n	8005a4c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2202      	movs	r2, #2
 8005a86:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f880 	bl	8005b94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a94:	e063      	b.n	8005b5e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00e      	beq.n	8005ac0 <HAL_UART_IRQHandler+0x5d8>
 8005aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d008      	beq.n	8005ac0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005ab6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f001 fbe3 	bl	8007284 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005abe:	e051      	b.n	8005b64 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d014      	beq.n	8005af6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d105      	bne.n	8005ae4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005adc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d008      	beq.n	8005af6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d03a      	beq.n	8005b62 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	4798      	blx	r3
    }
    return;
 8005af4:	e035      	b.n	8005b62 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d009      	beq.n	8005b16 <HAL_UART_IRQHandler+0x62e>
 8005b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fe6c 	bl	80067ec <UART_EndTransmit_IT>
    return;
 8005b14:	e026      	b.n	8005b64 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d009      	beq.n	8005b36 <HAL_UART_IRQHandler+0x64e>
 8005b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b26:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f001 fbbc 	bl	80072ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b34:	e016      	b.n	8005b64 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d010      	beq.n	8005b64 <HAL_UART_IRQHandler+0x67c>
 8005b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	da0c      	bge.n	8005b64 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f001 fba4 	bl	8007298 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b50:	e008      	b.n	8005b64 <HAL_UART_IRQHandler+0x67c>
      return;
 8005b52:	bf00      	nop
 8005b54:	e006      	b.n	8005b64 <HAL_UART_IRQHandler+0x67c>
    return;
 8005b56:	bf00      	nop
 8005b58:	e004      	b.n	8005b64 <HAL_UART_IRQHandler+0x67c>
      return;
 8005b5a:	bf00      	nop
 8005b5c:	e002      	b.n	8005b64 <HAL_UART_IRQHandler+0x67c>
      return;
 8005b5e:	bf00      	nop
 8005b60:	e000      	b.n	8005b64 <HAL_UART_IRQHandler+0x67c>
    return;
 8005b62:	bf00      	nop
  }
}
 8005b64:	37e8      	adds	r7, #232	@ 0xe8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop

08005b6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bb0:	b08c      	sub	sp, #48	@ 0x30
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	4bab      	ldr	r3, [pc, #684]	@ (8005e88 <UART_SetConfig+0x2dc>)
 8005bdc:	4013      	ands	r3, r2
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	6812      	ldr	r2, [r2, #0]
 8005be2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005be4:	430b      	orrs	r3, r1
 8005be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4aa0      	ldr	r2, [pc, #640]	@ (8005e8c <UART_SetConfig+0x2e0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d004      	beq.n	8005c18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c14:	4313      	orrs	r3, r2
 8005c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005c22:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	6812      	ldr	r2, [r2, #0]
 8005c2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c36:	f023 010f 	bic.w	r1, r3, #15
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a91      	ldr	r2, [pc, #580]	@ (8005e90 <UART_SetConfig+0x2e4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d125      	bne.n	8005c9c <UART_SetConfig+0xf0>
 8005c50:	4b90      	ldr	r3, [pc, #576]	@ (8005e94 <UART_SetConfig+0x2e8>)
 8005c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d81a      	bhi.n	8005c94 <UART_SetConfig+0xe8>
 8005c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c64 <UART_SetConfig+0xb8>)
 8005c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c64:	08005c75 	.word	0x08005c75
 8005c68:	08005c85 	.word	0x08005c85
 8005c6c:	08005c7d 	.word	0x08005c7d
 8005c70:	08005c8d 	.word	0x08005c8d
 8005c74:	2301      	movs	r3, #1
 8005c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c7a:	e0d6      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c82:	e0d2      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005c84:	2304      	movs	r3, #4
 8005c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c8a:	e0ce      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005c8c:	2308      	movs	r3, #8
 8005c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c92:	e0ca      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005c94:	2310      	movs	r3, #16
 8005c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c9a:	e0c6      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a7d      	ldr	r2, [pc, #500]	@ (8005e98 <UART_SetConfig+0x2ec>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d138      	bne.n	8005d18 <UART_SetConfig+0x16c>
 8005ca6:	4b7b      	ldr	r3, [pc, #492]	@ (8005e94 <UART_SetConfig+0x2e8>)
 8005ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cac:	f003 030c 	and.w	r3, r3, #12
 8005cb0:	2b0c      	cmp	r3, #12
 8005cb2:	d82d      	bhi.n	8005d10 <UART_SetConfig+0x164>
 8005cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8005cbc <UART_SetConfig+0x110>)
 8005cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cba:	bf00      	nop
 8005cbc:	08005cf1 	.word	0x08005cf1
 8005cc0:	08005d11 	.word	0x08005d11
 8005cc4:	08005d11 	.word	0x08005d11
 8005cc8:	08005d11 	.word	0x08005d11
 8005ccc:	08005d01 	.word	0x08005d01
 8005cd0:	08005d11 	.word	0x08005d11
 8005cd4:	08005d11 	.word	0x08005d11
 8005cd8:	08005d11 	.word	0x08005d11
 8005cdc:	08005cf9 	.word	0x08005cf9
 8005ce0:	08005d11 	.word	0x08005d11
 8005ce4:	08005d11 	.word	0x08005d11
 8005ce8:	08005d11 	.word	0x08005d11
 8005cec:	08005d09 	.word	0x08005d09
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cf6:	e098      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cfe:	e094      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005d00:	2304      	movs	r3, #4
 8005d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d06:	e090      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005d08:	2308      	movs	r3, #8
 8005d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d0e:	e08c      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005d10:	2310      	movs	r3, #16
 8005d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d16:	e088      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a5f      	ldr	r2, [pc, #380]	@ (8005e9c <UART_SetConfig+0x2f0>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d125      	bne.n	8005d6e <UART_SetConfig+0x1c2>
 8005d22:	4b5c      	ldr	r3, [pc, #368]	@ (8005e94 <UART_SetConfig+0x2e8>)
 8005d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d28:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d2c:	2b30      	cmp	r3, #48	@ 0x30
 8005d2e:	d016      	beq.n	8005d5e <UART_SetConfig+0x1b2>
 8005d30:	2b30      	cmp	r3, #48	@ 0x30
 8005d32:	d818      	bhi.n	8005d66 <UART_SetConfig+0x1ba>
 8005d34:	2b20      	cmp	r3, #32
 8005d36:	d00a      	beq.n	8005d4e <UART_SetConfig+0x1a2>
 8005d38:	2b20      	cmp	r3, #32
 8005d3a:	d814      	bhi.n	8005d66 <UART_SetConfig+0x1ba>
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <UART_SetConfig+0x19a>
 8005d40:	2b10      	cmp	r3, #16
 8005d42:	d008      	beq.n	8005d56 <UART_SetConfig+0x1aa>
 8005d44:	e00f      	b.n	8005d66 <UART_SetConfig+0x1ba>
 8005d46:	2300      	movs	r3, #0
 8005d48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d4c:	e06d      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d54:	e069      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005d56:	2304      	movs	r3, #4
 8005d58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d5c:	e065      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005d5e:	2308      	movs	r3, #8
 8005d60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d64:	e061      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005d66:	2310      	movs	r3, #16
 8005d68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d6c:	e05d      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a4b      	ldr	r2, [pc, #300]	@ (8005ea0 <UART_SetConfig+0x2f4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d125      	bne.n	8005dc4 <UART_SetConfig+0x218>
 8005d78:	4b46      	ldr	r3, [pc, #280]	@ (8005e94 <UART_SetConfig+0x2e8>)
 8005d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d82:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d84:	d016      	beq.n	8005db4 <UART_SetConfig+0x208>
 8005d86:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d88:	d818      	bhi.n	8005dbc <UART_SetConfig+0x210>
 8005d8a:	2b80      	cmp	r3, #128	@ 0x80
 8005d8c:	d00a      	beq.n	8005da4 <UART_SetConfig+0x1f8>
 8005d8e:	2b80      	cmp	r3, #128	@ 0x80
 8005d90:	d814      	bhi.n	8005dbc <UART_SetConfig+0x210>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <UART_SetConfig+0x1f0>
 8005d96:	2b40      	cmp	r3, #64	@ 0x40
 8005d98:	d008      	beq.n	8005dac <UART_SetConfig+0x200>
 8005d9a:	e00f      	b.n	8005dbc <UART_SetConfig+0x210>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005da2:	e042      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005da4:	2302      	movs	r3, #2
 8005da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005daa:	e03e      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005dac:	2304      	movs	r3, #4
 8005dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005db2:	e03a      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005db4:	2308      	movs	r3, #8
 8005db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dba:	e036      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005dbc:	2310      	movs	r3, #16
 8005dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dc2:	e032      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a30      	ldr	r2, [pc, #192]	@ (8005e8c <UART_SetConfig+0x2e0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d12a      	bne.n	8005e24 <UART_SetConfig+0x278>
 8005dce:	4b31      	ldr	r3, [pc, #196]	@ (8005e94 <UART_SetConfig+0x2e8>)
 8005dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005dd8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ddc:	d01a      	beq.n	8005e14 <UART_SetConfig+0x268>
 8005dde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005de2:	d81b      	bhi.n	8005e1c <UART_SetConfig+0x270>
 8005de4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005de8:	d00c      	beq.n	8005e04 <UART_SetConfig+0x258>
 8005dea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dee:	d815      	bhi.n	8005e1c <UART_SetConfig+0x270>
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <UART_SetConfig+0x250>
 8005df4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005df8:	d008      	beq.n	8005e0c <UART_SetConfig+0x260>
 8005dfa:	e00f      	b.n	8005e1c <UART_SetConfig+0x270>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e02:	e012      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005e04:	2302      	movs	r3, #2
 8005e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e0a:	e00e      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e12:	e00a      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005e14:	2308      	movs	r3, #8
 8005e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e1a:	e006      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005e1c:	2310      	movs	r3, #16
 8005e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e22:	e002      	b.n	8005e2a <UART_SetConfig+0x27e>
 8005e24:	2310      	movs	r3, #16
 8005e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a17      	ldr	r2, [pc, #92]	@ (8005e8c <UART_SetConfig+0x2e0>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	f040 80a8 	bne.w	8005f86 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e36:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d834      	bhi.n	8005ea8 <UART_SetConfig+0x2fc>
 8005e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e44 <UART_SetConfig+0x298>)
 8005e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e44:	08005e69 	.word	0x08005e69
 8005e48:	08005ea9 	.word	0x08005ea9
 8005e4c:	08005e71 	.word	0x08005e71
 8005e50:	08005ea9 	.word	0x08005ea9
 8005e54:	08005e77 	.word	0x08005e77
 8005e58:	08005ea9 	.word	0x08005ea9
 8005e5c:	08005ea9 	.word	0x08005ea9
 8005e60:	08005ea9 	.word	0x08005ea9
 8005e64:	08005e7f 	.word	0x08005e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e68:	f7fd fe8a 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8005e6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e6e:	e021      	b.n	8005eb4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e70:	4b0c      	ldr	r3, [pc, #48]	@ (8005ea4 <UART_SetConfig+0x2f8>)
 8005e72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e74:	e01e      	b.n	8005eb4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e76:	f7fd fe15 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8005e7a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e7c:	e01a      	b.n	8005eb4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e84:	e016      	b.n	8005eb4 <UART_SetConfig+0x308>
 8005e86:	bf00      	nop
 8005e88:	cfff69f3 	.word	0xcfff69f3
 8005e8c:	40008000 	.word	0x40008000
 8005e90:	40013800 	.word	0x40013800
 8005e94:	40021000 	.word	0x40021000
 8005e98:	40004400 	.word	0x40004400
 8005e9c:	40004800 	.word	0x40004800
 8005ea0:	40004c00 	.word	0x40004c00
 8005ea4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005eb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 812a 	beq.w	8006110 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec0:	4a9e      	ldr	r2, [pc, #632]	@ (800613c <UART_SetConfig+0x590>)
 8005ec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ece:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	4413      	add	r3, r2
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d305      	bcc.n	8005eec <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d903      	bls.n	8005ef4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ef2:	e10d      	b.n	8006110 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	60bb      	str	r3, [r7, #8]
 8005efa:	60fa      	str	r2, [r7, #12]
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f00:	4a8e      	ldr	r2, [pc, #568]	@ (800613c <UART_SetConfig+0x590>)
 8005f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2200      	movs	r2, #0
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	607a      	str	r2, [r7, #4]
 8005f0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f16:	f7fa f9d3 	bl	80002c0 <__aeabi_uldivmod>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	4610      	mov	r0, r2
 8005f20:	4619      	mov	r1, r3
 8005f22:	f04f 0200 	mov.w	r2, #0
 8005f26:	f04f 0300 	mov.w	r3, #0
 8005f2a:	020b      	lsls	r3, r1, #8
 8005f2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f30:	0202      	lsls	r2, r0, #8
 8005f32:	6979      	ldr	r1, [r7, #20]
 8005f34:	6849      	ldr	r1, [r1, #4]
 8005f36:	0849      	lsrs	r1, r1, #1
 8005f38:	2000      	movs	r0, #0
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	eb12 0804 	adds.w	r8, r2, r4
 8005f42:	eb43 0905 	adc.w	r9, r3, r5
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	469a      	mov	sl, r3
 8005f4e:	4693      	mov	fp, r2
 8005f50:	4652      	mov	r2, sl
 8005f52:	465b      	mov	r3, fp
 8005f54:	4640      	mov	r0, r8
 8005f56:	4649      	mov	r1, r9
 8005f58:	f7fa f9b2 	bl	80002c0 <__aeabi_uldivmod>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4613      	mov	r3, r2
 8005f62:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f6a:	d308      	bcc.n	8005f7e <UART_SetConfig+0x3d2>
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f72:	d204      	bcs.n	8005f7e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6a3a      	ldr	r2, [r7, #32]
 8005f7a:	60da      	str	r2, [r3, #12]
 8005f7c:	e0c8      	b.n	8006110 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f84:	e0c4      	b.n	8006110 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f8e:	d167      	bne.n	8006060 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005f90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d828      	bhi.n	8005fea <UART_SetConfig+0x43e>
 8005f98:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa0 <UART_SetConfig+0x3f4>)
 8005f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9e:	bf00      	nop
 8005fa0:	08005fc5 	.word	0x08005fc5
 8005fa4:	08005fcd 	.word	0x08005fcd
 8005fa8:	08005fd5 	.word	0x08005fd5
 8005fac:	08005feb 	.word	0x08005feb
 8005fb0:	08005fdb 	.word	0x08005fdb
 8005fb4:	08005feb 	.word	0x08005feb
 8005fb8:	08005feb 	.word	0x08005feb
 8005fbc:	08005feb 	.word	0x08005feb
 8005fc0:	08005fe3 	.word	0x08005fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fc4:	f7fd fddc 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8005fc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fca:	e014      	b.n	8005ff6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fcc:	f7fd fdee 	bl	8003bac <HAL_RCC_GetPCLK2Freq>
 8005fd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fd2:	e010      	b.n	8005ff6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fd4:	4b5a      	ldr	r3, [pc, #360]	@ (8006140 <UART_SetConfig+0x594>)
 8005fd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fd8:	e00d      	b.n	8005ff6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fda:	f7fd fd63 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8005fde:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fe0:	e009      	b.n	8005ff6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fe6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fe8:	e005      	b.n	8005ff6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ff4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 8089 	beq.w	8006110 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006002:	4a4e      	ldr	r2, [pc, #312]	@ (800613c <UART_SetConfig+0x590>)
 8006004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006008:	461a      	mov	r2, r3
 800600a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006010:	005a      	lsls	r2, r3, #1
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	085b      	lsrs	r3, r3, #1
 8006018:	441a      	add	r2, r3
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006022:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	2b0f      	cmp	r3, #15
 8006028:	d916      	bls.n	8006058 <UART_SetConfig+0x4ac>
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006030:	d212      	bcs.n	8006058 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	b29b      	uxth	r3, r3
 8006036:	f023 030f 	bic.w	r3, r3, #15
 800603a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	085b      	lsrs	r3, r3, #1
 8006040:	b29b      	uxth	r3, r3
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	b29a      	uxth	r2, r3
 8006048:	8bfb      	ldrh	r3, [r7, #30]
 800604a:	4313      	orrs	r3, r2
 800604c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	8bfa      	ldrh	r2, [r7, #30]
 8006054:	60da      	str	r2, [r3, #12]
 8006056:	e05b      	b.n	8006110 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800605e:	e057      	b.n	8006110 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006060:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006064:	2b08      	cmp	r3, #8
 8006066:	d828      	bhi.n	80060ba <UART_SetConfig+0x50e>
 8006068:	a201      	add	r2, pc, #4	@ (adr r2, 8006070 <UART_SetConfig+0x4c4>)
 800606a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606e:	bf00      	nop
 8006070:	08006095 	.word	0x08006095
 8006074:	0800609d 	.word	0x0800609d
 8006078:	080060a5 	.word	0x080060a5
 800607c:	080060bb 	.word	0x080060bb
 8006080:	080060ab 	.word	0x080060ab
 8006084:	080060bb 	.word	0x080060bb
 8006088:	080060bb 	.word	0x080060bb
 800608c:	080060bb 	.word	0x080060bb
 8006090:	080060b3 	.word	0x080060b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006094:	f7fd fd74 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8006098:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800609a:	e014      	b.n	80060c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800609c:	f7fd fd86 	bl	8003bac <HAL_RCC_GetPCLK2Freq>
 80060a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060a2:	e010      	b.n	80060c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060a4:	4b26      	ldr	r3, [pc, #152]	@ (8006140 <UART_SetConfig+0x594>)
 80060a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80060a8:	e00d      	b.n	80060c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060aa:	f7fd fcfb 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 80060ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060b0:	e009      	b.n	80060c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80060b8:	e005      	b.n	80060c6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80060c4:	bf00      	nop
    }

    if (pclk != 0U)
 80060c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d021      	beq.n	8006110 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d0:	4a1a      	ldr	r2, [pc, #104]	@ (800613c <UART_SetConfig+0x590>)
 80060d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060d6:	461a      	mov	r2, r3
 80060d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060da:	fbb3 f2f2 	udiv	r2, r3, r2
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	085b      	lsrs	r3, r3, #1
 80060e4:	441a      	add	r2, r3
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	2b0f      	cmp	r3, #15
 80060f4:	d909      	bls.n	800610a <UART_SetConfig+0x55e>
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060fc:	d205      	bcs.n	800610a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	b29a      	uxth	r2, r3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60da      	str	r2, [r3, #12]
 8006108:	e002      	b.n	8006110 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2201      	movs	r2, #1
 8006114:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	2201      	movs	r2, #1
 800611c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	2200      	movs	r2, #0
 8006124:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2200      	movs	r2, #0
 800612a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800612c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006130:	4618      	mov	r0, r3
 8006132:	3730      	adds	r7, #48	@ 0x30
 8006134:	46bd      	mov	sp, r7
 8006136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800613a:	bf00      	nop
 800613c:	080086dc 	.word	0x080086dc
 8006140:	00f42400 	.word	0x00f42400

08006144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006150:	f003 0308 	and.w	r3, r3, #8
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00a      	beq.n	800616e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00a      	beq.n	80061b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b6:	f003 0304 	and.w	r3, r3, #4
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d8:	f003 0310 	and.w	r3, r3, #16
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00a      	beq.n	80061f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00a      	beq.n	8006218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	d01a      	beq.n	800625a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800623e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006242:	d10a      	bne.n	800625a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	605a      	str	r2, [r3, #4]
  }
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b098      	sub	sp, #96	@ 0x60
 800628c:	af02      	add	r7, sp, #8
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006298:	f7fb fccc 	bl	8001c34 <HAL_GetTick>
 800629c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0308 	and.w	r3, r3, #8
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d12f      	bne.n	800630c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062b4:	2200      	movs	r2, #0
 80062b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f88e 	bl	80063dc <UART_WaitOnFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d022      	beq.n	800630c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ce:	e853 3f00 	ldrex	r3, [r3]
 80062d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062da:	653b      	str	r3, [r7, #80]	@ 0x50
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	461a      	mov	r2, r3
 80062e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80062e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062ec:	e841 2300 	strex	r3, r2, [r1]
 80062f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1e6      	bne.n	80062c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2220      	movs	r2, #32
 80062fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e063      	b.n	80063d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0304 	and.w	r3, r3, #4
 8006316:	2b04      	cmp	r3, #4
 8006318:	d149      	bne.n	80063ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800631a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006322:	2200      	movs	r2, #0
 8006324:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f857 	bl	80063dc <UART_WaitOnFlagUntilTimeout>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d03c      	beq.n	80063ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	623b      	str	r3, [r7, #32]
   return(result);
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006348:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006352:	633b      	str	r3, [r7, #48]	@ 0x30
 8006354:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006356:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800635a:	e841 2300 	strex	r3, r2, [r1]
 800635e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1e6      	bne.n	8006334 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3308      	adds	r3, #8
 800636c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	60fb      	str	r3, [r7, #12]
   return(result);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f023 0301 	bic.w	r3, r3, #1
 800637c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	3308      	adds	r3, #8
 8006384:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006386:	61fa      	str	r2, [r7, #28]
 8006388:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	69b9      	ldr	r1, [r7, #24]
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	617b      	str	r3, [r7, #20]
   return(result);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e5      	bne.n	8006366 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2220      	movs	r2, #32
 800639e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e012      	b.n	80063d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2220      	movs	r2, #32
 80063b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3758      	adds	r7, #88	@ 0x58
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	4613      	mov	r3, r2
 80063ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ec:	e04f      	b.n	800648e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f4:	d04b      	beq.n	800648e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063f6:	f7fb fc1d 	bl	8001c34 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	429a      	cmp	r2, r3
 8006404:	d302      	bcc.n	800640c <UART_WaitOnFlagUntilTimeout+0x30>
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e04e      	b.n	80064ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0304 	and.w	r3, r3, #4
 800641a:	2b00      	cmp	r3, #0
 800641c:	d037      	beq.n	800648e <UART_WaitOnFlagUntilTimeout+0xb2>
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b80      	cmp	r3, #128	@ 0x80
 8006422:	d034      	beq.n	800648e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2b40      	cmp	r3, #64	@ 0x40
 8006428:	d031      	beq.n	800648e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	f003 0308 	and.w	r3, r3, #8
 8006434:	2b08      	cmp	r3, #8
 8006436:	d110      	bne.n	800645a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2208      	movs	r2, #8
 800643e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 f95b 	bl	80066fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2208      	movs	r2, #8
 800644a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e029      	b.n	80064ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006468:	d111      	bne.n	800648e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006472:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 f941 	bl	80066fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2220      	movs	r2, #32
 800647e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e00f      	b.n	80064ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69da      	ldr	r2, [r3, #28]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	4013      	ands	r3, r2
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	429a      	cmp	r2, r3
 800649c:	bf0c      	ite	eq
 800649e:	2301      	moveq	r3, #1
 80064a0:	2300      	movne	r3, #0
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	461a      	mov	r2, r3
 80064a6:	79fb      	ldrb	r3, [r7, #7]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d0a0      	beq.n	80063ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b0a3      	sub	sp, #140	@ 0x8c
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	4613      	mov	r3, r2
 80064c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	88fa      	ldrh	r2, [r7, #6]
 80064d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	88fa      	ldrh	r2, [r7, #6]
 80064d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ea:	d10e      	bne.n	800650a <UART_Start_Receive_IT+0x52>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d105      	bne.n	8006500 <UART_Start_Receive_IT+0x48>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80064fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80064fe:	e02d      	b.n	800655c <UART_Start_Receive_IT+0xa4>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	22ff      	movs	r2, #255	@ 0xff
 8006504:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006508:	e028      	b.n	800655c <UART_Start_Receive_IT+0xa4>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10d      	bne.n	800652e <UART_Start_Receive_IT+0x76>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d104      	bne.n	8006524 <UART_Start_Receive_IT+0x6c>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	22ff      	movs	r2, #255	@ 0xff
 800651e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006522:	e01b      	b.n	800655c <UART_Start_Receive_IT+0xa4>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	227f      	movs	r2, #127	@ 0x7f
 8006528:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800652c:	e016      	b.n	800655c <UART_Start_Receive_IT+0xa4>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006536:	d10d      	bne.n	8006554 <UART_Start_Receive_IT+0x9c>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d104      	bne.n	800654a <UART_Start_Receive_IT+0x92>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	227f      	movs	r2, #127	@ 0x7f
 8006544:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006548:	e008      	b.n	800655c <UART_Start_Receive_IT+0xa4>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	223f      	movs	r2, #63	@ 0x3f
 800654e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006552:	e003      	b.n	800655c <UART_Start_Receive_IT+0xa4>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2222      	movs	r2, #34	@ 0x22
 8006568:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3308      	adds	r3, #8
 8006572:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006574:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006576:	e853 3f00 	ldrex	r3, [r3]
 800657a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800657c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800657e:	f043 0301 	orr.w	r3, r3, #1
 8006582:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3308      	adds	r3, #8
 800658c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006590:	673a      	str	r2, [r7, #112]	@ 0x70
 8006592:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006594:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006596:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006598:	e841 2300 	strex	r3, r2, [r1]
 800659c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800659e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1e3      	bne.n	800656c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065ac:	d14f      	bne.n	800664e <UART_Start_Receive_IT+0x196>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80065b4:	88fa      	ldrh	r2, [r7, #6]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d349      	bcc.n	800664e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065c2:	d107      	bne.n	80065d4 <UART_Start_Receive_IT+0x11c>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d103      	bne.n	80065d4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4a47      	ldr	r2, [pc, #284]	@ (80066ec <UART_Start_Receive_IT+0x234>)
 80065d0:	675a      	str	r2, [r3, #116]	@ 0x74
 80065d2:	e002      	b.n	80065da <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4a46      	ldr	r2, [pc, #280]	@ (80066f0 <UART_Start_Receive_IT+0x238>)
 80065d8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d01a      	beq.n	8006618 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065ea:	e853 3f00 	ldrex	r3, [r3]
 80065ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80065f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006604:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006606:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006608:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800660a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800660c:	e841 2300 	strex	r3, r2, [r1]
 8006610:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1e4      	bne.n	80065e2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3308      	adds	r3, #8
 800661e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800662e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3308      	adds	r3, #8
 8006636:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006638:	64ba      	str	r2, [r7, #72]	@ 0x48
 800663a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800663e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e5      	bne.n	8006618 <UART_Start_Receive_IT+0x160>
 800664c:	e046      	b.n	80066dc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006656:	d107      	bne.n	8006668 <UART_Start_Receive_IT+0x1b0>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d103      	bne.n	8006668 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4a24      	ldr	r2, [pc, #144]	@ (80066f4 <UART_Start_Receive_IT+0x23c>)
 8006664:	675a      	str	r2, [r3, #116]	@ 0x74
 8006666:	e002      	b.n	800666e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4a23      	ldr	r2, [pc, #140]	@ (80066f8 <UART_Start_Receive_IT+0x240>)
 800666c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d019      	beq.n	80066aa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667e:	e853 3f00 	ldrex	r3, [r3]
 8006682:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006686:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800668a:	677b      	str	r3, [r7, #116]	@ 0x74
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	461a      	mov	r2, r3
 8006692:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006694:	637b      	str	r3, [r7, #52]	@ 0x34
 8006696:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006698:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800669a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800669c:	e841 2300 	strex	r3, r2, [r1]
 80066a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80066a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1e6      	bne.n	8006676 <UART_Start_Receive_IT+0x1be>
 80066a8:	e018      	b.n	80066dc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	e853 3f00 	ldrex	r3, [r3]
 80066b6:	613b      	str	r3, [r7, #16]
   return(result);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f043 0320 	orr.w	r3, r3, #32
 80066be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	461a      	mov	r2, r3
 80066c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066c8:	623b      	str	r3, [r7, #32]
 80066ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	69f9      	ldr	r1, [r7, #28]
 80066ce:	6a3a      	ldr	r2, [r7, #32]
 80066d0:	e841 2300 	strex	r3, r2, [r1]
 80066d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1e6      	bne.n	80066aa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	378c      	adds	r7, #140	@ 0x8c
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	08006f19 	.word	0x08006f19
 80066f0:	08006bb5 	.word	0x08006bb5
 80066f4:	080069fd 	.word	0x080069fd
 80066f8:	08006845 	.word	0x08006845

080066fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b095      	sub	sp, #84	@ 0x54
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800670c:	e853 3f00 	ldrex	r3, [r3]
 8006710:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006714:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006718:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006722:	643b      	str	r3, [r7, #64]	@ 0x40
 8006724:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006726:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006728:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800672a:	e841 2300 	strex	r3, r2, [r1]
 800672e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1e6      	bne.n	8006704 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3308      	adds	r3, #8
 800673c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	e853 3f00 	ldrex	r3, [r3]
 8006744:	61fb      	str	r3, [r7, #28]
   return(result);
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800674c:	f023 0301 	bic.w	r3, r3, #1
 8006750:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3308      	adds	r3, #8
 8006758:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800675a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800675c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006760:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e3      	bne.n	8006736 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006772:	2b01      	cmp	r3, #1
 8006774:	d118      	bne.n	80067a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	60bb      	str	r3, [r7, #8]
   return(result);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f023 0310 	bic.w	r3, r3, #16
 800678a:	647b      	str	r3, [r7, #68]	@ 0x44
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	461a      	mov	r2, r3
 8006792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006794:	61bb      	str	r3, [r7, #24]
 8006796:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	6979      	ldr	r1, [r7, #20]
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	613b      	str	r3, [r7, #16]
   return(result);
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e6      	bne.n	8006776 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80067bc:	bf00      	nop
 80067be:	3754      	adds	r7, #84	@ 0x54
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f7ff f9ce 	bl	8005b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067e4:	bf00      	nop
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	e853 3f00 	ldrex	r3, [r3]
 8006800:	60bb      	str	r3, [r7, #8]
   return(result);
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006808:	61fb      	str	r3, [r7, #28]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	61bb      	str	r3, [r7, #24]
 8006814:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006816:	6979      	ldr	r1, [r7, #20]
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	e841 2300 	strex	r3, r2, [r1]
 800681e:	613b      	str	r3, [r7, #16]
   return(result);
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1e6      	bne.n	80067f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7ff f999 	bl	8005b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800683a:	bf00      	nop
 800683c:	3720      	adds	r7, #32
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
	...

08006844 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b09c      	sub	sp, #112	@ 0x70
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006852:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800685c:	2b22      	cmp	r3, #34	@ 0x22
 800685e:	f040 80be 	bne.w	80069de <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006868:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800686c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006870:	b2d9      	uxtb	r1, r3
 8006872:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006876:	b2da      	uxtb	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800687c:	400a      	ands	r2, r1
 800687e:	b2d2      	uxtb	r2, r2
 8006880:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006892:	b29b      	uxth	r3, r3
 8006894:	3b01      	subs	r3, #1
 8006896:	b29a      	uxth	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f040 80a1 	bne.w	80069ee <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80068ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80068d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80068d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e6      	bne.n	80068ac <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	3308      	adds	r3, #8
 80068e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f0:	f023 0301 	bic.w	r3, r3, #1
 80068f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3308      	adds	r3, #8
 80068fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80068fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8006900:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006904:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800690c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1e5      	bne.n	80068de <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2220      	movs	r2, #32
 8006916:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a33      	ldr	r2, [pc, #204]	@ (80069f8 <UART_RxISR_8BIT+0x1b4>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d01f      	beq.n	8006970 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d018      	beq.n	8006970 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006946:	e853 3f00 	ldrex	r3, [r3]
 800694a:	623b      	str	r3, [r7, #32]
   return(result);
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006952:	663b      	str	r3, [r7, #96]	@ 0x60
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	461a      	mov	r2, r3
 800695a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800695c:	633b      	str	r3, [r7, #48]	@ 0x30
 800695e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006960:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006964:	e841 2300 	strex	r3, r2, [r1]
 8006968:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800696a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1e6      	bne.n	800693e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006974:	2b01      	cmp	r3, #1
 8006976:	d12e      	bne.n	80069d6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	e853 3f00 	ldrex	r3, [r3]
 800698a:	60fb      	str	r3, [r7, #12]
   return(result);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 0310 	bic.w	r3, r3, #16
 8006992:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	461a      	mov	r2, r3
 800699a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800699c:	61fb      	str	r3, [r7, #28]
 800699e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a0:	69b9      	ldr	r1, [r7, #24]
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	e841 2300 	strex	r3, r2, [r1]
 80069a8:	617b      	str	r3, [r7, #20]
   return(result);
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e6      	bne.n	800697e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	f003 0310 	and.w	r3, r3, #16
 80069ba:	2b10      	cmp	r3, #16
 80069bc:	d103      	bne.n	80069c6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2210      	movs	r2, #16
 80069c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff f8e0 	bl	8005b94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069d4:	e00b      	b.n	80069ee <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7fa fa52 	bl	8000e80 <HAL_UART_RxCpltCallback>
}
 80069dc:	e007      	b.n	80069ee <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	699a      	ldr	r2, [r3, #24]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f042 0208 	orr.w	r2, r2, #8
 80069ec:	619a      	str	r2, [r3, #24]
}
 80069ee:	bf00      	nop
 80069f0:	3770      	adds	r7, #112	@ 0x70
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	40008000 	.word	0x40008000

080069fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b09c      	sub	sp, #112	@ 0x70
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006a0a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a14:	2b22      	cmp	r3, #34	@ 0x22
 8006a16:	f040 80be 	bne.w	8006b96 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a20:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a28:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006a2a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006a2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006a32:	4013      	ands	r3, r2
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a38:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a3e:	1c9a      	adds	r2, r3, #2
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f040 80a1 	bne.w	8006ba6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a6c:	e853 3f00 	ldrex	r3, [r3]
 8006a70:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006a72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a78:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a82:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a84:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1e6      	bne.n	8006a64 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3308      	adds	r3, #8
 8006a9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa0:	e853 3f00 	ldrex	r3, [r3]
 8006aa4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa8:	f023 0301 	bic.w	r3, r3, #1
 8006aac:	663b      	str	r3, [r7, #96]	@ 0x60
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006ab6:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006abc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006abe:	e841 2300 	strex	r3, r2, [r1]
 8006ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1e5      	bne.n	8006a96 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2220      	movs	r2, #32
 8006ace:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a33      	ldr	r2, [pc, #204]	@ (8006bb0 <UART_RxISR_16BIT+0x1b4>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d01f      	beq.n	8006b28 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d018      	beq.n	8006b28 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	e853 3f00 	ldrex	r3, [r3]
 8006b02:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	461a      	mov	r2, r3
 8006b12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b16:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b1c:	e841 2300 	strex	r3, r2, [r1]
 8006b20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1e6      	bne.n	8006af6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d12e      	bne.n	8006b8e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	e853 3f00 	ldrex	r3, [r3]
 8006b42:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f023 0310 	bic.w	r3, r3, #16
 8006b4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	461a      	mov	r2, r3
 8006b52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b54:	61bb      	str	r3, [r7, #24]
 8006b56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b58:	6979      	ldr	r1, [r7, #20]
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	e841 2300 	strex	r3, r2, [r1]
 8006b60:	613b      	str	r3, [r7, #16]
   return(result);
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1e6      	bne.n	8006b36 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	f003 0310 	and.w	r3, r3, #16
 8006b72:	2b10      	cmp	r3, #16
 8006b74:	d103      	bne.n	8006b7e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2210      	movs	r2, #16
 8006b7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff f804 	bl	8005b94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b8c:	e00b      	b.n	8006ba6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7fa f976 	bl	8000e80 <HAL_UART_RxCpltCallback>
}
 8006b94:	e007      	b.n	8006ba6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	699a      	ldr	r2, [r3, #24]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f042 0208 	orr.w	r2, r2, #8
 8006ba4:	619a      	str	r2, [r3, #24]
}
 8006ba6:	bf00      	nop
 8006ba8:	3770      	adds	r7, #112	@ 0x70
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	40008000 	.word	0x40008000

08006bb4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b0ac      	sub	sp, #176	@ 0xb0
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006bc2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bea:	2b22      	cmp	r3, #34	@ 0x22
 8006bec:	f040 8183 	bne.w	8006ef6 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006bf6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006bfa:	e126      	b.n	8006e4a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c02:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c06:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006c0a:	b2d9      	uxtb	r1, r3
 8006c0c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c16:	400a      	ands	r2, r1
 8006c18:	b2d2      	uxtb	r2, r2
 8006c1a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c46:	f003 0307 	and.w	r3, r3, #7
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d053      	beq.n	8006cf6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d011      	beq.n	8006c7e <UART_RxISR_8BIT_FIFOEN+0xca>
 8006c5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00b      	beq.n	8006c7e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c74:	f043 0201 	orr.w	r2, r3, #1
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d011      	beq.n	8006cae <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00b      	beq.n	8006cae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ca4:	f043 0204 	orr.w	r2, r3, #4
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cb2:	f003 0304 	and.w	r3, r3, #4
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d011      	beq.n	8006cde <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006cba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00b      	beq.n	8006cde <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2204      	movs	r2, #4
 8006ccc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cd4:	f043 0202 	orr.w	r2, r3, #2
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d006      	beq.n	8006cf6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7fe ff49 	bl	8005b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f040 80a3 	bne.w	8006e4a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006d12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	461a      	mov	r2, r3
 8006d22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d28:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006d2c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006d2e:	e841 2300 	strex	r3, r2, [r1]
 8006d32:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006d34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1e4      	bne.n	8006d04 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3308      	adds	r3, #8
 8006d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d44:	e853 3f00 	ldrex	r3, [r3]
 8006d48:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006d4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d50:	f023 0301 	bic.w	r3, r3, #1
 8006d54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d62:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006d64:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006d68:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006d70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e1      	bne.n	8006d3a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a60      	ldr	r2, [pc, #384]	@ (8006f10 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d021      	beq.n	8006dd8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d01a      	beq.n	8006dd8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006daa:	e853 3f00 	ldrex	r3, [r3]
 8006dae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006db2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006db6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006dc4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006dc6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006dca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006dcc:	e841 2300 	strex	r3, r2, [r1]
 8006dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006dd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e4      	bne.n	8006da2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d130      	bne.n	8006e42 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dee:	e853 3f00 	ldrex	r3, [r3]
 8006df2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df6:	f023 0310 	bic.w	r3, r3, #16
 8006dfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e08:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e10:	e841 2300 	strex	r3, r2, [r1]
 8006e14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e4      	bne.n	8006de6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	f003 0310 	and.w	r3, r3, #16
 8006e26:	2b10      	cmp	r3, #16
 8006e28:	d103      	bne.n	8006e32 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2210      	movs	r2, #16
 8006e30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7fe feaa 	bl	8005b94 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006e40:	e00e      	b.n	8006e60 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7fa f81c 	bl	8000e80 <HAL_UART_RxCpltCallback>
        break;
 8006e48:	e00a      	b.n	8006e60 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e4a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d006      	beq.n	8006e60 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8006e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e56:	f003 0320 	and.w	r3, r3, #32
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f47f aece 	bne.w	8006bfc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e66:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006e6a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d049      	beq.n	8006f06 <UART_RxISR_8BIT_FIFOEN+0x352>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006e78:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d242      	bcs.n	8006f06 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3308      	adds	r3, #8
 8006e86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	e853 3f00 	ldrex	r3, [r3]
 8006e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006ea4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006eaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006eac:	e841 2300 	strex	r3, r2, [r1]
 8006eb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1e3      	bne.n	8006e80 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a16      	ldr	r2, [pc, #88]	@ (8006f14 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8006ebc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f043 0320 	orr.w	r3, r3, #32
 8006ed2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006ee0:	61bb      	str	r3, [r7, #24]
 8006ee2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee4:	6979      	ldr	r1, [r7, #20]
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	e841 2300 	strex	r3, r2, [r1]
 8006eec:	613b      	str	r3, [r7, #16]
   return(result);
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1e4      	bne.n	8006ebe <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ef4:	e007      	b.n	8006f06 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	699a      	ldr	r2, [r3, #24]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f042 0208 	orr.w	r2, r2, #8
 8006f04:	619a      	str	r2, [r3, #24]
}
 8006f06:	bf00      	nop
 8006f08:	37b0      	adds	r7, #176	@ 0xb0
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	40008000 	.word	0x40008000
 8006f14:	08006845 	.word	0x08006845

08006f18 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b0ae      	sub	sp, #184	@ 0xb8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006f26:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f4e:	2b22      	cmp	r3, #34	@ 0x22
 8006f50:	f040 8187 	bne.w	8007262 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006f5a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f5e:	e12a      	b.n	80071b6 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f66:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006f72:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006f76:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f82:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f88:	1c9a      	adds	r2, r3, #2
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	3b01      	subs	r3, #1
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006faa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006fae:	f003 0307 	and.w	r3, r3, #7
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d053      	beq.n	800705e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d011      	beq.n	8006fe6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00b      	beq.n	8006fe6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fdc:	f043 0201 	orr.w	r2, r3, #1
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fe6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d011      	beq.n	8007016 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006ff2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00b      	beq.n	8007016 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2202      	movs	r2, #2
 8007004:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800700c:	f043 0204 	orr.w	r2, r3, #4
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007016:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800701a:	f003 0304 	and.w	r3, r3, #4
 800701e:	2b00      	cmp	r3, #0
 8007020:	d011      	beq.n	8007046 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007022:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00b      	beq.n	8007046 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2204      	movs	r2, #4
 8007034:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800703c:	f043 0202 	orr.w	r2, r3, #2
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800704c:	2b00      	cmp	r3, #0
 800704e:	d006      	beq.n	800705e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7fe fd95 	bl	8005b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007064:	b29b      	uxth	r3, r3
 8007066:	2b00      	cmp	r3, #0
 8007068:	f040 80a5 	bne.w	80071b6 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007072:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007074:	e853 3f00 	ldrex	r3, [r3]
 8007078:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800707a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800707c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007080:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	461a      	mov	r2, r3
 800708a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800708e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007092:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007094:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007096:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80070a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e2      	bne.n	800706c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3308      	adds	r3, #8
 80070ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80070b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070bc:	f023 0301 	bic.w	r3, r3, #1
 80070c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3308      	adds	r3, #8
 80070ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80070ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80070d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80070d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80070d6:	e841 2300 	strex	r3, r2, [r1]
 80070da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80070dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1e1      	bne.n	80070a6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2220      	movs	r2, #32
 80070e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a60      	ldr	r2, [pc, #384]	@ (800727c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d021      	beq.n	8007144 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d01a      	beq.n	8007144 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007114:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007116:	e853 3f00 	ldrex	r3, [r3]
 800711a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800711c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800711e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007122:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007130:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007132:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007134:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007136:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007138:	e841 2300 	strex	r3, r2, [r1]
 800713c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800713e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1e4      	bne.n	800710e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007148:	2b01      	cmp	r3, #1
 800714a:	d130      	bne.n	80071ae <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007162:	f023 0310 	bic.w	r3, r3, #16
 8007166:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007174:	647b      	str	r3, [r7, #68]	@ 0x44
 8007176:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007178:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800717a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800717c:	e841 2300 	strex	r3, r2, [r1]
 8007180:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1e4      	bne.n	8007152 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	f003 0310 	and.w	r3, r3, #16
 8007192:	2b10      	cmp	r3, #16
 8007194:	d103      	bne.n	800719e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2210      	movs	r2, #16
 800719c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071a4:	4619      	mov	r1, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7fe fcf4 	bl	8005b94 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80071ac:	e00e      	b.n	80071cc <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7f9 fe66 	bl	8000e80 <HAL_UART_RxCpltCallback>
        break;
 80071b4:	e00a      	b.n	80071cc <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071b6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d006      	beq.n	80071cc <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80071be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80071c2:	f003 0320 	and.w	r3, r3, #32
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f47f aeca 	bne.w	8006f60 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071d2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80071d6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d049      	beq.n	8007272 <UART_RxISR_16BIT_FIFOEN+0x35a>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80071e4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d242      	bcs.n	8007272 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3308      	adds	r3, #8
 80071f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f6:	e853 3f00 	ldrex	r3, [r3]
 80071fa:	623b      	str	r3, [r7, #32]
   return(result);
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007202:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3308      	adds	r3, #8
 800720c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007210:	633a      	str	r2, [r7, #48]	@ 0x30
 8007212:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007214:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007216:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007218:	e841 2300 	strex	r3, r2, [r1]
 800721c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800721e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1e3      	bne.n	80071ec <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a16      	ldr	r2, [pc, #88]	@ (8007280 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007228:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	e853 3f00 	ldrex	r3, [r3]
 8007236:	60fb      	str	r3, [r7, #12]
   return(result);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f043 0320 	orr.w	r3, r3, #32
 800723e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	461a      	mov	r2, r3
 8007248:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800724c:	61fb      	str	r3, [r7, #28]
 800724e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007250:	69b9      	ldr	r1, [r7, #24]
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	e841 2300 	strex	r3, r2, [r1]
 8007258:	617b      	str	r3, [r7, #20]
   return(result);
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1e4      	bne.n	800722a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007260:	e007      	b.n	8007272 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	699a      	ldr	r2, [r3, #24]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f042 0208 	orr.w	r2, r2, #8
 8007270:	619a      	str	r2, [r3, #24]
}
 8007272:	bf00      	nop
 8007274:	37b8      	adds	r7, #184	@ 0xb8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	40008000 	.word	0x40008000
 8007280:	080069fd 	.word	0x080069fd

08007284 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d101      	bne.n	80072d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80072d2:	2302      	movs	r3, #2
 80072d4:	e027      	b.n	8007326 <HAL_UARTEx_DisableFifoMode+0x66>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2224      	movs	r2, #36	@ 0x24
 80072e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f022 0201 	bic.w	r2, r2, #1
 80072fc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007304:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2220      	movs	r2, #32
 8007318:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b084      	sub	sp, #16
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007342:	2b01      	cmp	r3, #1
 8007344:	d101      	bne.n	800734a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007346:	2302      	movs	r3, #2
 8007348:	e02d      	b.n	80073a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2224      	movs	r2, #36	@ 0x24
 8007356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0201 	bic.w	r2, r2, #1
 8007370:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f850 	bl	800742c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2220      	movs	r2, #32
 8007398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d101      	bne.n	80073c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80073c2:	2302      	movs	r3, #2
 80073c4:	e02d      	b.n	8007422 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2224      	movs	r2, #36	@ 0x24
 80073d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 0201 	bic.w	r2, r2, #1
 80073ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	683a      	ldr	r2, [r7, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f812 	bl	800742c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2220      	movs	r2, #32
 8007414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
	...

0800742c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007438:	2b00      	cmp	r3, #0
 800743a:	d108      	bne.n	800744e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800744c:	e031      	b.n	80074b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800744e:	2308      	movs	r3, #8
 8007450:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007452:	2308      	movs	r3, #8
 8007454:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	0e5b      	lsrs	r3, r3, #25
 800745e:	b2db      	uxtb	r3, r3
 8007460:	f003 0307 	and.w	r3, r3, #7
 8007464:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	0f5b      	lsrs	r3, r3, #29
 800746e:	b2db      	uxtb	r3, r3
 8007470:	f003 0307 	and.w	r3, r3, #7
 8007474:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007476:	7bbb      	ldrb	r3, [r7, #14]
 8007478:	7b3a      	ldrb	r2, [r7, #12]
 800747a:	4911      	ldr	r1, [pc, #68]	@ (80074c0 <UARTEx_SetNbDataToProcess+0x94>)
 800747c:	5c8a      	ldrb	r2, [r1, r2]
 800747e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007482:	7b3a      	ldrb	r2, [r7, #12]
 8007484:	490f      	ldr	r1, [pc, #60]	@ (80074c4 <UARTEx_SetNbDataToProcess+0x98>)
 8007486:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007488:	fb93 f3f2 	sdiv	r3, r3, r2
 800748c:	b29a      	uxth	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007494:	7bfb      	ldrb	r3, [r7, #15]
 8007496:	7b7a      	ldrb	r2, [r7, #13]
 8007498:	4909      	ldr	r1, [pc, #36]	@ (80074c0 <UARTEx_SetNbDataToProcess+0x94>)
 800749a:	5c8a      	ldrb	r2, [r1, r2]
 800749c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80074a0:	7b7a      	ldrb	r2, [r7, #13]
 80074a2:	4908      	ldr	r1, [pc, #32]	@ (80074c4 <UARTEx_SetNbDataToProcess+0x98>)
 80074a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80074b2:	bf00      	nop
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	080086f4 	.word	0x080086f4
 80074c4:	080086fc 	.word	0x080086fc

080074c8 <_strtol_l.constprop.0>:
 80074c8:	2b24      	cmp	r3, #36	@ 0x24
 80074ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074ce:	4686      	mov	lr, r0
 80074d0:	4690      	mov	r8, r2
 80074d2:	d801      	bhi.n	80074d8 <_strtol_l.constprop.0+0x10>
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d106      	bne.n	80074e6 <_strtol_l.constprop.0+0x1e>
 80074d8:	f000 f9f2 	bl	80078c0 <__errno>
 80074dc:	2316      	movs	r3, #22
 80074de:	6003      	str	r3, [r0, #0]
 80074e0:	2000      	movs	r0, #0
 80074e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e6:	4834      	ldr	r0, [pc, #208]	@ (80075b8 <_strtol_l.constprop.0+0xf0>)
 80074e8:	460d      	mov	r5, r1
 80074ea:	462a      	mov	r2, r5
 80074ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074f0:	5d06      	ldrb	r6, [r0, r4]
 80074f2:	f016 0608 	ands.w	r6, r6, #8
 80074f6:	d1f8      	bne.n	80074ea <_strtol_l.constprop.0+0x22>
 80074f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80074fa:	d12d      	bne.n	8007558 <_strtol_l.constprop.0+0x90>
 80074fc:	782c      	ldrb	r4, [r5, #0]
 80074fe:	2601      	movs	r6, #1
 8007500:	1c95      	adds	r5, r2, #2
 8007502:	f033 0210 	bics.w	r2, r3, #16
 8007506:	d109      	bne.n	800751c <_strtol_l.constprop.0+0x54>
 8007508:	2c30      	cmp	r4, #48	@ 0x30
 800750a:	d12a      	bne.n	8007562 <_strtol_l.constprop.0+0x9a>
 800750c:	782a      	ldrb	r2, [r5, #0]
 800750e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007512:	2a58      	cmp	r2, #88	@ 0x58
 8007514:	d125      	bne.n	8007562 <_strtol_l.constprop.0+0x9a>
 8007516:	786c      	ldrb	r4, [r5, #1]
 8007518:	2310      	movs	r3, #16
 800751a:	3502      	adds	r5, #2
 800751c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007520:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007524:	2200      	movs	r2, #0
 8007526:	fbbc f9f3 	udiv	r9, ip, r3
 800752a:	4610      	mov	r0, r2
 800752c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007530:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007534:	2f09      	cmp	r7, #9
 8007536:	d81b      	bhi.n	8007570 <_strtol_l.constprop.0+0xa8>
 8007538:	463c      	mov	r4, r7
 800753a:	42a3      	cmp	r3, r4
 800753c:	dd27      	ble.n	800758e <_strtol_l.constprop.0+0xc6>
 800753e:	1c57      	adds	r7, r2, #1
 8007540:	d007      	beq.n	8007552 <_strtol_l.constprop.0+0x8a>
 8007542:	4581      	cmp	r9, r0
 8007544:	d320      	bcc.n	8007588 <_strtol_l.constprop.0+0xc0>
 8007546:	d101      	bne.n	800754c <_strtol_l.constprop.0+0x84>
 8007548:	45a2      	cmp	sl, r4
 800754a:	db1d      	blt.n	8007588 <_strtol_l.constprop.0+0xc0>
 800754c:	fb00 4003 	mla	r0, r0, r3, r4
 8007550:	2201      	movs	r2, #1
 8007552:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007556:	e7eb      	b.n	8007530 <_strtol_l.constprop.0+0x68>
 8007558:	2c2b      	cmp	r4, #43	@ 0x2b
 800755a:	bf04      	itt	eq
 800755c:	782c      	ldrbeq	r4, [r5, #0]
 800755e:	1c95      	addeq	r5, r2, #2
 8007560:	e7cf      	b.n	8007502 <_strtol_l.constprop.0+0x3a>
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1da      	bne.n	800751c <_strtol_l.constprop.0+0x54>
 8007566:	2c30      	cmp	r4, #48	@ 0x30
 8007568:	bf0c      	ite	eq
 800756a:	2308      	moveq	r3, #8
 800756c:	230a      	movne	r3, #10
 800756e:	e7d5      	b.n	800751c <_strtol_l.constprop.0+0x54>
 8007570:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007574:	2f19      	cmp	r7, #25
 8007576:	d801      	bhi.n	800757c <_strtol_l.constprop.0+0xb4>
 8007578:	3c37      	subs	r4, #55	@ 0x37
 800757a:	e7de      	b.n	800753a <_strtol_l.constprop.0+0x72>
 800757c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007580:	2f19      	cmp	r7, #25
 8007582:	d804      	bhi.n	800758e <_strtol_l.constprop.0+0xc6>
 8007584:	3c57      	subs	r4, #87	@ 0x57
 8007586:	e7d8      	b.n	800753a <_strtol_l.constprop.0+0x72>
 8007588:	f04f 32ff 	mov.w	r2, #4294967295
 800758c:	e7e1      	b.n	8007552 <_strtol_l.constprop.0+0x8a>
 800758e:	1c53      	adds	r3, r2, #1
 8007590:	d108      	bne.n	80075a4 <_strtol_l.constprop.0+0xdc>
 8007592:	2322      	movs	r3, #34	@ 0x22
 8007594:	f8ce 3000 	str.w	r3, [lr]
 8007598:	4660      	mov	r0, ip
 800759a:	f1b8 0f00 	cmp.w	r8, #0
 800759e:	d0a0      	beq.n	80074e2 <_strtol_l.constprop.0+0x1a>
 80075a0:	1e69      	subs	r1, r5, #1
 80075a2:	e006      	b.n	80075b2 <_strtol_l.constprop.0+0xea>
 80075a4:	b106      	cbz	r6, 80075a8 <_strtol_l.constprop.0+0xe0>
 80075a6:	4240      	negs	r0, r0
 80075a8:	f1b8 0f00 	cmp.w	r8, #0
 80075ac:	d099      	beq.n	80074e2 <_strtol_l.constprop.0+0x1a>
 80075ae:	2a00      	cmp	r2, #0
 80075b0:	d1f6      	bne.n	80075a0 <_strtol_l.constprop.0+0xd8>
 80075b2:	f8c8 1000 	str.w	r1, [r8]
 80075b6:	e794      	b.n	80074e2 <_strtol_l.constprop.0+0x1a>
 80075b8:	08008705 	.word	0x08008705

080075bc <strtol>:
 80075bc:	4613      	mov	r3, r2
 80075be:	460a      	mov	r2, r1
 80075c0:	4601      	mov	r1, r0
 80075c2:	4802      	ldr	r0, [pc, #8]	@ (80075cc <strtol+0x10>)
 80075c4:	6800      	ldr	r0, [r0, #0]
 80075c6:	f7ff bf7f 	b.w	80074c8 <_strtol_l.constprop.0>
 80075ca:	bf00      	nop
 80075cc:	20000030 	.word	0x20000030

080075d0 <std>:
 80075d0:	2300      	movs	r3, #0
 80075d2:	b510      	push	{r4, lr}
 80075d4:	4604      	mov	r4, r0
 80075d6:	e9c0 3300 	strd	r3, r3, [r0]
 80075da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075de:	6083      	str	r3, [r0, #8]
 80075e0:	8181      	strh	r1, [r0, #12]
 80075e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80075e4:	81c2      	strh	r2, [r0, #14]
 80075e6:	6183      	str	r3, [r0, #24]
 80075e8:	4619      	mov	r1, r3
 80075ea:	2208      	movs	r2, #8
 80075ec:	305c      	adds	r0, #92	@ 0x5c
 80075ee:	f000 f906 	bl	80077fe <memset>
 80075f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007628 <std+0x58>)
 80075f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80075f6:	4b0d      	ldr	r3, [pc, #52]	@ (800762c <std+0x5c>)
 80075f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80075fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007630 <std+0x60>)
 80075fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80075fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007634 <std+0x64>)
 8007600:	6323      	str	r3, [r4, #48]	@ 0x30
 8007602:	4b0d      	ldr	r3, [pc, #52]	@ (8007638 <std+0x68>)
 8007604:	6224      	str	r4, [r4, #32]
 8007606:	429c      	cmp	r4, r3
 8007608:	d006      	beq.n	8007618 <std+0x48>
 800760a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800760e:	4294      	cmp	r4, r2
 8007610:	d002      	beq.n	8007618 <std+0x48>
 8007612:	33d0      	adds	r3, #208	@ 0xd0
 8007614:	429c      	cmp	r4, r3
 8007616:	d105      	bne.n	8007624 <std+0x54>
 8007618:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800761c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007620:	f000 b978 	b.w	8007914 <__retarget_lock_init_recursive>
 8007624:	bd10      	pop	{r4, pc}
 8007626:	bf00      	nop
 8007628:	08007779 	.word	0x08007779
 800762c:	0800779b 	.word	0x0800779b
 8007630:	080077d3 	.word	0x080077d3
 8007634:	080077f7 	.word	0x080077f7
 8007638:	20000348 	.word	0x20000348

0800763c <stdio_exit_handler>:
 800763c:	4a02      	ldr	r2, [pc, #8]	@ (8007648 <stdio_exit_handler+0xc>)
 800763e:	4903      	ldr	r1, [pc, #12]	@ (800764c <stdio_exit_handler+0x10>)
 8007640:	4803      	ldr	r0, [pc, #12]	@ (8007650 <stdio_exit_handler+0x14>)
 8007642:	f000 b869 	b.w	8007718 <_fwalk_sglue>
 8007646:	bf00      	nop
 8007648:	20000024 	.word	0x20000024
 800764c:	080081b5 	.word	0x080081b5
 8007650:	20000034 	.word	0x20000034

08007654 <cleanup_stdio>:
 8007654:	6841      	ldr	r1, [r0, #4]
 8007656:	4b0c      	ldr	r3, [pc, #48]	@ (8007688 <cleanup_stdio+0x34>)
 8007658:	4299      	cmp	r1, r3
 800765a:	b510      	push	{r4, lr}
 800765c:	4604      	mov	r4, r0
 800765e:	d001      	beq.n	8007664 <cleanup_stdio+0x10>
 8007660:	f000 fda8 	bl	80081b4 <_fflush_r>
 8007664:	68a1      	ldr	r1, [r4, #8]
 8007666:	4b09      	ldr	r3, [pc, #36]	@ (800768c <cleanup_stdio+0x38>)
 8007668:	4299      	cmp	r1, r3
 800766a:	d002      	beq.n	8007672 <cleanup_stdio+0x1e>
 800766c:	4620      	mov	r0, r4
 800766e:	f000 fda1 	bl	80081b4 <_fflush_r>
 8007672:	68e1      	ldr	r1, [r4, #12]
 8007674:	4b06      	ldr	r3, [pc, #24]	@ (8007690 <cleanup_stdio+0x3c>)
 8007676:	4299      	cmp	r1, r3
 8007678:	d004      	beq.n	8007684 <cleanup_stdio+0x30>
 800767a:	4620      	mov	r0, r4
 800767c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007680:	f000 bd98 	b.w	80081b4 <_fflush_r>
 8007684:	bd10      	pop	{r4, pc}
 8007686:	bf00      	nop
 8007688:	20000348 	.word	0x20000348
 800768c:	200003b0 	.word	0x200003b0
 8007690:	20000418 	.word	0x20000418

08007694 <global_stdio_init.part.0>:
 8007694:	b510      	push	{r4, lr}
 8007696:	4b0b      	ldr	r3, [pc, #44]	@ (80076c4 <global_stdio_init.part.0+0x30>)
 8007698:	4c0b      	ldr	r4, [pc, #44]	@ (80076c8 <global_stdio_init.part.0+0x34>)
 800769a:	4a0c      	ldr	r2, [pc, #48]	@ (80076cc <global_stdio_init.part.0+0x38>)
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	4620      	mov	r0, r4
 80076a0:	2200      	movs	r2, #0
 80076a2:	2104      	movs	r1, #4
 80076a4:	f7ff ff94 	bl	80075d0 <std>
 80076a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076ac:	2201      	movs	r2, #1
 80076ae:	2109      	movs	r1, #9
 80076b0:	f7ff ff8e 	bl	80075d0 <std>
 80076b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076b8:	2202      	movs	r2, #2
 80076ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076be:	2112      	movs	r1, #18
 80076c0:	f7ff bf86 	b.w	80075d0 <std>
 80076c4:	20000480 	.word	0x20000480
 80076c8:	20000348 	.word	0x20000348
 80076cc:	0800763d 	.word	0x0800763d

080076d0 <__sfp_lock_acquire>:
 80076d0:	4801      	ldr	r0, [pc, #4]	@ (80076d8 <__sfp_lock_acquire+0x8>)
 80076d2:	f000 b920 	b.w	8007916 <__retarget_lock_acquire_recursive>
 80076d6:	bf00      	nop
 80076d8:	20000489 	.word	0x20000489

080076dc <__sfp_lock_release>:
 80076dc:	4801      	ldr	r0, [pc, #4]	@ (80076e4 <__sfp_lock_release+0x8>)
 80076de:	f000 b91b 	b.w	8007918 <__retarget_lock_release_recursive>
 80076e2:	bf00      	nop
 80076e4:	20000489 	.word	0x20000489

080076e8 <__sinit>:
 80076e8:	b510      	push	{r4, lr}
 80076ea:	4604      	mov	r4, r0
 80076ec:	f7ff fff0 	bl	80076d0 <__sfp_lock_acquire>
 80076f0:	6a23      	ldr	r3, [r4, #32]
 80076f2:	b11b      	cbz	r3, 80076fc <__sinit+0x14>
 80076f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076f8:	f7ff bff0 	b.w	80076dc <__sfp_lock_release>
 80076fc:	4b04      	ldr	r3, [pc, #16]	@ (8007710 <__sinit+0x28>)
 80076fe:	6223      	str	r3, [r4, #32]
 8007700:	4b04      	ldr	r3, [pc, #16]	@ (8007714 <__sinit+0x2c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1f5      	bne.n	80076f4 <__sinit+0xc>
 8007708:	f7ff ffc4 	bl	8007694 <global_stdio_init.part.0>
 800770c:	e7f2      	b.n	80076f4 <__sinit+0xc>
 800770e:	bf00      	nop
 8007710:	08007655 	.word	0x08007655
 8007714:	20000480 	.word	0x20000480

08007718 <_fwalk_sglue>:
 8007718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800771c:	4607      	mov	r7, r0
 800771e:	4688      	mov	r8, r1
 8007720:	4614      	mov	r4, r2
 8007722:	2600      	movs	r6, #0
 8007724:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007728:	f1b9 0901 	subs.w	r9, r9, #1
 800772c:	d505      	bpl.n	800773a <_fwalk_sglue+0x22>
 800772e:	6824      	ldr	r4, [r4, #0]
 8007730:	2c00      	cmp	r4, #0
 8007732:	d1f7      	bne.n	8007724 <_fwalk_sglue+0xc>
 8007734:	4630      	mov	r0, r6
 8007736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800773a:	89ab      	ldrh	r3, [r5, #12]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d907      	bls.n	8007750 <_fwalk_sglue+0x38>
 8007740:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007744:	3301      	adds	r3, #1
 8007746:	d003      	beq.n	8007750 <_fwalk_sglue+0x38>
 8007748:	4629      	mov	r1, r5
 800774a:	4638      	mov	r0, r7
 800774c:	47c0      	blx	r8
 800774e:	4306      	orrs	r6, r0
 8007750:	3568      	adds	r5, #104	@ 0x68
 8007752:	e7e9      	b.n	8007728 <_fwalk_sglue+0x10>

08007754 <iprintf>:
 8007754:	b40f      	push	{r0, r1, r2, r3}
 8007756:	b507      	push	{r0, r1, r2, lr}
 8007758:	4906      	ldr	r1, [pc, #24]	@ (8007774 <iprintf+0x20>)
 800775a:	ab04      	add	r3, sp, #16
 800775c:	6808      	ldr	r0, [r1, #0]
 800775e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007762:	6881      	ldr	r1, [r0, #8]
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	f000 f9fb 	bl	8007b60 <_vfiprintf_r>
 800776a:	b003      	add	sp, #12
 800776c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007770:	b004      	add	sp, #16
 8007772:	4770      	bx	lr
 8007774:	20000030 	.word	0x20000030

08007778 <__sread>:
 8007778:	b510      	push	{r4, lr}
 800777a:	460c      	mov	r4, r1
 800777c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007780:	f000 f87a 	bl	8007878 <_read_r>
 8007784:	2800      	cmp	r0, #0
 8007786:	bfab      	itete	ge
 8007788:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800778a:	89a3      	ldrhlt	r3, [r4, #12]
 800778c:	181b      	addge	r3, r3, r0
 800778e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007792:	bfac      	ite	ge
 8007794:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007796:	81a3      	strhlt	r3, [r4, #12]
 8007798:	bd10      	pop	{r4, pc}

0800779a <__swrite>:
 800779a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800779e:	461f      	mov	r7, r3
 80077a0:	898b      	ldrh	r3, [r1, #12]
 80077a2:	05db      	lsls	r3, r3, #23
 80077a4:	4605      	mov	r5, r0
 80077a6:	460c      	mov	r4, r1
 80077a8:	4616      	mov	r6, r2
 80077aa:	d505      	bpl.n	80077b8 <__swrite+0x1e>
 80077ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b0:	2302      	movs	r3, #2
 80077b2:	2200      	movs	r2, #0
 80077b4:	f000 f84e 	bl	8007854 <_lseek_r>
 80077b8:	89a3      	ldrh	r3, [r4, #12]
 80077ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077c2:	81a3      	strh	r3, [r4, #12]
 80077c4:	4632      	mov	r2, r6
 80077c6:	463b      	mov	r3, r7
 80077c8:	4628      	mov	r0, r5
 80077ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077ce:	f000 b865 	b.w	800789c <_write_r>

080077d2 <__sseek>:
 80077d2:	b510      	push	{r4, lr}
 80077d4:	460c      	mov	r4, r1
 80077d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077da:	f000 f83b 	bl	8007854 <_lseek_r>
 80077de:	1c43      	adds	r3, r0, #1
 80077e0:	89a3      	ldrh	r3, [r4, #12]
 80077e2:	bf15      	itete	ne
 80077e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80077e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80077ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80077ee:	81a3      	strheq	r3, [r4, #12]
 80077f0:	bf18      	it	ne
 80077f2:	81a3      	strhne	r3, [r4, #12]
 80077f4:	bd10      	pop	{r4, pc}

080077f6 <__sclose>:
 80077f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077fa:	f000 b81b 	b.w	8007834 <_close_r>

080077fe <memset>:
 80077fe:	4402      	add	r2, r0
 8007800:	4603      	mov	r3, r0
 8007802:	4293      	cmp	r3, r2
 8007804:	d100      	bne.n	8007808 <memset+0xa>
 8007806:	4770      	bx	lr
 8007808:	f803 1b01 	strb.w	r1, [r3], #1
 800780c:	e7f9      	b.n	8007802 <memset+0x4>

0800780e <strncmp>:
 800780e:	b510      	push	{r4, lr}
 8007810:	b16a      	cbz	r2, 800782e <strncmp+0x20>
 8007812:	3901      	subs	r1, #1
 8007814:	1884      	adds	r4, r0, r2
 8007816:	f810 2b01 	ldrb.w	r2, [r0], #1
 800781a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800781e:	429a      	cmp	r2, r3
 8007820:	d103      	bne.n	800782a <strncmp+0x1c>
 8007822:	42a0      	cmp	r0, r4
 8007824:	d001      	beq.n	800782a <strncmp+0x1c>
 8007826:	2a00      	cmp	r2, #0
 8007828:	d1f5      	bne.n	8007816 <strncmp+0x8>
 800782a:	1ad0      	subs	r0, r2, r3
 800782c:	bd10      	pop	{r4, pc}
 800782e:	4610      	mov	r0, r2
 8007830:	e7fc      	b.n	800782c <strncmp+0x1e>
	...

08007834 <_close_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	4d06      	ldr	r5, [pc, #24]	@ (8007850 <_close_r+0x1c>)
 8007838:	2300      	movs	r3, #0
 800783a:	4604      	mov	r4, r0
 800783c:	4608      	mov	r0, r1
 800783e:	602b      	str	r3, [r5, #0]
 8007840:	f7f9 fc28 	bl	8001094 <_close>
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	d102      	bne.n	800784e <_close_r+0x1a>
 8007848:	682b      	ldr	r3, [r5, #0]
 800784a:	b103      	cbz	r3, 800784e <_close_r+0x1a>
 800784c:	6023      	str	r3, [r4, #0]
 800784e:	bd38      	pop	{r3, r4, r5, pc}
 8007850:	20000484 	.word	0x20000484

08007854 <_lseek_r>:
 8007854:	b538      	push	{r3, r4, r5, lr}
 8007856:	4d07      	ldr	r5, [pc, #28]	@ (8007874 <_lseek_r+0x20>)
 8007858:	4604      	mov	r4, r0
 800785a:	4608      	mov	r0, r1
 800785c:	4611      	mov	r1, r2
 800785e:	2200      	movs	r2, #0
 8007860:	602a      	str	r2, [r5, #0]
 8007862:	461a      	mov	r2, r3
 8007864:	f7f9 fc3d 	bl	80010e2 <_lseek>
 8007868:	1c43      	adds	r3, r0, #1
 800786a:	d102      	bne.n	8007872 <_lseek_r+0x1e>
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	b103      	cbz	r3, 8007872 <_lseek_r+0x1e>
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	bd38      	pop	{r3, r4, r5, pc}
 8007874:	20000484 	.word	0x20000484

08007878 <_read_r>:
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	4d07      	ldr	r5, [pc, #28]	@ (8007898 <_read_r+0x20>)
 800787c:	4604      	mov	r4, r0
 800787e:	4608      	mov	r0, r1
 8007880:	4611      	mov	r1, r2
 8007882:	2200      	movs	r2, #0
 8007884:	602a      	str	r2, [r5, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	f7f9 fbcb 	bl	8001022 <_read>
 800788c:	1c43      	adds	r3, r0, #1
 800788e:	d102      	bne.n	8007896 <_read_r+0x1e>
 8007890:	682b      	ldr	r3, [r5, #0]
 8007892:	b103      	cbz	r3, 8007896 <_read_r+0x1e>
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	bd38      	pop	{r3, r4, r5, pc}
 8007898:	20000484 	.word	0x20000484

0800789c <_write_r>:
 800789c:	b538      	push	{r3, r4, r5, lr}
 800789e:	4d07      	ldr	r5, [pc, #28]	@ (80078bc <_write_r+0x20>)
 80078a0:	4604      	mov	r4, r0
 80078a2:	4608      	mov	r0, r1
 80078a4:	4611      	mov	r1, r2
 80078a6:	2200      	movs	r2, #0
 80078a8:	602a      	str	r2, [r5, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	f7f9 fbd6 	bl	800105c <_write>
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	d102      	bne.n	80078ba <_write_r+0x1e>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	b103      	cbz	r3, 80078ba <_write_r+0x1e>
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	bd38      	pop	{r3, r4, r5, pc}
 80078bc:	20000484 	.word	0x20000484

080078c0 <__errno>:
 80078c0:	4b01      	ldr	r3, [pc, #4]	@ (80078c8 <__errno+0x8>)
 80078c2:	6818      	ldr	r0, [r3, #0]
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	20000030 	.word	0x20000030

080078cc <__libc_init_array>:
 80078cc:	b570      	push	{r4, r5, r6, lr}
 80078ce:	4d0d      	ldr	r5, [pc, #52]	@ (8007904 <__libc_init_array+0x38>)
 80078d0:	4c0d      	ldr	r4, [pc, #52]	@ (8007908 <__libc_init_array+0x3c>)
 80078d2:	1b64      	subs	r4, r4, r5
 80078d4:	10a4      	asrs	r4, r4, #2
 80078d6:	2600      	movs	r6, #0
 80078d8:	42a6      	cmp	r6, r4
 80078da:	d109      	bne.n	80078f0 <__libc_init_array+0x24>
 80078dc:	4d0b      	ldr	r5, [pc, #44]	@ (800790c <__libc_init_array+0x40>)
 80078de:	4c0c      	ldr	r4, [pc, #48]	@ (8007910 <__libc_init_array+0x44>)
 80078e0:	f000 fdb8 	bl	8008454 <_init>
 80078e4:	1b64      	subs	r4, r4, r5
 80078e6:	10a4      	asrs	r4, r4, #2
 80078e8:	2600      	movs	r6, #0
 80078ea:	42a6      	cmp	r6, r4
 80078ec:	d105      	bne.n	80078fa <__libc_init_array+0x2e>
 80078ee:	bd70      	pop	{r4, r5, r6, pc}
 80078f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078f4:	4798      	blx	r3
 80078f6:	3601      	adds	r6, #1
 80078f8:	e7ee      	b.n	80078d8 <__libc_init_array+0xc>
 80078fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80078fe:	4798      	blx	r3
 8007900:	3601      	adds	r6, #1
 8007902:	e7f2      	b.n	80078ea <__libc_init_array+0x1e>
 8007904:	08008840 	.word	0x08008840
 8007908:	08008840 	.word	0x08008840
 800790c:	08008840 	.word	0x08008840
 8007910:	08008844 	.word	0x08008844

08007914 <__retarget_lock_init_recursive>:
 8007914:	4770      	bx	lr

08007916 <__retarget_lock_acquire_recursive>:
 8007916:	4770      	bx	lr

08007918 <__retarget_lock_release_recursive>:
 8007918:	4770      	bx	lr
	...

0800791c <_free_r>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	4605      	mov	r5, r0
 8007920:	2900      	cmp	r1, #0
 8007922:	d041      	beq.n	80079a8 <_free_r+0x8c>
 8007924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007928:	1f0c      	subs	r4, r1, #4
 800792a:	2b00      	cmp	r3, #0
 800792c:	bfb8      	it	lt
 800792e:	18e4      	addlt	r4, r4, r3
 8007930:	f000 f8e0 	bl	8007af4 <__malloc_lock>
 8007934:	4a1d      	ldr	r2, [pc, #116]	@ (80079ac <_free_r+0x90>)
 8007936:	6813      	ldr	r3, [r2, #0]
 8007938:	b933      	cbnz	r3, 8007948 <_free_r+0x2c>
 800793a:	6063      	str	r3, [r4, #4]
 800793c:	6014      	str	r4, [r2, #0]
 800793e:	4628      	mov	r0, r5
 8007940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007944:	f000 b8dc 	b.w	8007b00 <__malloc_unlock>
 8007948:	42a3      	cmp	r3, r4
 800794a:	d908      	bls.n	800795e <_free_r+0x42>
 800794c:	6820      	ldr	r0, [r4, #0]
 800794e:	1821      	adds	r1, r4, r0
 8007950:	428b      	cmp	r3, r1
 8007952:	bf01      	itttt	eq
 8007954:	6819      	ldreq	r1, [r3, #0]
 8007956:	685b      	ldreq	r3, [r3, #4]
 8007958:	1809      	addeq	r1, r1, r0
 800795a:	6021      	streq	r1, [r4, #0]
 800795c:	e7ed      	b.n	800793a <_free_r+0x1e>
 800795e:	461a      	mov	r2, r3
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	b10b      	cbz	r3, 8007968 <_free_r+0x4c>
 8007964:	42a3      	cmp	r3, r4
 8007966:	d9fa      	bls.n	800795e <_free_r+0x42>
 8007968:	6811      	ldr	r1, [r2, #0]
 800796a:	1850      	adds	r0, r2, r1
 800796c:	42a0      	cmp	r0, r4
 800796e:	d10b      	bne.n	8007988 <_free_r+0x6c>
 8007970:	6820      	ldr	r0, [r4, #0]
 8007972:	4401      	add	r1, r0
 8007974:	1850      	adds	r0, r2, r1
 8007976:	4283      	cmp	r3, r0
 8007978:	6011      	str	r1, [r2, #0]
 800797a:	d1e0      	bne.n	800793e <_free_r+0x22>
 800797c:	6818      	ldr	r0, [r3, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	6053      	str	r3, [r2, #4]
 8007982:	4408      	add	r0, r1
 8007984:	6010      	str	r0, [r2, #0]
 8007986:	e7da      	b.n	800793e <_free_r+0x22>
 8007988:	d902      	bls.n	8007990 <_free_r+0x74>
 800798a:	230c      	movs	r3, #12
 800798c:	602b      	str	r3, [r5, #0]
 800798e:	e7d6      	b.n	800793e <_free_r+0x22>
 8007990:	6820      	ldr	r0, [r4, #0]
 8007992:	1821      	adds	r1, r4, r0
 8007994:	428b      	cmp	r3, r1
 8007996:	bf04      	itt	eq
 8007998:	6819      	ldreq	r1, [r3, #0]
 800799a:	685b      	ldreq	r3, [r3, #4]
 800799c:	6063      	str	r3, [r4, #4]
 800799e:	bf04      	itt	eq
 80079a0:	1809      	addeq	r1, r1, r0
 80079a2:	6021      	streq	r1, [r4, #0]
 80079a4:	6054      	str	r4, [r2, #4]
 80079a6:	e7ca      	b.n	800793e <_free_r+0x22>
 80079a8:	bd38      	pop	{r3, r4, r5, pc}
 80079aa:	bf00      	nop
 80079ac:	20000490 	.word	0x20000490

080079b0 <sbrk_aligned>:
 80079b0:	b570      	push	{r4, r5, r6, lr}
 80079b2:	4e0f      	ldr	r6, [pc, #60]	@ (80079f0 <sbrk_aligned+0x40>)
 80079b4:	460c      	mov	r4, r1
 80079b6:	6831      	ldr	r1, [r6, #0]
 80079b8:	4605      	mov	r5, r0
 80079ba:	b911      	cbnz	r1, 80079c2 <sbrk_aligned+0x12>
 80079bc:	f000 fcb6 	bl	800832c <_sbrk_r>
 80079c0:	6030      	str	r0, [r6, #0]
 80079c2:	4621      	mov	r1, r4
 80079c4:	4628      	mov	r0, r5
 80079c6:	f000 fcb1 	bl	800832c <_sbrk_r>
 80079ca:	1c43      	adds	r3, r0, #1
 80079cc:	d103      	bne.n	80079d6 <sbrk_aligned+0x26>
 80079ce:	f04f 34ff 	mov.w	r4, #4294967295
 80079d2:	4620      	mov	r0, r4
 80079d4:	bd70      	pop	{r4, r5, r6, pc}
 80079d6:	1cc4      	adds	r4, r0, #3
 80079d8:	f024 0403 	bic.w	r4, r4, #3
 80079dc:	42a0      	cmp	r0, r4
 80079de:	d0f8      	beq.n	80079d2 <sbrk_aligned+0x22>
 80079e0:	1a21      	subs	r1, r4, r0
 80079e2:	4628      	mov	r0, r5
 80079e4:	f000 fca2 	bl	800832c <_sbrk_r>
 80079e8:	3001      	adds	r0, #1
 80079ea:	d1f2      	bne.n	80079d2 <sbrk_aligned+0x22>
 80079ec:	e7ef      	b.n	80079ce <sbrk_aligned+0x1e>
 80079ee:	bf00      	nop
 80079f0:	2000048c 	.word	0x2000048c

080079f4 <_malloc_r>:
 80079f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079f8:	1ccd      	adds	r5, r1, #3
 80079fa:	f025 0503 	bic.w	r5, r5, #3
 80079fe:	3508      	adds	r5, #8
 8007a00:	2d0c      	cmp	r5, #12
 8007a02:	bf38      	it	cc
 8007a04:	250c      	movcc	r5, #12
 8007a06:	2d00      	cmp	r5, #0
 8007a08:	4606      	mov	r6, r0
 8007a0a:	db01      	blt.n	8007a10 <_malloc_r+0x1c>
 8007a0c:	42a9      	cmp	r1, r5
 8007a0e:	d904      	bls.n	8007a1a <_malloc_r+0x26>
 8007a10:	230c      	movs	r3, #12
 8007a12:	6033      	str	r3, [r6, #0]
 8007a14:	2000      	movs	r0, #0
 8007a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007af0 <_malloc_r+0xfc>
 8007a1e:	f000 f869 	bl	8007af4 <__malloc_lock>
 8007a22:	f8d8 3000 	ldr.w	r3, [r8]
 8007a26:	461c      	mov	r4, r3
 8007a28:	bb44      	cbnz	r4, 8007a7c <_malloc_r+0x88>
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	f7ff ffbf 	bl	80079b0 <sbrk_aligned>
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	4604      	mov	r4, r0
 8007a36:	d158      	bne.n	8007aea <_malloc_r+0xf6>
 8007a38:	f8d8 4000 	ldr.w	r4, [r8]
 8007a3c:	4627      	mov	r7, r4
 8007a3e:	2f00      	cmp	r7, #0
 8007a40:	d143      	bne.n	8007aca <_malloc_r+0xd6>
 8007a42:	2c00      	cmp	r4, #0
 8007a44:	d04b      	beq.n	8007ade <_malloc_r+0xea>
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	4639      	mov	r1, r7
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	eb04 0903 	add.w	r9, r4, r3
 8007a50:	f000 fc6c 	bl	800832c <_sbrk_r>
 8007a54:	4581      	cmp	r9, r0
 8007a56:	d142      	bne.n	8007ade <_malloc_r+0xea>
 8007a58:	6821      	ldr	r1, [r4, #0]
 8007a5a:	1a6d      	subs	r5, r5, r1
 8007a5c:	4629      	mov	r1, r5
 8007a5e:	4630      	mov	r0, r6
 8007a60:	f7ff ffa6 	bl	80079b0 <sbrk_aligned>
 8007a64:	3001      	adds	r0, #1
 8007a66:	d03a      	beq.n	8007ade <_malloc_r+0xea>
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	442b      	add	r3, r5
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8007a72:	685a      	ldr	r2, [r3, #4]
 8007a74:	bb62      	cbnz	r2, 8007ad0 <_malloc_r+0xdc>
 8007a76:	f8c8 7000 	str.w	r7, [r8]
 8007a7a:	e00f      	b.n	8007a9c <_malloc_r+0xa8>
 8007a7c:	6822      	ldr	r2, [r4, #0]
 8007a7e:	1b52      	subs	r2, r2, r5
 8007a80:	d420      	bmi.n	8007ac4 <_malloc_r+0xd0>
 8007a82:	2a0b      	cmp	r2, #11
 8007a84:	d917      	bls.n	8007ab6 <_malloc_r+0xc2>
 8007a86:	1961      	adds	r1, r4, r5
 8007a88:	42a3      	cmp	r3, r4
 8007a8a:	6025      	str	r5, [r4, #0]
 8007a8c:	bf18      	it	ne
 8007a8e:	6059      	strne	r1, [r3, #4]
 8007a90:	6863      	ldr	r3, [r4, #4]
 8007a92:	bf08      	it	eq
 8007a94:	f8c8 1000 	streq.w	r1, [r8]
 8007a98:	5162      	str	r2, [r4, r5]
 8007a9a:	604b      	str	r3, [r1, #4]
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f000 f82f 	bl	8007b00 <__malloc_unlock>
 8007aa2:	f104 000b 	add.w	r0, r4, #11
 8007aa6:	1d23      	adds	r3, r4, #4
 8007aa8:	f020 0007 	bic.w	r0, r0, #7
 8007aac:	1ac2      	subs	r2, r0, r3
 8007aae:	bf1c      	itt	ne
 8007ab0:	1a1b      	subne	r3, r3, r0
 8007ab2:	50a3      	strne	r3, [r4, r2]
 8007ab4:	e7af      	b.n	8007a16 <_malloc_r+0x22>
 8007ab6:	6862      	ldr	r2, [r4, #4]
 8007ab8:	42a3      	cmp	r3, r4
 8007aba:	bf0c      	ite	eq
 8007abc:	f8c8 2000 	streq.w	r2, [r8]
 8007ac0:	605a      	strne	r2, [r3, #4]
 8007ac2:	e7eb      	b.n	8007a9c <_malloc_r+0xa8>
 8007ac4:	4623      	mov	r3, r4
 8007ac6:	6864      	ldr	r4, [r4, #4]
 8007ac8:	e7ae      	b.n	8007a28 <_malloc_r+0x34>
 8007aca:	463c      	mov	r4, r7
 8007acc:	687f      	ldr	r7, [r7, #4]
 8007ace:	e7b6      	b.n	8007a3e <_malloc_r+0x4a>
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	42a3      	cmp	r3, r4
 8007ad6:	d1fb      	bne.n	8007ad0 <_malloc_r+0xdc>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	6053      	str	r3, [r2, #4]
 8007adc:	e7de      	b.n	8007a9c <_malloc_r+0xa8>
 8007ade:	230c      	movs	r3, #12
 8007ae0:	6033      	str	r3, [r6, #0]
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f000 f80c 	bl	8007b00 <__malloc_unlock>
 8007ae8:	e794      	b.n	8007a14 <_malloc_r+0x20>
 8007aea:	6005      	str	r5, [r0, #0]
 8007aec:	e7d6      	b.n	8007a9c <_malloc_r+0xa8>
 8007aee:	bf00      	nop
 8007af0:	20000490 	.word	0x20000490

08007af4 <__malloc_lock>:
 8007af4:	4801      	ldr	r0, [pc, #4]	@ (8007afc <__malloc_lock+0x8>)
 8007af6:	f7ff bf0e 	b.w	8007916 <__retarget_lock_acquire_recursive>
 8007afa:	bf00      	nop
 8007afc:	20000488 	.word	0x20000488

08007b00 <__malloc_unlock>:
 8007b00:	4801      	ldr	r0, [pc, #4]	@ (8007b08 <__malloc_unlock+0x8>)
 8007b02:	f7ff bf09 	b.w	8007918 <__retarget_lock_release_recursive>
 8007b06:	bf00      	nop
 8007b08:	20000488 	.word	0x20000488

08007b0c <__sfputc_r>:
 8007b0c:	6893      	ldr	r3, [r2, #8]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	b410      	push	{r4}
 8007b14:	6093      	str	r3, [r2, #8]
 8007b16:	da08      	bge.n	8007b2a <__sfputc_r+0x1e>
 8007b18:	6994      	ldr	r4, [r2, #24]
 8007b1a:	42a3      	cmp	r3, r4
 8007b1c:	db01      	blt.n	8007b22 <__sfputc_r+0x16>
 8007b1e:	290a      	cmp	r1, #10
 8007b20:	d103      	bne.n	8007b2a <__sfputc_r+0x1e>
 8007b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b26:	f000 bb6d 	b.w	8008204 <__swbuf_r>
 8007b2a:	6813      	ldr	r3, [r2, #0]
 8007b2c:	1c58      	adds	r0, r3, #1
 8007b2e:	6010      	str	r0, [r2, #0]
 8007b30:	7019      	strb	r1, [r3, #0]
 8007b32:	4608      	mov	r0, r1
 8007b34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <__sfputs_r>:
 8007b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3c:	4606      	mov	r6, r0
 8007b3e:	460f      	mov	r7, r1
 8007b40:	4614      	mov	r4, r2
 8007b42:	18d5      	adds	r5, r2, r3
 8007b44:	42ac      	cmp	r4, r5
 8007b46:	d101      	bne.n	8007b4c <__sfputs_r+0x12>
 8007b48:	2000      	movs	r0, #0
 8007b4a:	e007      	b.n	8007b5c <__sfputs_r+0x22>
 8007b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b50:	463a      	mov	r2, r7
 8007b52:	4630      	mov	r0, r6
 8007b54:	f7ff ffda 	bl	8007b0c <__sfputc_r>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d1f3      	bne.n	8007b44 <__sfputs_r+0xa>
 8007b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b60 <_vfiprintf_r>:
 8007b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b64:	460d      	mov	r5, r1
 8007b66:	b09d      	sub	sp, #116	@ 0x74
 8007b68:	4614      	mov	r4, r2
 8007b6a:	4698      	mov	r8, r3
 8007b6c:	4606      	mov	r6, r0
 8007b6e:	b118      	cbz	r0, 8007b78 <_vfiprintf_r+0x18>
 8007b70:	6a03      	ldr	r3, [r0, #32]
 8007b72:	b90b      	cbnz	r3, 8007b78 <_vfiprintf_r+0x18>
 8007b74:	f7ff fdb8 	bl	80076e8 <__sinit>
 8007b78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b7a:	07d9      	lsls	r1, r3, #31
 8007b7c:	d405      	bmi.n	8007b8a <_vfiprintf_r+0x2a>
 8007b7e:	89ab      	ldrh	r3, [r5, #12]
 8007b80:	059a      	lsls	r2, r3, #22
 8007b82:	d402      	bmi.n	8007b8a <_vfiprintf_r+0x2a>
 8007b84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b86:	f7ff fec6 	bl	8007916 <__retarget_lock_acquire_recursive>
 8007b8a:	89ab      	ldrh	r3, [r5, #12]
 8007b8c:	071b      	lsls	r3, r3, #28
 8007b8e:	d501      	bpl.n	8007b94 <_vfiprintf_r+0x34>
 8007b90:	692b      	ldr	r3, [r5, #16]
 8007b92:	b99b      	cbnz	r3, 8007bbc <_vfiprintf_r+0x5c>
 8007b94:	4629      	mov	r1, r5
 8007b96:	4630      	mov	r0, r6
 8007b98:	f000 fb72 	bl	8008280 <__swsetup_r>
 8007b9c:	b170      	cbz	r0, 8007bbc <_vfiprintf_r+0x5c>
 8007b9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ba0:	07dc      	lsls	r4, r3, #31
 8007ba2:	d504      	bpl.n	8007bae <_vfiprintf_r+0x4e>
 8007ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba8:	b01d      	add	sp, #116	@ 0x74
 8007baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bae:	89ab      	ldrh	r3, [r5, #12]
 8007bb0:	0598      	lsls	r0, r3, #22
 8007bb2:	d4f7      	bmi.n	8007ba4 <_vfiprintf_r+0x44>
 8007bb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bb6:	f7ff feaf 	bl	8007918 <__retarget_lock_release_recursive>
 8007bba:	e7f3      	b.n	8007ba4 <_vfiprintf_r+0x44>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bc0:	2320      	movs	r3, #32
 8007bc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007bc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bca:	2330      	movs	r3, #48	@ 0x30
 8007bcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007d7c <_vfiprintf_r+0x21c>
 8007bd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bd4:	f04f 0901 	mov.w	r9, #1
 8007bd8:	4623      	mov	r3, r4
 8007bda:	469a      	mov	sl, r3
 8007bdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007be0:	b10a      	cbz	r2, 8007be6 <_vfiprintf_r+0x86>
 8007be2:	2a25      	cmp	r2, #37	@ 0x25
 8007be4:	d1f9      	bne.n	8007bda <_vfiprintf_r+0x7a>
 8007be6:	ebba 0b04 	subs.w	fp, sl, r4
 8007bea:	d00b      	beq.n	8007c04 <_vfiprintf_r+0xa4>
 8007bec:	465b      	mov	r3, fp
 8007bee:	4622      	mov	r2, r4
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f7ff ffa1 	bl	8007b3a <__sfputs_r>
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	f000 80a7 	beq.w	8007d4c <_vfiprintf_r+0x1ec>
 8007bfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c00:	445a      	add	r2, fp
 8007c02:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c04:	f89a 3000 	ldrb.w	r3, [sl]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 809f 	beq.w	8007d4c <_vfiprintf_r+0x1ec>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	f04f 32ff 	mov.w	r2, #4294967295
 8007c14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c18:	f10a 0a01 	add.w	sl, sl, #1
 8007c1c:	9304      	str	r3, [sp, #16]
 8007c1e:	9307      	str	r3, [sp, #28]
 8007c20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c24:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c26:	4654      	mov	r4, sl
 8007c28:	2205      	movs	r2, #5
 8007c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c2e:	4853      	ldr	r0, [pc, #332]	@ (8007d7c <_vfiprintf_r+0x21c>)
 8007c30:	f7f8 faf6 	bl	8000220 <memchr>
 8007c34:	9a04      	ldr	r2, [sp, #16]
 8007c36:	b9d8      	cbnz	r0, 8007c70 <_vfiprintf_r+0x110>
 8007c38:	06d1      	lsls	r1, r2, #27
 8007c3a:	bf44      	itt	mi
 8007c3c:	2320      	movmi	r3, #32
 8007c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c42:	0713      	lsls	r3, r2, #28
 8007c44:	bf44      	itt	mi
 8007c46:	232b      	movmi	r3, #43	@ 0x2b
 8007c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c50:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c52:	d015      	beq.n	8007c80 <_vfiprintf_r+0x120>
 8007c54:	9a07      	ldr	r2, [sp, #28]
 8007c56:	4654      	mov	r4, sl
 8007c58:	2000      	movs	r0, #0
 8007c5a:	f04f 0c0a 	mov.w	ip, #10
 8007c5e:	4621      	mov	r1, r4
 8007c60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c64:	3b30      	subs	r3, #48	@ 0x30
 8007c66:	2b09      	cmp	r3, #9
 8007c68:	d94b      	bls.n	8007d02 <_vfiprintf_r+0x1a2>
 8007c6a:	b1b0      	cbz	r0, 8007c9a <_vfiprintf_r+0x13a>
 8007c6c:	9207      	str	r2, [sp, #28]
 8007c6e:	e014      	b.n	8007c9a <_vfiprintf_r+0x13a>
 8007c70:	eba0 0308 	sub.w	r3, r0, r8
 8007c74:	fa09 f303 	lsl.w	r3, r9, r3
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	9304      	str	r3, [sp, #16]
 8007c7c:	46a2      	mov	sl, r4
 8007c7e:	e7d2      	b.n	8007c26 <_vfiprintf_r+0xc6>
 8007c80:	9b03      	ldr	r3, [sp, #12]
 8007c82:	1d19      	adds	r1, r3, #4
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	9103      	str	r1, [sp, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	bfbb      	ittet	lt
 8007c8c:	425b      	neglt	r3, r3
 8007c8e:	f042 0202 	orrlt.w	r2, r2, #2
 8007c92:	9307      	strge	r3, [sp, #28]
 8007c94:	9307      	strlt	r3, [sp, #28]
 8007c96:	bfb8      	it	lt
 8007c98:	9204      	strlt	r2, [sp, #16]
 8007c9a:	7823      	ldrb	r3, [r4, #0]
 8007c9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c9e:	d10a      	bne.n	8007cb6 <_vfiprintf_r+0x156>
 8007ca0:	7863      	ldrb	r3, [r4, #1]
 8007ca2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ca4:	d132      	bne.n	8007d0c <_vfiprintf_r+0x1ac>
 8007ca6:	9b03      	ldr	r3, [sp, #12]
 8007ca8:	1d1a      	adds	r2, r3, #4
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	9203      	str	r2, [sp, #12]
 8007cae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007cb2:	3402      	adds	r4, #2
 8007cb4:	9305      	str	r3, [sp, #20]
 8007cb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007d8c <_vfiprintf_r+0x22c>
 8007cba:	7821      	ldrb	r1, [r4, #0]
 8007cbc:	2203      	movs	r2, #3
 8007cbe:	4650      	mov	r0, sl
 8007cc0:	f7f8 faae 	bl	8000220 <memchr>
 8007cc4:	b138      	cbz	r0, 8007cd6 <_vfiprintf_r+0x176>
 8007cc6:	9b04      	ldr	r3, [sp, #16]
 8007cc8:	eba0 000a 	sub.w	r0, r0, sl
 8007ccc:	2240      	movs	r2, #64	@ 0x40
 8007cce:	4082      	lsls	r2, r0
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	3401      	adds	r4, #1
 8007cd4:	9304      	str	r3, [sp, #16]
 8007cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cda:	4829      	ldr	r0, [pc, #164]	@ (8007d80 <_vfiprintf_r+0x220>)
 8007cdc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ce0:	2206      	movs	r2, #6
 8007ce2:	f7f8 fa9d 	bl	8000220 <memchr>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d03f      	beq.n	8007d6a <_vfiprintf_r+0x20a>
 8007cea:	4b26      	ldr	r3, [pc, #152]	@ (8007d84 <_vfiprintf_r+0x224>)
 8007cec:	bb1b      	cbnz	r3, 8007d36 <_vfiprintf_r+0x1d6>
 8007cee:	9b03      	ldr	r3, [sp, #12]
 8007cf0:	3307      	adds	r3, #7
 8007cf2:	f023 0307 	bic.w	r3, r3, #7
 8007cf6:	3308      	adds	r3, #8
 8007cf8:	9303      	str	r3, [sp, #12]
 8007cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cfc:	443b      	add	r3, r7
 8007cfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d00:	e76a      	b.n	8007bd8 <_vfiprintf_r+0x78>
 8007d02:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d06:	460c      	mov	r4, r1
 8007d08:	2001      	movs	r0, #1
 8007d0a:	e7a8      	b.n	8007c5e <_vfiprintf_r+0xfe>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	3401      	adds	r4, #1
 8007d10:	9305      	str	r3, [sp, #20]
 8007d12:	4619      	mov	r1, r3
 8007d14:	f04f 0c0a 	mov.w	ip, #10
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d1e:	3a30      	subs	r2, #48	@ 0x30
 8007d20:	2a09      	cmp	r2, #9
 8007d22:	d903      	bls.n	8007d2c <_vfiprintf_r+0x1cc>
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d0c6      	beq.n	8007cb6 <_vfiprintf_r+0x156>
 8007d28:	9105      	str	r1, [sp, #20]
 8007d2a:	e7c4      	b.n	8007cb6 <_vfiprintf_r+0x156>
 8007d2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d30:	4604      	mov	r4, r0
 8007d32:	2301      	movs	r3, #1
 8007d34:	e7f0      	b.n	8007d18 <_vfiprintf_r+0x1b8>
 8007d36:	ab03      	add	r3, sp, #12
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	462a      	mov	r2, r5
 8007d3c:	4b12      	ldr	r3, [pc, #72]	@ (8007d88 <_vfiprintf_r+0x228>)
 8007d3e:	a904      	add	r1, sp, #16
 8007d40:	4630      	mov	r0, r6
 8007d42:	f3af 8000 	nop.w
 8007d46:	4607      	mov	r7, r0
 8007d48:	1c78      	adds	r0, r7, #1
 8007d4a:	d1d6      	bne.n	8007cfa <_vfiprintf_r+0x19a>
 8007d4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d4e:	07d9      	lsls	r1, r3, #31
 8007d50:	d405      	bmi.n	8007d5e <_vfiprintf_r+0x1fe>
 8007d52:	89ab      	ldrh	r3, [r5, #12]
 8007d54:	059a      	lsls	r2, r3, #22
 8007d56:	d402      	bmi.n	8007d5e <_vfiprintf_r+0x1fe>
 8007d58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d5a:	f7ff fddd 	bl	8007918 <__retarget_lock_release_recursive>
 8007d5e:	89ab      	ldrh	r3, [r5, #12]
 8007d60:	065b      	lsls	r3, r3, #25
 8007d62:	f53f af1f 	bmi.w	8007ba4 <_vfiprintf_r+0x44>
 8007d66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d68:	e71e      	b.n	8007ba8 <_vfiprintf_r+0x48>
 8007d6a:	ab03      	add	r3, sp, #12
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	462a      	mov	r2, r5
 8007d70:	4b05      	ldr	r3, [pc, #20]	@ (8007d88 <_vfiprintf_r+0x228>)
 8007d72:	a904      	add	r1, sp, #16
 8007d74:	4630      	mov	r0, r6
 8007d76:	f000 f879 	bl	8007e6c <_printf_i>
 8007d7a:	e7e4      	b.n	8007d46 <_vfiprintf_r+0x1e6>
 8007d7c:	08008805 	.word	0x08008805
 8007d80:	0800880f 	.word	0x0800880f
 8007d84:	00000000 	.word	0x00000000
 8007d88:	08007b3b 	.word	0x08007b3b
 8007d8c:	0800880b 	.word	0x0800880b

08007d90 <_printf_common>:
 8007d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d94:	4616      	mov	r6, r2
 8007d96:	4698      	mov	r8, r3
 8007d98:	688a      	ldr	r2, [r1, #8]
 8007d9a:	690b      	ldr	r3, [r1, #16]
 8007d9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007da0:	4293      	cmp	r3, r2
 8007da2:	bfb8      	it	lt
 8007da4:	4613      	movlt	r3, r2
 8007da6:	6033      	str	r3, [r6, #0]
 8007da8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007dac:	4607      	mov	r7, r0
 8007dae:	460c      	mov	r4, r1
 8007db0:	b10a      	cbz	r2, 8007db6 <_printf_common+0x26>
 8007db2:	3301      	adds	r3, #1
 8007db4:	6033      	str	r3, [r6, #0]
 8007db6:	6823      	ldr	r3, [r4, #0]
 8007db8:	0699      	lsls	r1, r3, #26
 8007dba:	bf42      	ittt	mi
 8007dbc:	6833      	ldrmi	r3, [r6, #0]
 8007dbe:	3302      	addmi	r3, #2
 8007dc0:	6033      	strmi	r3, [r6, #0]
 8007dc2:	6825      	ldr	r5, [r4, #0]
 8007dc4:	f015 0506 	ands.w	r5, r5, #6
 8007dc8:	d106      	bne.n	8007dd8 <_printf_common+0x48>
 8007dca:	f104 0a19 	add.w	sl, r4, #25
 8007dce:	68e3      	ldr	r3, [r4, #12]
 8007dd0:	6832      	ldr	r2, [r6, #0]
 8007dd2:	1a9b      	subs	r3, r3, r2
 8007dd4:	42ab      	cmp	r3, r5
 8007dd6:	dc26      	bgt.n	8007e26 <_printf_common+0x96>
 8007dd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ddc:	6822      	ldr	r2, [r4, #0]
 8007dde:	3b00      	subs	r3, #0
 8007de0:	bf18      	it	ne
 8007de2:	2301      	movne	r3, #1
 8007de4:	0692      	lsls	r2, r2, #26
 8007de6:	d42b      	bmi.n	8007e40 <_printf_common+0xb0>
 8007de8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007dec:	4641      	mov	r1, r8
 8007dee:	4638      	mov	r0, r7
 8007df0:	47c8      	blx	r9
 8007df2:	3001      	adds	r0, #1
 8007df4:	d01e      	beq.n	8007e34 <_printf_common+0xa4>
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	6922      	ldr	r2, [r4, #16]
 8007dfa:	f003 0306 	and.w	r3, r3, #6
 8007dfe:	2b04      	cmp	r3, #4
 8007e00:	bf02      	ittt	eq
 8007e02:	68e5      	ldreq	r5, [r4, #12]
 8007e04:	6833      	ldreq	r3, [r6, #0]
 8007e06:	1aed      	subeq	r5, r5, r3
 8007e08:	68a3      	ldr	r3, [r4, #8]
 8007e0a:	bf0c      	ite	eq
 8007e0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e10:	2500      	movne	r5, #0
 8007e12:	4293      	cmp	r3, r2
 8007e14:	bfc4      	itt	gt
 8007e16:	1a9b      	subgt	r3, r3, r2
 8007e18:	18ed      	addgt	r5, r5, r3
 8007e1a:	2600      	movs	r6, #0
 8007e1c:	341a      	adds	r4, #26
 8007e1e:	42b5      	cmp	r5, r6
 8007e20:	d11a      	bne.n	8007e58 <_printf_common+0xc8>
 8007e22:	2000      	movs	r0, #0
 8007e24:	e008      	b.n	8007e38 <_printf_common+0xa8>
 8007e26:	2301      	movs	r3, #1
 8007e28:	4652      	mov	r2, sl
 8007e2a:	4641      	mov	r1, r8
 8007e2c:	4638      	mov	r0, r7
 8007e2e:	47c8      	blx	r9
 8007e30:	3001      	adds	r0, #1
 8007e32:	d103      	bne.n	8007e3c <_printf_common+0xac>
 8007e34:	f04f 30ff 	mov.w	r0, #4294967295
 8007e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e3c:	3501      	adds	r5, #1
 8007e3e:	e7c6      	b.n	8007dce <_printf_common+0x3e>
 8007e40:	18e1      	adds	r1, r4, r3
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	2030      	movs	r0, #48	@ 0x30
 8007e46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e4a:	4422      	add	r2, r4
 8007e4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e54:	3302      	adds	r3, #2
 8007e56:	e7c7      	b.n	8007de8 <_printf_common+0x58>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	4641      	mov	r1, r8
 8007e5e:	4638      	mov	r0, r7
 8007e60:	47c8      	blx	r9
 8007e62:	3001      	adds	r0, #1
 8007e64:	d0e6      	beq.n	8007e34 <_printf_common+0xa4>
 8007e66:	3601      	adds	r6, #1
 8007e68:	e7d9      	b.n	8007e1e <_printf_common+0x8e>
	...

08007e6c <_printf_i>:
 8007e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e70:	7e0f      	ldrb	r7, [r1, #24]
 8007e72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e74:	2f78      	cmp	r7, #120	@ 0x78
 8007e76:	4691      	mov	r9, r2
 8007e78:	4680      	mov	r8, r0
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	469a      	mov	sl, r3
 8007e7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e82:	d807      	bhi.n	8007e94 <_printf_i+0x28>
 8007e84:	2f62      	cmp	r7, #98	@ 0x62
 8007e86:	d80a      	bhi.n	8007e9e <_printf_i+0x32>
 8007e88:	2f00      	cmp	r7, #0
 8007e8a:	f000 80d2 	beq.w	8008032 <_printf_i+0x1c6>
 8007e8e:	2f58      	cmp	r7, #88	@ 0x58
 8007e90:	f000 80b9 	beq.w	8008006 <_printf_i+0x19a>
 8007e94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e9c:	e03a      	b.n	8007f14 <_printf_i+0xa8>
 8007e9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ea2:	2b15      	cmp	r3, #21
 8007ea4:	d8f6      	bhi.n	8007e94 <_printf_i+0x28>
 8007ea6:	a101      	add	r1, pc, #4	@ (adr r1, 8007eac <_printf_i+0x40>)
 8007ea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007eac:	08007f05 	.word	0x08007f05
 8007eb0:	08007f19 	.word	0x08007f19
 8007eb4:	08007e95 	.word	0x08007e95
 8007eb8:	08007e95 	.word	0x08007e95
 8007ebc:	08007e95 	.word	0x08007e95
 8007ec0:	08007e95 	.word	0x08007e95
 8007ec4:	08007f19 	.word	0x08007f19
 8007ec8:	08007e95 	.word	0x08007e95
 8007ecc:	08007e95 	.word	0x08007e95
 8007ed0:	08007e95 	.word	0x08007e95
 8007ed4:	08007e95 	.word	0x08007e95
 8007ed8:	08008019 	.word	0x08008019
 8007edc:	08007f43 	.word	0x08007f43
 8007ee0:	08007fd3 	.word	0x08007fd3
 8007ee4:	08007e95 	.word	0x08007e95
 8007ee8:	08007e95 	.word	0x08007e95
 8007eec:	0800803b 	.word	0x0800803b
 8007ef0:	08007e95 	.word	0x08007e95
 8007ef4:	08007f43 	.word	0x08007f43
 8007ef8:	08007e95 	.word	0x08007e95
 8007efc:	08007e95 	.word	0x08007e95
 8007f00:	08007fdb 	.word	0x08007fdb
 8007f04:	6833      	ldr	r3, [r6, #0]
 8007f06:	1d1a      	adds	r2, r3, #4
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6032      	str	r2, [r6, #0]
 8007f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f14:	2301      	movs	r3, #1
 8007f16:	e09d      	b.n	8008054 <_printf_i+0x1e8>
 8007f18:	6833      	ldr	r3, [r6, #0]
 8007f1a:	6820      	ldr	r0, [r4, #0]
 8007f1c:	1d19      	adds	r1, r3, #4
 8007f1e:	6031      	str	r1, [r6, #0]
 8007f20:	0606      	lsls	r6, r0, #24
 8007f22:	d501      	bpl.n	8007f28 <_printf_i+0xbc>
 8007f24:	681d      	ldr	r5, [r3, #0]
 8007f26:	e003      	b.n	8007f30 <_printf_i+0xc4>
 8007f28:	0645      	lsls	r5, r0, #25
 8007f2a:	d5fb      	bpl.n	8007f24 <_printf_i+0xb8>
 8007f2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f30:	2d00      	cmp	r5, #0
 8007f32:	da03      	bge.n	8007f3c <_printf_i+0xd0>
 8007f34:	232d      	movs	r3, #45	@ 0x2d
 8007f36:	426d      	negs	r5, r5
 8007f38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f3c:	4859      	ldr	r0, [pc, #356]	@ (80080a4 <_printf_i+0x238>)
 8007f3e:	230a      	movs	r3, #10
 8007f40:	e011      	b.n	8007f66 <_printf_i+0xfa>
 8007f42:	6821      	ldr	r1, [r4, #0]
 8007f44:	6833      	ldr	r3, [r6, #0]
 8007f46:	0608      	lsls	r0, r1, #24
 8007f48:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f4c:	d402      	bmi.n	8007f54 <_printf_i+0xe8>
 8007f4e:	0649      	lsls	r1, r1, #25
 8007f50:	bf48      	it	mi
 8007f52:	b2ad      	uxthmi	r5, r5
 8007f54:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f56:	4853      	ldr	r0, [pc, #332]	@ (80080a4 <_printf_i+0x238>)
 8007f58:	6033      	str	r3, [r6, #0]
 8007f5a:	bf14      	ite	ne
 8007f5c:	230a      	movne	r3, #10
 8007f5e:	2308      	moveq	r3, #8
 8007f60:	2100      	movs	r1, #0
 8007f62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f66:	6866      	ldr	r6, [r4, #4]
 8007f68:	60a6      	str	r6, [r4, #8]
 8007f6a:	2e00      	cmp	r6, #0
 8007f6c:	bfa2      	ittt	ge
 8007f6e:	6821      	ldrge	r1, [r4, #0]
 8007f70:	f021 0104 	bicge.w	r1, r1, #4
 8007f74:	6021      	strge	r1, [r4, #0]
 8007f76:	b90d      	cbnz	r5, 8007f7c <_printf_i+0x110>
 8007f78:	2e00      	cmp	r6, #0
 8007f7a:	d04b      	beq.n	8008014 <_printf_i+0x1a8>
 8007f7c:	4616      	mov	r6, r2
 8007f7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f82:	fb03 5711 	mls	r7, r3, r1, r5
 8007f86:	5dc7      	ldrb	r7, [r0, r7]
 8007f88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f8c:	462f      	mov	r7, r5
 8007f8e:	42bb      	cmp	r3, r7
 8007f90:	460d      	mov	r5, r1
 8007f92:	d9f4      	bls.n	8007f7e <_printf_i+0x112>
 8007f94:	2b08      	cmp	r3, #8
 8007f96:	d10b      	bne.n	8007fb0 <_printf_i+0x144>
 8007f98:	6823      	ldr	r3, [r4, #0]
 8007f9a:	07df      	lsls	r7, r3, #31
 8007f9c:	d508      	bpl.n	8007fb0 <_printf_i+0x144>
 8007f9e:	6923      	ldr	r3, [r4, #16]
 8007fa0:	6861      	ldr	r1, [r4, #4]
 8007fa2:	4299      	cmp	r1, r3
 8007fa4:	bfde      	ittt	le
 8007fa6:	2330      	movle	r3, #48	@ 0x30
 8007fa8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007fac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007fb0:	1b92      	subs	r2, r2, r6
 8007fb2:	6122      	str	r2, [r4, #16]
 8007fb4:	f8cd a000 	str.w	sl, [sp]
 8007fb8:	464b      	mov	r3, r9
 8007fba:	aa03      	add	r2, sp, #12
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	4640      	mov	r0, r8
 8007fc0:	f7ff fee6 	bl	8007d90 <_printf_common>
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	d14a      	bne.n	800805e <_printf_i+0x1f2>
 8007fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fcc:	b004      	add	sp, #16
 8007fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	f043 0320 	orr.w	r3, r3, #32
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	4833      	ldr	r0, [pc, #204]	@ (80080a8 <_printf_i+0x23c>)
 8007fdc:	2778      	movs	r7, #120	@ 0x78
 8007fde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	6831      	ldr	r1, [r6, #0]
 8007fe6:	061f      	lsls	r7, r3, #24
 8007fe8:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fec:	d402      	bmi.n	8007ff4 <_printf_i+0x188>
 8007fee:	065f      	lsls	r7, r3, #25
 8007ff0:	bf48      	it	mi
 8007ff2:	b2ad      	uxthmi	r5, r5
 8007ff4:	6031      	str	r1, [r6, #0]
 8007ff6:	07d9      	lsls	r1, r3, #31
 8007ff8:	bf44      	itt	mi
 8007ffa:	f043 0320 	orrmi.w	r3, r3, #32
 8007ffe:	6023      	strmi	r3, [r4, #0]
 8008000:	b11d      	cbz	r5, 800800a <_printf_i+0x19e>
 8008002:	2310      	movs	r3, #16
 8008004:	e7ac      	b.n	8007f60 <_printf_i+0xf4>
 8008006:	4827      	ldr	r0, [pc, #156]	@ (80080a4 <_printf_i+0x238>)
 8008008:	e7e9      	b.n	8007fde <_printf_i+0x172>
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	f023 0320 	bic.w	r3, r3, #32
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	e7f6      	b.n	8008002 <_printf_i+0x196>
 8008014:	4616      	mov	r6, r2
 8008016:	e7bd      	b.n	8007f94 <_printf_i+0x128>
 8008018:	6833      	ldr	r3, [r6, #0]
 800801a:	6825      	ldr	r5, [r4, #0]
 800801c:	6961      	ldr	r1, [r4, #20]
 800801e:	1d18      	adds	r0, r3, #4
 8008020:	6030      	str	r0, [r6, #0]
 8008022:	062e      	lsls	r6, r5, #24
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	d501      	bpl.n	800802c <_printf_i+0x1c0>
 8008028:	6019      	str	r1, [r3, #0]
 800802a:	e002      	b.n	8008032 <_printf_i+0x1c6>
 800802c:	0668      	lsls	r0, r5, #25
 800802e:	d5fb      	bpl.n	8008028 <_printf_i+0x1bc>
 8008030:	8019      	strh	r1, [r3, #0]
 8008032:	2300      	movs	r3, #0
 8008034:	6123      	str	r3, [r4, #16]
 8008036:	4616      	mov	r6, r2
 8008038:	e7bc      	b.n	8007fb4 <_printf_i+0x148>
 800803a:	6833      	ldr	r3, [r6, #0]
 800803c:	1d1a      	adds	r2, r3, #4
 800803e:	6032      	str	r2, [r6, #0]
 8008040:	681e      	ldr	r6, [r3, #0]
 8008042:	6862      	ldr	r2, [r4, #4]
 8008044:	2100      	movs	r1, #0
 8008046:	4630      	mov	r0, r6
 8008048:	f7f8 f8ea 	bl	8000220 <memchr>
 800804c:	b108      	cbz	r0, 8008052 <_printf_i+0x1e6>
 800804e:	1b80      	subs	r0, r0, r6
 8008050:	6060      	str	r0, [r4, #4]
 8008052:	6863      	ldr	r3, [r4, #4]
 8008054:	6123      	str	r3, [r4, #16]
 8008056:	2300      	movs	r3, #0
 8008058:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800805c:	e7aa      	b.n	8007fb4 <_printf_i+0x148>
 800805e:	6923      	ldr	r3, [r4, #16]
 8008060:	4632      	mov	r2, r6
 8008062:	4649      	mov	r1, r9
 8008064:	4640      	mov	r0, r8
 8008066:	47d0      	blx	sl
 8008068:	3001      	adds	r0, #1
 800806a:	d0ad      	beq.n	8007fc8 <_printf_i+0x15c>
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	079b      	lsls	r3, r3, #30
 8008070:	d413      	bmi.n	800809a <_printf_i+0x22e>
 8008072:	68e0      	ldr	r0, [r4, #12]
 8008074:	9b03      	ldr	r3, [sp, #12]
 8008076:	4298      	cmp	r0, r3
 8008078:	bfb8      	it	lt
 800807a:	4618      	movlt	r0, r3
 800807c:	e7a6      	b.n	8007fcc <_printf_i+0x160>
 800807e:	2301      	movs	r3, #1
 8008080:	4632      	mov	r2, r6
 8008082:	4649      	mov	r1, r9
 8008084:	4640      	mov	r0, r8
 8008086:	47d0      	blx	sl
 8008088:	3001      	adds	r0, #1
 800808a:	d09d      	beq.n	8007fc8 <_printf_i+0x15c>
 800808c:	3501      	adds	r5, #1
 800808e:	68e3      	ldr	r3, [r4, #12]
 8008090:	9903      	ldr	r1, [sp, #12]
 8008092:	1a5b      	subs	r3, r3, r1
 8008094:	42ab      	cmp	r3, r5
 8008096:	dcf2      	bgt.n	800807e <_printf_i+0x212>
 8008098:	e7eb      	b.n	8008072 <_printf_i+0x206>
 800809a:	2500      	movs	r5, #0
 800809c:	f104 0619 	add.w	r6, r4, #25
 80080a0:	e7f5      	b.n	800808e <_printf_i+0x222>
 80080a2:	bf00      	nop
 80080a4:	08008816 	.word	0x08008816
 80080a8:	08008827 	.word	0x08008827

080080ac <__sflush_r>:
 80080ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b4:	0716      	lsls	r6, r2, #28
 80080b6:	4605      	mov	r5, r0
 80080b8:	460c      	mov	r4, r1
 80080ba:	d454      	bmi.n	8008166 <__sflush_r+0xba>
 80080bc:	684b      	ldr	r3, [r1, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	dc02      	bgt.n	80080c8 <__sflush_r+0x1c>
 80080c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	dd48      	ble.n	800815a <__sflush_r+0xae>
 80080c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80080ca:	2e00      	cmp	r6, #0
 80080cc:	d045      	beq.n	800815a <__sflush_r+0xae>
 80080ce:	2300      	movs	r3, #0
 80080d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80080d4:	682f      	ldr	r7, [r5, #0]
 80080d6:	6a21      	ldr	r1, [r4, #32]
 80080d8:	602b      	str	r3, [r5, #0]
 80080da:	d030      	beq.n	800813e <__sflush_r+0x92>
 80080dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80080de:	89a3      	ldrh	r3, [r4, #12]
 80080e0:	0759      	lsls	r1, r3, #29
 80080e2:	d505      	bpl.n	80080f0 <__sflush_r+0x44>
 80080e4:	6863      	ldr	r3, [r4, #4]
 80080e6:	1ad2      	subs	r2, r2, r3
 80080e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80080ea:	b10b      	cbz	r3, 80080f0 <__sflush_r+0x44>
 80080ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080ee:	1ad2      	subs	r2, r2, r3
 80080f0:	2300      	movs	r3, #0
 80080f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80080f4:	6a21      	ldr	r1, [r4, #32]
 80080f6:	4628      	mov	r0, r5
 80080f8:	47b0      	blx	r6
 80080fa:	1c43      	adds	r3, r0, #1
 80080fc:	89a3      	ldrh	r3, [r4, #12]
 80080fe:	d106      	bne.n	800810e <__sflush_r+0x62>
 8008100:	6829      	ldr	r1, [r5, #0]
 8008102:	291d      	cmp	r1, #29
 8008104:	d82b      	bhi.n	800815e <__sflush_r+0xb2>
 8008106:	4a2a      	ldr	r2, [pc, #168]	@ (80081b0 <__sflush_r+0x104>)
 8008108:	410a      	asrs	r2, r1
 800810a:	07d6      	lsls	r6, r2, #31
 800810c:	d427      	bmi.n	800815e <__sflush_r+0xb2>
 800810e:	2200      	movs	r2, #0
 8008110:	6062      	str	r2, [r4, #4]
 8008112:	04d9      	lsls	r1, r3, #19
 8008114:	6922      	ldr	r2, [r4, #16]
 8008116:	6022      	str	r2, [r4, #0]
 8008118:	d504      	bpl.n	8008124 <__sflush_r+0x78>
 800811a:	1c42      	adds	r2, r0, #1
 800811c:	d101      	bne.n	8008122 <__sflush_r+0x76>
 800811e:	682b      	ldr	r3, [r5, #0]
 8008120:	b903      	cbnz	r3, 8008124 <__sflush_r+0x78>
 8008122:	6560      	str	r0, [r4, #84]	@ 0x54
 8008124:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008126:	602f      	str	r7, [r5, #0]
 8008128:	b1b9      	cbz	r1, 800815a <__sflush_r+0xae>
 800812a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800812e:	4299      	cmp	r1, r3
 8008130:	d002      	beq.n	8008138 <__sflush_r+0x8c>
 8008132:	4628      	mov	r0, r5
 8008134:	f7ff fbf2 	bl	800791c <_free_r>
 8008138:	2300      	movs	r3, #0
 800813a:	6363      	str	r3, [r4, #52]	@ 0x34
 800813c:	e00d      	b.n	800815a <__sflush_r+0xae>
 800813e:	2301      	movs	r3, #1
 8008140:	4628      	mov	r0, r5
 8008142:	47b0      	blx	r6
 8008144:	4602      	mov	r2, r0
 8008146:	1c50      	adds	r0, r2, #1
 8008148:	d1c9      	bne.n	80080de <__sflush_r+0x32>
 800814a:	682b      	ldr	r3, [r5, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0c6      	beq.n	80080de <__sflush_r+0x32>
 8008150:	2b1d      	cmp	r3, #29
 8008152:	d001      	beq.n	8008158 <__sflush_r+0xac>
 8008154:	2b16      	cmp	r3, #22
 8008156:	d11e      	bne.n	8008196 <__sflush_r+0xea>
 8008158:	602f      	str	r7, [r5, #0]
 800815a:	2000      	movs	r0, #0
 800815c:	e022      	b.n	80081a4 <__sflush_r+0xf8>
 800815e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008162:	b21b      	sxth	r3, r3
 8008164:	e01b      	b.n	800819e <__sflush_r+0xf2>
 8008166:	690f      	ldr	r7, [r1, #16]
 8008168:	2f00      	cmp	r7, #0
 800816a:	d0f6      	beq.n	800815a <__sflush_r+0xae>
 800816c:	0793      	lsls	r3, r2, #30
 800816e:	680e      	ldr	r6, [r1, #0]
 8008170:	bf08      	it	eq
 8008172:	694b      	ldreq	r3, [r1, #20]
 8008174:	600f      	str	r7, [r1, #0]
 8008176:	bf18      	it	ne
 8008178:	2300      	movne	r3, #0
 800817a:	eba6 0807 	sub.w	r8, r6, r7
 800817e:	608b      	str	r3, [r1, #8]
 8008180:	f1b8 0f00 	cmp.w	r8, #0
 8008184:	dde9      	ble.n	800815a <__sflush_r+0xae>
 8008186:	6a21      	ldr	r1, [r4, #32]
 8008188:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800818a:	4643      	mov	r3, r8
 800818c:	463a      	mov	r2, r7
 800818e:	4628      	mov	r0, r5
 8008190:	47b0      	blx	r6
 8008192:	2800      	cmp	r0, #0
 8008194:	dc08      	bgt.n	80081a8 <__sflush_r+0xfc>
 8008196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800819a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800819e:	81a3      	strh	r3, [r4, #12]
 80081a0:	f04f 30ff 	mov.w	r0, #4294967295
 80081a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081a8:	4407      	add	r7, r0
 80081aa:	eba8 0800 	sub.w	r8, r8, r0
 80081ae:	e7e7      	b.n	8008180 <__sflush_r+0xd4>
 80081b0:	dfbffffe 	.word	0xdfbffffe

080081b4 <_fflush_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	690b      	ldr	r3, [r1, #16]
 80081b8:	4605      	mov	r5, r0
 80081ba:	460c      	mov	r4, r1
 80081bc:	b913      	cbnz	r3, 80081c4 <_fflush_r+0x10>
 80081be:	2500      	movs	r5, #0
 80081c0:	4628      	mov	r0, r5
 80081c2:	bd38      	pop	{r3, r4, r5, pc}
 80081c4:	b118      	cbz	r0, 80081ce <_fflush_r+0x1a>
 80081c6:	6a03      	ldr	r3, [r0, #32]
 80081c8:	b90b      	cbnz	r3, 80081ce <_fflush_r+0x1a>
 80081ca:	f7ff fa8d 	bl	80076e8 <__sinit>
 80081ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d0f3      	beq.n	80081be <_fflush_r+0xa>
 80081d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80081d8:	07d0      	lsls	r0, r2, #31
 80081da:	d404      	bmi.n	80081e6 <_fflush_r+0x32>
 80081dc:	0599      	lsls	r1, r3, #22
 80081de:	d402      	bmi.n	80081e6 <_fflush_r+0x32>
 80081e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081e2:	f7ff fb98 	bl	8007916 <__retarget_lock_acquire_recursive>
 80081e6:	4628      	mov	r0, r5
 80081e8:	4621      	mov	r1, r4
 80081ea:	f7ff ff5f 	bl	80080ac <__sflush_r>
 80081ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081f0:	07da      	lsls	r2, r3, #31
 80081f2:	4605      	mov	r5, r0
 80081f4:	d4e4      	bmi.n	80081c0 <_fflush_r+0xc>
 80081f6:	89a3      	ldrh	r3, [r4, #12]
 80081f8:	059b      	lsls	r3, r3, #22
 80081fa:	d4e1      	bmi.n	80081c0 <_fflush_r+0xc>
 80081fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081fe:	f7ff fb8b 	bl	8007918 <__retarget_lock_release_recursive>
 8008202:	e7dd      	b.n	80081c0 <_fflush_r+0xc>

08008204 <__swbuf_r>:
 8008204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008206:	460e      	mov	r6, r1
 8008208:	4614      	mov	r4, r2
 800820a:	4605      	mov	r5, r0
 800820c:	b118      	cbz	r0, 8008216 <__swbuf_r+0x12>
 800820e:	6a03      	ldr	r3, [r0, #32]
 8008210:	b90b      	cbnz	r3, 8008216 <__swbuf_r+0x12>
 8008212:	f7ff fa69 	bl	80076e8 <__sinit>
 8008216:	69a3      	ldr	r3, [r4, #24]
 8008218:	60a3      	str	r3, [r4, #8]
 800821a:	89a3      	ldrh	r3, [r4, #12]
 800821c:	071a      	lsls	r2, r3, #28
 800821e:	d501      	bpl.n	8008224 <__swbuf_r+0x20>
 8008220:	6923      	ldr	r3, [r4, #16]
 8008222:	b943      	cbnz	r3, 8008236 <__swbuf_r+0x32>
 8008224:	4621      	mov	r1, r4
 8008226:	4628      	mov	r0, r5
 8008228:	f000 f82a 	bl	8008280 <__swsetup_r>
 800822c:	b118      	cbz	r0, 8008236 <__swbuf_r+0x32>
 800822e:	f04f 37ff 	mov.w	r7, #4294967295
 8008232:	4638      	mov	r0, r7
 8008234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008236:	6823      	ldr	r3, [r4, #0]
 8008238:	6922      	ldr	r2, [r4, #16]
 800823a:	1a98      	subs	r0, r3, r2
 800823c:	6963      	ldr	r3, [r4, #20]
 800823e:	b2f6      	uxtb	r6, r6
 8008240:	4283      	cmp	r3, r0
 8008242:	4637      	mov	r7, r6
 8008244:	dc05      	bgt.n	8008252 <__swbuf_r+0x4e>
 8008246:	4621      	mov	r1, r4
 8008248:	4628      	mov	r0, r5
 800824a:	f7ff ffb3 	bl	80081b4 <_fflush_r>
 800824e:	2800      	cmp	r0, #0
 8008250:	d1ed      	bne.n	800822e <__swbuf_r+0x2a>
 8008252:	68a3      	ldr	r3, [r4, #8]
 8008254:	3b01      	subs	r3, #1
 8008256:	60a3      	str	r3, [r4, #8]
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	6022      	str	r2, [r4, #0]
 800825e:	701e      	strb	r6, [r3, #0]
 8008260:	6962      	ldr	r2, [r4, #20]
 8008262:	1c43      	adds	r3, r0, #1
 8008264:	429a      	cmp	r2, r3
 8008266:	d004      	beq.n	8008272 <__swbuf_r+0x6e>
 8008268:	89a3      	ldrh	r3, [r4, #12]
 800826a:	07db      	lsls	r3, r3, #31
 800826c:	d5e1      	bpl.n	8008232 <__swbuf_r+0x2e>
 800826e:	2e0a      	cmp	r6, #10
 8008270:	d1df      	bne.n	8008232 <__swbuf_r+0x2e>
 8008272:	4621      	mov	r1, r4
 8008274:	4628      	mov	r0, r5
 8008276:	f7ff ff9d 	bl	80081b4 <_fflush_r>
 800827a:	2800      	cmp	r0, #0
 800827c:	d0d9      	beq.n	8008232 <__swbuf_r+0x2e>
 800827e:	e7d6      	b.n	800822e <__swbuf_r+0x2a>

08008280 <__swsetup_r>:
 8008280:	b538      	push	{r3, r4, r5, lr}
 8008282:	4b29      	ldr	r3, [pc, #164]	@ (8008328 <__swsetup_r+0xa8>)
 8008284:	4605      	mov	r5, r0
 8008286:	6818      	ldr	r0, [r3, #0]
 8008288:	460c      	mov	r4, r1
 800828a:	b118      	cbz	r0, 8008294 <__swsetup_r+0x14>
 800828c:	6a03      	ldr	r3, [r0, #32]
 800828e:	b90b      	cbnz	r3, 8008294 <__swsetup_r+0x14>
 8008290:	f7ff fa2a 	bl	80076e8 <__sinit>
 8008294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008298:	0719      	lsls	r1, r3, #28
 800829a:	d422      	bmi.n	80082e2 <__swsetup_r+0x62>
 800829c:	06da      	lsls	r2, r3, #27
 800829e:	d407      	bmi.n	80082b0 <__swsetup_r+0x30>
 80082a0:	2209      	movs	r2, #9
 80082a2:	602a      	str	r2, [r5, #0]
 80082a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082a8:	81a3      	strh	r3, [r4, #12]
 80082aa:	f04f 30ff 	mov.w	r0, #4294967295
 80082ae:	e033      	b.n	8008318 <__swsetup_r+0x98>
 80082b0:	0758      	lsls	r0, r3, #29
 80082b2:	d512      	bpl.n	80082da <__swsetup_r+0x5a>
 80082b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082b6:	b141      	cbz	r1, 80082ca <__swsetup_r+0x4a>
 80082b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082bc:	4299      	cmp	r1, r3
 80082be:	d002      	beq.n	80082c6 <__swsetup_r+0x46>
 80082c0:	4628      	mov	r0, r5
 80082c2:	f7ff fb2b 	bl	800791c <_free_r>
 80082c6:	2300      	movs	r3, #0
 80082c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80082d0:	81a3      	strh	r3, [r4, #12]
 80082d2:	2300      	movs	r3, #0
 80082d4:	6063      	str	r3, [r4, #4]
 80082d6:	6923      	ldr	r3, [r4, #16]
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	f043 0308 	orr.w	r3, r3, #8
 80082e0:	81a3      	strh	r3, [r4, #12]
 80082e2:	6923      	ldr	r3, [r4, #16]
 80082e4:	b94b      	cbnz	r3, 80082fa <__swsetup_r+0x7a>
 80082e6:	89a3      	ldrh	r3, [r4, #12]
 80082e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80082ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082f0:	d003      	beq.n	80082fa <__swsetup_r+0x7a>
 80082f2:	4621      	mov	r1, r4
 80082f4:	4628      	mov	r0, r5
 80082f6:	f000 f84f 	bl	8008398 <__smakebuf_r>
 80082fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082fe:	f013 0201 	ands.w	r2, r3, #1
 8008302:	d00a      	beq.n	800831a <__swsetup_r+0x9a>
 8008304:	2200      	movs	r2, #0
 8008306:	60a2      	str	r2, [r4, #8]
 8008308:	6962      	ldr	r2, [r4, #20]
 800830a:	4252      	negs	r2, r2
 800830c:	61a2      	str	r2, [r4, #24]
 800830e:	6922      	ldr	r2, [r4, #16]
 8008310:	b942      	cbnz	r2, 8008324 <__swsetup_r+0xa4>
 8008312:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008316:	d1c5      	bne.n	80082a4 <__swsetup_r+0x24>
 8008318:	bd38      	pop	{r3, r4, r5, pc}
 800831a:	0799      	lsls	r1, r3, #30
 800831c:	bf58      	it	pl
 800831e:	6962      	ldrpl	r2, [r4, #20]
 8008320:	60a2      	str	r2, [r4, #8]
 8008322:	e7f4      	b.n	800830e <__swsetup_r+0x8e>
 8008324:	2000      	movs	r0, #0
 8008326:	e7f7      	b.n	8008318 <__swsetup_r+0x98>
 8008328:	20000030 	.word	0x20000030

0800832c <_sbrk_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4d06      	ldr	r5, [pc, #24]	@ (8008348 <_sbrk_r+0x1c>)
 8008330:	2300      	movs	r3, #0
 8008332:	4604      	mov	r4, r0
 8008334:	4608      	mov	r0, r1
 8008336:	602b      	str	r3, [r5, #0]
 8008338:	f7f8 fee0 	bl	80010fc <_sbrk>
 800833c:	1c43      	adds	r3, r0, #1
 800833e:	d102      	bne.n	8008346 <_sbrk_r+0x1a>
 8008340:	682b      	ldr	r3, [r5, #0]
 8008342:	b103      	cbz	r3, 8008346 <_sbrk_r+0x1a>
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	bd38      	pop	{r3, r4, r5, pc}
 8008348:	20000484 	.word	0x20000484

0800834c <__swhatbuf_r>:
 800834c:	b570      	push	{r4, r5, r6, lr}
 800834e:	460c      	mov	r4, r1
 8008350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008354:	2900      	cmp	r1, #0
 8008356:	b096      	sub	sp, #88	@ 0x58
 8008358:	4615      	mov	r5, r2
 800835a:	461e      	mov	r6, r3
 800835c:	da0d      	bge.n	800837a <__swhatbuf_r+0x2e>
 800835e:	89a3      	ldrh	r3, [r4, #12]
 8008360:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008364:	f04f 0100 	mov.w	r1, #0
 8008368:	bf14      	ite	ne
 800836a:	2340      	movne	r3, #64	@ 0x40
 800836c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008370:	2000      	movs	r0, #0
 8008372:	6031      	str	r1, [r6, #0]
 8008374:	602b      	str	r3, [r5, #0]
 8008376:	b016      	add	sp, #88	@ 0x58
 8008378:	bd70      	pop	{r4, r5, r6, pc}
 800837a:	466a      	mov	r2, sp
 800837c:	f000 f848 	bl	8008410 <_fstat_r>
 8008380:	2800      	cmp	r0, #0
 8008382:	dbec      	blt.n	800835e <__swhatbuf_r+0x12>
 8008384:	9901      	ldr	r1, [sp, #4]
 8008386:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800838a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800838e:	4259      	negs	r1, r3
 8008390:	4159      	adcs	r1, r3
 8008392:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008396:	e7eb      	b.n	8008370 <__swhatbuf_r+0x24>

08008398 <__smakebuf_r>:
 8008398:	898b      	ldrh	r3, [r1, #12]
 800839a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800839c:	079d      	lsls	r5, r3, #30
 800839e:	4606      	mov	r6, r0
 80083a0:	460c      	mov	r4, r1
 80083a2:	d507      	bpl.n	80083b4 <__smakebuf_r+0x1c>
 80083a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	6123      	str	r3, [r4, #16]
 80083ac:	2301      	movs	r3, #1
 80083ae:	6163      	str	r3, [r4, #20]
 80083b0:	b003      	add	sp, #12
 80083b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083b4:	ab01      	add	r3, sp, #4
 80083b6:	466a      	mov	r2, sp
 80083b8:	f7ff ffc8 	bl	800834c <__swhatbuf_r>
 80083bc:	9f00      	ldr	r7, [sp, #0]
 80083be:	4605      	mov	r5, r0
 80083c0:	4639      	mov	r1, r7
 80083c2:	4630      	mov	r0, r6
 80083c4:	f7ff fb16 	bl	80079f4 <_malloc_r>
 80083c8:	b948      	cbnz	r0, 80083de <__smakebuf_r+0x46>
 80083ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ce:	059a      	lsls	r2, r3, #22
 80083d0:	d4ee      	bmi.n	80083b0 <__smakebuf_r+0x18>
 80083d2:	f023 0303 	bic.w	r3, r3, #3
 80083d6:	f043 0302 	orr.w	r3, r3, #2
 80083da:	81a3      	strh	r3, [r4, #12]
 80083dc:	e7e2      	b.n	80083a4 <__smakebuf_r+0xc>
 80083de:	89a3      	ldrh	r3, [r4, #12]
 80083e0:	6020      	str	r0, [r4, #0]
 80083e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083e6:	81a3      	strh	r3, [r4, #12]
 80083e8:	9b01      	ldr	r3, [sp, #4]
 80083ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80083ee:	b15b      	cbz	r3, 8008408 <__smakebuf_r+0x70>
 80083f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083f4:	4630      	mov	r0, r6
 80083f6:	f000 f81d 	bl	8008434 <_isatty_r>
 80083fa:	b128      	cbz	r0, 8008408 <__smakebuf_r+0x70>
 80083fc:	89a3      	ldrh	r3, [r4, #12]
 80083fe:	f023 0303 	bic.w	r3, r3, #3
 8008402:	f043 0301 	orr.w	r3, r3, #1
 8008406:	81a3      	strh	r3, [r4, #12]
 8008408:	89a3      	ldrh	r3, [r4, #12]
 800840a:	431d      	orrs	r5, r3
 800840c:	81a5      	strh	r5, [r4, #12]
 800840e:	e7cf      	b.n	80083b0 <__smakebuf_r+0x18>

08008410 <_fstat_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4d07      	ldr	r5, [pc, #28]	@ (8008430 <_fstat_r+0x20>)
 8008414:	2300      	movs	r3, #0
 8008416:	4604      	mov	r4, r0
 8008418:	4608      	mov	r0, r1
 800841a:	4611      	mov	r1, r2
 800841c:	602b      	str	r3, [r5, #0]
 800841e:	f7f8 fe45 	bl	80010ac <_fstat>
 8008422:	1c43      	adds	r3, r0, #1
 8008424:	d102      	bne.n	800842c <_fstat_r+0x1c>
 8008426:	682b      	ldr	r3, [r5, #0]
 8008428:	b103      	cbz	r3, 800842c <_fstat_r+0x1c>
 800842a:	6023      	str	r3, [r4, #0]
 800842c:	bd38      	pop	{r3, r4, r5, pc}
 800842e:	bf00      	nop
 8008430:	20000484 	.word	0x20000484

08008434 <_isatty_r>:
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	4d06      	ldr	r5, [pc, #24]	@ (8008450 <_isatty_r+0x1c>)
 8008438:	2300      	movs	r3, #0
 800843a:	4604      	mov	r4, r0
 800843c:	4608      	mov	r0, r1
 800843e:	602b      	str	r3, [r5, #0]
 8008440:	f7f8 fe44 	bl	80010cc <_isatty>
 8008444:	1c43      	adds	r3, r0, #1
 8008446:	d102      	bne.n	800844e <_isatty_r+0x1a>
 8008448:	682b      	ldr	r3, [r5, #0]
 800844a:	b103      	cbz	r3, 800844e <_isatty_r+0x1a>
 800844c:	6023      	str	r3, [r4, #0]
 800844e:	bd38      	pop	{r3, r4, r5, pc}
 8008450:	20000484 	.word	0x20000484

08008454 <_init>:
 8008454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008456:	bf00      	nop
 8008458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800845a:	bc08      	pop	{r3}
 800845c:	469e      	mov	lr, r3
 800845e:	4770      	bx	lr

08008460 <_fini>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	bf00      	nop
 8008464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008466:	bc08      	pop	{r3}
 8008468:	469e      	mov	lr, r3
 800846a:	4770      	bx	lr
