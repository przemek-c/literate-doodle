
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a30  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08006c10  08006c10  00007c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007000  08007000  00009080  2**0
                  CONTENTS
  4 .ARM          00000008  08007000  08007000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007008  08007008  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007008  08007008  00008008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800700c  0800700c  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08007010  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000080  08007090  00009080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08007090  000093b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013708  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d0b  00000000  00000000  0001c7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  0001f4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bdf  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fc56  00000000  00000000  0002101f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156c0  00000000  00000000  00040c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be659  00000000  00000000  00056335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011498e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000469c  00000000  00000000  001149d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00119070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006bf8 	.word	0x08006bf8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	08006bf8 	.word	0x08006bf8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ba:	4a1a      	ldr	r2, [pc, #104]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c2:	4b18      	ldr	r3, [pc, #96]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ce:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	4a14      	ldr	r2, [pc, #80]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005d4:	f043 0320 	orr.w	r3, r3, #32
 80005d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005da:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	f003 0320 	and.w	r3, r3, #32
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <MX_GPIO_Init+0x74>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	4a08      	ldr	r2, [pc, #32]	@ (8000624 <MX_GPIO_Init+0x74>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <MX_GPIO_Init+0x74>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000

08000628 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800062c:	4b1b      	ldr	r3, [pc, #108]	@ (800069c <MX_I2C1_Init+0x74>)
 800062e:	4a1c      	ldr	r2, [pc, #112]	@ (80006a0 <MX_I2C1_Init+0x78>)
 8000630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8000632:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <MX_I2C1_Init+0x74>)
 8000634:	4a1b      	ldr	r2, [pc, #108]	@ (80006a4 <MX_I2C1_Init+0x7c>)
 8000636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000638:	4b18      	ldr	r3, [pc, #96]	@ (800069c <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063e:	4b17      	ldr	r3, [pc, #92]	@ (800069c <MX_I2C1_Init+0x74>)
 8000640:	2201      	movs	r2, #1
 8000642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b15      	ldr	r3, [pc, #84]	@ (800069c <MX_I2C1_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b14      	ldr	r3, [pc, #80]	@ (800069c <MX_I2C1_Init+0x74>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000650:	4b12      	ldr	r3, [pc, #72]	@ (800069c <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000656:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_I2C1_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065c:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000662:	480e      	ldr	r0, [pc, #56]	@ (800069c <MX_I2C1_Init+0x74>)
 8000664:	f001 fbf2 	bl	8001e4c <HAL_I2C_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800066e:	f000 fbcd 	bl	8000e0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000672:	2100      	movs	r1, #0
 8000674:	4809      	ldr	r0, [pc, #36]	@ (800069c <MX_I2C1_Init+0x74>)
 8000676:	f002 f975 	bl	8002964 <HAL_I2CEx_ConfigAnalogFilter>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000680:	f000 fbc4 	bl	8000e0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000684:	2100      	movs	r1, #0
 8000686:	4805      	ldr	r0, [pc, #20]	@ (800069c <MX_I2C1_Init+0x74>)
 8000688:	f002 f9b7 	bl	80029fa <HAL_I2CEx_ConfigDigitalFilter>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000692:	f000 fbbb 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000009c 	.word	0x2000009c
 80006a0:	40005400 	.word	0x40005400
 80006a4:	40b285c2 	.word	0x40b285c2

080006a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b09a      	sub	sp, #104	@ 0x68
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	2244      	movs	r2, #68	@ 0x44
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f005 fc6a 	bl	8005fa2 <memset>
  if(i2cHandle->Instance==I2C1)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a1f      	ldr	r2, [pc, #124]	@ (8000750 <HAL_I2C_MspInit+0xa8>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d136      	bne.n	8000746 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006d8:	2340      	movs	r3, #64	@ 0x40
 80006da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 ffb7 	bl	8003658 <HAL_RCCEx_PeriphCLKConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80006f0:	f000 fb8c 	bl	8000e0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f4:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 80006f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f8:	4a16      	ldr	r2, [pc, #88]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 80006fa:	f043 0302 	orr.w	r3, r3, #2
 80006fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 8000702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000704:	f003 0302 	and.w	r3, r3, #2
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800070c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000710:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000712:	2312      	movs	r3, #18
 8000714:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800071e:	2304      	movs	r3, #4
 8000720:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000722:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000726:	4619      	mov	r1, r3
 8000728:	480b      	ldr	r0, [pc, #44]	@ (8000758 <HAL_I2C_MspInit+0xb0>)
 800072a:	f001 f9db 	bl	8001ae4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 8000730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000732:	4a08      	ldr	r2, [pc, #32]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 8000734:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000738:	6593      	str	r3, [r2, #88]	@ 0x58
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 800073c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800073e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000746:	bf00      	nop
 8000748:	3768      	adds	r7, #104	@ 0x68
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40005400 	.word	0x40005400
 8000754:	40021000 	.word	0x40021000
 8000758:	48000400 	.word	0x48000400

0800075c <imu_write_register>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Write to an IMU register
void imu_write_register(uint8_t reg, uint8_t value) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af04      	add	r7, sp, #16
 8000762:	4603      	mov	r3, r0
 8000764:	460a      	mov	r2, r1
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	4613      	mov	r3, r2
 800076a:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 1000);
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	b29a      	uxth	r2, r3
 8000770:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000774:	9302      	str	r3, [sp, #8]
 8000776:	2301      	movs	r3, #1
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	1dbb      	adds	r3, r7, #6
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	2301      	movs	r3, #1
 8000780:	21d4      	movs	r1, #212	@ 0xd4
 8000782:	4803      	ldr	r0, [pc, #12]	@ (8000790 <imu_write_register+0x34>)
 8000784:	f001 fbfe 	bl	8001f84 <HAL_I2C_Mem_Write>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	2000009c 	.word	0x2000009c

08000794 <imu_read_registers>:

// Read from IMU registers
void imu_read_registers(uint8_t reg, uint8_t *data, uint16_t len) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af04      	add	r7, sp, #16
 800079a:	4603      	mov	r3, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	71fb      	strb	r3, [r7, #7]
 80007a0:	4613      	mov	r3, r2
 80007a2:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, len, 1000);
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ac:	9302      	str	r3, [sp, #8]
 80007ae:	88bb      	ldrh	r3, [r7, #4]
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	21d4      	movs	r1, #212	@ 0xd4
 80007ba:	4803      	ldr	r0, [pc, #12]	@ (80007c8 <imu_read_registers+0x34>)
 80007bc:	f001 fcf6 	bl	80021ac <HAL_I2C_Mem_Read>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2000009c 	.word	0x2000009c

080007cc <imu_init>:

// Initialize the IMU
void imu_init(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
    uint8_t whoami;
    imu_read_registers(0x0F, &whoami, 1);  // Read WHO_AM_I register
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	2201      	movs	r2, #1
 80007d6:	4619      	mov	r1, r3
 80007d8:	200f      	movs	r0, #15
 80007da:	f7ff ffdb 	bl	8000794 <imu_read_registers>
    if (whoami != WHO_AM_I_VALUE) {
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b6c      	cmp	r3, #108	@ 0x6c
 80007e2:	d006      	beq.n	80007f2 <imu_init+0x26>
        printf("IMU not found: 0x%02X\n\r", whoami);
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	4619      	mov	r1, r3
 80007e8:	480a      	ldr	r0, [pc, #40]	@ (8000814 <imu_init+0x48>)
 80007ea:	f005 fb85 	bl	8005ef8 <iprintf>
        while (1);  // Hang if IMU not detected
 80007ee:	bf00      	nop
 80007f0:	e7fd      	b.n	80007ee <imu_init+0x22>
    }
    imu_write_register(0x12, 0x40);  // CTRL3_C: Enable Block Data Update (BDU)
 80007f2:	2140      	movs	r1, #64	@ 0x40
 80007f4:	2012      	movs	r0, #18
 80007f6:	f7ff ffb1 	bl	800075c <imu_write_register>
    imu_write_register(0x10, 0x64);  // CTRL1_XL: 104 Hz, ±8g (was 0x60 for ±2g)
 80007fa:	2164      	movs	r1, #100	@ 0x64
 80007fc:	2010      	movs	r0, #16
 80007fe:	f7ff ffad 	bl	800075c <imu_write_register>
    imu_write_register(0x11, 0x64);  // CTRL2_G: 104 Hz, ±500 dps (was 0x6C for ±2000 dps)
 8000802:	2164      	movs	r1, #100	@ 0x64
 8000804:	2011      	movs	r0, #17
 8000806:	f7ff ffa9 	bl	800075c <imu_write_register>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	08006c10 	.word	0x08006c10

08000818 <imu_read_accel>:

// Read accelerometer data
void imu_read_accel(imu_data_t *accel) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
    uint8_t buffer[6];
    imu_read_registers(0x28, buffer, 6);  // OUTX_L_XL to OUTZ_H_XL
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2206      	movs	r2, #6
 8000826:	4619      	mov	r1, r3
 8000828:	2028      	movs	r0, #40	@ 0x28
 800082a:	f7ff ffb3 	bl	8000794 <imu_read_registers>
    accel->x = (int16_t)(buffer[0] | (buffer[1] << 8));
 800082e:	7a3b      	ldrb	r3, [r7, #8]
 8000830:	b21a      	sxth	r2, r3
 8000832:	7a7b      	ldrb	r3, [r7, #9]
 8000834:	021b      	lsls	r3, r3, #8
 8000836:	b21b      	sxth	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	b21a      	sxth	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	801a      	strh	r2, [r3, #0]
    accel->y = (int16_t)(buffer[2] | (buffer[3] << 8));
 8000840:	7abb      	ldrb	r3, [r7, #10]
 8000842:	b21a      	sxth	r2, r3
 8000844:	7afb      	ldrb	r3, [r7, #11]
 8000846:	021b      	lsls	r3, r3, #8
 8000848:	b21b      	sxth	r3, r3
 800084a:	4313      	orrs	r3, r2
 800084c:	b21a      	sxth	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	805a      	strh	r2, [r3, #2]
    accel->z = (int16_t)(buffer[4] | (buffer[5] << 8));
 8000852:	7b3b      	ldrb	r3, [r7, #12]
 8000854:	b21a      	sxth	r2, r3
 8000856:	7b7b      	ldrb	r3, [r7, #13]
 8000858:	021b      	lsls	r3, r3, #8
 800085a:	b21b      	sxth	r3, r3
 800085c:	4313      	orrs	r3, r2
 800085e:	b21a      	sxth	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	809a      	strh	r2, [r3, #4]
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <imu_read_gyro>:

// Read gyroscope data
void imu_read_gyro(imu_data_t *gyro) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
    uint8_t buffer[6];
    imu_read_registers(0x22, buffer, 6);  // OUTX_L_G to OUTZ_H_G
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	2206      	movs	r2, #6
 800087a:	4619      	mov	r1, r3
 800087c:	2022      	movs	r0, #34	@ 0x22
 800087e:	f7ff ff89 	bl	8000794 <imu_read_registers>
    gyro->x = (int16_t)(buffer[0] | (buffer[1] << 8));
 8000882:	7a3b      	ldrb	r3, [r7, #8]
 8000884:	b21a      	sxth	r2, r3
 8000886:	7a7b      	ldrb	r3, [r7, #9]
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b21b      	sxth	r3, r3
 800088c:	4313      	orrs	r3, r2
 800088e:	b21a      	sxth	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	801a      	strh	r2, [r3, #0]
    gyro->y = (int16_t)(buffer[2] | (buffer[3] << 8));
 8000894:	7abb      	ldrb	r3, [r7, #10]
 8000896:	b21a      	sxth	r2, r3
 8000898:	7afb      	ldrb	r3, [r7, #11]
 800089a:	021b      	lsls	r3, r3, #8
 800089c:	b21b      	sxth	r3, r3
 800089e:	4313      	orrs	r3, r2
 80008a0:	b21a      	sxth	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	805a      	strh	r2, [r3, #2]
    gyro->z = (int16_t)(buffer[4] | (buffer[5] << 8));
 80008a6:	7b3b      	ldrb	r3, [r7, #12]
 80008a8:	b21a      	sxth	r2, r3
 80008aa:	7b7b      	ldrb	r3, [r7, #13]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b21b      	sxth	r3, r3
 80008b0:	4313      	orrs	r3, r2
 80008b2:	b21a      	sxth	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	809a      	strh	r2, [r3, #4]
}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <parseMessage>:

// UART parsing message
void parseMessage(char* msg) {
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b08b      	sub	sp, #44	@ 0x2c
 80008c4:	af02      	add	r7, sp, #8
 80008c6:	6078      	str	r0, [r7, #4]
  if (!msg) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d103      	bne.n	80008d6 <parseMessage+0x16>
      printf("Error: Null message pointer\n\r");
 80008ce:	4888      	ldr	r0, [pc, #544]	@ (8000af0 <parseMessage+0x230>)
 80008d0:	f005 fb12 	bl	8005ef8 <iprintf>
      return;
 80008d4:	e109      	b.n	8000aea <parseMessage+0x22a>
  }

  printf("Original message: %s\n\r", msg);  // Debug original message
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	4886      	ldr	r0, [pc, #536]	@ (8000af4 <parseMessage+0x234>)
 80008da:	f005 fb0d 	bl	8005ef8 <iprintf>
  char* ptr = msg;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	61fb      	str	r3, [r7, #28]
  
  printf("Before start, ptr points to: %s\n\r", ptr);
 80008e2:	69f9      	ldr	r1, [r7, #28]
 80008e4:	4884      	ldr	r0, [pc, #528]	@ (8000af8 <parseMessage+0x238>)
 80008e6:	f005 fb07 	bl	8005ef8 <iprintf>

  // First, let's check and skip the opening bracket
  if (*ptr == '[') {
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b5b      	cmp	r3, #91	@ 0x5b
 80008f0:	d107      	bne.n	8000902 <parseMessage+0x42>
      // ptr++;
      ptr += 2;
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3302      	adds	r3, #2
 80008f6:	61fb      	str	r3, [r7, #28]
      printf("After bracket check, ptr points to: %s\n\r", ptr);
 80008f8:	69f9      	ldr	r1, [r7, #28]
 80008fa:	4880      	ldr	r0, [pc, #512]	@ (8000afc <parseMessage+0x23c>)
 80008fc:	f005 fafc 	bl	8005ef8 <iprintf>
 8000900:	e0d0      	b.n	8000aa4 <parseMessage+0x1e4>
  } else {
      printf("Error: Message doesn't start with [\n\r");
 8000902:	487f      	ldr	r0, [pc, #508]	@ (8000b00 <parseMessage+0x240>)
 8000904:	f005 faf8 	bl	8005ef8 <iprintf>
      // ptr++;
      ptr += 2;
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	3302      	adds	r3, #2
 800090c:	61fb      	str	r3, [r7, #28]
  }
  
  // Parse all fields in sequence
  while (*ptr != ']' && *ptr != '\0') {
 800090e:	e0c9      	b.n	8000aa4 <parseMessage+0x1e4>
      printf("Current parsing position: '%s'\n\r", ptr);  // Show exactly what we're looking at
 8000910:	69f9      	ldr	r1, [r7, #28]
 8000912:	487c      	ldr	r0, [pc, #496]	@ (8000b04 <parseMessage+0x244>)
 8000914:	f005 faf0 	bl	8005ef8 <iprintf>
      
      // Print the first few characters for debugging
      printf("Next 3 chars: '%c%c%c'\n\r", ptr[0], ptr[1], ptr[2]);
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3301      	adds	r3, #1
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3302      	adds	r3, #2
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4876      	ldr	r0, [pc, #472]	@ (8000b08 <parseMessage+0x248>)
 800092e:	f005 fae3 	bl	8005ef8 <iprintf>
      
      if (strncmp(ptr, "S:", 2) == 0) {
 8000932:	2202      	movs	r2, #2
 8000934:	4975      	ldr	r1, [pc, #468]	@ (8000b0c <parseMessage+0x24c>)
 8000936:	69f8      	ldr	r0, [r7, #28]
 8000938:	f005 fb3b 	bl	8005fb2 <strncmp>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d116      	bne.n	8000970 <parseMessage+0xb0>
          ptr += 2;  // Skip "S:"
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3302      	adds	r3, #2
 8000946:	61fb      	str	r3, [r7, #28]
          if (*ptr != '\0') {  // Safety check
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	f000 809e 	beq.w	8000a8e <parseMessage+0x1ce>
              Steering = *ptr;
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	781a      	ldrb	r2, [r3, #0]
 8000956:	4b6e      	ldr	r3, [pc, #440]	@ (8000b10 <parseMessage+0x250>)
 8000958:	701a      	strb	r2, [r3, #0]
              printf("Found Steering: %c\n\r", Steering);
 800095a:	4b6d      	ldr	r3, [pc, #436]	@ (8000b10 <parseMessage+0x250>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	4619      	mov	r1, r3
 8000962:	486c      	ldr	r0, [pc, #432]	@ (8000b14 <parseMessage+0x254>)
 8000964:	f005 fac8 	bl	8005ef8 <iprintf>
              ptr++;
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	3301      	adds	r3, #1
 800096c:	61fb      	str	r3, [r7, #28]
 800096e:	e08e      	b.n	8000a8e <parseMessage+0x1ce>
          }
      }
      else if (strncmp(ptr, "G:", 2) == 0) {
 8000970:	2202      	movs	r2, #2
 8000972:	4969      	ldr	r1, [pc, #420]	@ (8000b18 <parseMessage+0x258>)
 8000974:	69f8      	ldr	r0, [r7, #28]
 8000976:	f005 fb1c 	bl	8005fb2 <strncmp>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d115      	bne.n	80009ac <parseMessage+0xec>
          ptr += 2;  // Skip "G:"
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	3302      	adds	r3, #2
 8000984:	61fb      	str	r3, [r7, #28]
          if (*ptr != '\0') {  // Safety check
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d07f      	beq.n	8000a8e <parseMessage+0x1ce>
              Gear = *ptr;
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	781a      	ldrb	r2, [r3, #0]
 8000992:	4b62      	ldr	r3, [pc, #392]	@ (8000b1c <parseMessage+0x25c>)
 8000994:	701a      	strb	r2, [r3, #0]
              printf("Found Gear: %c\n\r", Gear);
 8000996:	4b61      	ldr	r3, [pc, #388]	@ (8000b1c <parseMessage+0x25c>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	4619      	mov	r1, r3
 800099e:	4860      	ldr	r0, [pc, #384]	@ (8000b20 <parseMessage+0x260>)
 80009a0:	f005 faaa 	bl	8005ef8 <iprintf>
              ptr++;
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	3301      	adds	r3, #1
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	e070      	b.n	8000a8e <parseMessage+0x1ce>
          }
      }
      else if (strncmp(ptr, "T:", 2) == 0) {
 80009ac:	2202      	movs	r2, #2
 80009ae:	495d      	ldr	r1, [pc, #372]	@ (8000b24 <parseMessage+0x264>)
 80009b0:	69f8      	ldr	r0, [r7, #28]
 80009b2:	f005 fafe 	bl	8005fb2 <strncmp>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d115      	bne.n	80009e8 <parseMessage+0x128>
          ptr += 2;  // Skip "T:"
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	3302      	adds	r3, #2
 80009c0:	61fb      	str	r3, [r7, #28]
          if (*ptr != '\0') {  // Safety check
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d061      	beq.n	8000a8e <parseMessage+0x1ce>
              Type = *ptr;
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	781a      	ldrb	r2, [r3, #0]
 80009ce:	4b56      	ldr	r3, [pc, #344]	@ (8000b28 <parseMessage+0x268>)
 80009d0:	701a      	strb	r2, [r3, #0]
              printf("Found Type: %c\n\r", Type);
 80009d2:	4b55      	ldr	r3, [pc, #340]	@ (8000b28 <parseMessage+0x268>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	4619      	mov	r1, r3
 80009da:	4854      	ldr	r0, [pc, #336]	@ (8000b2c <parseMessage+0x26c>)
 80009dc:	f005 fa8c 	bl	8005ef8 <iprintf>
              ptr++;
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	3301      	adds	r3, #1
 80009e4:	61fb      	str	r3, [r7, #28]
 80009e6:	e052      	b.n	8000a8e <parseMessage+0x1ce>
          }
      }
      else if (strncmp(ptr, "V:", 2) == 0) {
 80009e8:	2202      	movs	r2, #2
 80009ea:	4951      	ldr	r1, [pc, #324]	@ (8000b30 <parseMessage+0x270>)
 80009ec:	69f8      	ldr	r0, [r7, #28]
 80009ee:	f005 fae0 	bl	8005fb2 <strncmp>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d11c      	bne.n	8000a32 <parseMessage+0x172>
          ptr += 2;  // Skip "V:"
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	3302      	adds	r3, #2
 80009fc:	61fb      	str	r3, [r7, #28]
          char* endPtr;
          long temp = strtol(ptr, &endPtr, 10);
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	220a      	movs	r2, #10
 8000a04:	4619      	mov	r1, r3
 8000a06:	69f8      	ldr	r0, [r7, #28]
 8000a08:	f005 f9aa 	bl	8005d60 <strtol>
 8000a0c:	6178      	str	r0, [r7, #20]
          if (endPtr != ptr) {
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	69fa      	ldr	r2, [r7, #28]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d03b      	beq.n	8000a8e <parseMessage+0x1ce>
              Velocity = (uint8_t)temp;
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4b46      	ldr	r3, [pc, #280]	@ (8000b34 <parseMessage+0x274>)
 8000a1c:	701a      	strb	r2, [r3, #0]
              printf("Found Velocity: %d\n\r", Velocity);
 8000a1e:	4b45      	ldr	r3, [pc, #276]	@ (8000b34 <parseMessage+0x274>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4619      	mov	r1, r3
 8000a26:	4844      	ldr	r0, [pc, #272]	@ (8000b38 <parseMessage+0x278>)
 8000a28:	f005 fa66 	bl	8005ef8 <iprintf>
              ptr = endPtr;
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	61fb      	str	r3, [r7, #28]
 8000a30:	e02d      	b.n	8000a8e <parseMessage+0x1ce>
          }
      }
      else if (strncmp(ptr, "D:", 2) == 0) {
 8000a32:	2202      	movs	r2, #2
 8000a34:	4941      	ldr	r1, [pc, #260]	@ (8000b3c <parseMessage+0x27c>)
 8000a36:	69f8      	ldr	r0, [r7, #28]
 8000a38:	f005 fabb 	bl	8005fb2 <strncmp>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d11c      	bne.n	8000a7c <parseMessage+0x1bc>
          ptr += 2;  // Skip "D:"
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3302      	adds	r3, #2
 8000a46:	61fb      	str	r3, [r7, #28]
          char* endPtr;
          long temp = strtol(ptr, &endPtr, 10);
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	220a      	movs	r2, #10
 8000a4e:	4619      	mov	r1, r3
 8000a50:	69f8      	ldr	r0, [r7, #28]
 8000a52:	f005 f985 	bl	8005d60 <strtol>
 8000a56:	61b8      	str	r0, [r7, #24]
          if (endPtr != ptr) {
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	69fa      	ldr	r2, [r7, #28]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d016      	beq.n	8000a8e <parseMessage+0x1ce>
              Duration = (uint8_t)temp;
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b36      	ldr	r3, [pc, #216]	@ (8000b40 <parseMessage+0x280>)
 8000a66:	701a      	strb	r2, [r3, #0]
              printf("Found Duration: %d\n\r", Duration);
 8000a68:	4b35      	ldr	r3, [pc, #212]	@ (8000b40 <parseMessage+0x280>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4834      	ldr	r0, [pc, #208]	@ (8000b44 <parseMessage+0x284>)
 8000a72:	f005 fa41 	bl	8005ef8 <iprintf>
              ptr = endPtr;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	61fb      	str	r3, [r7, #28]
 8000a7a:	e008      	b.n	8000a8e <parseMessage+0x1ce>
          }
      }
      else {
          // If we don't recognize the field, skip one character
          printf("Skipping unknown character: %c\n\r", *ptr);
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	4831      	ldr	r0, [pc, #196]	@ (8000b48 <parseMessage+0x288>)
 8000a84:	f005 fa38 	bl	8005ef8 <iprintf>
          ptr++;
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	61fb      	str	r3, [r7, #28]
      }
      
      // Skip comma if present
      if (*ptr == ',') {
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b2c      	cmp	r3, #44	@ 0x2c
 8000a94:	d106      	bne.n	8000aa4 <parseMessage+0x1e4>
          ptr++;
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	61fb      	str	r3, [r7, #28]
          printf("Skipped comma, now at: %s\n\r", ptr);
 8000a9c:	69f9      	ldr	r1, [r7, #28]
 8000a9e:	482b      	ldr	r0, [pc, #172]	@ (8000b4c <parseMessage+0x28c>)
 8000aa0:	f005 fa2a 	bl	8005ef8 <iprintf>
  while (*ptr != ']' && *ptr != '\0') {
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b5d      	cmp	r3, #93	@ 0x5d
 8000aaa:	d004      	beq.n	8000ab6 <parseMessage+0x1f6>
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f47f af2d 	bne.w	8000910 <parseMessage+0x50>
      }
  }
  
  printf("Final parsed values - S:%c G:%c T:%c V:%d D:%d\n\r", 
 8000ab6:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <parseMessage+0x250>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	4619      	mov	r1, r3
 8000abe:	4b17      	ldr	r3, [pc, #92]	@ (8000b1c <parseMessage+0x25c>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <parseMessage+0x268>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	461c      	mov	r4, r3
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <parseMessage+0x274>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <parseMessage+0x280>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	9301      	str	r3, [sp, #4]
 8000ade:	9200      	str	r2, [sp, #0]
 8000ae0:	4623      	mov	r3, r4
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	481a      	ldr	r0, [pc, #104]	@ (8000b50 <parseMessage+0x290>)
 8000ae6:	f005 fa07 	bl	8005ef8 <iprintf>
         Steering, Gear, Type, Velocity, Duration);
}
 8000aea:	3724      	adds	r7, #36	@ 0x24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd90      	pop	{r4, r7, pc}
 8000af0:	08006c28 	.word	0x08006c28
 8000af4:	08006c48 	.word	0x08006c48
 8000af8:	08006c60 	.word	0x08006c60
 8000afc:	08006c84 	.word	0x08006c84
 8000b00:	08006cb0 	.word	0x08006cb0
 8000b04:	08006cd8 	.word	0x08006cd8
 8000b08:	08006cfc 	.word	0x08006cfc
 8000b0c:	08006d18 	.word	0x08006d18
 8000b10:	20000000 	.word	0x20000000
 8000b14:	08006d1c 	.word	0x08006d1c
 8000b18:	08006d34 	.word	0x08006d34
 8000b1c:	20000001 	.word	0x20000001
 8000b20:	08006d38 	.word	0x08006d38
 8000b24:	08006d4c 	.word	0x08006d4c
 8000b28:	20000002 	.word	0x20000002
 8000b2c:	08006d50 	.word	0x08006d50
 8000b30:	08006d64 	.word	0x08006d64
 8000b34:	20000126 	.word	0x20000126
 8000b38:	08006d68 	.word	0x08006d68
 8000b3c:	08006d80 	.word	0x08006d80
 8000b40:	20000127 	.word	0x20000127
 8000b44:	08006d84 	.word	0x08006d84
 8000b48:	08006d9c 	.word	0x08006d9c
 8000b4c:	08006dc0 	.word	0x08006dc0
 8000b50:	08006ddc 	.word	0x08006ddc

08000b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	@ 0x28
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5a:	f000 fd01 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5e:	f000 f8a3 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b62:	f7ff fd25 	bl	80005b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b66:	f7ff fd5f 	bl	8000628 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000b6a:	f000 fa6f 	bl	800104c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rxBuffer[0], 1);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4944      	ldr	r1, [pc, #272]	@ (8000c84 <main+0x130>)
 8000b72:	4845      	ldr	r0, [pc, #276]	@ (8000c88 <main+0x134>)
 8000b74:	f003 f83e 	bl	8003bf4 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f000 fb3d 	bl	80011f8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000b7e:	2101      	movs	r1, #1
 8000b80:	2000      	movs	r0, #0
 8000b82:	f000 fb9b 	bl	80012bc <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000b86:	4b41      	ldr	r3, [pc, #260]	@ (8000c8c <main+0x138>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b8c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000b8e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c8c <main+0x138>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000b94:	4b3d      	ldr	r3, [pc, #244]	@ (8000c8c <main+0x138>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8000c8c <main+0x138>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8000c8c <main+0x138>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000ba6:	4939      	ldr	r1, [pc, #228]	@ (8000c8c <main+0x138>)
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f000 fc07 	bl	80013bc <BSP_COM_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <main+0x64>
  {
    Error_Handler();
 8000bb4:	f000 f92a 	bl	8000e0c <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000bb8:	4835      	ldr	r0, [pc, #212]	@ (8000c90 <main+0x13c>)
 8000bba:	f005 f99d 	bl	8005ef8 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 fb50 	bl	8001264 <BSP_LED_On>

  imu_init();  // Initialize the IMU after peripherals are set up
 8000bc4:	f7ff fe02 	bl	80007cc <imu_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (messageComplete) {
 8000bc8:	4b32      	ldr	r3, [pc, #200]	@ (8000c94 <main+0x140>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d005      	beq.n	8000bde <main+0x8a>
      parseMessage((char*)rxBuffer);
 8000bd2:	482c      	ldr	r0, [pc, #176]	@ (8000c84 <main+0x130>)
 8000bd4:	f7ff fe74 	bl	80008c0 <parseMessage>
      messageComplete = 0;
 8000bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8000c94 <main+0x140>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
      printf("New command - Moving:%d Steering:%d Accel:%d\n\r", 
             robotFlags.isMoving, robotFlags.isSteering, robotFlags.isAccelerating);
      */
  }
    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000bde:	4b2e      	ldr	r3, [pc, #184]	@ (8000c98 <main+0x144>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d1f0      	bne.n	8000bc8 <main+0x74>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000be6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c98 <main+0x144>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f000 fb4f 	bl	8001290 <BSP_LED_Toggle>

      /* ..... Perform your action ..... */
      printf("Let's do this !\n\r");
 8000bf2:	482a      	ldr	r0, [pc, #168]	@ (8000c9c <main+0x148>)
 8000bf4:	f005 f980 	bl	8005ef8 <iprintf>
      // grok code starts
      imu_data_t accel, gyro;
      imu_read_accel(&accel);
 8000bf8:	f107 0308 	add.w	r3, r7, #8
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fe0b 	bl	8000818 <imu_read_accel>
      imu_read_gyro(&gyro);
 8000c02:	463b      	mov	r3, r7
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fe31 	bl	800086c <imu_read_gyro>

      // Compute scaled values using integer arithmetic
      int32_t accel_ug_x = (int32_t)accel.x * ACCEL_SENSITIVITY_UG;
 8000c0a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	23f4      	movs	r3, #244	@ 0xf4
 8000c12:	fb02 f303 	mul.w	r3, r2, r3
 8000c16:	627b      	str	r3, [r7, #36]	@ 0x24
      int32_t accel_ug_y = (int32_t)accel.y * ACCEL_SENSITIVITY_UG;
 8000c18:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	23f4      	movs	r3, #244	@ 0xf4
 8000c20:	fb02 f303 	mul.w	r3, r2, r3
 8000c24:	623b      	str	r3, [r7, #32]
      int32_t accel_ug_z = (int32_t)accel.z * ACCEL_SENSITIVITY_UG;
 8000c26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	23f4      	movs	r3, #244	@ 0xf4
 8000c2e:	fb02 f303 	mul.w	r3, r2, r3
 8000c32:	61fb      	str	r3, [r7, #28]
      int32_t gyro_udps_x = (int32_t)gyro.x * GYRO_SENSITIVITY_UDPS;
 8000c34:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000c3e:	fb02 f303 	mul.w	r3, r2, r3
 8000c42:	61bb      	str	r3, [r7, #24]
      int32_t gyro_udps_y = (int32_t)gyro.y * GYRO_SENSITIVITY_UDPS;
 8000c44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000c4e:	fb02 f303 	mul.w	r3, r2, r3
 8000c52:	617b      	str	r3, [r7, #20]
      int32_t gyro_udps_z = (int32_t)gyro.z * GYRO_SENSITIVITY_UDPS;
 8000c54:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000c5e:	fb02 f303 	mul.w	r3, r2, r3
 8000c62:	613b      	str	r3, [r7, #16]

      // printing
      printf("Accel [ug]: X=%ld, Y=%ld, Z=%ld\n\r",
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	6a3a      	ldr	r2, [r7, #32]
 8000c68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000c6a:	480d      	ldr	r0, [pc, #52]	@ (8000ca0 <main+0x14c>)
 8000c6c:	f005 f944 	bl	8005ef8 <iprintf>
              accel_ug_x, accel_ug_y, accel_ug_z);
      printf("Gyro [mdps]: X=%ld, Y=%ld, Z=%ld\n\r",
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	69b9      	ldr	r1, [r7, #24]
 8000c76:	480b      	ldr	r0, [pc, #44]	@ (8000ca4 <main+0x150>)
 8000c78:	f005 f93e 	bl	8005ef8 <iprintf>
                    gyro_udps_x, gyro_udps_y, gyro_udps_z);

      HAL_Delay(100);
 8000c7c:	2064      	movs	r0, #100	@ 0x64
 8000c7e:	f000 fcdf 	bl	8001640 <HAL_Delay>
    if (messageComplete) {
 8000c82:	e7a1      	b.n	8000bc8 <main+0x74>
 8000c84:	20000104 	.word	0x20000104
 8000c88:	2000012c 	.word	0x2000012c
 8000c8c:	200000f0 	.word	0x200000f0
 8000c90:	08006e10 	.word	0x08006e10
 8000c94:	20000125 	.word	0x20000125
 8000c98:	20000100 	.word	0x20000100
 8000c9c:	08006e2c 	.word	0x08006e2c
 8000ca0:	08006e40 	.word	0x08006e40
 8000ca4:	08006e64 	.word	0x08006e64

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b094      	sub	sp, #80	@ 0x50
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0318 	add.w	r3, r7, #24
 8000cb2:	2238      	movs	r2, #56	@ 0x38
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f005 f973 	bl	8005fa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f001 fee2 	bl	8002a94 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cda:	2340      	movs	r3, #64	@ 0x40
 8000cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000cea:	2355      	movs	r3, #85	@ 0x55
 8000cec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfa:	f107 0318 	add.w	r3, r7, #24
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f001 ff7c 	bl	8002bfc <HAL_RCC_OscConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d0a:	f000 f87f 	bl	8000e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0e:	230f      	movs	r3, #15
 8000d10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d12:	2303      	movs	r3, #3
 8000d14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2104      	movs	r1, #4
 8000d26:	4618      	mov	r0, r3
 8000d28:	f002 fa7a 	bl	8003220 <HAL_RCC_ClockConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d32:	f000 f86b 	bl	8000e0c <Error_Handler>
  }
}
 8000d36:	bf00      	nop
 8000d38:	3750      	adds	r7, #80	@ 0x50
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a20      	ldr	r2, [pc, #128]	@ (8000dd0 <HAL_UART_RxCpltCallback+0x90>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d13b      	bne.n	8000dca <HAL_UART_RxCpltCallback+0x8a>
      if (rxIndex == 0 && rxBuffer[0] != START_MARKER) {
 8000d52:	4b20      	ldr	r3, [pc, #128]	@ (8000dd4 <HAL_UART_RxCpltCallback+0x94>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d109      	bne.n	8000d70 <HAL_UART_RxCpltCallback+0x30>
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <HAL_UART_RxCpltCallback+0x98>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b5b      	cmp	r3, #91	@ 0x5b
 8000d62:	d005      	beq.n	8000d70 <HAL_UART_RxCpltCallback+0x30>
          // Wait for start marker
          HAL_UART_Receive_IT(&huart1, &rxBuffer[0], 1);
 8000d64:	2201      	movs	r2, #1
 8000d66:	491c      	ldr	r1, [pc, #112]	@ (8000dd8 <HAL_UART_RxCpltCallback+0x98>)
 8000d68:	481c      	ldr	r0, [pc, #112]	@ (8000ddc <HAL_UART_RxCpltCallback+0x9c>)
 8000d6a:	f002 ff43 	bl	8003bf4 <HAL_UART_Receive_IT>
          return;
 8000d6e:	e02c      	b.n	8000dca <HAL_UART_RxCpltCallback+0x8a>
      }
      
      if (rxBuffer[rxIndex] == END_MARKER) {
 8000d70:	4b18      	ldr	r3, [pc, #96]	@ (8000dd4 <HAL_UART_RxCpltCallback+0x94>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <HAL_UART_RxCpltCallback+0x98>)
 8000d7a:	5c9b      	ldrb	r3, [r3, r2]
 8000d7c:	2b5d      	cmp	r3, #93	@ 0x5d
 8000d7e:	d10d      	bne.n	8000d9c <HAL_UART_RxCpltCallback+0x5c>
          // Message complete
          rxBuffer[rxIndex + 1] = '\0';  // Null terminate
 8000d80:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <HAL_UART_RxCpltCallback+0x94>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	3301      	adds	r3, #1
 8000d88:	4a13      	ldr	r2, [pc, #76]	@ (8000dd8 <HAL_UART_RxCpltCallback+0x98>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	54d1      	strb	r1, [r2, r3]
          messageComplete = 1;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <HAL_UART_RxCpltCallback+0xa0>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]
          rxIndex = 0;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <HAL_UART_RxCpltCallback+0x94>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
 8000d9a:	e00b      	b.n	8000db4 <HAL_UART_RxCpltCallback+0x74>
      } else if (rxIndex < RX_BUFFER_SIZE - 2) {
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd4 <HAL_UART_RxCpltCallback+0x94>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b1d      	cmp	r3, #29
 8000da4:	d806      	bhi.n	8000db4 <HAL_UART_RxCpltCallback+0x74>
          rxIndex++;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd4 <HAL_UART_RxCpltCallback+0x94>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	3301      	adds	r3, #1
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <HAL_UART_RxCpltCallback+0x94>)
 8000db2:	701a      	strb	r2, [r3, #0]
      }
      
      // Continue receiving
      HAL_UART_Receive_IT(&huart1, &rxBuffer[rxIndex], 1);
 8000db4:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <HAL_UART_RxCpltCallback+0x94>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_UART_RxCpltCallback+0x98>)
 8000dbe:	4413      	add	r3, r2
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <HAL_UART_RxCpltCallback+0x9c>)
 8000dc6:	f002 ff15 	bl	8003bf4 <HAL_UART_Receive_IT>
  }
}
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40013800 	.word	0x40013800
 8000dd4:	20000124 	.word	0x20000124
 8000dd8:	20000104 	.word	0x20000104
 8000ddc:	2000012c 	.word	0x2000012c
 8000de0:	20000125 	.word	0x20000125

08000de4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000df4:	4b04      	ldr	r3, [pc, #16]	@ (8000e08 <BSP_PB_Callback+0x24>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	601a      	str	r2, [r3, #0]
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000100 	.word	0x20000100

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <Error_Handler+0x8>

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e22:	4a0e      	ldr	r2, [pc, #56]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3a:	4a08      	ldr	r2, [pc, #32]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e42:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e4e:	f001 fec5 	bl	8002bdc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <NMI_Handler+0x4>

08000e68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <MemManage_Handler+0x4>

08000e78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb6:	f000 fba5 	bl	8001604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ec4:	4802      	ldr	r0, [pc, #8]	@ (8000ed0 <USART1_IRQHandler+0x10>)
 8000ec6:	f002 fee1 	bl	8003c8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000012c 	.word	0x2000012c

08000ed4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f000 fa5d 	bl	8001398 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	e00a      	b.n	8000f0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ef4:	f3af 8000 	nop.w
 8000ef8:	4601      	mov	r1, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	60ba      	str	r2, [r7, #8]
 8000f00:	b2ca      	uxtb	r2, r1
 8000f02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	3301      	adds	r3, #1
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	dbf0      	blt.n	8000ef4 <_read+0x12>
  }

  return len;
 8000f12:	687b      	ldr	r3, [r7, #4]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	e009      	b.n	8000f42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	1c5a      	adds	r2, r3, #1
 8000f32:	60ba      	str	r2, [r7, #8]
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 faa2 	bl	8001480 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	dbf1      	blt.n	8000f2e <_write+0x12>
  }
  return len;
 8000f4a:	687b      	ldr	r3, [r7, #4]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <_close>:

int _close(int file)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f7c:	605a      	str	r2, [r3, #4]
  return 0;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <_isatty>:

int _isatty(int file)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f94:	2301      	movs	r3, #1
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b085      	sub	sp, #20
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc4:	4a14      	ldr	r2, [pc, #80]	@ (8001018 <_sbrk+0x5c>)
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <_sbrk+0x60>)
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd0:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <_sbrk+0x64>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <_sbrk+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d207      	bcs.n	8000ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fec:	f005 f83a 	bl	8006064 <__errno>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	e009      	b.n	8001010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001002:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	4a05      	ldr	r2, [pc, #20]	@ (8001020 <_sbrk+0x64>)
 800100c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20008000 	.word	0x20008000
 800101c:	00000400 	.word	0x00000400
 8001020:	20000128 	.word	0x20000128
 8001024:	200003b0 	.word	0x200003b0

08001028 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <SystemInit+0x20>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001032:	4a05      	ldr	r2, [pc, #20]	@ (8001048 <SystemInit+0x20>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001050:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <MX_USART1_UART_Init+0x90>)
 8001052:	4a23      	ldr	r2, [pc, #140]	@ (80010e0 <MX_USART1_UART_Init+0x94>)
 8001054:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001056:	4b21      	ldr	r3, [pc, #132]	@ (80010dc <MX_USART1_UART_Init+0x90>)
 8001058:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800105c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b1f      	ldr	r3, [pc, #124]	@ (80010dc <MX_USART1_UART_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b1d      	ldr	r3, [pc, #116]	@ (80010dc <MX_USART1_UART_Init+0x90>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800106a:	4b1c      	ldr	r3, [pc, #112]	@ (80010dc <MX_USART1_UART_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <MX_USART1_UART_Init+0x90>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b19      	ldr	r3, [pc, #100]	@ (80010dc <MX_USART1_UART_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <MX_USART1_UART_Init+0x90>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001082:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <MX_USART1_UART_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001088:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <MX_USART1_UART_Init+0x90>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800108e:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <MX_USART1_UART_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001094:	4811      	ldr	r0, [pc, #68]	@ (80010dc <MX_USART1_UART_Init+0x90>)
 8001096:	f002 fccf 	bl	8003a38 <HAL_UART_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010a0:	f7ff feb4 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a4:	2100      	movs	r1, #0
 80010a6:	480d      	ldr	r0, [pc, #52]	@ (80010dc <MX_USART1_UART_Init+0x90>)
 80010a8:	f004 fd15 	bl	8005ad6 <HAL_UARTEx_SetTxFifoThreshold>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010b2:	f7ff feab 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b6:	2100      	movs	r1, #0
 80010b8:	4808      	ldr	r0, [pc, #32]	@ (80010dc <MX_USART1_UART_Init+0x90>)
 80010ba:	f004 fd4a 	bl	8005b52 <HAL_UARTEx_SetRxFifoThreshold>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010c4:	f7ff fea2 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	@ (80010dc <MX_USART1_UART_Init+0x90>)
 80010ca:	f004 fccb 	bl	8005a64 <HAL_UARTEx_DisableFifoMode>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010d4:	f7ff fe9a 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000012c 	.word	0x2000012c
 80010e0:	40013800 	.word	0x40013800

080010e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b09a      	sub	sp, #104	@ 0x68
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	2244      	movs	r2, #68	@ 0x44
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f004 ff4c 	bl	8005fa2 <memset>
  if(uartHandle->Instance==USART1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a22      	ldr	r2, [pc, #136]	@ (8001198 <HAL_UART_MspInit+0xb4>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d13d      	bne.n	8001190 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001114:	2301      	movs	r3, #1
 8001116:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	4618      	mov	r0, r3
 8001122:	f002 fa99 	bl	8003658 <HAL_RCCEx_PeriphCLKConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800112c:	f7ff fe6e 	bl	8000e0c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001130:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <HAL_UART_MspInit+0xb8>)
 8001132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001134:	4a19      	ldr	r2, [pc, #100]	@ (800119c <HAL_UART_MspInit+0xb8>)
 8001136:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800113a:	6613      	str	r3, [r2, #96]	@ 0x60
 800113c:	4b17      	ldr	r3, [pc, #92]	@ (800119c <HAL_UART_MspInit+0xb8>)
 800113e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001140:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001148:	4b14      	ldr	r3, [pc, #80]	@ (800119c <HAL_UART_MspInit+0xb8>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114c:	4a13      	ldr	r2, [pc, #76]	@ (800119c <HAL_UART_MspInit+0xb8>)
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001154:	4b11      	ldr	r3, [pc, #68]	@ (800119c <HAL_UART_MspInit+0xb8>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001160:	2330      	movs	r3, #48	@ 0x30
 8001162:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001170:	2307      	movs	r3, #7
 8001172:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001174:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001178:	4619      	mov	r1, r3
 800117a:	4809      	ldr	r0, [pc, #36]	@ (80011a0 <HAL_UART_MspInit+0xbc>)
 800117c:	f000 fcb2 	bl	8001ae4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	2025      	movs	r0, #37	@ 0x25
 8001186:	f000 fb58 	bl	800183a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800118a:	2025      	movs	r0, #37	@ 0x25
 800118c:	f000 fb6f 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001190:	bf00      	nop
 8001192:	3768      	adds	r7, #104	@ 0x68
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40013800 	.word	0x40013800
 800119c:	40021000 	.word	0x40021000
 80011a0:	48000800 	.word	0x48000800

080011a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011a4:	480d      	ldr	r0, [pc, #52]	@ (80011dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011a6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a8:	f7ff ff3e 	bl	8001028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ac:	480c      	ldr	r0, [pc, #48]	@ (80011e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ae:	490d      	ldr	r1, [pc, #52]	@ (80011e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011b0:	4a0d      	ldr	r2, [pc, #52]	@ (80011e8 <LoopForever+0xe>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0a      	ldr	r2, [pc, #40]	@ (80011ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80011c4:	4c0a      	ldr	r4, [pc, #40]	@ (80011f0 <LoopForever+0x16>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80011d2:	f004 ff4d 	bl	8006070 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011d6:	f7ff fcbd 	bl	8000b54 <main>

080011da <LoopForever>:

LoopForever:
    b LoopForever
 80011da:	e7fe      	b.n	80011da <LoopForever>
  ldr   r0, =_estack
 80011dc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80011e8:	08007010 	.word	0x08007010
  ldr r2, =_sbss
 80011ec:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80011f0:	200003b0 	.word	0x200003b0

080011f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC1_2_IRQHandler>
	...

080011f8 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8001202:	4b16      	ldr	r3, [pc, #88]	@ (800125c <BSP_LED_Init+0x64>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001206:	4a15      	ldr	r2, [pc, #84]	@ (800125c <BSP_LED_Init+0x64>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <BSP_LED_Init+0x64>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 800121a:	2320      	movs	r3, #32
 800121c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	4a0c      	ldr	r2, [pc, #48]	@ (8001260 <BSP_LED_Init+0x68>)
 800122e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001232:	f107 020c 	add.w	r2, r7, #12
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fc53 	bl	8001ae4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	4a07      	ldr	r2, [pc, #28]	@ (8001260 <BSP_LED_Init+0x68>)
 8001242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001246:	2120      	movs	r1, #32
 8001248:	2200      	movs	r2, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fdcc 	bl	8001de8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3720      	adds	r7, #32
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000
 8001260:	20000008 	.word	0x20000008

08001264 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4a06      	ldr	r2, [pc, #24]	@ (800128c <BSP_LED_On+0x28>)
 8001272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001276:	2120      	movs	r1, #32
 8001278:	2201      	movs	r2, #1
 800127a:	4618      	mov	r0, r3
 800127c:	f000 fdb4 	bl	8001de8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008

08001290 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4a06      	ldr	r2, [pc, #24]	@ (80012b8 <BSP_LED_Toggle+0x28>)
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	2220      	movs	r2, #32
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fdb6 	bl	8001e18 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008

080012bc <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	460a      	mov	r2, r1
 80012c6:	71fb      	strb	r3, [r7, #7]
 80012c8:	4613      	mov	r3, r2
 80012ca:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 80012cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001380 <BSP_PB_Init+0xc4>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d0:	4a2b      	ldr	r2, [pc, #172]	@ (8001380 <BSP_PB_Init+0xc4>)
 80012d2:	f043 0304 	orr.w	r3, r3, #4
 80012d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d8:	4b29      	ldr	r3, [pc, #164]	@ (8001380 <BSP_PB_Init+0xc4>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 80012e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012e8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80012ea:	2302      	movs	r3, #2
 80012ec:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ee:	2302      	movs	r3, #2
 80012f0:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80012f2:	79bb      	ldrb	r3, [r7, #6]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10c      	bne.n	8001312 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4a21      	ldr	r2, [pc, #132]	@ (8001384 <BSP_PB_Init+0xc8>)
 8001300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001304:	f107 020c 	add.w	r2, r7, #12
 8001308:	4611      	mov	r1, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f000 fbea 	bl	8001ae4 <HAL_GPIO_Init>
 8001310:	e031      	b.n	8001376 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001312:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001316:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	4a1a      	ldr	r2, [pc, #104]	@ (8001384 <BSP_PB_Init+0xc8>)
 800131c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001320:	f107 020c 	add.w	r2, r7, #12
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fbdc 	bl	8001ae4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4a15      	ldr	r2, [pc, #84]	@ (8001388 <BSP_PB_Init+0xcc>)
 8001332:	441a      	add	r2, r3
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	4915      	ldr	r1, [pc, #84]	@ (800138c <BSP_PB_Init+0xd0>)
 8001338:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800133c:	4619      	mov	r1, r3
 800133e:	4610      	mov	r0, r2
 8001340:	f000 fb8c 	bl	8001a5c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4a0f      	ldr	r2, [pc, #60]	@ (8001388 <BSP_PB_Init+0xcc>)
 800134a:	1898      	adds	r0, r3, r2
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	4a10      	ldr	r2, [pc, #64]	@ (8001390 <BSP_PB_Init+0xd4>)
 8001350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001354:	461a      	mov	r2, r3
 8001356:	2100      	movs	r1, #0
 8001358:	f000 fb63 	bl	8001a22 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800135c:	2028      	movs	r0, #40	@ 0x28
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	4a0c      	ldr	r2, [pc, #48]	@ (8001394 <BSP_PB_Init+0xd8>)
 8001362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001366:	2200      	movs	r2, #0
 8001368:	4619      	mov	r1, r3
 800136a:	f000 fa66 	bl	800183a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800136e:	2328      	movs	r3, #40	@ 0x28
 8001370:	4618      	mov	r0, r3
 8001372:	f000 fa7c 	bl	800186e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3720      	adds	r7, #32
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40021000 	.word	0x40021000
 8001384:	2000000c 	.word	0x2000000c
 8001388:	200001c0 	.word	0x200001c0
 800138c:	08006ea0 	.word	0x08006ea0
 8001390:	20000014 	.word	0x20000014
 8001394:	20000018 	.word	0x20000018

08001398 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	4a04      	ldr	r2, [pc, #16]	@ (80013b8 <BSP_PB_IRQHandler+0x20>)
 80013a8:	4413      	add	r3, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 fb6a 	bl	8001a84 <HAL_EXTI_IRQHandler>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200001c0 	.word	0x200001c0

080013bc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d903      	bls.n	80013da <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013d2:	f06f 0301 	mvn.w	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	e018      	b.n	800140c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2294      	movs	r2, #148	@ 0x94
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001418 <BSP_COM_Init+0x5c>)
 80013e4:	4413      	add	r3, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f86e 	bl	80014c8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	2294      	movs	r2, #148	@ 0x94
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	4a08      	ldr	r2, [pc, #32]	@ (8001418 <BSP_COM_Init+0x5c>)
 80013f6:	4413      	add	r3, r2
 80013f8:	6839      	ldr	r1, [r7, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 f80e 	bl	800141c <MX_LPUART1_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d002      	beq.n	800140c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001406:	f06f 0303 	mvn.w	r3, #3
 800140a:	e000      	b.n	800140e <BSP_COM_Init+0x52>
    }
  }

  return ret;
 800140c:	68fb      	ldr	r3, [r7, #12]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200001c8 	.word	0x200001c8

0800141c <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <MX_LPUART1_Init+0x60>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	220c      	movs	r2, #12
 800143a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	895b      	ldrh	r3, [r3, #10]
 8001440:	461a      	mov	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	891b      	ldrh	r3, [r3, #8]
 8001452:	461a      	mov	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	899b      	ldrh	r3, [r3, #12]
 800145c:	461a      	mov	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001468:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f002 fae4 	bl	8003a38 <HAL_UART_Init>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000010 	.word	0x20000010

08001480 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001488:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <__io_putchar+0x30>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	2394      	movs	r3, #148	@ 0x94
 8001490:	fb02 f303 	mul.w	r3, r2, r3
 8001494:	4a07      	ldr	r2, [pc, #28]	@ (80014b4 <__io_putchar+0x34>)
 8001496:	1898      	adds	r0, r3, r2
 8001498:	1d39      	adds	r1, r7, #4
 800149a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149e:	2201      	movs	r2, #1
 80014a0:	f002 fb1a 	bl	8003ad8 <HAL_UART_Transmit>
  return ch;
 80014a4:	687b      	ldr	r3, [r7, #4]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2000025c 	.word	0x2000025c
 80014b4:	200001c8 	.word	0x200001c8

080014b8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff fc91 	bl	8000de4 <BSP_PB_Callback>
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	@ 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80014d0:	4b22      	ldr	r3, [pc, #136]	@ (800155c <COM1_MspInit+0x94>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d4:	4a21      	ldr	r2, [pc, #132]	@ (800155c <COM1_MspInit+0x94>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014dc:	4b1f      	ldr	r3, [pc, #124]	@ (800155c <COM1_MspInit+0x94>)
 80014de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80014e8:	4b1c      	ldr	r3, [pc, #112]	@ (800155c <COM1_MspInit+0x94>)
 80014ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ec:	4a1b      	ldr	r2, [pc, #108]	@ (800155c <COM1_MspInit+0x94>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f4:	4b19      	ldr	r3, [pc, #100]	@ (800155c <COM1_MspInit+0x94>)
 80014f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001500:	4b16      	ldr	r3, [pc, #88]	@ (800155c <COM1_MspInit+0x94>)
 8001502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001504:	4a15      	ldr	r2, [pc, #84]	@ (800155c <COM1_MspInit+0x94>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800150c:	4b13      	ldr	r3, [pc, #76]	@ (800155c <COM1_MspInit+0x94>)
 800150e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001518:	2304      	movs	r3, #4
 800151a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001520:	2302      	movs	r3, #2
 8001522:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001524:	2301      	movs	r3, #1
 8001526:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001528:	230c      	movs	r3, #12
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001536:	f000 fad5 	bl	8001ae4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800153a:	2308      	movs	r3, #8
 800153c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001542:	230c      	movs	r3, #12
 8001544:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001550:	f000 fac8 	bl	8001ae4 <HAL_GPIO_Init>
}
 8001554:	bf00      	nop
 8001556:	3728      	adds	r7, #40	@ 0x28
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021000 	.word	0x40021000

08001560 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156a:	2003      	movs	r0, #3
 800156c:	f000 f95a 	bl	8001824 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001570:	2000      	movs	r0, #0
 8001572:	f000 f80d 	bl	8001590 <HAL_InitTick>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	71fb      	strb	r3, [r7, #7]
 8001580:	e001      	b.n	8001586 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001582:	f7ff fc49 	bl	8000e18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001586:	79fb      	ldrb	r3, [r7, #7]

}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800159c:	4b16      	ldr	r3, [pc, #88]	@ (80015f8 <HAL_InitTick+0x68>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d022      	beq.n	80015ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80015a4:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <HAL_InitTick+0x6c>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <HAL_InitTick+0x68>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80015b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 f966 	bl	800188a <HAL_SYSTICK_Config>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10f      	bne.n	80015e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b0f      	cmp	r3, #15
 80015c8:	d809      	bhi.n	80015de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ca:	2200      	movs	r2, #0
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	f04f 30ff 	mov.w	r0, #4294967295
 80015d2:	f000 f932 	bl	800183a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001600 <HAL_InitTick+0x70>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	e007      	b.n	80015ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	73fb      	strb	r3, [r7, #15]
 80015e2:	e004      	b.n	80015ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	73fb      	strb	r3, [r7, #15]
 80015e8:	e001      	b.n	80015ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000020 	.word	0x20000020
 80015fc:	20000004 	.word	0x20000004
 8001600:	2000001c 	.word	0x2000001c

08001604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b05      	ldr	r3, [pc, #20]	@ (8001620 <HAL_IncTick+0x1c>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <HAL_IncTick+0x20>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4413      	add	r3, r2
 8001612:	4a03      	ldr	r2, [pc, #12]	@ (8001620 <HAL_IncTick+0x1c>)
 8001614:	6013      	str	r3, [r2, #0]
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	20000260 	.word	0x20000260
 8001624:	20000020 	.word	0x20000020

08001628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return uwTick;
 800162c:	4b03      	ldr	r3, [pc, #12]	@ (800163c <HAL_GetTick+0x14>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000260 	.word	0x20000260

08001640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001648:	f7ff ffee 	bl	8001628 <HAL_GetTick>
 800164c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001658:	d004      	beq.n	8001664 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800165a:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <HAL_Delay+0x40>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4413      	add	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001664:	bf00      	nop
 8001666:	f7ff ffdf 	bl	8001628 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	429a      	cmp	r2, r3
 8001674:	d8f7      	bhi.n	8001666 <HAL_Delay+0x26>
  {
  }
}
 8001676:	bf00      	nop
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000020 	.word	0x20000020

08001684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b6:	4a04      	ldr	r2, [pc, #16]	@ (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	60d3      	str	r3, [r2, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b04      	ldr	r3, [pc, #16]	@ (80016e4 <__NVIC_GetPriorityGrouping+0x18>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	f003 0307 	and.w	r3, r3, #7
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db0b      	blt.n	8001712 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 021f 	and.w	r2, r3, #31
 8001700:	4907      	ldr	r1, [pc, #28]	@ (8001720 <__NVIC_EnableIRQ+0x38>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	2001      	movs	r0, #1
 800170a:	fa00 f202 	lsl.w	r2, r0, r2
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000e100 	.word	0xe000e100

08001724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0a      	blt.n	800174e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	490c      	ldr	r1, [pc, #48]	@ (8001770 <__NVIC_SetPriority+0x4c>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800174c:	e00a      	b.n	8001764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4908      	ldr	r1, [pc, #32]	@ (8001774 <__NVIC_SetPriority+0x50>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	440b      	add	r3, r1
 8001762:	761a      	strb	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000e100 	.word	0xe000e100
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	@ 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f1c3 0307 	rsb	r3, r3, #7
 8001792:	2b04      	cmp	r3, #4
 8001794:	bf28      	it	cs
 8001796:	2304      	movcs	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3304      	adds	r3, #4
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d902      	bls.n	80017a8 <NVIC_EncodePriority+0x30>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3b03      	subs	r3, #3
 80017a6:	e000      	b.n	80017aa <NVIC_EncodePriority+0x32>
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
         );
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	@ 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017f0:	d301      	bcc.n	80017f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00f      	b.n	8001816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <SysTick_Config+0x40>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fe:	210f      	movs	r1, #15
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f7ff ff8e 	bl	8001724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <SysTick_Config+0x40>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180e:	4b04      	ldr	r3, [pc, #16]	@ (8001820 <SysTick_Config+0x40>)
 8001810:	2207      	movs	r2, #7
 8001812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	e000e010 	.word	0xe000e010

08001824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ff29 	bl	8001684 <__NVIC_SetPriorityGrouping>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
 8001846:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001848:	f7ff ff40 	bl	80016cc <__NVIC_GetPriorityGrouping>
 800184c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff90 	bl	8001778 <NVIC_EncodePriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff5f 	bl	8001724 <__NVIC_SetPriority>
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff33 	bl	80016e8 <__NVIC_EnableIRQ>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffa4 	bl	80017e0 <SysTick_Config>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b085      	sub	sp, #20
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d005      	beq.n	80018c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2204      	movs	r2, #4
 80018be:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	e037      	b.n	8001936 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 020e 	bic.w	r2, r2, #14
 80018d4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018e4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0201 	bic.w	r2, r2, #1
 80018f4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	f003 021f 	and.w	r2, r3, #31
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	2101      	movs	r1, #1
 8001904:	fa01 f202 	lsl.w	r2, r1, r2
 8001908:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001912:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00c      	beq.n	8001936 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001926:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800192a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001934:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001946:	7bfb      	ldrb	r3, [r7, #15]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d00d      	beq.n	8001988 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2204      	movs	r2, #4
 8001970:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	e047      	b.n	8001a18 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 020e 	bic.w	r2, r2, #14
 8001996:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	2101      	movs	r1, #1
 80019c6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00c      	beq.n	80019f8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80019f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	4798      	blx	r3
    }
  }
  return status;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001a22:	b480      	push	{r7}
 8001a24:	b087      	sub	sp, #28
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8001a34:	7afb      	ldrb	r3, [r7, #11]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d103      	bne.n	8001a42 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	605a      	str	r2, [r3, #4]
      break;
 8001a40:	e005      	b.n	8001a4e <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8001a4c:	bf00      	nop
  }

  return status;
 8001a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	371c      	adds	r7, #28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e003      	b.n	8001a78 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001a76:	2300      	movs	r3, #0
  }
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0c1b      	lsrs	r3, r3, #16
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 031f 	and.w	r3, r3, #31
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	015a      	lsls	r2, r3, #5
 8001aac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <HAL_EXTI_IRQHandler+0x5c>)
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4798      	blx	r3
    }
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40010414 	.word	0x40010414

08001ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001af2:	e15a      	b.n	8001daa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	2101      	movs	r1, #1
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	fa01 f303 	lsl.w	r3, r1, r3
 8001b00:	4013      	ands	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 814c 	beq.w	8001da4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d005      	beq.n	8001b24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d130      	bne.n	8001b86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	091b      	lsrs	r3, r3, #4
 8001b70:	f003 0201 	and.w	r2, r3, #1
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d017      	beq.n	8001bc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d123      	bne.n	8001c16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	08da      	lsrs	r2, r3, #3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3208      	adds	r2, #8
 8001bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	220f      	movs	r2, #15
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	691a      	ldr	r2, [r3, #16]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	08da      	lsrs	r2, r3, #3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3208      	adds	r2, #8
 8001c10:	6939      	ldr	r1, [r7, #16]
 8001c12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2203      	movs	r2, #3
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 0203 	and.w	r2, r3, #3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80a6 	beq.w	8001da4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c58:	4b5b      	ldr	r3, [pc, #364]	@ (8001dc8 <HAL_GPIO_Init+0x2e4>)
 8001c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c5c:	4a5a      	ldr	r2, [pc, #360]	@ (8001dc8 <HAL_GPIO_Init+0x2e4>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c64:	4b58      	ldr	r3, [pc, #352]	@ (8001dc8 <HAL_GPIO_Init+0x2e4>)
 8001c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c70:	4a56      	ldr	r2, [pc, #344]	@ (8001dcc <HAL_GPIO_Init+0x2e8>)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	220f      	movs	r2, #15
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c9a:	d01f      	beq.n	8001cdc <HAL_GPIO_Init+0x1f8>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a4c      	ldr	r2, [pc, #304]	@ (8001dd0 <HAL_GPIO_Init+0x2ec>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d019      	beq.n	8001cd8 <HAL_GPIO_Init+0x1f4>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a4b      	ldr	r2, [pc, #300]	@ (8001dd4 <HAL_GPIO_Init+0x2f0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d013      	beq.n	8001cd4 <HAL_GPIO_Init+0x1f0>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a4a      	ldr	r2, [pc, #296]	@ (8001dd8 <HAL_GPIO_Init+0x2f4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d00d      	beq.n	8001cd0 <HAL_GPIO_Init+0x1ec>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a49      	ldr	r2, [pc, #292]	@ (8001ddc <HAL_GPIO_Init+0x2f8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d007      	beq.n	8001ccc <HAL_GPIO_Init+0x1e8>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a48      	ldr	r2, [pc, #288]	@ (8001de0 <HAL_GPIO_Init+0x2fc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d101      	bne.n	8001cc8 <HAL_GPIO_Init+0x1e4>
 8001cc4:	2305      	movs	r3, #5
 8001cc6:	e00a      	b.n	8001cde <HAL_GPIO_Init+0x1fa>
 8001cc8:	2306      	movs	r3, #6
 8001cca:	e008      	b.n	8001cde <HAL_GPIO_Init+0x1fa>
 8001ccc:	2304      	movs	r3, #4
 8001cce:	e006      	b.n	8001cde <HAL_GPIO_Init+0x1fa>
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e004      	b.n	8001cde <HAL_GPIO_Init+0x1fa>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e002      	b.n	8001cde <HAL_GPIO_Init+0x1fa>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <HAL_GPIO_Init+0x1fa>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	f002 0203 	and.w	r2, r2, #3
 8001ce4:	0092      	lsls	r2, r2, #2
 8001ce6:	4093      	lsls	r3, r2
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cee:	4937      	ldr	r1, [pc, #220]	@ (8001dcc <HAL_GPIO_Init+0x2e8>)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cfc:	4b39      	ldr	r3, [pc, #228]	@ (8001de4 <HAL_GPIO_Init+0x300>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d20:	4a30      	ldr	r2, [pc, #192]	@ (8001de4 <HAL_GPIO_Init+0x300>)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d26:	4b2f      	ldr	r3, [pc, #188]	@ (8001de4 <HAL_GPIO_Init+0x300>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d4a:	4a26      	ldr	r2, [pc, #152]	@ (8001de4 <HAL_GPIO_Init+0x300>)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d50:	4b24      	ldr	r3, [pc, #144]	@ (8001de4 <HAL_GPIO_Init+0x300>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d74:	4a1b      	ldr	r2, [pc, #108]	@ (8001de4 <HAL_GPIO_Init+0x300>)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001de4 <HAL_GPIO_Init+0x300>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d9e:	4a11      	ldr	r2, [pc, #68]	@ (8001de4 <HAL_GPIO_Init+0x300>)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	3301      	adds	r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	fa22 f303 	lsr.w	r3, r2, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f47f ae9d 	bne.w	8001af4 <HAL_GPIO_Init+0x10>
  }
}
 8001dba:	bf00      	nop
 8001dbc:	bf00      	nop
 8001dbe:	371c      	adds	r7, #28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40010000 	.word	0x40010000
 8001dd0:	48000400 	.word	0x48000400
 8001dd4:	48000800 	.word	0x48000800
 8001dd8:	48000c00 	.word	0x48000c00
 8001ddc:	48001000 	.word	0x48001000
 8001de0:	48001400 	.word	0x48001400
 8001de4:	40010400 	.word	0x40010400

08001de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
 8001df4:	4613      	mov	r3, r2
 8001df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001df8:	787b      	ldrb	r3, [r7, #1]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e04:	e002      	b.n	8001e0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	041a      	lsls	r2, r3, #16
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	43d9      	mvns	r1, r3
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	400b      	ands	r3, r1
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	619a      	str	r2, [r3, #24]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e08d      	b.n	8001f7a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7fe fc18 	bl	80006a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2224      	movs	r2, #36	@ 0x24
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0201 	bic.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001eac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d107      	bne.n	8001ec6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	e006      	b.n	8001ed4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001ed2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d108      	bne.n	8001eee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	e007      	b.n	8001efe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001efc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691a      	ldr	r2, [r3, #16]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69d9      	ldr	r1, [r3, #28]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1a      	ldr	r2, [r3, #32]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	4608      	mov	r0, r1
 8001f8e:	4611      	mov	r1, r2
 8001f90:	461a      	mov	r2, r3
 8001f92:	4603      	mov	r3, r0
 8001f94:	817b      	strh	r3, [r7, #10]
 8001f96:	460b      	mov	r3, r1
 8001f98:	813b      	strh	r3, [r7, #8]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b20      	cmp	r3, #32
 8001fa8:	f040 80f9 	bne.w	800219e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <HAL_I2C_Mem_Write+0x34>
 8001fb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d105      	bne.n	8001fc4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fbe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0ed      	b.n	80021a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_I2C_Mem_Write+0x4e>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e0e6      	b.n	80021a0 <HAL_I2C_Mem_Write+0x21c>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fda:	f7ff fb25 	bl	8001628 <HAL_GetTick>
 8001fde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	2319      	movs	r3, #25
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 fac3 	bl	8002578 <I2C_WaitOnFlagUntilTimeout>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0d1      	b.n	80021a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2221      	movs	r2, #33	@ 0x21
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2240      	movs	r2, #64	@ 0x40
 8002008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a3a      	ldr	r2, [r7, #32]
 8002016:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800201c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002024:	88f8      	ldrh	r0, [r7, #6]
 8002026:	893a      	ldrh	r2, [r7, #8]
 8002028:	8979      	ldrh	r1, [r7, #10]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	9301      	str	r3, [sp, #4]
 800202e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	4603      	mov	r3, r0
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 f9d3 	bl	80023e0 <I2C_RequestMemoryWrite>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0a9      	b.n	80021a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002050:	b29b      	uxth	r3, r3
 8002052:	2bff      	cmp	r3, #255	@ 0xff
 8002054:	d90e      	bls.n	8002074 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	22ff      	movs	r2, #255	@ 0xff
 800205a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002060:	b2da      	uxtb	r2, r3
 8002062:	8979      	ldrh	r1, [r7, #10]
 8002064:	2300      	movs	r3, #0
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 fc47 	bl	8002900 <I2C_TransferConfig>
 8002072:	e00f      	b.n	8002094 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002082:	b2da      	uxtb	r2, r3
 8002084:	8979      	ldrh	r1, [r7, #10]
 8002086:	2300      	movs	r3, #0
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 fc36 	bl	8002900 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f000 fac6 	bl	800262a <I2C_WaitOnTXISFlagUntilTimeout>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e07b      	b.n	80021a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ac:	781a      	ldrb	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d034      	beq.n	800214c <HAL_I2C_Mem_Write+0x1c8>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d130      	bne.n	800214c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f0:	2200      	movs	r2, #0
 80020f2:	2180      	movs	r1, #128	@ 0x80
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 fa3f 	bl	8002578 <I2C_WaitOnFlagUntilTimeout>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e04d      	b.n	80021a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002108:	b29b      	uxth	r3, r3
 800210a:	2bff      	cmp	r3, #255	@ 0xff
 800210c:	d90e      	bls.n	800212c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	22ff      	movs	r2, #255	@ 0xff
 8002112:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002118:	b2da      	uxtb	r2, r3
 800211a:	8979      	ldrh	r1, [r7, #10]
 800211c:	2300      	movs	r3, #0
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 fbeb 	bl	8002900 <I2C_TransferConfig>
 800212a:	e00f      	b.n	800214c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800213a:	b2da      	uxtb	r2, r3
 800213c:	8979      	ldrh	r1, [r7, #10]
 800213e:	2300      	movs	r3, #0
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 fbda 	bl	8002900 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d19e      	bne.n	8002094 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 faac 	bl	80026b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e01a      	b.n	80021a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2220      	movs	r2, #32
 8002170:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6859      	ldr	r1, [r3, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b0a      	ldr	r3, [pc, #40]	@ (80021a8 <HAL_I2C_Mem_Write+0x224>)
 800217e:	400b      	ands	r3, r1
 8002180:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2220      	movs	r2, #32
 8002186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e000      	b.n	80021a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800219e:	2302      	movs	r3, #2
  }
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	fe00e800 	.word	0xfe00e800

080021ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	4608      	mov	r0, r1
 80021b6:	4611      	mov	r1, r2
 80021b8:	461a      	mov	r2, r3
 80021ba:	4603      	mov	r3, r0
 80021bc:	817b      	strh	r3, [r7, #10]
 80021be:	460b      	mov	r3, r1
 80021c0:	813b      	strh	r3, [r7, #8]
 80021c2:	4613      	mov	r3, r2
 80021c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b20      	cmp	r3, #32
 80021d0:	f040 80fd 	bne.w	80023ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <HAL_I2C_Mem_Read+0x34>
 80021da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d105      	bne.n	80021ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0f1      	b.n	80023d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_I2C_Mem_Read+0x4e>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e0ea      	b.n	80023d0 <HAL_I2C_Mem_Read+0x224>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002202:	f7ff fa11 	bl	8001628 <HAL_GetTick>
 8002206:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2319      	movs	r3, #25
 800220e:	2201      	movs	r2, #1
 8002210:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 f9af 	bl	8002578 <I2C_WaitOnFlagUntilTimeout>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0d5      	b.n	80023d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2222      	movs	r2, #34	@ 0x22
 8002228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2240      	movs	r2, #64	@ 0x40
 8002230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a3a      	ldr	r2, [r7, #32]
 800223e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002244:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800224c:	88f8      	ldrh	r0, [r7, #6]
 800224e:	893a      	ldrh	r2, [r7, #8]
 8002250:	8979      	ldrh	r1, [r7, #10]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	4603      	mov	r3, r0
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 f913 	bl	8002488 <I2C_RequestMemoryRead>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0ad      	b.n	80023d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002278:	b29b      	uxth	r3, r3
 800227a:	2bff      	cmp	r3, #255	@ 0xff
 800227c:	d90e      	bls.n	800229c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	22ff      	movs	r2, #255	@ 0xff
 8002282:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002288:	b2da      	uxtb	r2, r3
 800228a:	8979      	ldrh	r1, [r7, #10]
 800228c:	4b52      	ldr	r3, [pc, #328]	@ (80023d8 <HAL_I2C_Mem_Read+0x22c>)
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 fb33 	bl	8002900 <I2C_TransferConfig>
 800229a:	e00f      	b.n	80022bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	8979      	ldrh	r1, [r7, #10]
 80022ae:	4b4a      	ldr	r3, [pc, #296]	@ (80023d8 <HAL_I2C_Mem_Read+0x22c>)
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 fb22 	bl	8002900 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c2:	2200      	movs	r2, #0
 80022c4:	2104      	movs	r1, #4
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 f956 	bl	8002578 <I2C_WaitOnFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e07c      	b.n	80023d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d034      	beq.n	800237c <HAL_I2C_Mem_Read+0x1d0>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002316:	2b00      	cmp	r3, #0
 8002318:	d130      	bne.n	800237c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002320:	2200      	movs	r2, #0
 8002322:	2180      	movs	r1, #128	@ 0x80
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 f927 	bl	8002578 <I2C_WaitOnFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e04d      	b.n	80023d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002338:	b29b      	uxth	r3, r3
 800233a:	2bff      	cmp	r3, #255	@ 0xff
 800233c:	d90e      	bls.n	800235c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	22ff      	movs	r2, #255	@ 0xff
 8002342:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002348:	b2da      	uxtb	r2, r3
 800234a:	8979      	ldrh	r1, [r7, #10]
 800234c:	2300      	movs	r3, #0
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 fad3 	bl	8002900 <I2C_TransferConfig>
 800235a:	e00f      	b.n	800237c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800236a:	b2da      	uxtb	r2, r3
 800236c:	8979      	ldrh	r1, [r7, #10]
 800236e:	2300      	movs	r3, #0
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 fac2 	bl	8002900 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d19a      	bne.n	80022bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 f994 	bl	80026b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e01a      	b.n	80023d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2220      	movs	r2, #32
 80023a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b0b      	ldr	r3, [pc, #44]	@ (80023dc <HAL_I2C_Mem_Read+0x230>)
 80023ae:	400b      	ands	r3, r1
 80023b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e000      	b.n	80023d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80023ce:	2302      	movs	r3, #2
  }
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	80002400 	.word	0x80002400
 80023dc:	fe00e800 	.word	0xfe00e800

080023e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	4608      	mov	r0, r1
 80023ea:	4611      	mov	r1, r2
 80023ec:	461a      	mov	r2, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	817b      	strh	r3, [r7, #10]
 80023f2:	460b      	mov	r3, r1
 80023f4:	813b      	strh	r3, [r7, #8]
 80023f6:	4613      	mov	r3, r2
 80023f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	8979      	ldrh	r1, [r7, #10]
 8002400:	4b20      	ldr	r3, [pc, #128]	@ (8002484 <I2C_RequestMemoryWrite+0xa4>)
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 fa79 	bl	8002900 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	69b9      	ldr	r1, [r7, #24]
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f909 	bl	800262a <I2C_WaitOnTXISFlagUntilTimeout>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e02c      	b.n	800247c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002422:	88fb      	ldrh	r3, [r7, #6]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d105      	bne.n	8002434 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002428:	893b      	ldrh	r3, [r7, #8]
 800242a:	b2da      	uxtb	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	629a      	str	r2, [r3, #40]	@ 0x28
 8002432:	e015      	b.n	8002460 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002434:	893b      	ldrh	r3, [r7, #8]
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	b29b      	uxth	r3, r3
 800243a:	b2da      	uxtb	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	69b9      	ldr	r1, [r7, #24]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f8ef 	bl	800262a <I2C_WaitOnTXISFlagUntilTimeout>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e012      	b.n	800247c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002456:	893b      	ldrh	r3, [r7, #8]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	2200      	movs	r2, #0
 8002468:	2180      	movs	r1, #128	@ 0x80
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f884 	bl	8002578 <I2C_WaitOnFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	80002000 	.word	0x80002000

08002488 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	4608      	mov	r0, r1
 8002492:	4611      	mov	r1, r2
 8002494:	461a      	mov	r2, r3
 8002496:	4603      	mov	r3, r0
 8002498:	817b      	strh	r3, [r7, #10]
 800249a:	460b      	mov	r3, r1
 800249c:	813b      	strh	r3, [r7, #8]
 800249e:	4613      	mov	r3, r2
 80024a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	8979      	ldrh	r1, [r7, #10]
 80024a8:	4b20      	ldr	r3, [pc, #128]	@ (800252c <I2C_RequestMemoryRead+0xa4>)
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	2300      	movs	r3, #0
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fa26 	bl	8002900 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	69b9      	ldr	r1, [r7, #24]
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 f8b6 	bl	800262a <I2C_WaitOnTXISFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e02c      	b.n	8002522 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d105      	bne.n	80024da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024ce:	893b      	ldrh	r3, [r7, #8]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80024d8:	e015      	b.n	8002506 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024da:	893b      	ldrh	r3, [r7, #8]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	b29b      	uxth	r3, r3
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	69b9      	ldr	r1, [r7, #24]
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 f89c 	bl	800262a <I2C_WaitOnTXISFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e012      	b.n	8002522 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024fc:	893b      	ldrh	r3, [r7, #8]
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	2200      	movs	r2, #0
 800250e:	2140      	movs	r1, #64	@ 0x40
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 f831 	bl	8002578 <I2C_WaitOnFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	80002000 	.word	0x80002000

08002530 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b02      	cmp	r3, #2
 8002544:	d103      	bne.n	800254e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2200      	movs	r2, #0
 800254c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b01      	cmp	r3, #1
 800255a:	d007      	beq.n	800256c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	619a      	str	r2, [r3, #24]
  }
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	4613      	mov	r3, r2
 8002586:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002588:	e03b      	b.n	8002602 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	6839      	ldr	r1, [r7, #0]
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 f8d6 	bl	8002740 <I2C_IsErrorOccurred>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e041      	b.n	8002622 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d02d      	beq.n	8002602 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a6:	f7ff f83f 	bl	8001628 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d302      	bcc.n	80025bc <I2C_WaitOnFlagUntilTimeout+0x44>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d122      	bne.n	8002602 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	4013      	ands	r3, r2
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d113      	bne.n	8002602 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025de:	f043 0220 	orr.w	r2, r3, #32
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e00f      	b.n	8002622 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699a      	ldr	r2, [r3, #24]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	4013      	ands	r3, r2
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	429a      	cmp	r2, r3
 8002610:	bf0c      	ite	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	2300      	movne	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	429a      	cmp	r2, r3
 800261e:	d0b4      	beq.n	800258a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002636:	e033      	b.n	80026a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	68b9      	ldr	r1, [r7, #8]
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f87f 	bl	8002740 <I2C_IsErrorOccurred>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e031      	b.n	80026b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002652:	d025      	beq.n	80026a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002654:	f7fe ffe8 	bl	8001628 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	429a      	cmp	r2, r3
 8002662:	d302      	bcc.n	800266a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d11a      	bne.n	80026a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b02      	cmp	r3, #2
 8002676:	d013      	beq.n	80026a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267c:	f043 0220 	orr.w	r2, r3, #32
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e007      	b.n	80026b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d1c4      	bne.n	8002638 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026c4:	e02f      	b.n	8002726 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f838 	bl	8002740 <I2C_IsErrorOccurred>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e02d      	b.n	8002736 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026da:	f7fe ffa5 	bl	8001628 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d302      	bcc.n	80026f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d11a      	bne.n	8002726 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	f003 0320 	and.w	r3, r3, #32
 80026fa:	2b20      	cmp	r3, #32
 80026fc:	d013      	beq.n	8002726 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002702:	f043 0220 	orr.w	r2, r3, #32
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2220      	movs	r2, #32
 800270e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e007      	b.n	8002736 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b20      	cmp	r3, #32
 8002732:	d1c8      	bne.n	80026c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	@ 0x28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800274c:	2300      	movs	r3, #0
 800274e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2b00      	cmp	r3, #0
 800276a:	d068      	beq.n	800283e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2210      	movs	r2, #16
 8002772:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002774:	e049      	b.n	800280a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277c:	d045      	beq.n	800280a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800277e:	f7fe ff53 	bl	8001628 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	429a      	cmp	r2, r3
 800278c:	d302      	bcc.n	8002794 <I2C_IsErrorOccurred+0x54>
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d13a      	bne.n	800280a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800279e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027b6:	d121      	bne.n	80027fc <I2C_IsErrorOccurred+0xbc>
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027be:	d01d      	beq.n	80027fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80027c0:	7cfb      	ldrb	r3, [r7, #19]
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d01a      	beq.n	80027fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80027d6:	f7fe ff27 	bl	8001628 <HAL_GetTick>
 80027da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027dc:	e00e      	b.n	80027fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80027de:	f7fe ff23 	bl	8001628 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b19      	cmp	r3, #25
 80027ea:	d907      	bls.n	80027fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	f043 0320 	orr.w	r3, r3, #32
 80027f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80027fa:	e006      	b.n	800280a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f003 0320 	and.w	r3, r3, #32
 8002806:	2b20      	cmp	r3, #32
 8002808:	d1e9      	bne.n	80027de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b20      	cmp	r3, #32
 8002816:	d003      	beq.n	8002820 <I2C_IsErrorOccurred+0xe0>
 8002818:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0aa      	beq.n	8002776 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002824:	2b00      	cmp	r3, #0
 8002826:	d103      	bne.n	8002830 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2220      	movs	r2, #32
 800282e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	f043 0304 	orr.w	r3, r3, #4
 8002836:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00b      	beq.n	8002868 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002860:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00b      	beq.n	800288a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	f043 0308 	orr.w	r3, r3, #8
 8002878:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002882:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00b      	beq.n	80028ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	f043 0302 	orr.w	r3, r3, #2
 800289a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80028ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01c      	beq.n	80028ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f7ff fe3b 	bl	8002530 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b0d      	ldr	r3, [pc, #52]	@ (80028fc <I2C_IsErrorOccurred+0x1bc>)
 80028c6:	400b      	ands	r3, r1
 80028c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80028ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3728      	adds	r7, #40	@ 0x28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	fe00e800 	.word	0xfe00e800

08002900 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	460b      	mov	r3, r1
 800290c:	817b      	strh	r3, [r7, #10]
 800290e:	4613      	mov	r3, r2
 8002910:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002912:	897b      	ldrh	r3, [r7, #10]
 8002914:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002918:	7a7b      	ldrb	r3, [r7, #9]
 800291a:	041b      	lsls	r3, r3, #16
 800291c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002920:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	4313      	orrs	r3, r2
 800292a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800292e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	0d5b      	lsrs	r3, r3, #21
 800293a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800293e:	4b08      	ldr	r3, [pc, #32]	@ (8002960 <I2C_TransferConfig+0x60>)
 8002940:	430b      	orrs	r3, r1
 8002942:	43db      	mvns	r3, r3
 8002944:	ea02 0103 	and.w	r1, r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002952:	bf00      	nop
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	03ff63ff 	.word	0x03ff63ff

08002964 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b20      	cmp	r3, #32
 8002978:	d138      	bne.n	80029ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002984:	2302      	movs	r3, #2
 8002986:	e032      	b.n	80029ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2224      	movs	r2, #36	@ 0x24
 8002994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0201 	bic.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80029b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6819      	ldr	r1, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	e000      	b.n	80029ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029ec:	2302      	movs	r3, #2
  }
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d139      	bne.n	8002a84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e033      	b.n	8002a86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2224      	movs	r2, #36	@ 0x24
 8002a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0201 	bic.w	r2, r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e000      	b.n	8002a86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
  }
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d141      	bne.n	8002b26 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aa2:	4b4b      	ldr	r3, [pc, #300]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002aaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aae:	d131      	bne.n	8002b14 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ab0:	4b47      	ldr	r3, [pc, #284]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ab6:	4a46      	ldr	r2, [pc, #280]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002abc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ac0:	4b43      	ldr	r3, [pc, #268]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ac8:	4a41      	ldr	r2, [pc, #260]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ace:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ad0:	4b40      	ldr	r3, [pc, #256]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2232      	movs	r2, #50	@ 0x32
 8002ad6:	fb02 f303 	mul.w	r3, r2, r3
 8002ada:	4a3f      	ldr	r2, [pc, #252]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002adc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae0:	0c9b      	lsrs	r3, r3, #18
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ae6:	e002      	b.n	8002aee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aee:	4b38      	ldr	r3, [pc, #224]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002afa:	d102      	bne.n	8002b02 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f2      	bne.n	8002ae8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b02:	4b33      	ldr	r3, [pc, #204]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b0e:	d158      	bne.n	8002bc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e057      	b.n	8002bc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b14:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b1a:	4a2d      	ldr	r2, [pc, #180]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b24:	e04d      	b.n	8002bc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b2c:	d141      	bne.n	8002bb2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b2e:	4b28      	ldr	r3, [pc, #160]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b3a:	d131      	bne.n	8002ba0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b3c:	4b24      	ldr	r3, [pc, #144]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b42:	4a23      	ldr	r2, [pc, #140]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b4c:	4b20      	ldr	r3, [pc, #128]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b54:	4a1e      	ldr	r2, [pc, #120]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2232      	movs	r2, #50	@ 0x32
 8002b62:	fb02 f303 	mul.w	r3, r2, r3
 8002b66:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b68:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6c:	0c9b      	lsrs	r3, r3, #18
 8002b6e:	3301      	adds	r3, #1
 8002b70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b72:	e002      	b.n	8002b7a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b7a:	4b15      	ldr	r3, [pc, #84]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b86:	d102      	bne.n	8002b8e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f2      	bne.n	8002b74 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b8e:	4b10      	ldr	r3, [pc, #64]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b9a:	d112      	bne.n	8002bc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e011      	b.n	8002bc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002bb0:	e007      	b.n	8002bc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bb2:	4b07      	ldr	r3, [pc, #28]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bba:	4a05      	ldr	r2, [pc, #20]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bc0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	40007000 	.word	0x40007000
 8002bd4:	20000004 	.word	0x20000004
 8002bd8:	431bde83 	.word	0x431bde83

08002bdc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002be0:	4b05      	ldr	r3, [pc, #20]	@ (8002bf8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	4a04      	ldr	r2, [pc, #16]	@ (8002bf8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002be6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bea:	6093      	str	r3, [r2, #8]
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40007000 	.word	0x40007000

08002bfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e2fe      	b.n	800320c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d075      	beq.n	8002d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c1a:	4b97      	ldr	r3, [pc, #604]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c24:	4b94      	ldr	r3, [pc, #592]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	2b0c      	cmp	r3, #12
 8002c32:	d102      	bne.n	8002c3a <HAL_RCC_OscConfig+0x3e>
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d002      	beq.n	8002c40 <HAL_RCC_OscConfig+0x44>
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d10b      	bne.n	8002c58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c40:	4b8d      	ldr	r3, [pc, #564]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d05b      	beq.n	8002d04 <HAL_RCC_OscConfig+0x108>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d157      	bne.n	8002d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e2d9      	b.n	800320c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c60:	d106      	bne.n	8002c70 <HAL_RCC_OscConfig+0x74>
 8002c62:	4b85      	ldr	r3, [pc, #532]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a84      	ldr	r2, [pc, #528]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e01d      	b.n	8002cac <HAL_RCC_OscConfig+0xb0>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x98>
 8002c7a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002c80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	4b7c      	ldr	r3, [pc, #496]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a7b      	ldr	r2, [pc, #492]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	e00b      	b.n	8002cac <HAL_RCC_OscConfig+0xb0>
 8002c94:	4b78      	ldr	r3, [pc, #480]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a77      	ldr	r2, [pc, #476]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002c9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	4b75      	ldr	r3, [pc, #468]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a74      	ldr	r2, [pc, #464]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002ca6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d013      	beq.n	8002cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fcb8 	bl	8001628 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cbc:	f7fe fcb4 	bl	8001628 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	@ 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e29e      	b.n	800320c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cce:	4b6a      	ldr	r3, [pc, #424]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0xc0>
 8002cda:	e014      	b.n	8002d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7fe fca4 	bl	8001628 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce4:	f7fe fca0 	bl	8001628 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	@ 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e28a      	b.n	800320c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cf6:	4b60      	ldr	r3, [pc, #384]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0xe8>
 8002d02:	e000      	b.n	8002d06 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d075      	beq.n	8002dfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d12:	4b59      	ldr	r3, [pc, #356]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d1c:	4b56      	ldr	r3, [pc, #344]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	2b0c      	cmp	r3, #12
 8002d2a:	d102      	bne.n	8002d32 <HAL_RCC_OscConfig+0x136>
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d002      	beq.n	8002d38 <HAL_RCC_OscConfig+0x13c>
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d11f      	bne.n	8002d78 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d38:	4b4f      	ldr	r3, [pc, #316]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_OscConfig+0x154>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e25d      	b.n	800320c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d50:	4b49      	ldr	r3, [pc, #292]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	061b      	lsls	r3, r3, #24
 8002d5e:	4946      	ldr	r1, [pc, #280]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d64:	4b45      	ldr	r3, [pc, #276]	@ (8002e7c <HAL_RCC_OscConfig+0x280>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe fc11 	bl	8001590 <HAL_InitTick>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d043      	beq.n	8002dfc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e249      	b.n	800320c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d023      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d80:	4b3d      	ldr	r3, [pc, #244]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a3c      	ldr	r2, [pc, #240]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002d86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fc4c 	bl	8001628 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d94:	f7fe fc48 	bl	8001628 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e232      	b.n	800320c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002da6:	4b34      	ldr	r3, [pc, #208]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db2:	4b31      	ldr	r3, [pc, #196]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	061b      	lsls	r3, r3, #24
 8002dc0:	492d      	ldr	r1, [pc, #180]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]
 8002dc6:	e01a      	b.n	8002dfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a2a      	ldr	r2, [pc, #168]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002dce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7fe fc28 	bl	8001628 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ddc:	f7fe fc24 	bl	8001628 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e20e      	b.n	800320c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dee:	4b22      	ldr	r3, [pc, #136]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x1e0>
 8002dfa:	e000      	b.n	8002dfe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d041      	beq.n	8002e8e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d01c      	beq.n	8002e4c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e12:	4b19      	ldr	r3, [pc, #100]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e18:	4a17      	ldr	r2, [pc, #92]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e22:	f7fe fc01 	bl	8001628 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2a:	f7fe fbfd 	bl	8001628 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e1e7      	b.n	800320c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0ef      	beq.n	8002e2a <HAL_RCC_OscConfig+0x22e>
 8002e4a:	e020      	b.n	8002e8e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e52:	4a09      	ldr	r2, [pc, #36]	@ (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5c:	f7fe fbe4 	bl	8001628 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e62:	e00d      	b.n	8002e80 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e64:	f7fe fbe0 	bl	8001628 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d906      	bls.n	8002e80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e1ca      	b.n	800320c <HAL_RCC_OscConfig+0x610>
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e80:	4b8c      	ldr	r3, [pc, #560]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8002e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1ea      	bne.n	8002e64 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 80a6 	beq.w	8002fe8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ea0:	4b84      	ldr	r3, [pc, #528]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x2b4>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_RCC_OscConfig+0x2b6>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00d      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb6:	4b7f      	ldr	r3, [pc, #508]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eba:	4a7e      	ldr	r2, [pc, #504]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8002ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ec2:	4b7c      	ldr	r3, [pc, #496]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed2:	4b79      	ldr	r3, [pc, #484]	@ (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d118      	bne.n	8002f10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ede:	4b76      	ldr	r3, [pc, #472]	@ (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a75      	ldr	r2, [pc, #468]	@ (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eea:	f7fe fb9d 	bl	8001628 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef2:	f7fe fb99 	bl	8001628 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e183      	b.n	800320c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f04:	4b6c      	ldr	r3, [pc, #432]	@ (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d108      	bne.n	8002f2a <HAL_RCC_OscConfig+0x32e>
 8002f18:	4b66      	ldr	r3, [pc, #408]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f1e:	4a65      	ldr	r2, [pc, #404]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f28:	e024      	b.n	8002f74 <HAL_RCC_OscConfig+0x378>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b05      	cmp	r3, #5
 8002f30:	d110      	bne.n	8002f54 <HAL_RCC_OscConfig+0x358>
 8002f32:	4b60      	ldr	r3, [pc, #384]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f38:	4a5e      	ldr	r2, [pc, #376]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8002f3a:	f043 0304 	orr.w	r3, r3, #4
 8002f3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f42:	4b5c      	ldr	r3, [pc, #368]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8002f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f48:	4a5a      	ldr	r2, [pc, #360]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f52:	e00f      	b.n	8002f74 <HAL_RCC_OscConfig+0x378>
 8002f54:	4b57      	ldr	r3, [pc, #348]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5a:	4a56      	ldr	r2, [pc, #344]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8002f5c:	f023 0301 	bic.w	r3, r3, #1
 8002f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f64:	4b53      	ldr	r3, [pc, #332]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f6a:	4a52      	ldr	r2, [pc, #328]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8002f6c:	f023 0304 	bic.w	r3, r3, #4
 8002f70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d016      	beq.n	8002faa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7c:	f7fe fb54 	bl	8001628 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f82:	e00a      	b.n	8002f9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f84:	f7fe fb50 	bl	8001628 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e138      	b.n	800320c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f9a:	4b46      	ldr	r3, [pc, #280]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8002f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0ed      	beq.n	8002f84 <HAL_RCC_OscConfig+0x388>
 8002fa8:	e015      	b.n	8002fd6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002faa:	f7fe fb3d 	bl	8001628 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fb0:	e00a      	b.n	8002fc8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb2:	f7fe fb39 	bl	8001628 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e121      	b.n	800320c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1ed      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fd6:	7ffb      	ldrb	r3, [r7, #31]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d105      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fdc:	4b35      	ldr	r3, [pc, #212]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8002fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe0:	4a34      	ldr	r2, [pc, #208]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8002fe2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fe6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d03c      	beq.n	800306e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01c      	beq.n	8003036 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ffc:	4b2d      	ldr	r3, [pc, #180]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8002ffe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003002:	4a2c      	ldr	r2, [pc, #176]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300c:	f7fe fb0c 	bl	8001628 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003014:	f7fe fb08 	bl	8001628 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e0f2      	b.n	800320c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003026:	4b23      	ldr	r3, [pc, #140]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8003028:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0ef      	beq.n	8003014 <HAL_RCC_OscConfig+0x418>
 8003034:	e01b      	b.n	800306e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003036:	4b1f      	ldr	r3, [pc, #124]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8003038:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800303c:	4a1d      	ldr	r2, [pc, #116]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 800303e:	f023 0301 	bic.w	r3, r3, #1
 8003042:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003046:	f7fe faef 	bl	8001628 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800304e:	f7fe faeb 	bl	8001628 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e0d5      	b.n	800320c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003060:	4b14      	ldr	r3, [pc, #80]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8003062:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1ef      	bne.n	800304e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80c9 	beq.w	800320a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003078:	4b0e      	ldr	r3, [pc, #56]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 030c 	and.w	r3, r3, #12
 8003080:	2b0c      	cmp	r3, #12
 8003082:	f000 8083 	beq.w	800318c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d15e      	bne.n	800314c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308e:	4b09      	ldr	r3, [pc, #36]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a08      	ldr	r2, [pc, #32]	@ (80030b4 <HAL_RCC_OscConfig+0x4b8>)
 8003094:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309a:	f7fe fac5 	bl	8001628 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a0:	e00c      	b.n	80030bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a2:	f7fe fac1 	bl	8001628 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d905      	bls.n	80030bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e0ab      	b.n	800320c <HAL_RCC_OscConfig+0x610>
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030bc:	4b55      	ldr	r3, [pc, #340]	@ (8003214 <HAL_RCC_OscConfig+0x618>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ec      	bne.n	80030a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030c8:	4b52      	ldr	r3, [pc, #328]	@ (8003214 <HAL_RCC_OscConfig+0x618>)
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	4b52      	ldr	r3, [pc, #328]	@ (8003218 <HAL_RCC_OscConfig+0x61c>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6a11      	ldr	r1, [r2, #32]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030d8:	3a01      	subs	r2, #1
 80030da:	0112      	lsls	r2, r2, #4
 80030dc:	4311      	orrs	r1, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80030e2:	0212      	lsls	r2, r2, #8
 80030e4:	4311      	orrs	r1, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80030ea:	0852      	lsrs	r2, r2, #1
 80030ec:	3a01      	subs	r2, #1
 80030ee:	0552      	lsls	r2, r2, #21
 80030f0:	4311      	orrs	r1, r2
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030f6:	0852      	lsrs	r2, r2, #1
 80030f8:	3a01      	subs	r2, #1
 80030fa:	0652      	lsls	r2, r2, #25
 80030fc:	4311      	orrs	r1, r2
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003102:	06d2      	lsls	r2, r2, #27
 8003104:	430a      	orrs	r2, r1
 8003106:	4943      	ldr	r1, [pc, #268]	@ (8003214 <HAL_RCC_OscConfig+0x618>)
 8003108:	4313      	orrs	r3, r2
 800310a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800310c:	4b41      	ldr	r3, [pc, #260]	@ (8003214 <HAL_RCC_OscConfig+0x618>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a40      	ldr	r2, [pc, #256]	@ (8003214 <HAL_RCC_OscConfig+0x618>)
 8003112:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003116:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003118:	4b3e      	ldr	r3, [pc, #248]	@ (8003214 <HAL_RCC_OscConfig+0x618>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4a3d      	ldr	r2, [pc, #244]	@ (8003214 <HAL_RCC_OscConfig+0x618>)
 800311e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003122:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fe fa80 	bl	8001628 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312c:	f7fe fa7c 	bl	8001628 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e066      	b.n	800320c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800313e:	4b35      	ldr	r3, [pc, #212]	@ (8003214 <HAL_RCC_OscConfig+0x618>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0x530>
 800314a:	e05e      	b.n	800320a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314c:	4b31      	ldr	r3, [pc, #196]	@ (8003214 <HAL_RCC_OscConfig+0x618>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a30      	ldr	r2, [pc, #192]	@ (8003214 <HAL_RCC_OscConfig+0x618>)
 8003152:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe fa66 	bl	8001628 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003160:	f7fe fa62 	bl	8001628 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e04c      	b.n	800320c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003172:	4b28      	ldr	r3, [pc, #160]	@ (8003214 <HAL_RCC_OscConfig+0x618>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800317e:	4b25      	ldr	r3, [pc, #148]	@ (8003214 <HAL_RCC_OscConfig+0x618>)
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	4924      	ldr	r1, [pc, #144]	@ (8003214 <HAL_RCC_OscConfig+0x618>)
 8003184:	4b25      	ldr	r3, [pc, #148]	@ (800321c <HAL_RCC_OscConfig+0x620>)
 8003186:	4013      	ands	r3, r2
 8003188:	60cb      	str	r3, [r1, #12]
 800318a:	e03e      	b.n	800320a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e039      	b.n	800320c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003198:	4b1e      	ldr	r3, [pc, #120]	@ (8003214 <HAL_RCC_OscConfig+0x618>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f003 0203 	and.w	r2, r3, #3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d12c      	bne.n	8003206 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	3b01      	subs	r3, #1
 80031b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d123      	bne.n	8003206 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d11b      	bne.n	8003206 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d113      	bne.n	8003206 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e8:	085b      	lsrs	r3, r3, #1
 80031ea:	3b01      	subs	r3, #1
 80031ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d109      	bne.n	8003206 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fc:	085b      	lsrs	r3, r3, #1
 80031fe:	3b01      	subs	r3, #1
 8003200:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003202:	429a      	cmp	r2, r3
 8003204:	d001      	beq.n	800320a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3720      	adds	r7, #32
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000
 8003218:	019f800c 	.word	0x019f800c
 800321c:	feeefffc 	.word	0xfeeefffc

08003220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e11e      	b.n	8003476 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003238:	4b91      	ldr	r3, [pc, #580]	@ (8003480 <HAL_RCC_ClockConfig+0x260>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d910      	bls.n	8003268 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b8e      	ldr	r3, [pc, #568]	@ (8003480 <HAL_RCC_ClockConfig+0x260>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 020f 	bic.w	r2, r3, #15
 800324e:	498c      	ldr	r1, [pc, #560]	@ (8003480 <HAL_RCC_ClockConfig+0x260>)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003256:	4b8a      	ldr	r3, [pc, #552]	@ (8003480 <HAL_RCC_ClockConfig+0x260>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e106      	b.n	8003476 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d073      	beq.n	800335c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b03      	cmp	r3, #3
 800327a:	d129      	bne.n	80032d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800327c:	4b81      	ldr	r3, [pc, #516]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0f4      	b.n	8003476 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800328c:	f000 f99e 	bl	80035cc <RCC_GetSysClockFreqFromPLLSource>
 8003290:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4a7c      	ldr	r2, [pc, #496]	@ (8003488 <HAL_RCC_ClockConfig+0x268>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d93f      	bls.n	800331a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800329a:	4b7a      	ldr	r3, [pc, #488]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d009      	beq.n	80032ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d033      	beq.n	800331a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d12f      	bne.n	800331a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032ba:	4b72      	ldr	r3, [pc, #456]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032c2:	4a70      	ldr	r2, [pc, #448]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 80032c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80032ca:	2380      	movs	r3, #128	@ 0x80
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	e024      	b.n	800331a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d107      	bne.n	80032e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d109      	bne.n	80032f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0c6      	b.n	8003476 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e8:	4b66      	ldr	r3, [pc, #408]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0be      	b.n	8003476 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80032f8:	f000 f8ce 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4a61      	ldr	r2, [pc, #388]	@ (8003488 <HAL_RCC_ClockConfig+0x268>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d909      	bls.n	800331a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003306:	4b5f      	ldr	r3, [pc, #380]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800330e:	4a5d      	ldr	r2, [pc, #372]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 8003310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003314:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003316:	2380      	movs	r3, #128	@ 0x80
 8003318:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800331a:	4b5a      	ldr	r3, [pc, #360]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f023 0203 	bic.w	r2, r3, #3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	4957      	ldr	r1, [pc, #348]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 8003328:	4313      	orrs	r3, r2
 800332a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800332c:	f7fe f97c 	bl	8001628 <HAL_GetTick>
 8003330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003332:	e00a      	b.n	800334a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003334:	f7fe f978 	bl	8001628 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e095      	b.n	8003476 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	4b4e      	ldr	r3, [pc, #312]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 020c 	and.w	r2, r3, #12
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	429a      	cmp	r2, r3
 800335a:	d1eb      	bne.n	8003334 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d023      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d005      	beq.n	8003380 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003374:	4b43      	ldr	r3, [pc, #268]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	4a42      	ldr	r2, [pc, #264]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 800337a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800337e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800338c:	4b3d      	ldr	r3, [pc, #244]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003394:	4a3b      	ldr	r2, [pc, #236]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 8003396:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800339a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800339c:	4b39      	ldr	r3, [pc, #228]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	4936      	ldr	r1, [pc, #216]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b80      	cmp	r3, #128	@ 0x80
 80033b4:	d105      	bne.n	80033c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80033b6:	4b33      	ldr	r3, [pc, #204]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	4a32      	ldr	r2, [pc, #200]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 80033bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003480 <HAL_RCC_ClockConfig+0x260>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d21d      	bcs.n	800340c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003480 <HAL_RCC_ClockConfig+0x260>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 020f 	bic.w	r2, r3, #15
 80033d8:	4929      	ldr	r1, [pc, #164]	@ (8003480 <HAL_RCC_ClockConfig+0x260>)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	4313      	orrs	r3, r2
 80033de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033e0:	f7fe f922 	bl	8001628 <HAL_GetTick>
 80033e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e8:	f7fe f91e 	bl	8001628 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e03b      	b.n	8003476 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	4b20      	ldr	r3, [pc, #128]	@ (8003480 <HAL_RCC_ClockConfig+0x260>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d1ed      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003418:	4b1a      	ldr	r3, [pc, #104]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4917      	ldr	r1, [pc, #92]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 8003426:	4313      	orrs	r3, r2
 8003428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d009      	beq.n	800344a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003436:	4b13      	ldr	r3, [pc, #76]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	490f      	ldr	r1, [pc, #60]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800344a:	f000 f825 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 800344e:	4602      	mov	r2, r0
 8003450:	4b0c      	ldr	r3, [pc, #48]	@ (8003484 <HAL_RCC_ClockConfig+0x264>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	490c      	ldr	r1, [pc, #48]	@ (800348c <HAL_RCC_ClockConfig+0x26c>)
 800345c:	5ccb      	ldrb	r3, [r1, r3]
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	fa22 f303 	lsr.w	r3, r2, r3
 8003466:	4a0a      	ldr	r2, [pc, #40]	@ (8003490 <HAL_RCC_ClockConfig+0x270>)
 8003468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800346a:	4b0a      	ldr	r3, [pc, #40]	@ (8003494 <HAL_RCC_ClockConfig+0x274>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe f88e 	bl	8001590 <HAL_InitTick>
 8003474:	4603      	mov	r3, r0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40022000 	.word	0x40022000
 8003484:	40021000 	.word	0x40021000
 8003488:	04c4b400 	.word	0x04c4b400
 800348c:	08006e88 	.word	0x08006e88
 8003490:	20000004 	.word	0x20000004
 8003494:	2000001c 	.word	0x2000001c

08003498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800349e:	4b2c      	ldr	r3, [pc, #176]	@ (8003550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d102      	bne.n	80034b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003554 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	e047      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80034b0:	4b27      	ldr	r3, [pc, #156]	@ (8003550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 030c 	and.w	r3, r3, #12
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d102      	bne.n	80034c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034bc:	4b26      	ldr	r3, [pc, #152]	@ (8003558 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	e03e      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80034c2:	4b23      	ldr	r3, [pc, #140]	@ (8003550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b0c      	cmp	r3, #12
 80034cc:	d136      	bne.n	800353c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034ce:	4b20      	ldr	r3, [pc, #128]	@ (8003550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	091b      	lsrs	r3, r3, #4
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	3301      	adds	r3, #1
 80034e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d10c      	bne.n	8003506 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003558 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f4:	4a16      	ldr	r2, [pc, #88]	@ (8003550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034f6:	68d2      	ldr	r2, [r2, #12]
 80034f8:	0a12      	lsrs	r2, r2, #8
 80034fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034fe:	fb02 f303 	mul.w	r3, r2, r3
 8003502:	617b      	str	r3, [r7, #20]
      break;
 8003504:	e00c      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003506:	4a13      	ldr	r2, [pc, #76]	@ (8003554 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	4a10      	ldr	r2, [pc, #64]	@ (8003550 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003510:	68d2      	ldr	r2, [r2, #12]
 8003512:	0a12      	lsrs	r2, r2, #8
 8003514:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003518:	fb02 f303 	mul.w	r3, r2, r3
 800351c:	617b      	str	r3, [r7, #20]
      break;
 800351e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003520:	4b0b      	ldr	r3, [pc, #44]	@ (8003550 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	0e5b      	lsrs	r3, r3, #25
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	3301      	adds	r3, #1
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	fbb2 f3f3 	udiv	r3, r2, r3
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	e001      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003540:	693b      	ldr	r3, [r7, #16]
}
 8003542:	4618      	mov	r0, r3
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000
 8003554:	00f42400 	.word	0x00f42400
 8003558:	016e3600 	.word	0x016e3600

0800355c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003560:	4b03      	ldr	r3, [pc, #12]	@ (8003570 <HAL_RCC_GetHCLKFreq+0x14>)
 8003562:	681b      	ldr	r3, [r3, #0]
}
 8003564:	4618      	mov	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	20000004 	.word	0x20000004

08003574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003578:	f7ff fff0 	bl	800355c <HAL_RCC_GetHCLKFreq>
 800357c:	4602      	mov	r2, r0
 800357e:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	0a1b      	lsrs	r3, r3, #8
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	4904      	ldr	r1, [pc, #16]	@ (800359c <HAL_RCC_GetPCLK1Freq+0x28>)
 800358a:	5ccb      	ldrb	r3, [r1, r3]
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40021000 	.word	0x40021000
 800359c:	08006e98 	.word	0x08006e98

080035a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035a4:	f7ff ffda 	bl	800355c <HAL_RCC_GetHCLKFreq>
 80035a8:	4602      	mov	r2, r0
 80035aa:	4b06      	ldr	r3, [pc, #24]	@ (80035c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	0adb      	lsrs	r3, r3, #11
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	4904      	ldr	r1, [pc, #16]	@ (80035c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035b6:	5ccb      	ldrb	r3, [r1, r3]
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000
 80035c8:	08006e98 	.word	0x08006e98

080035cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035d2:	4b1e      	ldr	r3, [pc, #120]	@ (800364c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035dc:	4b1b      	ldr	r3, [pc, #108]	@ (800364c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	3301      	adds	r3, #1
 80035e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d10c      	bne.n	800360a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035f0:	4a17      	ldr	r2, [pc, #92]	@ (8003650 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f8:	4a14      	ldr	r2, [pc, #80]	@ (800364c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035fa:	68d2      	ldr	r2, [r2, #12]
 80035fc:	0a12      	lsrs	r2, r2, #8
 80035fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	617b      	str	r3, [r7, #20]
    break;
 8003608:	e00c      	b.n	8003624 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800360a:	4a12      	ldr	r2, [pc, #72]	@ (8003654 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003612:	4a0e      	ldr	r2, [pc, #56]	@ (800364c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003614:	68d2      	ldr	r2, [r2, #12]
 8003616:	0a12      	lsrs	r2, r2, #8
 8003618:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800361c:	fb02 f303 	mul.w	r3, r2, r3
 8003620:	617b      	str	r3, [r7, #20]
    break;
 8003622:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003624:	4b09      	ldr	r3, [pc, #36]	@ (800364c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	0e5b      	lsrs	r3, r3, #25
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	3301      	adds	r3, #1
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	fbb2 f3f3 	udiv	r3, r2, r3
 800363c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800363e:	687b      	ldr	r3, [r7, #4]
}
 8003640:	4618      	mov	r0, r3
 8003642:	371c      	adds	r7, #28
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	40021000 	.word	0x40021000
 8003650:	016e3600 	.word	0x016e3600
 8003654:	00f42400 	.word	0x00f42400

08003658 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003660:	2300      	movs	r3, #0
 8003662:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003664:	2300      	movs	r3, #0
 8003666:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8098 	beq.w	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003676:	2300      	movs	r3, #0
 8003678:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800367a:	4b43      	ldr	r3, [pc, #268]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800367c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10d      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003686:	4b40      	ldr	r3, [pc, #256]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368a:	4a3f      	ldr	r2, [pc, #252]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800368c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003690:	6593      	str	r3, [r2, #88]	@ 0x58
 8003692:	4b3d      	ldr	r3, [pc, #244]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800369e:	2301      	movs	r3, #1
 80036a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036a2:	4b3a      	ldr	r3, [pc, #232]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a39      	ldr	r2, [pc, #228]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036ae:	f7fd ffbb 	bl	8001628 <HAL_GetTick>
 80036b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036b4:	e009      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b6:	f7fd ffb7 	bl	8001628 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d902      	bls.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	74fb      	strb	r3, [r7, #19]
        break;
 80036c8:	e005      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036ca:	4b30      	ldr	r3, [pc, #192]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0ef      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80036d6:	7cfb      	ldrb	r3, [r7, #19]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d159      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d01e      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d019      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036f8:	4b23      	ldr	r3, [pc, #140]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003702:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003704:	4b20      	ldr	r3, [pc, #128]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800370a:	4a1f      	ldr	r2, [pc, #124]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003710:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003714:	4b1c      	ldr	r3, [pc, #112]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371a:	4a1b      	ldr	r2, [pc, #108]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800371c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003720:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003724:	4a18      	ldr	r2, [pc, #96]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d016      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003736:	f7fd ff77 	bl	8001628 <HAL_GetTick>
 800373a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800373c:	e00b      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373e:	f7fd ff73 	bl	8001628 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	f241 3288 	movw	r2, #5000	@ 0x1388
 800374c:	4293      	cmp	r3, r2
 800374e:	d902      	bls.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	74fb      	strb	r3, [r7, #19]
            break;
 8003754:	e006      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003756:	4b0c      	ldr	r3, [pc, #48]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0ec      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003764:	7cfb      	ldrb	r3, [r7, #19]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10b      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800376a:	4b07      	ldr	r3, [pc, #28]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800376c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003770:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003778:	4903      	ldr	r1, [pc, #12]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003780:	e008      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003782:	7cfb      	ldrb	r3, [r7, #19]
 8003784:	74bb      	strb	r3, [r7, #18]
 8003786:	e005      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003788:	40021000 	.word	0x40021000
 800378c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003790:	7cfb      	ldrb	r3, [r7, #19]
 8003792:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003794:	7c7b      	ldrb	r3, [r7, #17]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d105      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800379a:	4ba6      	ldr	r3, [pc, #664]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800379c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379e:	4aa5      	ldr	r2, [pc, #660]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037b2:	4ba0      	ldr	r3, [pc, #640]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b8:	f023 0203 	bic.w	r2, r3, #3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	499c      	ldr	r1, [pc, #624]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037d4:	4b97      	ldr	r3, [pc, #604]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037da:	f023 020c 	bic.w	r2, r3, #12
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	4994      	ldr	r1, [pc, #592]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037f6:	4b8f      	ldr	r3, [pc, #572]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	498b      	ldr	r1, [pc, #556]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003818:	4b86      	ldr	r3, [pc, #536]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	4983      	ldr	r1, [pc, #524]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0320 	and.w	r3, r3, #32
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800383a:	4b7e      	ldr	r3, [pc, #504]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800383c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003840:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	497a      	ldr	r1, [pc, #488]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800385c:	4b75      	ldr	r3, [pc, #468]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003862:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	4972      	ldr	r1, [pc, #456]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800387e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003884:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	4969      	ldr	r1, [pc, #420]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038a0:	4b64      	ldr	r3, [pc, #400]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	4961      	ldr	r1, [pc, #388]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d0:	4958      	ldr	r1, [pc, #352]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d015      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038e4:	4b53      	ldr	r3, [pc, #332]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f2:	4950      	ldr	r1, [pc, #320]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003902:	d105      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003904:	4b4b      	ldr	r3, [pc, #300]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4a4a      	ldr	r2, [pc, #296]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800390a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800390e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003918:	2b00      	cmp	r3, #0
 800391a:	d015      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800391c:	4b45      	ldr	r3, [pc, #276]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003922:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392a:	4942      	ldr	r1, [pc, #264]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003936:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800393a:	d105      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800393c:	4b3d      	ldr	r3, [pc, #244]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4a3c      	ldr	r2, [pc, #240]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003942:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003946:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d015      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003954:	4b37      	ldr	r3, [pc, #220]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003962:	4934      	ldr	r1, [pc, #208]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003972:	d105      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003974:	4b2f      	ldr	r3, [pc, #188]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	4a2e      	ldr	r2, [pc, #184]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800397a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800397e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d015      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800398c:	4b29      	ldr	r3, [pc, #164]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003992:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800399a:	4926      	ldr	r1, [pc, #152]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039aa:	d105      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039ac:	4b21      	ldr	r3, [pc, #132]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4a20      	ldr	r2, [pc, #128]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d015      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d2:	4918      	ldr	r1, [pc, #96]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039e2:	d105      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e4:	4b13      	ldr	r3, [pc, #76]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4a12      	ldr	r2, [pc, #72]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d015      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a02:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0a:	490a      	ldr	r1, [pc, #40]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a1a:	d105      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a1c:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4a04      	ldr	r2, [pc, #16]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003a28:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40021000 	.word	0x40021000

08003a38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e042      	b.n	8003ad0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d106      	bne.n	8003a62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7fd fb41 	bl	80010e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2224      	movs	r2, #36	@ 0x24
 8003a66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 ff30 	bl	80048e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fc61 	bl	8004350 <UART_SetConfig>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e01b      	b.n	8003ad0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003aa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ab6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 ffaf 	bl	8004a2c <UART_CheckIdleState>
 8003ace:	4603      	mov	r3, r0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08a      	sub	sp, #40	@ 0x28
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d17b      	bne.n	8003bea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <HAL_UART_Transmit+0x26>
 8003af8:	88fb      	ldrh	r3, [r7, #6]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e074      	b.n	8003bec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2221      	movs	r2, #33	@ 0x21
 8003b0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b12:	f7fd fd89 	bl	8001628 <HAL_GetTick>
 8003b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	88fa      	ldrh	r2, [r7, #6]
 8003b1c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	88fa      	ldrh	r2, [r7, #6]
 8003b24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b30:	d108      	bne.n	8003b44 <HAL_UART_Transmit+0x6c>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d104      	bne.n	8003b44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	61bb      	str	r3, [r7, #24]
 8003b42:	e003      	b.n	8003b4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b4c:	e030      	b.n	8003bb0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2200      	movs	r2, #0
 8003b56:	2180      	movs	r1, #128	@ 0x80
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f001 f811 	bl	8004b80 <UART_WaitOnFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e03d      	b.n	8003bec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10b      	bne.n	8003b8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b84:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	3302      	adds	r3, #2
 8003b8a:	61bb      	str	r3, [r7, #24]
 8003b8c:	e007      	b.n	8003b9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	781a      	ldrb	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1c8      	bne.n	8003b4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2140      	movs	r1, #64	@ 0x40
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 ffda 	bl	8004b80 <UART_WaitOnFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e006      	b.n	8003bec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e000      	b.n	8003bec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003bea:	2302      	movs	r3, #2
  }
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3720      	adds	r7, #32
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08a      	sub	sp, #40	@ 0x28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d137      	bne.n	8003c7c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <HAL_UART_Receive_IT+0x24>
 8003c12:	88fb      	ldrh	r3, [r7, #6]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e030      	b.n	8003c7e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a18      	ldr	r2, [pc, #96]	@ (8003c88 <HAL_UART_Receive_IT+0x94>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d01f      	beq.n	8003c6c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d018      	beq.n	8003c6c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	e853 3f00 	ldrex	r3, [r3]
 8003c46:	613b      	str	r3, [r7, #16]
   return(result);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c58:	623b      	str	r3, [r7, #32]
 8003c5a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5c:	69f9      	ldr	r1, [r7, #28]
 8003c5e:	6a3a      	ldr	r2, [r7, #32]
 8003c60:	e841 2300 	strex	r3, r2, [r1]
 8003c64:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e6      	bne.n	8003c3a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	68b9      	ldr	r1, [r7, #8]
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 fff2 	bl	8004c5c <UART_Start_Receive_IT>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	e000      	b.n	8003c7e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
  }
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3728      	adds	r7, #40	@ 0x28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40008000 	.word	0x40008000

08003c8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b0ba      	sub	sp, #232	@ 0xe8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003cb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003cb6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003cba:	4013      	ands	r3, r2
 8003cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003cc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d11b      	bne.n	8003d00 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d015      	beq.n	8003d00 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d105      	bne.n	8003cec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d009      	beq.n	8003d00 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8300 	beq.w	80042f6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4798      	blx	r3
      }
      return;
 8003cfe:	e2fa      	b.n	80042f6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8123 	beq.w	8003f50 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003d0a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003d0e:	4b8d      	ldr	r3, [pc, #564]	@ (8003f44 <HAL_UART_IRQHandler+0x2b8>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003d16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003d1a:	4b8b      	ldr	r3, [pc, #556]	@ (8003f48 <HAL_UART_IRQHandler+0x2bc>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 8116 	beq.w	8003f50 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d011      	beq.n	8003d54 <HAL_UART_IRQHandler+0xc8>
 8003d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00b      	beq.n	8003d54 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2201      	movs	r2, #1
 8003d42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d4a:	f043 0201 	orr.w	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d011      	beq.n	8003d84 <HAL_UART_IRQHandler+0xf8>
 8003d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00b      	beq.n	8003d84 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2202      	movs	r2, #2
 8003d72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7a:	f043 0204 	orr.w	r2, r3, #4
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d011      	beq.n	8003db4 <HAL_UART_IRQHandler+0x128>
 8003d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00b      	beq.n	8003db4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2204      	movs	r2, #4
 8003da2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003daa:	f043 0202 	orr.w	r2, r3, #2
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d017      	beq.n	8003df0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d105      	bne.n	8003dd8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003dcc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003dd0:	4b5c      	ldr	r3, [pc, #368]	@ (8003f44 <HAL_UART_IRQHandler+0x2b8>)
 8003dd2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00b      	beq.n	8003df0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2208      	movs	r2, #8
 8003dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de6:	f043 0208 	orr.w	r2, r3, #8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d012      	beq.n	8003e22 <HAL_UART_IRQHandler+0x196>
 8003dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00c      	beq.n	8003e22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e18:	f043 0220 	orr.w	r2, r3, #32
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8266 	beq.w	80042fa <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e32:	f003 0320 	and.w	r3, r3, #32
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d013      	beq.n	8003e62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d105      	bne.n	8003e52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d007      	beq.n	8003e62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e68:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e76:	2b40      	cmp	r3, #64	@ 0x40
 8003e78:	d005      	beq.n	8003e86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d054      	beq.n	8003f30 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f001 f80a 	bl	8004ea0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e96:	2b40      	cmp	r3, #64	@ 0x40
 8003e98:	d146      	bne.n	8003f28 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003eb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3308      	adds	r3, #8
 8003ec2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ec6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003eca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ed2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1d9      	bne.n	8003e9a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d017      	beq.n	8003f20 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ef6:	4a15      	ldr	r2, [pc, #84]	@ (8003f4c <HAL_UART_IRQHandler+0x2c0>)
 8003ef8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fd fd27 	bl	8001954 <HAL_DMA_Abort_IT>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d019      	beq.n	8003f40 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f1e:	e00f      	b.n	8003f40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f9ff 	bl	8004324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f26:	e00b      	b.n	8003f40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f9fb 	bl	8004324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2e:	e007      	b.n	8003f40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f9f7 	bl	8004324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003f3e:	e1dc      	b.n	80042fa <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f40:	bf00      	nop
    return;
 8003f42:	e1da      	b.n	80042fa <HAL_UART_IRQHandler+0x66e>
 8003f44:	10000001 	.word	0x10000001
 8003f48:	04000120 	.word	0x04000120
 8003f4c:	08004f6d 	.word	0x08004f6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	f040 8170 	bne.w	800423a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 8169 	beq.w	800423a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8162 	beq.w	800423a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2210      	movs	r2, #16
 8003f7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f88:	2b40      	cmp	r3, #64	@ 0x40
 8003f8a:	f040 80d8 	bne.w	800413e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 80af 	beq.w	8004104 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003fac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	f080 80a7 	bcs.w	8004104 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f040 8087 	bne.w	80040e2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fe0:	e853 3f00 	ldrex	r3, [r3]
 8003fe4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003ffe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004002:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800400a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004016:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1da      	bne.n	8003fd4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3308      	adds	r3, #8
 8004024:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800402e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3308      	adds	r3, #8
 800403e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004042:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004046:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800404a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004054:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e1      	bne.n	800401e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3308      	adds	r3, #8
 8004060:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800406a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800406c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004070:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3308      	adds	r3, #8
 800407a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800407e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004080:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004082:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004084:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800408c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e3      	bne.n	800405a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2220      	movs	r2, #32
 8004096:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040b0:	f023 0310 	bic.w	r3, r3, #16
 80040b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040ca:	e841 2300 	strex	r3, r2, [r1]
 80040ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80040d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1e4      	bne.n	80040a0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fd fbe0 	bl	80018a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2202      	movs	r2, #2
 80040e6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	4619      	mov	r1, r3
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f91b 	bl	8004338 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004102:	e0fc      	b.n	80042fe <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800410a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800410e:	429a      	cmp	r2, r3
 8004110:	f040 80f5 	bne.w	80042fe <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	2b20      	cmp	r3, #32
 8004124:	f040 80eb 	bne.w	80042fe <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004134:	4619      	mov	r1, r3
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f8fe 	bl	8004338 <HAL_UARTEx_RxEventCallback>
      return;
 800413c:	e0df      	b.n	80042fe <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800414a:	b29b      	uxth	r3, r3
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 80d1 	beq.w	8004302 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004160:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80cc 	beq.w	8004302 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800417e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800418c:	647b      	str	r3, [r7, #68]	@ 0x44
 800418e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004192:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800419a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e4      	bne.n	800416a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3308      	adds	r3, #8
 80041a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	e853 3f00 	ldrex	r3, [r3]
 80041ae:	623b      	str	r3, [r7, #32]
   return(result);
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3308      	adds	r3, #8
 80041c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80041ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e1      	bne.n	80041a0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f023 0310 	bic.w	r3, r3, #16
 8004204:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004212:	61fb      	str	r3, [r7, #28]
 8004214:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004216:	69b9      	ldr	r1, [r7, #24]
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	e841 2300 	strex	r3, r2, [r1]
 800421e:	617b      	str	r3, [r7, #20]
   return(result);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1e4      	bne.n	80041f0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2202      	movs	r2, #2
 800422a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800422c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004230:	4619      	mov	r1, r3
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f880 	bl	8004338 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004238:	e063      	b.n	8004302 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800423a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800423e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00e      	beq.n	8004264 <HAL_UART_IRQHandler+0x5d8>
 8004246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800424a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d008      	beq.n	8004264 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800425a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f001 fbe3 	bl	8005a28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004262:	e051      	b.n	8004308 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426c:	2b00      	cmp	r3, #0
 800426e:	d014      	beq.n	800429a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004278:	2b00      	cmp	r3, #0
 800427a:	d105      	bne.n	8004288 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800427c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004280:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d008      	beq.n	800429a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800428c:	2b00      	cmp	r3, #0
 800428e:	d03a      	beq.n	8004306 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4798      	blx	r3
    }
    return;
 8004298:	e035      	b.n	8004306 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800429a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800429e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_UART_IRQHandler+0x62e>
 80042a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fe6c 	bl	8004f90 <UART_EndTransmit_IT>
    return;
 80042b8:	e026      	b.n	8004308 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80042ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d009      	beq.n	80042da <HAL_UART_IRQHandler+0x64e>
 80042c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f001 fbbc 	bl	8005a50 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042d8:	e016      	b.n	8004308 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80042da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d010      	beq.n	8004308 <HAL_UART_IRQHandler+0x67c>
 80042e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	da0c      	bge.n	8004308 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f001 fba4 	bl	8005a3c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042f4:	e008      	b.n	8004308 <HAL_UART_IRQHandler+0x67c>
      return;
 80042f6:	bf00      	nop
 80042f8:	e006      	b.n	8004308 <HAL_UART_IRQHandler+0x67c>
    return;
 80042fa:	bf00      	nop
 80042fc:	e004      	b.n	8004308 <HAL_UART_IRQHandler+0x67c>
      return;
 80042fe:	bf00      	nop
 8004300:	e002      	b.n	8004308 <HAL_UART_IRQHandler+0x67c>
      return;
 8004302:	bf00      	nop
 8004304:	e000      	b.n	8004308 <HAL_UART_IRQHandler+0x67c>
    return;
 8004306:	bf00      	nop
  }
}
 8004308:	37e8      	adds	r7, #232	@ 0xe8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop

08004310 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004354:	b08c      	sub	sp, #48	@ 0x30
 8004356:	af00      	add	r7, sp, #0
 8004358:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	431a      	orrs	r2, r3
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	431a      	orrs	r2, r3
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	4313      	orrs	r3, r2
 8004376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4bab      	ldr	r3, [pc, #684]	@ (800462c <UART_SetConfig+0x2dc>)
 8004380:	4013      	ands	r3, r2
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	6812      	ldr	r2, [r2, #0]
 8004386:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004388:	430b      	orrs	r3, r1
 800438a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4aa0      	ldr	r2, [pc, #640]	@ (8004630 <UART_SetConfig+0x2e0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d004      	beq.n	80043bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043b8:	4313      	orrs	r3, r2
 80043ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80043c6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043d0:	430b      	orrs	r3, r1
 80043d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043da:	f023 010f 	bic.w	r1, r3, #15
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a91      	ldr	r2, [pc, #580]	@ (8004634 <UART_SetConfig+0x2e4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d125      	bne.n	8004440 <UART_SetConfig+0xf0>
 80043f4:	4b90      	ldr	r3, [pc, #576]	@ (8004638 <UART_SetConfig+0x2e8>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d81a      	bhi.n	8004438 <UART_SetConfig+0xe8>
 8004402:	a201      	add	r2, pc, #4	@ (adr r2, 8004408 <UART_SetConfig+0xb8>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	08004419 	.word	0x08004419
 800440c:	08004429 	.word	0x08004429
 8004410:	08004421 	.word	0x08004421
 8004414:	08004431 	.word	0x08004431
 8004418:	2301      	movs	r3, #1
 800441a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800441e:	e0d6      	b.n	80045ce <UART_SetConfig+0x27e>
 8004420:	2302      	movs	r3, #2
 8004422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004426:	e0d2      	b.n	80045ce <UART_SetConfig+0x27e>
 8004428:	2304      	movs	r3, #4
 800442a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800442e:	e0ce      	b.n	80045ce <UART_SetConfig+0x27e>
 8004430:	2308      	movs	r3, #8
 8004432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004436:	e0ca      	b.n	80045ce <UART_SetConfig+0x27e>
 8004438:	2310      	movs	r3, #16
 800443a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800443e:	e0c6      	b.n	80045ce <UART_SetConfig+0x27e>
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a7d      	ldr	r2, [pc, #500]	@ (800463c <UART_SetConfig+0x2ec>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d138      	bne.n	80044bc <UART_SetConfig+0x16c>
 800444a:	4b7b      	ldr	r3, [pc, #492]	@ (8004638 <UART_SetConfig+0x2e8>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004450:	f003 030c 	and.w	r3, r3, #12
 8004454:	2b0c      	cmp	r3, #12
 8004456:	d82d      	bhi.n	80044b4 <UART_SetConfig+0x164>
 8004458:	a201      	add	r2, pc, #4	@ (adr r2, 8004460 <UART_SetConfig+0x110>)
 800445a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445e:	bf00      	nop
 8004460:	08004495 	.word	0x08004495
 8004464:	080044b5 	.word	0x080044b5
 8004468:	080044b5 	.word	0x080044b5
 800446c:	080044b5 	.word	0x080044b5
 8004470:	080044a5 	.word	0x080044a5
 8004474:	080044b5 	.word	0x080044b5
 8004478:	080044b5 	.word	0x080044b5
 800447c:	080044b5 	.word	0x080044b5
 8004480:	0800449d 	.word	0x0800449d
 8004484:	080044b5 	.word	0x080044b5
 8004488:	080044b5 	.word	0x080044b5
 800448c:	080044b5 	.word	0x080044b5
 8004490:	080044ad 	.word	0x080044ad
 8004494:	2300      	movs	r3, #0
 8004496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800449a:	e098      	b.n	80045ce <UART_SetConfig+0x27e>
 800449c:	2302      	movs	r3, #2
 800449e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044a2:	e094      	b.n	80045ce <UART_SetConfig+0x27e>
 80044a4:	2304      	movs	r3, #4
 80044a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044aa:	e090      	b.n	80045ce <UART_SetConfig+0x27e>
 80044ac:	2308      	movs	r3, #8
 80044ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044b2:	e08c      	b.n	80045ce <UART_SetConfig+0x27e>
 80044b4:	2310      	movs	r3, #16
 80044b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ba:	e088      	b.n	80045ce <UART_SetConfig+0x27e>
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a5f      	ldr	r2, [pc, #380]	@ (8004640 <UART_SetConfig+0x2f0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d125      	bne.n	8004512 <UART_SetConfig+0x1c2>
 80044c6:	4b5c      	ldr	r3, [pc, #368]	@ (8004638 <UART_SetConfig+0x2e8>)
 80044c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80044d0:	2b30      	cmp	r3, #48	@ 0x30
 80044d2:	d016      	beq.n	8004502 <UART_SetConfig+0x1b2>
 80044d4:	2b30      	cmp	r3, #48	@ 0x30
 80044d6:	d818      	bhi.n	800450a <UART_SetConfig+0x1ba>
 80044d8:	2b20      	cmp	r3, #32
 80044da:	d00a      	beq.n	80044f2 <UART_SetConfig+0x1a2>
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d814      	bhi.n	800450a <UART_SetConfig+0x1ba>
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <UART_SetConfig+0x19a>
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d008      	beq.n	80044fa <UART_SetConfig+0x1aa>
 80044e8:	e00f      	b.n	800450a <UART_SetConfig+0x1ba>
 80044ea:	2300      	movs	r3, #0
 80044ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044f0:	e06d      	b.n	80045ce <UART_SetConfig+0x27e>
 80044f2:	2302      	movs	r3, #2
 80044f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044f8:	e069      	b.n	80045ce <UART_SetConfig+0x27e>
 80044fa:	2304      	movs	r3, #4
 80044fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004500:	e065      	b.n	80045ce <UART_SetConfig+0x27e>
 8004502:	2308      	movs	r3, #8
 8004504:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004508:	e061      	b.n	80045ce <UART_SetConfig+0x27e>
 800450a:	2310      	movs	r3, #16
 800450c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004510:	e05d      	b.n	80045ce <UART_SetConfig+0x27e>
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a4b      	ldr	r2, [pc, #300]	@ (8004644 <UART_SetConfig+0x2f4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d125      	bne.n	8004568 <UART_SetConfig+0x218>
 800451c:	4b46      	ldr	r3, [pc, #280]	@ (8004638 <UART_SetConfig+0x2e8>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004522:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004526:	2bc0      	cmp	r3, #192	@ 0xc0
 8004528:	d016      	beq.n	8004558 <UART_SetConfig+0x208>
 800452a:	2bc0      	cmp	r3, #192	@ 0xc0
 800452c:	d818      	bhi.n	8004560 <UART_SetConfig+0x210>
 800452e:	2b80      	cmp	r3, #128	@ 0x80
 8004530:	d00a      	beq.n	8004548 <UART_SetConfig+0x1f8>
 8004532:	2b80      	cmp	r3, #128	@ 0x80
 8004534:	d814      	bhi.n	8004560 <UART_SetConfig+0x210>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <UART_SetConfig+0x1f0>
 800453a:	2b40      	cmp	r3, #64	@ 0x40
 800453c:	d008      	beq.n	8004550 <UART_SetConfig+0x200>
 800453e:	e00f      	b.n	8004560 <UART_SetConfig+0x210>
 8004540:	2300      	movs	r3, #0
 8004542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004546:	e042      	b.n	80045ce <UART_SetConfig+0x27e>
 8004548:	2302      	movs	r3, #2
 800454a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800454e:	e03e      	b.n	80045ce <UART_SetConfig+0x27e>
 8004550:	2304      	movs	r3, #4
 8004552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004556:	e03a      	b.n	80045ce <UART_SetConfig+0x27e>
 8004558:	2308      	movs	r3, #8
 800455a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800455e:	e036      	b.n	80045ce <UART_SetConfig+0x27e>
 8004560:	2310      	movs	r3, #16
 8004562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004566:	e032      	b.n	80045ce <UART_SetConfig+0x27e>
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a30      	ldr	r2, [pc, #192]	@ (8004630 <UART_SetConfig+0x2e0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d12a      	bne.n	80045c8 <UART_SetConfig+0x278>
 8004572:	4b31      	ldr	r3, [pc, #196]	@ (8004638 <UART_SetConfig+0x2e8>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004578:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800457c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004580:	d01a      	beq.n	80045b8 <UART_SetConfig+0x268>
 8004582:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004586:	d81b      	bhi.n	80045c0 <UART_SetConfig+0x270>
 8004588:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800458c:	d00c      	beq.n	80045a8 <UART_SetConfig+0x258>
 800458e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004592:	d815      	bhi.n	80045c0 <UART_SetConfig+0x270>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <UART_SetConfig+0x250>
 8004598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800459c:	d008      	beq.n	80045b0 <UART_SetConfig+0x260>
 800459e:	e00f      	b.n	80045c0 <UART_SetConfig+0x270>
 80045a0:	2300      	movs	r3, #0
 80045a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045a6:	e012      	b.n	80045ce <UART_SetConfig+0x27e>
 80045a8:	2302      	movs	r3, #2
 80045aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ae:	e00e      	b.n	80045ce <UART_SetConfig+0x27e>
 80045b0:	2304      	movs	r3, #4
 80045b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045b6:	e00a      	b.n	80045ce <UART_SetConfig+0x27e>
 80045b8:	2308      	movs	r3, #8
 80045ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045be:	e006      	b.n	80045ce <UART_SetConfig+0x27e>
 80045c0:	2310      	movs	r3, #16
 80045c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045c6:	e002      	b.n	80045ce <UART_SetConfig+0x27e>
 80045c8:	2310      	movs	r3, #16
 80045ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a17      	ldr	r2, [pc, #92]	@ (8004630 <UART_SetConfig+0x2e0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	f040 80a8 	bne.w	800472a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d834      	bhi.n	800464c <UART_SetConfig+0x2fc>
 80045e2:	a201      	add	r2, pc, #4	@ (adr r2, 80045e8 <UART_SetConfig+0x298>)
 80045e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e8:	0800460d 	.word	0x0800460d
 80045ec:	0800464d 	.word	0x0800464d
 80045f0:	08004615 	.word	0x08004615
 80045f4:	0800464d 	.word	0x0800464d
 80045f8:	0800461b 	.word	0x0800461b
 80045fc:	0800464d 	.word	0x0800464d
 8004600:	0800464d 	.word	0x0800464d
 8004604:	0800464d 	.word	0x0800464d
 8004608:	08004623 	.word	0x08004623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800460c:	f7fe ffb2 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
 8004610:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004612:	e021      	b.n	8004658 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004614:	4b0c      	ldr	r3, [pc, #48]	@ (8004648 <UART_SetConfig+0x2f8>)
 8004616:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004618:	e01e      	b.n	8004658 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800461a:	f7fe ff3d 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 800461e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004620:	e01a      	b.n	8004658 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004622:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004626:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004628:	e016      	b.n	8004658 <UART_SetConfig+0x308>
 800462a:	bf00      	nop
 800462c:	cfff69f3 	.word	0xcfff69f3
 8004630:	40008000 	.word	0x40008000
 8004634:	40013800 	.word	0x40013800
 8004638:	40021000 	.word	0x40021000
 800463c:	40004400 	.word	0x40004400
 8004640:	40004800 	.word	0x40004800
 8004644:	40004c00 	.word	0x40004c00
 8004648:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004656:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 812a 	beq.w	80048b4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004664:	4a9e      	ldr	r2, [pc, #632]	@ (80048e0 <UART_SetConfig+0x590>)
 8004666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800466a:	461a      	mov	r2, r3
 800466c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004672:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	4413      	add	r3, r2
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	429a      	cmp	r2, r3
 8004682:	d305      	bcc.n	8004690 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	429a      	cmp	r2, r3
 800468e:	d903      	bls.n	8004698 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004696:	e10d      	b.n	80048b4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469a:	2200      	movs	r2, #0
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	60fa      	str	r2, [r7, #12]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a4:	4a8e      	ldr	r2, [pc, #568]	@ (80048e0 <UART_SetConfig+0x590>)
 80046a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2200      	movs	r2, #0
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	607a      	str	r2, [r7, #4]
 80046b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046ba:	f7fb fe01 	bl	80002c0 <__aeabi_uldivmod>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4610      	mov	r0, r2
 80046c4:	4619      	mov	r1, r3
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	020b      	lsls	r3, r1, #8
 80046d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80046d4:	0202      	lsls	r2, r0, #8
 80046d6:	6979      	ldr	r1, [r7, #20]
 80046d8:	6849      	ldr	r1, [r1, #4]
 80046da:	0849      	lsrs	r1, r1, #1
 80046dc:	2000      	movs	r0, #0
 80046de:	460c      	mov	r4, r1
 80046e0:	4605      	mov	r5, r0
 80046e2:	eb12 0804 	adds.w	r8, r2, r4
 80046e6:	eb43 0905 	adc.w	r9, r3, r5
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	469a      	mov	sl, r3
 80046f2:	4693      	mov	fp, r2
 80046f4:	4652      	mov	r2, sl
 80046f6:	465b      	mov	r3, fp
 80046f8:	4640      	mov	r0, r8
 80046fa:	4649      	mov	r1, r9
 80046fc:	f7fb fde0 	bl	80002c0 <__aeabi_uldivmod>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4613      	mov	r3, r2
 8004706:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800470e:	d308      	bcc.n	8004722 <UART_SetConfig+0x3d2>
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004716:	d204      	bcs.n	8004722 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6a3a      	ldr	r2, [r7, #32]
 800471e:	60da      	str	r2, [r3, #12]
 8004720:	e0c8      	b.n	80048b4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004728:	e0c4      	b.n	80048b4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004732:	d167      	bne.n	8004804 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004734:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004738:	2b08      	cmp	r3, #8
 800473a:	d828      	bhi.n	800478e <UART_SetConfig+0x43e>
 800473c:	a201      	add	r2, pc, #4	@ (adr r2, 8004744 <UART_SetConfig+0x3f4>)
 800473e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004742:	bf00      	nop
 8004744:	08004769 	.word	0x08004769
 8004748:	08004771 	.word	0x08004771
 800474c:	08004779 	.word	0x08004779
 8004750:	0800478f 	.word	0x0800478f
 8004754:	0800477f 	.word	0x0800477f
 8004758:	0800478f 	.word	0x0800478f
 800475c:	0800478f 	.word	0x0800478f
 8004760:	0800478f 	.word	0x0800478f
 8004764:	08004787 	.word	0x08004787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004768:	f7fe ff04 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
 800476c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800476e:	e014      	b.n	800479a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004770:	f7fe ff16 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 8004774:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004776:	e010      	b.n	800479a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004778:	4b5a      	ldr	r3, [pc, #360]	@ (80048e4 <UART_SetConfig+0x594>)
 800477a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800477c:	e00d      	b.n	800479a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800477e:	f7fe fe8b 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 8004782:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004784:	e009      	b.n	800479a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800478a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800478c:	e005      	b.n	800479a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004798:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 8089 	beq.w	80048b4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a6:	4a4e      	ldr	r2, [pc, #312]	@ (80048e0 <UART_SetConfig+0x590>)
 80047a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ac:	461a      	mov	r2, r3
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80047b4:	005a      	lsls	r2, r3, #1
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	085b      	lsrs	r3, r3, #1
 80047bc:	441a      	add	r2, r3
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	2b0f      	cmp	r3, #15
 80047cc:	d916      	bls.n	80047fc <UART_SetConfig+0x4ac>
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047d4:	d212      	bcs.n	80047fc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	b29b      	uxth	r3, r3
 80047da:	f023 030f 	bic.w	r3, r3, #15
 80047de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	085b      	lsrs	r3, r3, #1
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	8bfb      	ldrh	r3, [r7, #30]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	8bfa      	ldrh	r2, [r7, #30]
 80047f8:	60da      	str	r2, [r3, #12]
 80047fa:	e05b      	b.n	80048b4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004802:	e057      	b.n	80048b4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004804:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004808:	2b08      	cmp	r3, #8
 800480a:	d828      	bhi.n	800485e <UART_SetConfig+0x50e>
 800480c:	a201      	add	r2, pc, #4	@ (adr r2, 8004814 <UART_SetConfig+0x4c4>)
 800480e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004812:	bf00      	nop
 8004814:	08004839 	.word	0x08004839
 8004818:	08004841 	.word	0x08004841
 800481c:	08004849 	.word	0x08004849
 8004820:	0800485f 	.word	0x0800485f
 8004824:	0800484f 	.word	0x0800484f
 8004828:	0800485f 	.word	0x0800485f
 800482c:	0800485f 	.word	0x0800485f
 8004830:	0800485f 	.word	0x0800485f
 8004834:	08004857 	.word	0x08004857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004838:	f7fe fe9c 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
 800483c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800483e:	e014      	b.n	800486a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004840:	f7fe feae 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 8004844:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004846:	e010      	b.n	800486a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004848:	4b26      	ldr	r3, [pc, #152]	@ (80048e4 <UART_SetConfig+0x594>)
 800484a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800484c:	e00d      	b.n	800486a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800484e:	f7fe fe23 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 8004852:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004854:	e009      	b.n	800486a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004856:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800485a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800485c:	e005      	b.n	800486a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004868:	bf00      	nop
    }

    if (pclk != 0U)
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	2b00      	cmp	r3, #0
 800486e:	d021      	beq.n	80048b4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004874:	4a1a      	ldr	r2, [pc, #104]	@ (80048e0 <UART_SetConfig+0x590>)
 8004876:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800487a:	461a      	mov	r2, r3
 800487c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	085b      	lsrs	r3, r3, #1
 8004888:	441a      	add	r2, r3
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004892:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	2b0f      	cmp	r3, #15
 8004898:	d909      	bls.n	80048ae <UART_SetConfig+0x55e>
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048a0:	d205      	bcs.n	80048ae <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60da      	str	r2, [r3, #12]
 80048ac:	e002      	b.n	80048b4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2201      	movs	r2, #1
 80048c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2200      	movs	r2, #0
 80048c8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2200      	movs	r2, #0
 80048ce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80048d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3730      	adds	r7, #48	@ 0x30
 80048d8:	46bd      	mov	sp, r7
 80048da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048de:	bf00      	nop
 80048e0:	08006ea4 	.word	0x08006ea4
 80048e4:	00f42400 	.word	0x00f42400

080048e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01a      	beq.n	80049fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049e6:	d10a      	bne.n	80049fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	605a      	str	r2, [r3, #4]
  }
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b098      	sub	sp, #96	@ 0x60
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a3c:	f7fc fdf4 	bl	8001628 <HAL_GetTick>
 8004a40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0308 	and.w	r3, r3, #8
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d12f      	bne.n	8004ab0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f88e 	bl	8004b80 <UART_WaitOnFlagUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d022      	beq.n	8004ab0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a72:	e853 3f00 	ldrex	r3, [r3]
 8004a76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a88:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a90:	e841 2300 	strex	r3, r2, [r1]
 8004a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e6      	bne.n	8004a6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e063      	b.n	8004b78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d149      	bne.n	8004b52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004abe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f857 	bl	8004b80 <UART_WaitOnFlagUntilTimeout>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d03c      	beq.n	8004b52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004af6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004af8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004afc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e6      	bne.n	8004ad8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3308      	adds	r3, #8
 8004b10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3308      	adds	r3, #8
 8004b28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b2a:	61fa      	str	r2, [r7, #28]
 8004b2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	69b9      	ldr	r1, [r7, #24]
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	617b      	str	r3, [r7, #20]
   return(result);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e5      	bne.n	8004b0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e012      	b.n	8004b78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3758      	adds	r7, #88	@ 0x58
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b90:	e04f      	b.n	8004c32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b98:	d04b      	beq.n	8004c32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b9a:	f7fc fd45 	bl	8001628 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d302      	bcc.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e04e      	b.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0304 	and.w	r3, r3, #4
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d037      	beq.n	8004c32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b80      	cmp	r3, #128	@ 0x80
 8004bc6:	d034      	beq.n	8004c32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b40      	cmp	r3, #64	@ 0x40
 8004bcc:	d031      	beq.n	8004c32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d110      	bne.n	8004bfe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2208      	movs	r2, #8
 8004be2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f95b 	bl	8004ea0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2208      	movs	r2, #8
 8004bee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e029      	b.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c0c:	d111      	bne.n	8004c32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 f941 	bl	8004ea0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e00f      	b.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69da      	ldr	r2, [r3, #28]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	bf0c      	ite	eq
 8004c42:	2301      	moveq	r3, #1
 8004c44:	2300      	movne	r3, #0
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	461a      	mov	r2, r3
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d0a0      	beq.n	8004b92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b0a3      	sub	sp, #140	@ 0x8c
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	4613      	mov	r3, r2
 8004c68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	88fa      	ldrh	r2, [r7, #6]
 8004c74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	88fa      	ldrh	r2, [r7, #6]
 8004c7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c8e:	d10e      	bne.n	8004cae <UART_Start_Receive_IT+0x52>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d105      	bne.n	8004ca4 <UART_Start_Receive_IT+0x48>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004c9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004ca2:	e02d      	b.n	8004d00 <UART_Start_Receive_IT+0xa4>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	22ff      	movs	r2, #255	@ 0xff
 8004ca8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cac:	e028      	b.n	8004d00 <UART_Start_Receive_IT+0xa4>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10d      	bne.n	8004cd2 <UART_Start_Receive_IT+0x76>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d104      	bne.n	8004cc8 <UART_Start_Receive_IT+0x6c>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	22ff      	movs	r2, #255	@ 0xff
 8004cc2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cc6:	e01b      	b.n	8004d00 <UART_Start_Receive_IT+0xa4>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	227f      	movs	r2, #127	@ 0x7f
 8004ccc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cd0:	e016      	b.n	8004d00 <UART_Start_Receive_IT+0xa4>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cda:	d10d      	bne.n	8004cf8 <UART_Start_Receive_IT+0x9c>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d104      	bne.n	8004cee <UART_Start_Receive_IT+0x92>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	227f      	movs	r2, #127	@ 0x7f
 8004ce8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cec:	e008      	b.n	8004d00 <UART_Start_Receive_IT+0xa4>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	223f      	movs	r2, #63	@ 0x3f
 8004cf2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cf6:	e003      	b.n	8004d00 <UART_Start_Receive_IT+0xa4>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2222      	movs	r2, #34	@ 0x22
 8004d0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3308      	adds	r3, #8
 8004d16:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004d20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d22:	f043 0301 	orr.w	r3, r3, #1
 8004d26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3308      	adds	r3, #8
 8004d30:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004d34:	673a      	str	r2, [r7, #112]	@ 0x70
 8004d36:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004d3a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004d3c:	e841 2300 	strex	r3, r2, [r1]
 8004d40:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8004d42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1e3      	bne.n	8004d10 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d50:	d14f      	bne.n	8004df2 <UART_Start_Receive_IT+0x196>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004d58:	88fa      	ldrh	r2, [r7, #6]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d349      	bcc.n	8004df2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d66:	d107      	bne.n	8004d78 <UART_Start_Receive_IT+0x11c>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d103      	bne.n	8004d78 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4a47      	ldr	r2, [pc, #284]	@ (8004e90 <UART_Start_Receive_IT+0x234>)
 8004d74:	675a      	str	r2, [r3, #116]	@ 0x74
 8004d76:	e002      	b.n	8004d7e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4a46      	ldr	r2, [pc, #280]	@ (8004e94 <UART_Start_Receive_IT+0x238>)
 8004d7c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d01a      	beq.n	8004dbc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004da8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004daa:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004dae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004db0:	e841 2300 	strex	r3, r2, [r1]
 8004db4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e4      	bne.n	8004d86 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dc6:	e853 3f00 	ldrex	r3, [r3]
 8004dca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3308      	adds	r3, #8
 8004dda:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004ddc:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004dde:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004de2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004de4:	e841 2300 	strex	r3, r2, [r1]
 8004de8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004dea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1e5      	bne.n	8004dbc <UART_Start_Receive_IT+0x160>
 8004df0:	e046      	b.n	8004e80 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dfa:	d107      	bne.n	8004e0c <UART_Start_Receive_IT+0x1b0>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d103      	bne.n	8004e0c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4a24      	ldr	r2, [pc, #144]	@ (8004e98 <UART_Start_Receive_IT+0x23c>)
 8004e08:	675a      	str	r2, [r3, #116]	@ 0x74
 8004e0a:	e002      	b.n	8004e12 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4a23      	ldr	r2, [pc, #140]	@ (8004e9c <UART_Start_Receive_IT+0x240>)
 8004e10:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d019      	beq.n	8004e4e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e22:	e853 3f00 	ldrex	r3, [r3]
 8004e26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004e2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	461a      	mov	r2, r3
 8004e36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e3a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e40:	e841 2300 	strex	r3, r2, [r1]
 8004e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1e6      	bne.n	8004e1a <UART_Start_Receive_IT+0x1be>
 8004e4c:	e018      	b.n	8004e80 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	e853 3f00 	ldrex	r3, [r3]
 8004e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f043 0320 	orr.w	r3, r3, #32
 8004e62:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e6c:	623b      	str	r3, [r7, #32]
 8004e6e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	69f9      	ldr	r1, [r7, #28]
 8004e72:	6a3a      	ldr	r2, [r7, #32]
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e6      	bne.n	8004e4e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	378c      	adds	r7, #140	@ 0x8c
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	080056bd 	.word	0x080056bd
 8004e94:	08005359 	.word	0x08005359
 8004e98:	080051a1 	.word	0x080051a1
 8004e9c:	08004fe9 	.word	0x08004fe9

08004ea0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b095      	sub	sp, #84	@ 0x54
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ec6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ec8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ecc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e6      	bne.n	8004ea8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3308      	adds	r3, #8
 8004ee0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ef0:	f023 0301 	bic.w	r3, r3, #1
 8004ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3308      	adds	r3, #8
 8004efc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004efe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f06:	e841 2300 	strex	r3, r2, [r1]
 8004f0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1e3      	bne.n	8004eda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d118      	bne.n	8004f4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	e853 3f00 	ldrex	r3, [r3]
 8004f26:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f023 0310 	bic.w	r3, r3, #16
 8004f2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3c:	6979      	ldr	r1, [r7, #20]
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	e841 2300 	strex	r3, r2, [r1]
 8004f44:	613b      	str	r3, [r7, #16]
   return(result);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1e6      	bne.n	8004f1a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004f60:	bf00      	nop
 8004f62:	3754      	adds	r7, #84	@ 0x54
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f7ff f9ce 	bl	8004324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f88:	bf00      	nop
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b088      	sub	sp, #32
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	e853 3f00 	ldrex	r3, [r3]
 8004fa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fac:	61fb      	str	r3, [r7, #28]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	61bb      	str	r3, [r7, #24]
 8004fb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fba:	6979      	ldr	r1, [r7, #20]
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	e841 2300 	strex	r3, r2, [r1]
 8004fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1e6      	bne.n	8004f98 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff f999 	bl	8004310 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fde:	bf00      	nop
 8004fe0:	3720      	adds	r7, #32
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b09c      	sub	sp, #112	@ 0x70
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004ff6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005000:	2b22      	cmp	r3, #34	@ 0x22
 8005002:	f040 80be 	bne.w	8005182 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005010:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005014:	b2d9      	uxtb	r1, r3
 8005016:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800501a:	b2da      	uxtb	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005020:	400a      	ands	r2, r1
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005036:	b29b      	uxth	r3, r3
 8005038:	3b01      	subs	r3, #1
 800503a:	b29a      	uxth	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	f040 80a1 	bne.w	8005192 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800505e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005060:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005064:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800506e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005070:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005074:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800507c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e6      	bne.n	8005050 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3308      	adds	r3, #8
 8005088:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	667b      	str	r3, [r7, #100]	@ 0x64
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3308      	adds	r3, #8
 80050a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80050a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80050a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e5      	bne.n	8005082 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a33      	ldr	r2, [pc, #204]	@ (800519c <UART_RxISR_8BIT+0x1b4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d01f      	beq.n	8005114 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d018      	beq.n	8005114 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	e853 3f00 	ldrex	r3, [r3]
 80050ee:	623b      	str	r3, [r7, #32]
   return(result);
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005100:	633b      	str	r3, [r7, #48]	@ 0x30
 8005102:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005104:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005106:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005108:	e841 2300 	strex	r3, r2, [r1]
 800510c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800510e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1e6      	bne.n	80050e2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d12e      	bne.n	800517a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0310 	bic.w	r3, r3, #16
 8005136:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	69b9      	ldr	r1, [r7, #24]
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	617b      	str	r3, [r7, #20]
   return(result);
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e6      	bne.n	8005122 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	f003 0310 	and.w	r3, r3, #16
 800515e:	2b10      	cmp	r3, #16
 8005160:	d103      	bne.n	800516a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2210      	movs	r2, #16
 8005168:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff f8e0 	bl	8004338 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005178:	e00b      	b.n	8005192 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fb fde0 	bl	8000d40 <HAL_UART_RxCpltCallback>
}
 8005180:	e007      	b.n	8005192 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699a      	ldr	r2, [r3, #24]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f042 0208 	orr.w	r2, r2, #8
 8005190:	619a      	str	r2, [r3, #24]
}
 8005192:	bf00      	nop
 8005194:	3770      	adds	r7, #112	@ 0x70
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	40008000 	.word	0x40008000

080051a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b09c      	sub	sp, #112	@ 0x70
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80051ae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051b8:	2b22      	cmp	r3, #34	@ 0x22
 80051ba:	f040 80be 	bne.w	800533a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80051ce:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80051d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80051d6:	4013      	ands	r3, r2
 80051d8:	b29a      	uxth	r2, r3
 80051da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e2:	1c9a      	adds	r2, r3, #2
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	f040 80a1 	bne.w	800534a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005216:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005218:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800521c:	667b      	str	r3, [r7, #100]	@ 0x64
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	461a      	mov	r2, r3
 8005224:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005226:	657b      	str	r3, [r7, #84]	@ 0x54
 8005228:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800522c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e6      	bne.n	8005208 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3308      	adds	r3, #8
 8005240:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800524a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	663b      	str	r3, [r7, #96]	@ 0x60
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3308      	adds	r3, #8
 8005258:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800525a:	643a      	str	r2, [r7, #64]	@ 0x40
 800525c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005260:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e5      	bne.n	800523a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a33      	ldr	r2, [pc, #204]	@ (8005354 <UART_RxISR_16BIT+0x1b4>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d01f      	beq.n	80052cc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d018      	beq.n	80052cc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	e853 3f00 	ldrex	r3, [r3]
 80052a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	461a      	mov	r2, r3
 80052b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ba:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052c0:	e841 2300 	strex	r3, r2, [r1]
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e6      	bne.n	800529a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d12e      	bne.n	8005332 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f023 0310 	bic.w	r3, r3, #16
 80052ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	6979      	ldr	r1, [r7, #20]
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	613b      	str	r3, [r7, #16]
   return(result);
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e6      	bne.n	80052da <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f003 0310 	and.w	r3, r3, #16
 8005316:	2b10      	cmp	r3, #16
 8005318:	d103      	bne.n	8005322 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2210      	movs	r2, #16
 8005320:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7ff f804 	bl	8004338 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005330:	e00b      	b.n	800534a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7fb fd04 	bl	8000d40 <HAL_UART_RxCpltCallback>
}
 8005338:	e007      	b.n	800534a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	699a      	ldr	r2, [r3, #24]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f042 0208 	orr.w	r2, r2, #8
 8005348:	619a      	str	r2, [r3, #24]
}
 800534a:	bf00      	nop
 800534c:	3770      	adds	r7, #112	@ 0x70
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40008000 	.word	0x40008000

08005358 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b0ac      	sub	sp, #176	@ 0xb0
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005366:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800538e:	2b22      	cmp	r3, #34	@ 0x22
 8005390:	f040 8183 	bne.w	800569a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800539a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800539e:	e126      	b.n	80055ee <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053aa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80053ae:	b2d9      	uxtb	r1, r3
 80053b0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ba:	400a      	ands	r2, r1
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	3b01      	subs	r3, #1
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80053e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d053      	beq.n	800549a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d011      	beq.n	8005422 <UART_RxISR_8BIT_FIFOEN+0xca>
 80053fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00b      	beq.n	8005422 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2201      	movs	r2, #1
 8005410:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005418:	f043 0201 	orr.w	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d011      	beq.n	8005452 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800542e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00b      	beq.n	8005452 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2202      	movs	r2, #2
 8005440:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005448:	f043 0204 	orr.w	r2, r3, #4
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	d011      	beq.n	8005482 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800545e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00b      	beq.n	8005482 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2204      	movs	r2, #4
 8005470:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005478:	f043 0202 	orr.w	r2, r3, #2
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005488:	2b00      	cmp	r3, #0
 800548a:	d006      	beq.n	800549a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7fe ff49 	bl	8004324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f040 80a3 	bne.w	80055ee <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80054b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80054cc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ce:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80054d0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80054d2:	e841 2300 	strex	r3, r2, [r1]
 80054d6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80054d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1e4      	bne.n	80054a8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3308      	adds	r3, #8
 80054e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054e8:	e853 3f00 	ldrex	r3, [r3]
 80054ec:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80054ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054f4:	f023 0301 	bic.w	r3, r3, #1
 80054f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3308      	adds	r3, #8
 8005502:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005506:	66ba      	str	r2, [r7, #104]	@ 0x68
 8005508:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800550c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005514:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e1      	bne.n	80054de <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2220      	movs	r2, #32
 800551e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a60      	ldr	r2, [pc, #384]	@ (80056b4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d021      	beq.n	800557c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d01a      	beq.n	800557c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800554e:	e853 3f00 	ldrex	r3, [r3]
 8005552:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005556:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800555a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005568:	657b      	str	r3, [r7, #84]	@ 0x54
 800556a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800556e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e4      	bne.n	8005546 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005580:	2b01      	cmp	r3, #1
 8005582:	d130      	bne.n	80055e6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	f023 0310 	bic.w	r3, r3, #16
 800559e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80055ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055b4:	e841 2300 	strex	r3, r2, [r1]
 80055b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e4      	bne.n	800558a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f003 0310 	and.w	r3, r3, #16
 80055ca:	2b10      	cmp	r3, #16
 80055cc:	d103      	bne.n	80055d6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2210      	movs	r2, #16
 80055d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80055dc:	4619      	mov	r1, r3
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fe feaa 	bl	8004338 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80055e4:	e00e      	b.n	8005604 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7fb fbaa 	bl	8000d40 <HAL_UART_RxCpltCallback>
        break;
 80055ec:	e00a      	b.n	8005604 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80055ee:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d006      	beq.n	8005604 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80055f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055fa:	f003 0320 	and.w	r3, r3, #32
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f47f aece 	bne.w	80053a0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800560a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800560e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005612:	2b00      	cmp	r3, #0
 8005614:	d049      	beq.n	80056aa <UART_RxISR_8BIT_FIFOEN+0x352>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800561c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8005620:	429a      	cmp	r2, r3
 8005622:	d242      	bcs.n	80056aa <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3308      	adds	r3, #8
 800562a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	e853 3f00 	ldrex	r3, [r3]
 8005632:	61fb      	str	r3, [r7, #28]
   return(result);
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800563a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3308      	adds	r3, #8
 8005644:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005648:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800564a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800564e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e3      	bne.n	8005624 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a16      	ldr	r2, [pc, #88]	@ (80056b8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8005660:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	e853 3f00 	ldrex	r3, [r3]
 800566e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f043 0320 	orr.w	r3, r3, #32
 8005676:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005684:	61bb      	str	r3, [r7, #24]
 8005686:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	6979      	ldr	r1, [r7, #20]
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	613b      	str	r3, [r7, #16]
   return(result);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e4      	bne.n	8005662 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005698:	e007      	b.n	80056aa <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	699a      	ldr	r2, [r3, #24]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f042 0208 	orr.w	r2, r2, #8
 80056a8:	619a      	str	r2, [r3, #24]
}
 80056aa:	bf00      	nop
 80056ac:	37b0      	adds	r7, #176	@ 0xb0
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40008000 	.word	0x40008000
 80056b8:	08004fe9 	.word	0x08004fe9

080056bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b0ae      	sub	sp, #184	@ 0xb8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80056ca:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056f2:	2b22      	cmp	r3, #34	@ 0x22
 80056f4:	f040 8187 	bne.w	8005a06 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80056fe:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005702:	e12a      	b.n	800595a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005712:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005716:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800571a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800571e:	4013      	ands	r3, r2
 8005720:	b29a      	uxth	r2, r3
 8005722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005726:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800572c:	1c9a      	adds	r2, r3, #2
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b01      	subs	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800574e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	2b00      	cmp	r3, #0
 8005758:	d053      	beq.n	8005802 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800575a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d011      	beq.n	800578a <UART_RxISR_16BIT_FIFOEN+0xce>
 8005766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800576a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00b      	beq.n	800578a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2201      	movs	r2, #1
 8005778:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005780:	f043 0201 	orr.w	r2, r3, #1
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800578a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d011      	beq.n	80057ba <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005796:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00b      	beq.n	80057ba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2202      	movs	r2, #2
 80057a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b0:	f043 0204 	orr.w	r2, r3, #4
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d011      	beq.n	80057ea <UART_RxISR_16BIT_FIFOEN+0x12e>
 80057c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00b      	beq.n	80057ea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2204      	movs	r2, #4
 80057d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e0:	f043 0202 	orr.w	r2, r3, #2
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d006      	beq.n	8005802 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7fe fd95 	bl	8004324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005808:	b29b      	uxth	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	f040 80a5 	bne.w	800595a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800581e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005820:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005824:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	461a      	mov	r2, r3
 800582e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005832:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005836:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800583a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800583e:	e841 2300 	strex	r3, r2, [r1]
 8005842:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005844:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e2      	bne.n	8005810 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3308      	adds	r3, #8
 8005850:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800585a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800585c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005860:	f023 0301 	bic.w	r3, r3, #1
 8005864:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3308      	adds	r3, #8
 800586e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005872:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005874:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005878:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800587a:	e841 2300 	strex	r3, r2, [r1]
 800587e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005880:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1e1      	bne.n	800584a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a60      	ldr	r2, [pc, #384]	@ (8005a20 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d021      	beq.n	80058e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d01a      	beq.n	80058e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ba:	e853 3f00 	ldrex	r3, [r3]
 80058be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80058c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80058c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80058d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058d6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058dc:	e841 2300 	strex	r3, r2, [r1]
 80058e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80058e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1e4      	bne.n	80058b2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d130      	bne.n	8005952 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005906:	f023 0310 	bic.w	r3, r3, #16
 800590a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005918:	647b      	str	r3, [r7, #68]	@ 0x44
 800591a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800591e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e4      	bne.n	80058f6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	f003 0310 	and.w	r3, r3, #16
 8005936:	2b10      	cmp	r3, #16
 8005938:	d103      	bne.n	8005942 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2210      	movs	r2, #16
 8005940:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005948:	4619      	mov	r1, r3
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7fe fcf4 	bl	8004338 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005950:	e00e      	b.n	8005970 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fb f9f4 	bl	8000d40 <HAL_UART_RxCpltCallback>
        break;
 8005958:	e00a      	b.n	8005970 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800595a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800595e:	2b00      	cmp	r3, #0
 8005960:	d006      	beq.n	8005970 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8005962:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b00      	cmp	r3, #0
 800596c:	f47f aeca 	bne.w	8005704 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005976:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800597a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800597e:	2b00      	cmp	r3, #0
 8005980:	d049      	beq.n	8005a16 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005988:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800598c:	429a      	cmp	r2, r3
 800598e:	d242      	bcs.n	8005a16 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3308      	adds	r3, #8
 8005996:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599a:	e853 3f00 	ldrex	r3, [r3]
 800599e:	623b      	str	r3, [r7, #32]
   return(result);
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3308      	adds	r3, #8
 80059b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80059b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80059b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e3      	bne.n	8005990 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a16      	ldr	r2, [pc, #88]	@ (8005a24 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80059cc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	e853 3f00 	ldrex	r3, [r3]
 80059da:	60fb      	str	r3, [r7, #12]
   return(result);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f043 0320 	orr.w	r3, r3, #32
 80059e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059f0:	61fb      	str	r3, [r7, #28]
 80059f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	69b9      	ldr	r1, [r7, #24]
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	e841 2300 	strex	r3, r2, [r1]
 80059fc:	617b      	str	r3, [r7, #20]
   return(result);
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1e4      	bne.n	80059ce <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a04:	e007      	b.n	8005a16 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699a      	ldr	r2, [r3, #24]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f042 0208 	orr.w	r2, r2, #8
 8005a14:	619a      	str	r2, [r3, #24]
}
 8005a16:	bf00      	nop
 8005a18:	37b8      	adds	r7, #184	@ 0xb8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	40008000 	.word	0x40008000
 8005a24:	080051a1 	.word	0x080051a1

08005a28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d101      	bne.n	8005a7a <HAL_UARTEx_DisableFifoMode+0x16>
 8005a76:	2302      	movs	r3, #2
 8005a78:	e027      	b.n	8005aca <HAL_UARTEx_DisableFifoMode+0x66>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2224      	movs	r2, #36	@ 0x24
 8005a86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0201 	bic.w	r2, r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005aa8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e02d      	b.n	8005b4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2224      	movs	r2, #36	@ 0x24
 8005afa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0201 	bic.w	r2, r2, #1
 8005b14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f850 	bl	8005bd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b084      	sub	sp, #16
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b66:	2302      	movs	r3, #2
 8005b68:	e02d      	b.n	8005bc6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2224      	movs	r2, #36	@ 0x24
 8005b76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0201 	bic.w	r2, r2, #1
 8005b90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f812 	bl	8005bd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d108      	bne.n	8005bf2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005bf0:	e031      	b.n	8005c56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005bf2:	2308      	movs	r3, #8
 8005bf4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005bf6:	2308      	movs	r3, #8
 8005bf8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	0e5b      	lsrs	r3, r3, #25
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	0f5b      	lsrs	r3, r3, #29
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c1a:	7bbb      	ldrb	r3, [r7, #14]
 8005c1c:	7b3a      	ldrb	r2, [r7, #12]
 8005c1e:	4911      	ldr	r1, [pc, #68]	@ (8005c64 <UARTEx_SetNbDataToProcess+0x94>)
 8005c20:	5c8a      	ldrb	r2, [r1, r2]
 8005c22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c26:	7b3a      	ldrb	r2, [r7, #12]
 8005c28:	490f      	ldr	r1, [pc, #60]	@ (8005c68 <UARTEx_SetNbDataToProcess+0x98>)
 8005c2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	7b7a      	ldrb	r2, [r7, #13]
 8005c3c:	4909      	ldr	r1, [pc, #36]	@ (8005c64 <UARTEx_SetNbDataToProcess+0x94>)
 8005c3e:	5c8a      	ldrb	r2, [r1, r2]
 8005c40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c44:	7b7a      	ldrb	r2, [r7, #13]
 8005c46:	4908      	ldr	r1, [pc, #32]	@ (8005c68 <UARTEx_SetNbDataToProcess+0x98>)
 8005c48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005c56:	bf00      	nop
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	08006ebc 	.word	0x08006ebc
 8005c68:	08006ec4 	.word	0x08006ec4

08005c6c <_strtol_l.constprop.0>:
 8005c6c:	2b24      	cmp	r3, #36	@ 0x24
 8005c6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c72:	4686      	mov	lr, r0
 8005c74:	4690      	mov	r8, r2
 8005c76:	d801      	bhi.n	8005c7c <_strtol_l.constprop.0+0x10>
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d106      	bne.n	8005c8a <_strtol_l.constprop.0+0x1e>
 8005c7c:	f000 f9f2 	bl	8006064 <__errno>
 8005c80:	2316      	movs	r3, #22
 8005c82:	6003      	str	r3, [r0, #0]
 8005c84:	2000      	movs	r0, #0
 8005c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c8a:	4834      	ldr	r0, [pc, #208]	@ (8005d5c <_strtol_l.constprop.0+0xf0>)
 8005c8c:	460d      	mov	r5, r1
 8005c8e:	462a      	mov	r2, r5
 8005c90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c94:	5d06      	ldrb	r6, [r0, r4]
 8005c96:	f016 0608 	ands.w	r6, r6, #8
 8005c9a:	d1f8      	bne.n	8005c8e <_strtol_l.constprop.0+0x22>
 8005c9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8005c9e:	d12d      	bne.n	8005cfc <_strtol_l.constprop.0+0x90>
 8005ca0:	782c      	ldrb	r4, [r5, #0]
 8005ca2:	2601      	movs	r6, #1
 8005ca4:	1c95      	adds	r5, r2, #2
 8005ca6:	f033 0210 	bics.w	r2, r3, #16
 8005caa:	d109      	bne.n	8005cc0 <_strtol_l.constprop.0+0x54>
 8005cac:	2c30      	cmp	r4, #48	@ 0x30
 8005cae:	d12a      	bne.n	8005d06 <_strtol_l.constprop.0+0x9a>
 8005cb0:	782a      	ldrb	r2, [r5, #0]
 8005cb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005cb6:	2a58      	cmp	r2, #88	@ 0x58
 8005cb8:	d125      	bne.n	8005d06 <_strtol_l.constprop.0+0x9a>
 8005cba:	786c      	ldrb	r4, [r5, #1]
 8005cbc:	2310      	movs	r3, #16
 8005cbe:	3502      	adds	r5, #2
 8005cc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005cc4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005cc8:	2200      	movs	r2, #0
 8005cca:	fbbc f9f3 	udiv	r9, ip, r3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	fb03 ca19 	mls	sl, r3, r9, ip
 8005cd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005cd8:	2f09      	cmp	r7, #9
 8005cda:	d81b      	bhi.n	8005d14 <_strtol_l.constprop.0+0xa8>
 8005cdc:	463c      	mov	r4, r7
 8005cde:	42a3      	cmp	r3, r4
 8005ce0:	dd27      	ble.n	8005d32 <_strtol_l.constprop.0+0xc6>
 8005ce2:	1c57      	adds	r7, r2, #1
 8005ce4:	d007      	beq.n	8005cf6 <_strtol_l.constprop.0+0x8a>
 8005ce6:	4581      	cmp	r9, r0
 8005ce8:	d320      	bcc.n	8005d2c <_strtol_l.constprop.0+0xc0>
 8005cea:	d101      	bne.n	8005cf0 <_strtol_l.constprop.0+0x84>
 8005cec:	45a2      	cmp	sl, r4
 8005cee:	db1d      	blt.n	8005d2c <_strtol_l.constprop.0+0xc0>
 8005cf0:	fb00 4003 	mla	r0, r0, r3, r4
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cfa:	e7eb      	b.n	8005cd4 <_strtol_l.constprop.0+0x68>
 8005cfc:	2c2b      	cmp	r4, #43	@ 0x2b
 8005cfe:	bf04      	itt	eq
 8005d00:	782c      	ldrbeq	r4, [r5, #0]
 8005d02:	1c95      	addeq	r5, r2, #2
 8005d04:	e7cf      	b.n	8005ca6 <_strtol_l.constprop.0+0x3a>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1da      	bne.n	8005cc0 <_strtol_l.constprop.0+0x54>
 8005d0a:	2c30      	cmp	r4, #48	@ 0x30
 8005d0c:	bf0c      	ite	eq
 8005d0e:	2308      	moveq	r3, #8
 8005d10:	230a      	movne	r3, #10
 8005d12:	e7d5      	b.n	8005cc0 <_strtol_l.constprop.0+0x54>
 8005d14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005d18:	2f19      	cmp	r7, #25
 8005d1a:	d801      	bhi.n	8005d20 <_strtol_l.constprop.0+0xb4>
 8005d1c:	3c37      	subs	r4, #55	@ 0x37
 8005d1e:	e7de      	b.n	8005cde <_strtol_l.constprop.0+0x72>
 8005d20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005d24:	2f19      	cmp	r7, #25
 8005d26:	d804      	bhi.n	8005d32 <_strtol_l.constprop.0+0xc6>
 8005d28:	3c57      	subs	r4, #87	@ 0x57
 8005d2a:	e7d8      	b.n	8005cde <_strtol_l.constprop.0+0x72>
 8005d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d30:	e7e1      	b.n	8005cf6 <_strtol_l.constprop.0+0x8a>
 8005d32:	1c53      	adds	r3, r2, #1
 8005d34:	d108      	bne.n	8005d48 <_strtol_l.constprop.0+0xdc>
 8005d36:	2322      	movs	r3, #34	@ 0x22
 8005d38:	f8ce 3000 	str.w	r3, [lr]
 8005d3c:	4660      	mov	r0, ip
 8005d3e:	f1b8 0f00 	cmp.w	r8, #0
 8005d42:	d0a0      	beq.n	8005c86 <_strtol_l.constprop.0+0x1a>
 8005d44:	1e69      	subs	r1, r5, #1
 8005d46:	e006      	b.n	8005d56 <_strtol_l.constprop.0+0xea>
 8005d48:	b106      	cbz	r6, 8005d4c <_strtol_l.constprop.0+0xe0>
 8005d4a:	4240      	negs	r0, r0
 8005d4c:	f1b8 0f00 	cmp.w	r8, #0
 8005d50:	d099      	beq.n	8005c86 <_strtol_l.constprop.0+0x1a>
 8005d52:	2a00      	cmp	r2, #0
 8005d54:	d1f6      	bne.n	8005d44 <_strtol_l.constprop.0+0xd8>
 8005d56:	f8c8 1000 	str.w	r1, [r8]
 8005d5a:	e794      	b.n	8005c86 <_strtol_l.constprop.0+0x1a>
 8005d5c:	08006ecd 	.word	0x08006ecd

08005d60 <strtol>:
 8005d60:	4613      	mov	r3, r2
 8005d62:	460a      	mov	r2, r1
 8005d64:	4601      	mov	r1, r0
 8005d66:	4802      	ldr	r0, [pc, #8]	@ (8005d70 <strtol+0x10>)
 8005d68:	6800      	ldr	r0, [r0, #0]
 8005d6a:	f7ff bf7f 	b.w	8005c6c <_strtol_l.constprop.0>
 8005d6e:	bf00      	nop
 8005d70:	20000030 	.word	0x20000030

08005d74 <std>:
 8005d74:	2300      	movs	r3, #0
 8005d76:	b510      	push	{r4, lr}
 8005d78:	4604      	mov	r4, r0
 8005d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d82:	6083      	str	r3, [r0, #8]
 8005d84:	8181      	strh	r1, [r0, #12]
 8005d86:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d88:	81c2      	strh	r2, [r0, #14]
 8005d8a:	6183      	str	r3, [r0, #24]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	2208      	movs	r2, #8
 8005d90:	305c      	adds	r0, #92	@ 0x5c
 8005d92:	f000 f906 	bl	8005fa2 <memset>
 8005d96:	4b0d      	ldr	r3, [pc, #52]	@ (8005dcc <std+0x58>)
 8005d98:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd0 <std+0x5c>)
 8005d9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd4 <std+0x60>)
 8005da0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005da2:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd8 <std+0x64>)
 8005da4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005da6:	4b0d      	ldr	r3, [pc, #52]	@ (8005ddc <std+0x68>)
 8005da8:	6224      	str	r4, [r4, #32]
 8005daa:	429c      	cmp	r4, r3
 8005dac:	d006      	beq.n	8005dbc <std+0x48>
 8005dae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005db2:	4294      	cmp	r4, r2
 8005db4:	d002      	beq.n	8005dbc <std+0x48>
 8005db6:	33d0      	adds	r3, #208	@ 0xd0
 8005db8:	429c      	cmp	r4, r3
 8005dba:	d105      	bne.n	8005dc8 <std+0x54>
 8005dbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dc4:	f000 b978 	b.w	80060b8 <__retarget_lock_init_recursive>
 8005dc8:	bd10      	pop	{r4, pc}
 8005dca:	bf00      	nop
 8005dcc:	08005f1d 	.word	0x08005f1d
 8005dd0:	08005f3f 	.word	0x08005f3f
 8005dd4:	08005f77 	.word	0x08005f77
 8005dd8:	08005f9b 	.word	0x08005f9b
 8005ddc:	20000264 	.word	0x20000264

08005de0 <stdio_exit_handler>:
 8005de0:	4a02      	ldr	r2, [pc, #8]	@ (8005dec <stdio_exit_handler+0xc>)
 8005de2:	4903      	ldr	r1, [pc, #12]	@ (8005df0 <stdio_exit_handler+0x10>)
 8005de4:	4803      	ldr	r0, [pc, #12]	@ (8005df4 <stdio_exit_handler+0x14>)
 8005de6:	f000 b869 	b.w	8005ebc <_fwalk_sglue>
 8005dea:	bf00      	nop
 8005dec:	20000024 	.word	0x20000024
 8005df0:	08006959 	.word	0x08006959
 8005df4:	20000034 	.word	0x20000034

08005df8 <cleanup_stdio>:
 8005df8:	6841      	ldr	r1, [r0, #4]
 8005dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8005e2c <cleanup_stdio+0x34>)
 8005dfc:	4299      	cmp	r1, r3
 8005dfe:	b510      	push	{r4, lr}
 8005e00:	4604      	mov	r4, r0
 8005e02:	d001      	beq.n	8005e08 <cleanup_stdio+0x10>
 8005e04:	f000 fda8 	bl	8006958 <_fflush_r>
 8005e08:	68a1      	ldr	r1, [r4, #8]
 8005e0a:	4b09      	ldr	r3, [pc, #36]	@ (8005e30 <cleanup_stdio+0x38>)
 8005e0c:	4299      	cmp	r1, r3
 8005e0e:	d002      	beq.n	8005e16 <cleanup_stdio+0x1e>
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 fda1 	bl	8006958 <_fflush_r>
 8005e16:	68e1      	ldr	r1, [r4, #12]
 8005e18:	4b06      	ldr	r3, [pc, #24]	@ (8005e34 <cleanup_stdio+0x3c>)
 8005e1a:	4299      	cmp	r1, r3
 8005e1c:	d004      	beq.n	8005e28 <cleanup_stdio+0x30>
 8005e1e:	4620      	mov	r0, r4
 8005e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e24:	f000 bd98 	b.w	8006958 <_fflush_r>
 8005e28:	bd10      	pop	{r4, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20000264 	.word	0x20000264
 8005e30:	200002cc 	.word	0x200002cc
 8005e34:	20000334 	.word	0x20000334

08005e38 <global_stdio_init.part.0>:
 8005e38:	b510      	push	{r4, lr}
 8005e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e68 <global_stdio_init.part.0+0x30>)
 8005e3c:	4c0b      	ldr	r4, [pc, #44]	@ (8005e6c <global_stdio_init.part.0+0x34>)
 8005e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8005e70 <global_stdio_init.part.0+0x38>)
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	4620      	mov	r0, r4
 8005e44:	2200      	movs	r2, #0
 8005e46:	2104      	movs	r1, #4
 8005e48:	f7ff ff94 	bl	8005d74 <std>
 8005e4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e50:	2201      	movs	r2, #1
 8005e52:	2109      	movs	r1, #9
 8005e54:	f7ff ff8e 	bl	8005d74 <std>
 8005e58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e62:	2112      	movs	r1, #18
 8005e64:	f7ff bf86 	b.w	8005d74 <std>
 8005e68:	2000039c 	.word	0x2000039c
 8005e6c:	20000264 	.word	0x20000264
 8005e70:	08005de1 	.word	0x08005de1

08005e74 <__sfp_lock_acquire>:
 8005e74:	4801      	ldr	r0, [pc, #4]	@ (8005e7c <__sfp_lock_acquire+0x8>)
 8005e76:	f000 b920 	b.w	80060ba <__retarget_lock_acquire_recursive>
 8005e7a:	bf00      	nop
 8005e7c:	200003a5 	.word	0x200003a5

08005e80 <__sfp_lock_release>:
 8005e80:	4801      	ldr	r0, [pc, #4]	@ (8005e88 <__sfp_lock_release+0x8>)
 8005e82:	f000 b91b 	b.w	80060bc <__retarget_lock_release_recursive>
 8005e86:	bf00      	nop
 8005e88:	200003a5 	.word	0x200003a5

08005e8c <__sinit>:
 8005e8c:	b510      	push	{r4, lr}
 8005e8e:	4604      	mov	r4, r0
 8005e90:	f7ff fff0 	bl	8005e74 <__sfp_lock_acquire>
 8005e94:	6a23      	ldr	r3, [r4, #32]
 8005e96:	b11b      	cbz	r3, 8005ea0 <__sinit+0x14>
 8005e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e9c:	f7ff bff0 	b.w	8005e80 <__sfp_lock_release>
 8005ea0:	4b04      	ldr	r3, [pc, #16]	@ (8005eb4 <__sinit+0x28>)
 8005ea2:	6223      	str	r3, [r4, #32]
 8005ea4:	4b04      	ldr	r3, [pc, #16]	@ (8005eb8 <__sinit+0x2c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1f5      	bne.n	8005e98 <__sinit+0xc>
 8005eac:	f7ff ffc4 	bl	8005e38 <global_stdio_init.part.0>
 8005eb0:	e7f2      	b.n	8005e98 <__sinit+0xc>
 8005eb2:	bf00      	nop
 8005eb4:	08005df9 	.word	0x08005df9
 8005eb8:	2000039c 	.word	0x2000039c

08005ebc <_fwalk_sglue>:
 8005ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ec0:	4607      	mov	r7, r0
 8005ec2:	4688      	mov	r8, r1
 8005ec4:	4614      	mov	r4, r2
 8005ec6:	2600      	movs	r6, #0
 8005ec8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ecc:	f1b9 0901 	subs.w	r9, r9, #1
 8005ed0:	d505      	bpl.n	8005ede <_fwalk_sglue+0x22>
 8005ed2:	6824      	ldr	r4, [r4, #0]
 8005ed4:	2c00      	cmp	r4, #0
 8005ed6:	d1f7      	bne.n	8005ec8 <_fwalk_sglue+0xc>
 8005ed8:	4630      	mov	r0, r6
 8005eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ede:	89ab      	ldrh	r3, [r5, #12]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d907      	bls.n	8005ef4 <_fwalk_sglue+0x38>
 8005ee4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	d003      	beq.n	8005ef4 <_fwalk_sglue+0x38>
 8005eec:	4629      	mov	r1, r5
 8005eee:	4638      	mov	r0, r7
 8005ef0:	47c0      	blx	r8
 8005ef2:	4306      	orrs	r6, r0
 8005ef4:	3568      	adds	r5, #104	@ 0x68
 8005ef6:	e7e9      	b.n	8005ecc <_fwalk_sglue+0x10>

08005ef8 <iprintf>:
 8005ef8:	b40f      	push	{r0, r1, r2, r3}
 8005efa:	b507      	push	{r0, r1, r2, lr}
 8005efc:	4906      	ldr	r1, [pc, #24]	@ (8005f18 <iprintf+0x20>)
 8005efe:	ab04      	add	r3, sp, #16
 8005f00:	6808      	ldr	r0, [r1, #0]
 8005f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f06:	6881      	ldr	r1, [r0, #8]
 8005f08:	9301      	str	r3, [sp, #4]
 8005f0a:	f000 f9fb 	bl	8006304 <_vfiprintf_r>
 8005f0e:	b003      	add	sp, #12
 8005f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f14:	b004      	add	sp, #16
 8005f16:	4770      	bx	lr
 8005f18:	20000030 	.word	0x20000030

08005f1c <__sread>:
 8005f1c:	b510      	push	{r4, lr}
 8005f1e:	460c      	mov	r4, r1
 8005f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f24:	f000 f87a 	bl	800601c <_read_r>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	bfab      	itete	ge
 8005f2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f2e:	89a3      	ldrhlt	r3, [r4, #12]
 8005f30:	181b      	addge	r3, r3, r0
 8005f32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f36:	bfac      	ite	ge
 8005f38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f3a:	81a3      	strhlt	r3, [r4, #12]
 8005f3c:	bd10      	pop	{r4, pc}

08005f3e <__swrite>:
 8005f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f42:	461f      	mov	r7, r3
 8005f44:	898b      	ldrh	r3, [r1, #12]
 8005f46:	05db      	lsls	r3, r3, #23
 8005f48:	4605      	mov	r5, r0
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	4616      	mov	r6, r2
 8005f4e:	d505      	bpl.n	8005f5c <__swrite+0x1e>
 8005f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f54:	2302      	movs	r3, #2
 8005f56:	2200      	movs	r2, #0
 8005f58:	f000 f84e 	bl	8005ff8 <_lseek_r>
 8005f5c:	89a3      	ldrh	r3, [r4, #12]
 8005f5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f66:	81a3      	strh	r3, [r4, #12]
 8005f68:	4632      	mov	r2, r6
 8005f6a:	463b      	mov	r3, r7
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f72:	f000 b865 	b.w	8006040 <_write_r>

08005f76 <__sseek>:
 8005f76:	b510      	push	{r4, lr}
 8005f78:	460c      	mov	r4, r1
 8005f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f7e:	f000 f83b 	bl	8005ff8 <_lseek_r>
 8005f82:	1c43      	adds	r3, r0, #1
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	bf15      	itete	ne
 8005f88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f92:	81a3      	strheq	r3, [r4, #12]
 8005f94:	bf18      	it	ne
 8005f96:	81a3      	strhne	r3, [r4, #12]
 8005f98:	bd10      	pop	{r4, pc}

08005f9a <__sclose>:
 8005f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f9e:	f000 b81b 	b.w	8005fd8 <_close_r>

08005fa2 <memset>:
 8005fa2:	4402      	add	r2, r0
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d100      	bne.n	8005fac <memset+0xa>
 8005faa:	4770      	bx	lr
 8005fac:	f803 1b01 	strb.w	r1, [r3], #1
 8005fb0:	e7f9      	b.n	8005fa6 <memset+0x4>

08005fb2 <strncmp>:
 8005fb2:	b510      	push	{r4, lr}
 8005fb4:	b16a      	cbz	r2, 8005fd2 <strncmp+0x20>
 8005fb6:	3901      	subs	r1, #1
 8005fb8:	1884      	adds	r4, r0, r2
 8005fba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fbe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d103      	bne.n	8005fce <strncmp+0x1c>
 8005fc6:	42a0      	cmp	r0, r4
 8005fc8:	d001      	beq.n	8005fce <strncmp+0x1c>
 8005fca:	2a00      	cmp	r2, #0
 8005fcc:	d1f5      	bne.n	8005fba <strncmp+0x8>
 8005fce:	1ad0      	subs	r0, r2, r3
 8005fd0:	bd10      	pop	{r4, pc}
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	e7fc      	b.n	8005fd0 <strncmp+0x1e>
	...

08005fd8 <_close_r>:
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	4d06      	ldr	r5, [pc, #24]	@ (8005ff4 <_close_r+0x1c>)
 8005fdc:	2300      	movs	r3, #0
 8005fde:	4604      	mov	r4, r0
 8005fe0:	4608      	mov	r0, r1
 8005fe2:	602b      	str	r3, [r5, #0]
 8005fe4:	f7fa ffb6 	bl	8000f54 <_close>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	d102      	bne.n	8005ff2 <_close_r+0x1a>
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	b103      	cbz	r3, 8005ff2 <_close_r+0x1a>
 8005ff0:	6023      	str	r3, [r4, #0]
 8005ff2:	bd38      	pop	{r3, r4, r5, pc}
 8005ff4:	200003a0 	.word	0x200003a0

08005ff8 <_lseek_r>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	4d07      	ldr	r5, [pc, #28]	@ (8006018 <_lseek_r+0x20>)
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	4608      	mov	r0, r1
 8006000:	4611      	mov	r1, r2
 8006002:	2200      	movs	r2, #0
 8006004:	602a      	str	r2, [r5, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	f7fa ffcb 	bl	8000fa2 <_lseek>
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	d102      	bne.n	8006016 <_lseek_r+0x1e>
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	b103      	cbz	r3, 8006016 <_lseek_r+0x1e>
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	bd38      	pop	{r3, r4, r5, pc}
 8006018:	200003a0 	.word	0x200003a0

0800601c <_read_r>:
 800601c:	b538      	push	{r3, r4, r5, lr}
 800601e:	4d07      	ldr	r5, [pc, #28]	@ (800603c <_read_r+0x20>)
 8006020:	4604      	mov	r4, r0
 8006022:	4608      	mov	r0, r1
 8006024:	4611      	mov	r1, r2
 8006026:	2200      	movs	r2, #0
 8006028:	602a      	str	r2, [r5, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	f7fa ff59 	bl	8000ee2 <_read>
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	d102      	bne.n	800603a <_read_r+0x1e>
 8006034:	682b      	ldr	r3, [r5, #0]
 8006036:	b103      	cbz	r3, 800603a <_read_r+0x1e>
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	200003a0 	.word	0x200003a0

08006040 <_write_r>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	4d07      	ldr	r5, [pc, #28]	@ (8006060 <_write_r+0x20>)
 8006044:	4604      	mov	r4, r0
 8006046:	4608      	mov	r0, r1
 8006048:	4611      	mov	r1, r2
 800604a:	2200      	movs	r2, #0
 800604c:	602a      	str	r2, [r5, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	f7fa ff64 	bl	8000f1c <_write>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d102      	bne.n	800605e <_write_r+0x1e>
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	b103      	cbz	r3, 800605e <_write_r+0x1e>
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	bd38      	pop	{r3, r4, r5, pc}
 8006060:	200003a0 	.word	0x200003a0

08006064 <__errno>:
 8006064:	4b01      	ldr	r3, [pc, #4]	@ (800606c <__errno+0x8>)
 8006066:	6818      	ldr	r0, [r3, #0]
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	20000030 	.word	0x20000030

08006070 <__libc_init_array>:
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	4d0d      	ldr	r5, [pc, #52]	@ (80060a8 <__libc_init_array+0x38>)
 8006074:	4c0d      	ldr	r4, [pc, #52]	@ (80060ac <__libc_init_array+0x3c>)
 8006076:	1b64      	subs	r4, r4, r5
 8006078:	10a4      	asrs	r4, r4, #2
 800607a:	2600      	movs	r6, #0
 800607c:	42a6      	cmp	r6, r4
 800607e:	d109      	bne.n	8006094 <__libc_init_array+0x24>
 8006080:	4d0b      	ldr	r5, [pc, #44]	@ (80060b0 <__libc_init_array+0x40>)
 8006082:	4c0c      	ldr	r4, [pc, #48]	@ (80060b4 <__libc_init_array+0x44>)
 8006084:	f000 fdb8 	bl	8006bf8 <_init>
 8006088:	1b64      	subs	r4, r4, r5
 800608a:	10a4      	asrs	r4, r4, #2
 800608c:	2600      	movs	r6, #0
 800608e:	42a6      	cmp	r6, r4
 8006090:	d105      	bne.n	800609e <__libc_init_array+0x2e>
 8006092:	bd70      	pop	{r4, r5, r6, pc}
 8006094:	f855 3b04 	ldr.w	r3, [r5], #4
 8006098:	4798      	blx	r3
 800609a:	3601      	adds	r6, #1
 800609c:	e7ee      	b.n	800607c <__libc_init_array+0xc>
 800609e:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a2:	4798      	blx	r3
 80060a4:	3601      	adds	r6, #1
 80060a6:	e7f2      	b.n	800608e <__libc_init_array+0x1e>
 80060a8:	08007008 	.word	0x08007008
 80060ac:	08007008 	.word	0x08007008
 80060b0:	08007008 	.word	0x08007008
 80060b4:	0800700c 	.word	0x0800700c

080060b8 <__retarget_lock_init_recursive>:
 80060b8:	4770      	bx	lr

080060ba <__retarget_lock_acquire_recursive>:
 80060ba:	4770      	bx	lr

080060bc <__retarget_lock_release_recursive>:
 80060bc:	4770      	bx	lr
	...

080060c0 <_free_r>:
 80060c0:	b538      	push	{r3, r4, r5, lr}
 80060c2:	4605      	mov	r5, r0
 80060c4:	2900      	cmp	r1, #0
 80060c6:	d041      	beq.n	800614c <_free_r+0x8c>
 80060c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060cc:	1f0c      	subs	r4, r1, #4
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	bfb8      	it	lt
 80060d2:	18e4      	addlt	r4, r4, r3
 80060d4:	f000 f8e0 	bl	8006298 <__malloc_lock>
 80060d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006150 <_free_r+0x90>)
 80060da:	6813      	ldr	r3, [r2, #0]
 80060dc:	b933      	cbnz	r3, 80060ec <_free_r+0x2c>
 80060de:	6063      	str	r3, [r4, #4]
 80060e0:	6014      	str	r4, [r2, #0]
 80060e2:	4628      	mov	r0, r5
 80060e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060e8:	f000 b8dc 	b.w	80062a4 <__malloc_unlock>
 80060ec:	42a3      	cmp	r3, r4
 80060ee:	d908      	bls.n	8006102 <_free_r+0x42>
 80060f0:	6820      	ldr	r0, [r4, #0]
 80060f2:	1821      	adds	r1, r4, r0
 80060f4:	428b      	cmp	r3, r1
 80060f6:	bf01      	itttt	eq
 80060f8:	6819      	ldreq	r1, [r3, #0]
 80060fa:	685b      	ldreq	r3, [r3, #4]
 80060fc:	1809      	addeq	r1, r1, r0
 80060fe:	6021      	streq	r1, [r4, #0]
 8006100:	e7ed      	b.n	80060de <_free_r+0x1e>
 8006102:	461a      	mov	r2, r3
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	b10b      	cbz	r3, 800610c <_free_r+0x4c>
 8006108:	42a3      	cmp	r3, r4
 800610a:	d9fa      	bls.n	8006102 <_free_r+0x42>
 800610c:	6811      	ldr	r1, [r2, #0]
 800610e:	1850      	adds	r0, r2, r1
 8006110:	42a0      	cmp	r0, r4
 8006112:	d10b      	bne.n	800612c <_free_r+0x6c>
 8006114:	6820      	ldr	r0, [r4, #0]
 8006116:	4401      	add	r1, r0
 8006118:	1850      	adds	r0, r2, r1
 800611a:	4283      	cmp	r3, r0
 800611c:	6011      	str	r1, [r2, #0]
 800611e:	d1e0      	bne.n	80060e2 <_free_r+0x22>
 8006120:	6818      	ldr	r0, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	6053      	str	r3, [r2, #4]
 8006126:	4408      	add	r0, r1
 8006128:	6010      	str	r0, [r2, #0]
 800612a:	e7da      	b.n	80060e2 <_free_r+0x22>
 800612c:	d902      	bls.n	8006134 <_free_r+0x74>
 800612e:	230c      	movs	r3, #12
 8006130:	602b      	str	r3, [r5, #0]
 8006132:	e7d6      	b.n	80060e2 <_free_r+0x22>
 8006134:	6820      	ldr	r0, [r4, #0]
 8006136:	1821      	adds	r1, r4, r0
 8006138:	428b      	cmp	r3, r1
 800613a:	bf04      	itt	eq
 800613c:	6819      	ldreq	r1, [r3, #0]
 800613e:	685b      	ldreq	r3, [r3, #4]
 8006140:	6063      	str	r3, [r4, #4]
 8006142:	bf04      	itt	eq
 8006144:	1809      	addeq	r1, r1, r0
 8006146:	6021      	streq	r1, [r4, #0]
 8006148:	6054      	str	r4, [r2, #4]
 800614a:	e7ca      	b.n	80060e2 <_free_r+0x22>
 800614c:	bd38      	pop	{r3, r4, r5, pc}
 800614e:	bf00      	nop
 8006150:	200003ac 	.word	0x200003ac

08006154 <sbrk_aligned>:
 8006154:	b570      	push	{r4, r5, r6, lr}
 8006156:	4e0f      	ldr	r6, [pc, #60]	@ (8006194 <sbrk_aligned+0x40>)
 8006158:	460c      	mov	r4, r1
 800615a:	6831      	ldr	r1, [r6, #0]
 800615c:	4605      	mov	r5, r0
 800615e:	b911      	cbnz	r1, 8006166 <sbrk_aligned+0x12>
 8006160:	f000 fcb6 	bl	8006ad0 <_sbrk_r>
 8006164:	6030      	str	r0, [r6, #0]
 8006166:	4621      	mov	r1, r4
 8006168:	4628      	mov	r0, r5
 800616a:	f000 fcb1 	bl	8006ad0 <_sbrk_r>
 800616e:	1c43      	adds	r3, r0, #1
 8006170:	d103      	bne.n	800617a <sbrk_aligned+0x26>
 8006172:	f04f 34ff 	mov.w	r4, #4294967295
 8006176:	4620      	mov	r0, r4
 8006178:	bd70      	pop	{r4, r5, r6, pc}
 800617a:	1cc4      	adds	r4, r0, #3
 800617c:	f024 0403 	bic.w	r4, r4, #3
 8006180:	42a0      	cmp	r0, r4
 8006182:	d0f8      	beq.n	8006176 <sbrk_aligned+0x22>
 8006184:	1a21      	subs	r1, r4, r0
 8006186:	4628      	mov	r0, r5
 8006188:	f000 fca2 	bl	8006ad0 <_sbrk_r>
 800618c:	3001      	adds	r0, #1
 800618e:	d1f2      	bne.n	8006176 <sbrk_aligned+0x22>
 8006190:	e7ef      	b.n	8006172 <sbrk_aligned+0x1e>
 8006192:	bf00      	nop
 8006194:	200003a8 	.word	0x200003a8

08006198 <_malloc_r>:
 8006198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800619c:	1ccd      	adds	r5, r1, #3
 800619e:	f025 0503 	bic.w	r5, r5, #3
 80061a2:	3508      	adds	r5, #8
 80061a4:	2d0c      	cmp	r5, #12
 80061a6:	bf38      	it	cc
 80061a8:	250c      	movcc	r5, #12
 80061aa:	2d00      	cmp	r5, #0
 80061ac:	4606      	mov	r6, r0
 80061ae:	db01      	blt.n	80061b4 <_malloc_r+0x1c>
 80061b0:	42a9      	cmp	r1, r5
 80061b2:	d904      	bls.n	80061be <_malloc_r+0x26>
 80061b4:	230c      	movs	r3, #12
 80061b6:	6033      	str	r3, [r6, #0]
 80061b8:	2000      	movs	r0, #0
 80061ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006294 <_malloc_r+0xfc>
 80061c2:	f000 f869 	bl	8006298 <__malloc_lock>
 80061c6:	f8d8 3000 	ldr.w	r3, [r8]
 80061ca:	461c      	mov	r4, r3
 80061cc:	bb44      	cbnz	r4, 8006220 <_malloc_r+0x88>
 80061ce:	4629      	mov	r1, r5
 80061d0:	4630      	mov	r0, r6
 80061d2:	f7ff ffbf 	bl	8006154 <sbrk_aligned>
 80061d6:	1c43      	adds	r3, r0, #1
 80061d8:	4604      	mov	r4, r0
 80061da:	d158      	bne.n	800628e <_malloc_r+0xf6>
 80061dc:	f8d8 4000 	ldr.w	r4, [r8]
 80061e0:	4627      	mov	r7, r4
 80061e2:	2f00      	cmp	r7, #0
 80061e4:	d143      	bne.n	800626e <_malloc_r+0xd6>
 80061e6:	2c00      	cmp	r4, #0
 80061e8:	d04b      	beq.n	8006282 <_malloc_r+0xea>
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	4639      	mov	r1, r7
 80061ee:	4630      	mov	r0, r6
 80061f0:	eb04 0903 	add.w	r9, r4, r3
 80061f4:	f000 fc6c 	bl	8006ad0 <_sbrk_r>
 80061f8:	4581      	cmp	r9, r0
 80061fa:	d142      	bne.n	8006282 <_malloc_r+0xea>
 80061fc:	6821      	ldr	r1, [r4, #0]
 80061fe:	1a6d      	subs	r5, r5, r1
 8006200:	4629      	mov	r1, r5
 8006202:	4630      	mov	r0, r6
 8006204:	f7ff ffa6 	bl	8006154 <sbrk_aligned>
 8006208:	3001      	adds	r0, #1
 800620a:	d03a      	beq.n	8006282 <_malloc_r+0xea>
 800620c:	6823      	ldr	r3, [r4, #0]
 800620e:	442b      	add	r3, r5
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	f8d8 3000 	ldr.w	r3, [r8]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	bb62      	cbnz	r2, 8006274 <_malloc_r+0xdc>
 800621a:	f8c8 7000 	str.w	r7, [r8]
 800621e:	e00f      	b.n	8006240 <_malloc_r+0xa8>
 8006220:	6822      	ldr	r2, [r4, #0]
 8006222:	1b52      	subs	r2, r2, r5
 8006224:	d420      	bmi.n	8006268 <_malloc_r+0xd0>
 8006226:	2a0b      	cmp	r2, #11
 8006228:	d917      	bls.n	800625a <_malloc_r+0xc2>
 800622a:	1961      	adds	r1, r4, r5
 800622c:	42a3      	cmp	r3, r4
 800622e:	6025      	str	r5, [r4, #0]
 8006230:	bf18      	it	ne
 8006232:	6059      	strne	r1, [r3, #4]
 8006234:	6863      	ldr	r3, [r4, #4]
 8006236:	bf08      	it	eq
 8006238:	f8c8 1000 	streq.w	r1, [r8]
 800623c:	5162      	str	r2, [r4, r5]
 800623e:	604b      	str	r3, [r1, #4]
 8006240:	4630      	mov	r0, r6
 8006242:	f000 f82f 	bl	80062a4 <__malloc_unlock>
 8006246:	f104 000b 	add.w	r0, r4, #11
 800624a:	1d23      	adds	r3, r4, #4
 800624c:	f020 0007 	bic.w	r0, r0, #7
 8006250:	1ac2      	subs	r2, r0, r3
 8006252:	bf1c      	itt	ne
 8006254:	1a1b      	subne	r3, r3, r0
 8006256:	50a3      	strne	r3, [r4, r2]
 8006258:	e7af      	b.n	80061ba <_malloc_r+0x22>
 800625a:	6862      	ldr	r2, [r4, #4]
 800625c:	42a3      	cmp	r3, r4
 800625e:	bf0c      	ite	eq
 8006260:	f8c8 2000 	streq.w	r2, [r8]
 8006264:	605a      	strne	r2, [r3, #4]
 8006266:	e7eb      	b.n	8006240 <_malloc_r+0xa8>
 8006268:	4623      	mov	r3, r4
 800626a:	6864      	ldr	r4, [r4, #4]
 800626c:	e7ae      	b.n	80061cc <_malloc_r+0x34>
 800626e:	463c      	mov	r4, r7
 8006270:	687f      	ldr	r7, [r7, #4]
 8006272:	e7b6      	b.n	80061e2 <_malloc_r+0x4a>
 8006274:	461a      	mov	r2, r3
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	42a3      	cmp	r3, r4
 800627a:	d1fb      	bne.n	8006274 <_malloc_r+0xdc>
 800627c:	2300      	movs	r3, #0
 800627e:	6053      	str	r3, [r2, #4]
 8006280:	e7de      	b.n	8006240 <_malloc_r+0xa8>
 8006282:	230c      	movs	r3, #12
 8006284:	6033      	str	r3, [r6, #0]
 8006286:	4630      	mov	r0, r6
 8006288:	f000 f80c 	bl	80062a4 <__malloc_unlock>
 800628c:	e794      	b.n	80061b8 <_malloc_r+0x20>
 800628e:	6005      	str	r5, [r0, #0]
 8006290:	e7d6      	b.n	8006240 <_malloc_r+0xa8>
 8006292:	bf00      	nop
 8006294:	200003ac 	.word	0x200003ac

08006298 <__malloc_lock>:
 8006298:	4801      	ldr	r0, [pc, #4]	@ (80062a0 <__malloc_lock+0x8>)
 800629a:	f7ff bf0e 	b.w	80060ba <__retarget_lock_acquire_recursive>
 800629e:	bf00      	nop
 80062a0:	200003a4 	.word	0x200003a4

080062a4 <__malloc_unlock>:
 80062a4:	4801      	ldr	r0, [pc, #4]	@ (80062ac <__malloc_unlock+0x8>)
 80062a6:	f7ff bf09 	b.w	80060bc <__retarget_lock_release_recursive>
 80062aa:	bf00      	nop
 80062ac:	200003a4 	.word	0x200003a4

080062b0 <__sfputc_r>:
 80062b0:	6893      	ldr	r3, [r2, #8]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	b410      	push	{r4}
 80062b8:	6093      	str	r3, [r2, #8]
 80062ba:	da08      	bge.n	80062ce <__sfputc_r+0x1e>
 80062bc:	6994      	ldr	r4, [r2, #24]
 80062be:	42a3      	cmp	r3, r4
 80062c0:	db01      	blt.n	80062c6 <__sfputc_r+0x16>
 80062c2:	290a      	cmp	r1, #10
 80062c4:	d103      	bne.n	80062ce <__sfputc_r+0x1e>
 80062c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ca:	f000 bb6d 	b.w	80069a8 <__swbuf_r>
 80062ce:	6813      	ldr	r3, [r2, #0]
 80062d0:	1c58      	adds	r0, r3, #1
 80062d2:	6010      	str	r0, [r2, #0]
 80062d4:	7019      	strb	r1, [r3, #0]
 80062d6:	4608      	mov	r0, r1
 80062d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062dc:	4770      	bx	lr

080062de <__sfputs_r>:
 80062de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e0:	4606      	mov	r6, r0
 80062e2:	460f      	mov	r7, r1
 80062e4:	4614      	mov	r4, r2
 80062e6:	18d5      	adds	r5, r2, r3
 80062e8:	42ac      	cmp	r4, r5
 80062ea:	d101      	bne.n	80062f0 <__sfputs_r+0x12>
 80062ec:	2000      	movs	r0, #0
 80062ee:	e007      	b.n	8006300 <__sfputs_r+0x22>
 80062f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f4:	463a      	mov	r2, r7
 80062f6:	4630      	mov	r0, r6
 80062f8:	f7ff ffda 	bl	80062b0 <__sfputc_r>
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	d1f3      	bne.n	80062e8 <__sfputs_r+0xa>
 8006300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006304 <_vfiprintf_r>:
 8006304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006308:	460d      	mov	r5, r1
 800630a:	b09d      	sub	sp, #116	@ 0x74
 800630c:	4614      	mov	r4, r2
 800630e:	4698      	mov	r8, r3
 8006310:	4606      	mov	r6, r0
 8006312:	b118      	cbz	r0, 800631c <_vfiprintf_r+0x18>
 8006314:	6a03      	ldr	r3, [r0, #32]
 8006316:	b90b      	cbnz	r3, 800631c <_vfiprintf_r+0x18>
 8006318:	f7ff fdb8 	bl	8005e8c <__sinit>
 800631c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800631e:	07d9      	lsls	r1, r3, #31
 8006320:	d405      	bmi.n	800632e <_vfiprintf_r+0x2a>
 8006322:	89ab      	ldrh	r3, [r5, #12]
 8006324:	059a      	lsls	r2, r3, #22
 8006326:	d402      	bmi.n	800632e <_vfiprintf_r+0x2a>
 8006328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800632a:	f7ff fec6 	bl	80060ba <__retarget_lock_acquire_recursive>
 800632e:	89ab      	ldrh	r3, [r5, #12]
 8006330:	071b      	lsls	r3, r3, #28
 8006332:	d501      	bpl.n	8006338 <_vfiprintf_r+0x34>
 8006334:	692b      	ldr	r3, [r5, #16]
 8006336:	b99b      	cbnz	r3, 8006360 <_vfiprintf_r+0x5c>
 8006338:	4629      	mov	r1, r5
 800633a:	4630      	mov	r0, r6
 800633c:	f000 fb72 	bl	8006a24 <__swsetup_r>
 8006340:	b170      	cbz	r0, 8006360 <_vfiprintf_r+0x5c>
 8006342:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006344:	07dc      	lsls	r4, r3, #31
 8006346:	d504      	bpl.n	8006352 <_vfiprintf_r+0x4e>
 8006348:	f04f 30ff 	mov.w	r0, #4294967295
 800634c:	b01d      	add	sp, #116	@ 0x74
 800634e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006352:	89ab      	ldrh	r3, [r5, #12]
 8006354:	0598      	lsls	r0, r3, #22
 8006356:	d4f7      	bmi.n	8006348 <_vfiprintf_r+0x44>
 8006358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800635a:	f7ff feaf 	bl	80060bc <__retarget_lock_release_recursive>
 800635e:	e7f3      	b.n	8006348 <_vfiprintf_r+0x44>
 8006360:	2300      	movs	r3, #0
 8006362:	9309      	str	r3, [sp, #36]	@ 0x24
 8006364:	2320      	movs	r3, #32
 8006366:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800636a:	f8cd 800c 	str.w	r8, [sp, #12]
 800636e:	2330      	movs	r3, #48	@ 0x30
 8006370:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006520 <_vfiprintf_r+0x21c>
 8006374:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006378:	f04f 0901 	mov.w	r9, #1
 800637c:	4623      	mov	r3, r4
 800637e:	469a      	mov	sl, r3
 8006380:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006384:	b10a      	cbz	r2, 800638a <_vfiprintf_r+0x86>
 8006386:	2a25      	cmp	r2, #37	@ 0x25
 8006388:	d1f9      	bne.n	800637e <_vfiprintf_r+0x7a>
 800638a:	ebba 0b04 	subs.w	fp, sl, r4
 800638e:	d00b      	beq.n	80063a8 <_vfiprintf_r+0xa4>
 8006390:	465b      	mov	r3, fp
 8006392:	4622      	mov	r2, r4
 8006394:	4629      	mov	r1, r5
 8006396:	4630      	mov	r0, r6
 8006398:	f7ff ffa1 	bl	80062de <__sfputs_r>
 800639c:	3001      	adds	r0, #1
 800639e:	f000 80a7 	beq.w	80064f0 <_vfiprintf_r+0x1ec>
 80063a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063a4:	445a      	add	r2, fp
 80063a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80063a8:	f89a 3000 	ldrb.w	r3, [sl]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 809f 	beq.w	80064f0 <_vfiprintf_r+0x1ec>
 80063b2:	2300      	movs	r3, #0
 80063b4:	f04f 32ff 	mov.w	r2, #4294967295
 80063b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063bc:	f10a 0a01 	add.w	sl, sl, #1
 80063c0:	9304      	str	r3, [sp, #16]
 80063c2:	9307      	str	r3, [sp, #28]
 80063c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80063c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80063ca:	4654      	mov	r4, sl
 80063cc:	2205      	movs	r2, #5
 80063ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d2:	4853      	ldr	r0, [pc, #332]	@ (8006520 <_vfiprintf_r+0x21c>)
 80063d4:	f7f9 ff24 	bl	8000220 <memchr>
 80063d8:	9a04      	ldr	r2, [sp, #16]
 80063da:	b9d8      	cbnz	r0, 8006414 <_vfiprintf_r+0x110>
 80063dc:	06d1      	lsls	r1, r2, #27
 80063de:	bf44      	itt	mi
 80063e0:	2320      	movmi	r3, #32
 80063e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063e6:	0713      	lsls	r3, r2, #28
 80063e8:	bf44      	itt	mi
 80063ea:	232b      	movmi	r3, #43	@ 0x2b
 80063ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063f0:	f89a 3000 	ldrb.w	r3, [sl]
 80063f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80063f6:	d015      	beq.n	8006424 <_vfiprintf_r+0x120>
 80063f8:	9a07      	ldr	r2, [sp, #28]
 80063fa:	4654      	mov	r4, sl
 80063fc:	2000      	movs	r0, #0
 80063fe:	f04f 0c0a 	mov.w	ip, #10
 8006402:	4621      	mov	r1, r4
 8006404:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006408:	3b30      	subs	r3, #48	@ 0x30
 800640a:	2b09      	cmp	r3, #9
 800640c:	d94b      	bls.n	80064a6 <_vfiprintf_r+0x1a2>
 800640e:	b1b0      	cbz	r0, 800643e <_vfiprintf_r+0x13a>
 8006410:	9207      	str	r2, [sp, #28]
 8006412:	e014      	b.n	800643e <_vfiprintf_r+0x13a>
 8006414:	eba0 0308 	sub.w	r3, r0, r8
 8006418:	fa09 f303 	lsl.w	r3, r9, r3
 800641c:	4313      	orrs	r3, r2
 800641e:	9304      	str	r3, [sp, #16]
 8006420:	46a2      	mov	sl, r4
 8006422:	e7d2      	b.n	80063ca <_vfiprintf_r+0xc6>
 8006424:	9b03      	ldr	r3, [sp, #12]
 8006426:	1d19      	adds	r1, r3, #4
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	9103      	str	r1, [sp, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	bfbb      	ittet	lt
 8006430:	425b      	neglt	r3, r3
 8006432:	f042 0202 	orrlt.w	r2, r2, #2
 8006436:	9307      	strge	r3, [sp, #28]
 8006438:	9307      	strlt	r3, [sp, #28]
 800643a:	bfb8      	it	lt
 800643c:	9204      	strlt	r2, [sp, #16]
 800643e:	7823      	ldrb	r3, [r4, #0]
 8006440:	2b2e      	cmp	r3, #46	@ 0x2e
 8006442:	d10a      	bne.n	800645a <_vfiprintf_r+0x156>
 8006444:	7863      	ldrb	r3, [r4, #1]
 8006446:	2b2a      	cmp	r3, #42	@ 0x2a
 8006448:	d132      	bne.n	80064b0 <_vfiprintf_r+0x1ac>
 800644a:	9b03      	ldr	r3, [sp, #12]
 800644c:	1d1a      	adds	r2, r3, #4
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	9203      	str	r2, [sp, #12]
 8006452:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006456:	3402      	adds	r4, #2
 8006458:	9305      	str	r3, [sp, #20]
 800645a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006530 <_vfiprintf_r+0x22c>
 800645e:	7821      	ldrb	r1, [r4, #0]
 8006460:	2203      	movs	r2, #3
 8006462:	4650      	mov	r0, sl
 8006464:	f7f9 fedc 	bl	8000220 <memchr>
 8006468:	b138      	cbz	r0, 800647a <_vfiprintf_r+0x176>
 800646a:	9b04      	ldr	r3, [sp, #16]
 800646c:	eba0 000a 	sub.w	r0, r0, sl
 8006470:	2240      	movs	r2, #64	@ 0x40
 8006472:	4082      	lsls	r2, r0
 8006474:	4313      	orrs	r3, r2
 8006476:	3401      	adds	r4, #1
 8006478:	9304      	str	r3, [sp, #16]
 800647a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800647e:	4829      	ldr	r0, [pc, #164]	@ (8006524 <_vfiprintf_r+0x220>)
 8006480:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006484:	2206      	movs	r2, #6
 8006486:	f7f9 fecb 	bl	8000220 <memchr>
 800648a:	2800      	cmp	r0, #0
 800648c:	d03f      	beq.n	800650e <_vfiprintf_r+0x20a>
 800648e:	4b26      	ldr	r3, [pc, #152]	@ (8006528 <_vfiprintf_r+0x224>)
 8006490:	bb1b      	cbnz	r3, 80064da <_vfiprintf_r+0x1d6>
 8006492:	9b03      	ldr	r3, [sp, #12]
 8006494:	3307      	adds	r3, #7
 8006496:	f023 0307 	bic.w	r3, r3, #7
 800649a:	3308      	adds	r3, #8
 800649c:	9303      	str	r3, [sp, #12]
 800649e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064a0:	443b      	add	r3, r7
 80064a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80064a4:	e76a      	b.n	800637c <_vfiprintf_r+0x78>
 80064a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80064aa:	460c      	mov	r4, r1
 80064ac:	2001      	movs	r0, #1
 80064ae:	e7a8      	b.n	8006402 <_vfiprintf_r+0xfe>
 80064b0:	2300      	movs	r3, #0
 80064b2:	3401      	adds	r4, #1
 80064b4:	9305      	str	r3, [sp, #20]
 80064b6:	4619      	mov	r1, r3
 80064b8:	f04f 0c0a 	mov.w	ip, #10
 80064bc:	4620      	mov	r0, r4
 80064be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064c2:	3a30      	subs	r2, #48	@ 0x30
 80064c4:	2a09      	cmp	r2, #9
 80064c6:	d903      	bls.n	80064d0 <_vfiprintf_r+0x1cc>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0c6      	beq.n	800645a <_vfiprintf_r+0x156>
 80064cc:	9105      	str	r1, [sp, #20]
 80064ce:	e7c4      	b.n	800645a <_vfiprintf_r+0x156>
 80064d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80064d4:	4604      	mov	r4, r0
 80064d6:	2301      	movs	r3, #1
 80064d8:	e7f0      	b.n	80064bc <_vfiprintf_r+0x1b8>
 80064da:	ab03      	add	r3, sp, #12
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	462a      	mov	r2, r5
 80064e0:	4b12      	ldr	r3, [pc, #72]	@ (800652c <_vfiprintf_r+0x228>)
 80064e2:	a904      	add	r1, sp, #16
 80064e4:	4630      	mov	r0, r6
 80064e6:	f3af 8000 	nop.w
 80064ea:	4607      	mov	r7, r0
 80064ec:	1c78      	adds	r0, r7, #1
 80064ee:	d1d6      	bne.n	800649e <_vfiprintf_r+0x19a>
 80064f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064f2:	07d9      	lsls	r1, r3, #31
 80064f4:	d405      	bmi.n	8006502 <_vfiprintf_r+0x1fe>
 80064f6:	89ab      	ldrh	r3, [r5, #12]
 80064f8:	059a      	lsls	r2, r3, #22
 80064fa:	d402      	bmi.n	8006502 <_vfiprintf_r+0x1fe>
 80064fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064fe:	f7ff fddd 	bl	80060bc <__retarget_lock_release_recursive>
 8006502:	89ab      	ldrh	r3, [r5, #12]
 8006504:	065b      	lsls	r3, r3, #25
 8006506:	f53f af1f 	bmi.w	8006348 <_vfiprintf_r+0x44>
 800650a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800650c:	e71e      	b.n	800634c <_vfiprintf_r+0x48>
 800650e:	ab03      	add	r3, sp, #12
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	462a      	mov	r2, r5
 8006514:	4b05      	ldr	r3, [pc, #20]	@ (800652c <_vfiprintf_r+0x228>)
 8006516:	a904      	add	r1, sp, #16
 8006518:	4630      	mov	r0, r6
 800651a:	f000 f879 	bl	8006610 <_printf_i>
 800651e:	e7e4      	b.n	80064ea <_vfiprintf_r+0x1e6>
 8006520:	08006fcd 	.word	0x08006fcd
 8006524:	08006fd7 	.word	0x08006fd7
 8006528:	00000000 	.word	0x00000000
 800652c:	080062df 	.word	0x080062df
 8006530:	08006fd3 	.word	0x08006fd3

08006534 <_printf_common>:
 8006534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006538:	4616      	mov	r6, r2
 800653a:	4698      	mov	r8, r3
 800653c:	688a      	ldr	r2, [r1, #8]
 800653e:	690b      	ldr	r3, [r1, #16]
 8006540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006544:	4293      	cmp	r3, r2
 8006546:	bfb8      	it	lt
 8006548:	4613      	movlt	r3, r2
 800654a:	6033      	str	r3, [r6, #0]
 800654c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006550:	4607      	mov	r7, r0
 8006552:	460c      	mov	r4, r1
 8006554:	b10a      	cbz	r2, 800655a <_printf_common+0x26>
 8006556:	3301      	adds	r3, #1
 8006558:	6033      	str	r3, [r6, #0]
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	0699      	lsls	r1, r3, #26
 800655e:	bf42      	ittt	mi
 8006560:	6833      	ldrmi	r3, [r6, #0]
 8006562:	3302      	addmi	r3, #2
 8006564:	6033      	strmi	r3, [r6, #0]
 8006566:	6825      	ldr	r5, [r4, #0]
 8006568:	f015 0506 	ands.w	r5, r5, #6
 800656c:	d106      	bne.n	800657c <_printf_common+0x48>
 800656e:	f104 0a19 	add.w	sl, r4, #25
 8006572:	68e3      	ldr	r3, [r4, #12]
 8006574:	6832      	ldr	r2, [r6, #0]
 8006576:	1a9b      	subs	r3, r3, r2
 8006578:	42ab      	cmp	r3, r5
 800657a:	dc26      	bgt.n	80065ca <_printf_common+0x96>
 800657c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006580:	6822      	ldr	r2, [r4, #0]
 8006582:	3b00      	subs	r3, #0
 8006584:	bf18      	it	ne
 8006586:	2301      	movne	r3, #1
 8006588:	0692      	lsls	r2, r2, #26
 800658a:	d42b      	bmi.n	80065e4 <_printf_common+0xb0>
 800658c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006590:	4641      	mov	r1, r8
 8006592:	4638      	mov	r0, r7
 8006594:	47c8      	blx	r9
 8006596:	3001      	adds	r0, #1
 8006598:	d01e      	beq.n	80065d8 <_printf_common+0xa4>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	6922      	ldr	r2, [r4, #16]
 800659e:	f003 0306 	and.w	r3, r3, #6
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	bf02      	ittt	eq
 80065a6:	68e5      	ldreq	r5, [r4, #12]
 80065a8:	6833      	ldreq	r3, [r6, #0]
 80065aa:	1aed      	subeq	r5, r5, r3
 80065ac:	68a3      	ldr	r3, [r4, #8]
 80065ae:	bf0c      	ite	eq
 80065b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065b4:	2500      	movne	r5, #0
 80065b6:	4293      	cmp	r3, r2
 80065b8:	bfc4      	itt	gt
 80065ba:	1a9b      	subgt	r3, r3, r2
 80065bc:	18ed      	addgt	r5, r5, r3
 80065be:	2600      	movs	r6, #0
 80065c0:	341a      	adds	r4, #26
 80065c2:	42b5      	cmp	r5, r6
 80065c4:	d11a      	bne.n	80065fc <_printf_common+0xc8>
 80065c6:	2000      	movs	r0, #0
 80065c8:	e008      	b.n	80065dc <_printf_common+0xa8>
 80065ca:	2301      	movs	r3, #1
 80065cc:	4652      	mov	r2, sl
 80065ce:	4641      	mov	r1, r8
 80065d0:	4638      	mov	r0, r7
 80065d2:	47c8      	blx	r9
 80065d4:	3001      	adds	r0, #1
 80065d6:	d103      	bne.n	80065e0 <_printf_common+0xac>
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295
 80065dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e0:	3501      	adds	r5, #1
 80065e2:	e7c6      	b.n	8006572 <_printf_common+0x3e>
 80065e4:	18e1      	adds	r1, r4, r3
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	2030      	movs	r0, #48	@ 0x30
 80065ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065ee:	4422      	add	r2, r4
 80065f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065f8:	3302      	adds	r3, #2
 80065fa:	e7c7      	b.n	800658c <_printf_common+0x58>
 80065fc:	2301      	movs	r3, #1
 80065fe:	4622      	mov	r2, r4
 8006600:	4641      	mov	r1, r8
 8006602:	4638      	mov	r0, r7
 8006604:	47c8      	blx	r9
 8006606:	3001      	adds	r0, #1
 8006608:	d0e6      	beq.n	80065d8 <_printf_common+0xa4>
 800660a:	3601      	adds	r6, #1
 800660c:	e7d9      	b.n	80065c2 <_printf_common+0x8e>
	...

08006610 <_printf_i>:
 8006610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006614:	7e0f      	ldrb	r7, [r1, #24]
 8006616:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006618:	2f78      	cmp	r7, #120	@ 0x78
 800661a:	4691      	mov	r9, r2
 800661c:	4680      	mov	r8, r0
 800661e:	460c      	mov	r4, r1
 8006620:	469a      	mov	sl, r3
 8006622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006626:	d807      	bhi.n	8006638 <_printf_i+0x28>
 8006628:	2f62      	cmp	r7, #98	@ 0x62
 800662a:	d80a      	bhi.n	8006642 <_printf_i+0x32>
 800662c:	2f00      	cmp	r7, #0
 800662e:	f000 80d2 	beq.w	80067d6 <_printf_i+0x1c6>
 8006632:	2f58      	cmp	r7, #88	@ 0x58
 8006634:	f000 80b9 	beq.w	80067aa <_printf_i+0x19a>
 8006638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800663c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006640:	e03a      	b.n	80066b8 <_printf_i+0xa8>
 8006642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006646:	2b15      	cmp	r3, #21
 8006648:	d8f6      	bhi.n	8006638 <_printf_i+0x28>
 800664a:	a101      	add	r1, pc, #4	@ (adr r1, 8006650 <_printf_i+0x40>)
 800664c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006650:	080066a9 	.word	0x080066a9
 8006654:	080066bd 	.word	0x080066bd
 8006658:	08006639 	.word	0x08006639
 800665c:	08006639 	.word	0x08006639
 8006660:	08006639 	.word	0x08006639
 8006664:	08006639 	.word	0x08006639
 8006668:	080066bd 	.word	0x080066bd
 800666c:	08006639 	.word	0x08006639
 8006670:	08006639 	.word	0x08006639
 8006674:	08006639 	.word	0x08006639
 8006678:	08006639 	.word	0x08006639
 800667c:	080067bd 	.word	0x080067bd
 8006680:	080066e7 	.word	0x080066e7
 8006684:	08006777 	.word	0x08006777
 8006688:	08006639 	.word	0x08006639
 800668c:	08006639 	.word	0x08006639
 8006690:	080067df 	.word	0x080067df
 8006694:	08006639 	.word	0x08006639
 8006698:	080066e7 	.word	0x080066e7
 800669c:	08006639 	.word	0x08006639
 80066a0:	08006639 	.word	0x08006639
 80066a4:	0800677f 	.word	0x0800677f
 80066a8:	6833      	ldr	r3, [r6, #0]
 80066aa:	1d1a      	adds	r2, r3, #4
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6032      	str	r2, [r6, #0]
 80066b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066b8:	2301      	movs	r3, #1
 80066ba:	e09d      	b.n	80067f8 <_printf_i+0x1e8>
 80066bc:	6833      	ldr	r3, [r6, #0]
 80066be:	6820      	ldr	r0, [r4, #0]
 80066c0:	1d19      	adds	r1, r3, #4
 80066c2:	6031      	str	r1, [r6, #0]
 80066c4:	0606      	lsls	r6, r0, #24
 80066c6:	d501      	bpl.n	80066cc <_printf_i+0xbc>
 80066c8:	681d      	ldr	r5, [r3, #0]
 80066ca:	e003      	b.n	80066d4 <_printf_i+0xc4>
 80066cc:	0645      	lsls	r5, r0, #25
 80066ce:	d5fb      	bpl.n	80066c8 <_printf_i+0xb8>
 80066d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066d4:	2d00      	cmp	r5, #0
 80066d6:	da03      	bge.n	80066e0 <_printf_i+0xd0>
 80066d8:	232d      	movs	r3, #45	@ 0x2d
 80066da:	426d      	negs	r5, r5
 80066dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066e0:	4859      	ldr	r0, [pc, #356]	@ (8006848 <_printf_i+0x238>)
 80066e2:	230a      	movs	r3, #10
 80066e4:	e011      	b.n	800670a <_printf_i+0xfa>
 80066e6:	6821      	ldr	r1, [r4, #0]
 80066e8:	6833      	ldr	r3, [r6, #0]
 80066ea:	0608      	lsls	r0, r1, #24
 80066ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80066f0:	d402      	bmi.n	80066f8 <_printf_i+0xe8>
 80066f2:	0649      	lsls	r1, r1, #25
 80066f4:	bf48      	it	mi
 80066f6:	b2ad      	uxthmi	r5, r5
 80066f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80066fa:	4853      	ldr	r0, [pc, #332]	@ (8006848 <_printf_i+0x238>)
 80066fc:	6033      	str	r3, [r6, #0]
 80066fe:	bf14      	ite	ne
 8006700:	230a      	movne	r3, #10
 8006702:	2308      	moveq	r3, #8
 8006704:	2100      	movs	r1, #0
 8006706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800670a:	6866      	ldr	r6, [r4, #4]
 800670c:	60a6      	str	r6, [r4, #8]
 800670e:	2e00      	cmp	r6, #0
 8006710:	bfa2      	ittt	ge
 8006712:	6821      	ldrge	r1, [r4, #0]
 8006714:	f021 0104 	bicge.w	r1, r1, #4
 8006718:	6021      	strge	r1, [r4, #0]
 800671a:	b90d      	cbnz	r5, 8006720 <_printf_i+0x110>
 800671c:	2e00      	cmp	r6, #0
 800671e:	d04b      	beq.n	80067b8 <_printf_i+0x1a8>
 8006720:	4616      	mov	r6, r2
 8006722:	fbb5 f1f3 	udiv	r1, r5, r3
 8006726:	fb03 5711 	mls	r7, r3, r1, r5
 800672a:	5dc7      	ldrb	r7, [r0, r7]
 800672c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006730:	462f      	mov	r7, r5
 8006732:	42bb      	cmp	r3, r7
 8006734:	460d      	mov	r5, r1
 8006736:	d9f4      	bls.n	8006722 <_printf_i+0x112>
 8006738:	2b08      	cmp	r3, #8
 800673a:	d10b      	bne.n	8006754 <_printf_i+0x144>
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	07df      	lsls	r7, r3, #31
 8006740:	d508      	bpl.n	8006754 <_printf_i+0x144>
 8006742:	6923      	ldr	r3, [r4, #16]
 8006744:	6861      	ldr	r1, [r4, #4]
 8006746:	4299      	cmp	r1, r3
 8006748:	bfde      	ittt	le
 800674a:	2330      	movle	r3, #48	@ 0x30
 800674c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006750:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006754:	1b92      	subs	r2, r2, r6
 8006756:	6122      	str	r2, [r4, #16]
 8006758:	f8cd a000 	str.w	sl, [sp]
 800675c:	464b      	mov	r3, r9
 800675e:	aa03      	add	r2, sp, #12
 8006760:	4621      	mov	r1, r4
 8006762:	4640      	mov	r0, r8
 8006764:	f7ff fee6 	bl	8006534 <_printf_common>
 8006768:	3001      	adds	r0, #1
 800676a:	d14a      	bne.n	8006802 <_printf_i+0x1f2>
 800676c:	f04f 30ff 	mov.w	r0, #4294967295
 8006770:	b004      	add	sp, #16
 8006772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	f043 0320 	orr.w	r3, r3, #32
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	4833      	ldr	r0, [pc, #204]	@ (800684c <_printf_i+0x23c>)
 8006780:	2778      	movs	r7, #120	@ 0x78
 8006782:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	6831      	ldr	r1, [r6, #0]
 800678a:	061f      	lsls	r7, r3, #24
 800678c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006790:	d402      	bmi.n	8006798 <_printf_i+0x188>
 8006792:	065f      	lsls	r7, r3, #25
 8006794:	bf48      	it	mi
 8006796:	b2ad      	uxthmi	r5, r5
 8006798:	6031      	str	r1, [r6, #0]
 800679a:	07d9      	lsls	r1, r3, #31
 800679c:	bf44      	itt	mi
 800679e:	f043 0320 	orrmi.w	r3, r3, #32
 80067a2:	6023      	strmi	r3, [r4, #0]
 80067a4:	b11d      	cbz	r5, 80067ae <_printf_i+0x19e>
 80067a6:	2310      	movs	r3, #16
 80067a8:	e7ac      	b.n	8006704 <_printf_i+0xf4>
 80067aa:	4827      	ldr	r0, [pc, #156]	@ (8006848 <_printf_i+0x238>)
 80067ac:	e7e9      	b.n	8006782 <_printf_i+0x172>
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	f023 0320 	bic.w	r3, r3, #32
 80067b4:	6023      	str	r3, [r4, #0]
 80067b6:	e7f6      	b.n	80067a6 <_printf_i+0x196>
 80067b8:	4616      	mov	r6, r2
 80067ba:	e7bd      	b.n	8006738 <_printf_i+0x128>
 80067bc:	6833      	ldr	r3, [r6, #0]
 80067be:	6825      	ldr	r5, [r4, #0]
 80067c0:	6961      	ldr	r1, [r4, #20]
 80067c2:	1d18      	adds	r0, r3, #4
 80067c4:	6030      	str	r0, [r6, #0]
 80067c6:	062e      	lsls	r6, r5, #24
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	d501      	bpl.n	80067d0 <_printf_i+0x1c0>
 80067cc:	6019      	str	r1, [r3, #0]
 80067ce:	e002      	b.n	80067d6 <_printf_i+0x1c6>
 80067d0:	0668      	lsls	r0, r5, #25
 80067d2:	d5fb      	bpl.n	80067cc <_printf_i+0x1bc>
 80067d4:	8019      	strh	r1, [r3, #0]
 80067d6:	2300      	movs	r3, #0
 80067d8:	6123      	str	r3, [r4, #16]
 80067da:	4616      	mov	r6, r2
 80067dc:	e7bc      	b.n	8006758 <_printf_i+0x148>
 80067de:	6833      	ldr	r3, [r6, #0]
 80067e0:	1d1a      	adds	r2, r3, #4
 80067e2:	6032      	str	r2, [r6, #0]
 80067e4:	681e      	ldr	r6, [r3, #0]
 80067e6:	6862      	ldr	r2, [r4, #4]
 80067e8:	2100      	movs	r1, #0
 80067ea:	4630      	mov	r0, r6
 80067ec:	f7f9 fd18 	bl	8000220 <memchr>
 80067f0:	b108      	cbz	r0, 80067f6 <_printf_i+0x1e6>
 80067f2:	1b80      	subs	r0, r0, r6
 80067f4:	6060      	str	r0, [r4, #4]
 80067f6:	6863      	ldr	r3, [r4, #4]
 80067f8:	6123      	str	r3, [r4, #16]
 80067fa:	2300      	movs	r3, #0
 80067fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006800:	e7aa      	b.n	8006758 <_printf_i+0x148>
 8006802:	6923      	ldr	r3, [r4, #16]
 8006804:	4632      	mov	r2, r6
 8006806:	4649      	mov	r1, r9
 8006808:	4640      	mov	r0, r8
 800680a:	47d0      	blx	sl
 800680c:	3001      	adds	r0, #1
 800680e:	d0ad      	beq.n	800676c <_printf_i+0x15c>
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	079b      	lsls	r3, r3, #30
 8006814:	d413      	bmi.n	800683e <_printf_i+0x22e>
 8006816:	68e0      	ldr	r0, [r4, #12]
 8006818:	9b03      	ldr	r3, [sp, #12]
 800681a:	4298      	cmp	r0, r3
 800681c:	bfb8      	it	lt
 800681e:	4618      	movlt	r0, r3
 8006820:	e7a6      	b.n	8006770 <_printf_i+0x160>
 8006822:	2301      	movs	r3, #1
 8006824:	4632      	mov	r2, r6
 8006826:	4649      	mov	r1, r9
 8006828:	4640      	mov	r0, r8
 800682a:	47d0      	blx	sl
 800682c:	3001      	adds	r0, #1
 800682e:	d09d      	beq.n	800676c <_printf_i+0x15c>
 8006830:	3501      	adds	r5, #1
 8006832:	68e3      	ldr	r3, [r4, #12]
 8006834:	9903      	ldr	r1, [sp, #12]
 8006836:	1a5b      	subs	r3, r3, r1
 8006838:	42ab      	cmp	r3, r5
 800683a:	dcf2      	bgt.n	8006822 <_printf_i+0x212>
 800683c:	e7eb      	b.n	8006816 <_printf_i+0x206>
 800683e:	2500      	movs	r5, #0
 8006840:	f104 0619 	add.w	r6, r4, #25
 8006844:	e7f5      	b.n	8006832 <_printf_i+0x222>
 8006846:	bf00      	nop
 8006848:	08006fde 	.word	0x08006fde
 800684c:	08006fef 	.word	0x08006fef

08006850 <__sflush_r>:
 8006850:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006858:	0716      	lsls	r6, r2, #28
 800685a:	4605      	mov	r5, r0
 800685c:	460c      	mov	r4, r1
 800685e:	d454      	bmi.n	800690a <__sflush_r+0xba>
 8006860:	684b      	ldr	r3, [r1, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	dc02      	bgt.n	800686c <__sflush_r+0x1c>
 8006866:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	dd48      	ble.n	80068fe <__sflush_r+0xae>
 800686c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800686e:	2e00      	cmp	r6, #0
 8006870:	d045      	beq.n	80068fe <__sflush_r+0xae>
 8006872:	2300      	movs	r3, #0
 8006874:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006878:	682f      	ldr	r7, [r5, #0]
 800687a:	6a21      	ldr	r1, [r4, #32]
 800687c:	602b      	str	r3, [r5, #0]
 800687e:	d030      	beq.n	80068e2 <__sflush_r+0x92>
 8006880:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006882:	89a3      	ldrh	r3, [r4, #12]
 8006884:	0759      	lsls	r1, r3, #29
 8006886:	d505      	bpl.n	8006894 <__sflush_r+0x44>
 8006888:	6863      	ldr	r3, [r4, #4]
 800688a:	1ad2      	subs	r2, r2, r3
 800688c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800688e:	b10b      	cbz	r3, 8006894 <__sflush_r+0x44>
 8006890:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006892:	1ad2      	subs	r2, r2, r3
 8006894:	2300      	movs	r3, #0
 8006896:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006898:	6a21      	ldr	r1, [r4, #32]
 800689a:	4628      	mov	r0, r5
 800689c:	47b0      	blx	r6
 800689e:	1c43      	adds	r3, r0, #1
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	d106      	bne.n	80068b2 <__sflush_r+0x62>
 80068a4:	6829      	ldr	r1, [r5, #0]
 80068a6:	291d      	cmp	r1, #29
 80068a8:	d82b      	bhi.n	8006902 <__sflush_r+0xb2>
 80068aa:	4a2a      	ldr	r2, [pc, #168]	@ (8006954 <__sflush_r+0x104>)
 80068ac:	410a      	asrs	r2, r1
 80068ae:	07d6      	lsls	r6, r2, #31
 80068b0:	d427      	bmi.n	8006902 <__sflush_r+0xb2>
 80068b2:	2200      	movs	r2, #0
 80068b4:	6062      	str	r2, [r4, #4]
 80068b6:	04d9      	lsls	r1, r3, #19
 80068b8:	6922      	ldr	r2, [r4, #16]
 80068ba:	6022      	str	r2, [r4, #0]
 80068bc:	d504      	bpl.n	80068c8 <__sflush_r+0x78>
 80068be:	1c42      	adds	r2, r0, #1
 80068c0:	d101      	bne.n	80068c6 <__sflush_r+0x76>
 80068c2:	682b      	ldr	r3, [r5, #0]
 80068c4:	b903      	cbnz	r3, 80068c8 <__sflush_r+0x78>
 80068c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80068c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068ca:	602f      	str	r7, [r5, #0]
 80068cc:	b1b9      	cbz	r1, 80068fe <__sflush_r+0xae>
 80068ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068d2:	4299      	cmp	r1, r3
 80068d4:	d002      	beq.n	80068dc <__sflush_r+0x8c>
 80068d6:	4628      	mov	r0, r5
 80068d8:	f7ff fbf2 	bl	80060c0 <_free_r>
 80068dc:	2300      	movs	r3, #0
 80068de:	6363      	str	r3, [r4, #52]	@ 0x34
 80068e0:	e00d      	b.n	80068fe <__sflush_r+0xae>
 80068e2:	2301      	movs	r3, #1
 80068e4:	4628      	mov	r0, r5
 80068e6:	47b0      	blx	r6
 80068e8:	4602      	mov	r2, r0
 80068ea:	1c50      	adds	r0, r2, #1
 80068ec:	d1c9      	bne.n	8006882 <__sflush_r+0x32>
 80068ee:	682b      	ldr	r3, [r5, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0c6      	beq.n	8006882 <__sflush_r+0x32>
 80068f4:	2b1d      	cmp	r3, #29
 80068f6:	d001      	beq.n	80068fc <__sflush_r+0xac>
 80068f8:	2b16      	cmp	r3, #22
 80068fa:	d11e      	bne.n	800693a <__sflush_r+0xea>
 80068fc:	602f      	str	r7, [r5, #0]
 80068fe:	2000      	movs	r0, #0
 8006900:	e022      	b.n	8006948 <__sflush_r+0xf8>
 8006902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006906:	b21b      	sxth	r3, r3
 8006908:	e01b      	b.n	8006942 <__sflush_r+0xf2>
 800690a:	690f      	ldr	r7, [r1, #16]
 800690c:	2f00      	cmp	r7, #0
 800690e:	d0f6      	beq.n	80068fe <__sflush_r+0xae>
 8006910:	0793      	lsls	r3, r2, #30
 8006912:	680e      	ldr	r6, [r1, #0]
 8006914:	bf08      	it	eq
 8006916:	694b      	ldreq	r3, [r1, #20]
 8006918:	600f      	str	r7, [r1, #0]
 800691a:	bf18      	it	ne
 800691c:	2300      	movne	r3, #0
 800691e:	eba6 0807 	sub.w	r8, r6, r7
 8006922:	608b      	str	r3, [r1, #8]
 8006924:	f1b8 0f00 	cmp.w	r8, #0
 8006928:	dde9      	ble.n	80068fe <__sflush_r+0xae>
 800692a:	6a21      	ldr	r1, [r4, #32]
 800692c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800692e:	4643      	mov	r3, r8
 8006930:	463a      	mov	r2, r7
 8006932:	4628      	mov	r0, r5
 8006934:	47b0      	blx	r6
 8006936:	2800      	cmp	r0, #0
 8006938:	dc08      	bgt.n	800694c <__sflush_r+0xfc>
 800693a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800693e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006942:	81a3      	strh	r3, [r4, #12]
 8006944:	f04f 30ff 	mov.w	r0, #4294967295
 8006948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800694c:	4407      	add	r7, r0
 800694e:	eba8 0800 	sub.w	r8, r8, r0
 8006952:	e7e7      	b.n	8006924 <__sflush_r+0xd4>
 8006954:	dfbffffe 	.word	0xdfbffffe

08006958 <_fflush_r>:
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	690b      	ldr	r3, [r1, #16]
 800695c:	4605      	mov	r5, r0
 800695e:	460c      	mov	r4, r1
 8006960:	b913      	cbnz	r3, 8006968 <_fflush_r+0x10>
 8006962:	2500      	movs	r5, #0
 8006964:	4628      	mov	r0, r5
 8006966:	bd38      	pop	{r3, r4, r5, pc}
 8006968:	b118      	cbz	r0, 8006972 <_fflush_r+0x1a>
 800696a:	6a03      	ldr	r3, [r0, #32]
 800696c:	b90b      	cbnz	r3, 8006972 <_fflush_r+0x1a>
 800696e:	f7ff fa8d 	bl	8005e8c <__sinit>
 8006972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0f3      	beq.n	8006962 <_fflush_r+0xa>
 800697a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800697c:	07d0      	lsls	r0, r2, #31
 800697e:	d404      	bmi.n	800698a <_fflush_r+0x32>
 8006980:	0599      	lsls	r1, r3, #22
 8006982:	d402      	bmi.n	800698a <_fflush_r+0x32>
 8006984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006986:	f7ff fb98 	bl	80060ba <__retarget_lock_acquire_recursive>
 800698a:	4628      	mov	r0, r5
 800698c:	4621      	mov	r1, r4
 800698e:	f7ff ff5f 	bl	8006850 <__sflush_r>
 8006992:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006994:	07da      	lsls	r2, r3, #31
 8006996:	4605      	mov	r5, r0
 8006998:	d4e4      	bmi.n	8006964 <_fflush_r+0xc>
 800699a:	89a3      	ldrh	r3, [r4, #12]
 800699c:	059b      	lsls	r3, r3, #22
 800699e:	d4e1      	bmi.n	8006964 <_fflush_r+0xc>
 80069a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069a2:	f7ff fb8b 	bl	80060bc <__retarget_lock_release_recursive>
 80069a6:	e7dd      	b.n	8006964 <_fflush_r+0xc>

080069a8 <__swbuf_r>:
 80069a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069aa:	460e      	mov	r6, r1
 80069ac:	4614      	mov	r4, r2
 80069ae:	4605      	mov	r5, r0
 80069b0:	b118      	cbz	r0, 80069ba <__swbuf_r+0x12>
 80069b2:	6a03      	ldr	r3, [r0, #32]
 80069b4:	b90b      	cbnz	r3, 80069ba <__swbuf_r+0x12>
 80069b6:	f7ff fa69 	bl	8005e8c <__sinit>
 80069ba:	69a3      	ldr	r3, [r4, #24]
 80069bc:	60a3      	str	r3, [r4, #8]
 80069be:	89a3      	ldrh	r3, [r4, #12]
 80069c0:	071a      	lsls	r2, r3, #28
 80069c2:	d501      	bpl.n	80069c8 <__swbuf_r+0x20>
 80069c4:	6923      	ldr	r3, [r4, #16]
 80069c6:	b943      	cbnz	r3, 80069da <__swbuf_r+0x32>
 80069c8:	4621      	mov	r1, r4
 80069ca:	4628      	mov	r0, r5
 80069cc:	f000 f82a 	bl	8006a24 <__swsetup_r>
 80069d0:	b118      	cbz	r0, 80069da <__swbuf_r+0x32>
 80069d2:	f04f 37ff 	mov.w	r7, #4294967295
 80069d6:	4638      	mov	r0, r7
 80069d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	6922      	ldr	r2, [r4, #16]
 80069de:	1a98      	subs	r0, r3, r2
 80069e0:	6963      	ldr	r3, [r4, #20]
 80069e2:	b2f6      	uxtb	r6, r6
 80069e4:	4283      	cmp	r3, r0
 80069e6:	4637      	mov	r7, r6
 80069e8:	dc05      	bgt.n	80069f6 <__swbuf_r+0x4e>
 80069ea:	4621      	mov	r1, r4
 80069ec:	4628      	mov	r0, r5
 80069ee:	f7ff ffb3 	bl	8006958 <_fflush_r>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d1ed      	bne.n	80069d2 <__swbuf_r+0x2a>
 80069f6:	68a3      	ldr	r3, [r4, #8]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	60a3      	str	r3, [r4, #8]
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	6022      	str	r2, [r4, #0]
 8006a02:	701e      	strb	r6, [r3, #0]
 8006a04:	6962      	ldr	r2, [r4, #20]
 8006a06:	1c43      	adds	r3, r0, #1
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d004      	beq.n	8006a16 <__swbuf_r+0x6e>
 8006a0c:	89a3      	ldrh	r3, [r4, #12]
 8006a0e:	07db      	lsls	r3, r3, #31
 8006a10:	d5e1      	bpl.n	80069d6 <__swbuf_r+0x2e>
 8006a12:	2e0a      	cmp	r6, #10
 8006a14:	d1df      	bne.n	80069d6 <__swbuf_r+0x2e>
 8006a16:	4621      	mov	r1, r4
 8006a18:	4628      	mov	r0, r5
 8006a1a:	f7ff ff9d 	bl	8006958 <_fflush_r>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	d0d9      	beq.n	80069d6 <__swbuf_r+0x2e>
 8006a22:	e7d6      	b.n	80069d2 <__swbuf_r+0x2a>

08006a24 <__swsetup_r>:
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	4b29      	ldr	r3, [pc, #164]	@ (8006acc <__swsetup_r+0xa8>)
 8006a28:	4605      	mov	r5, r0
 8006a2a:	6818      	ldr	r0, [r3, #0]
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	b118      	cbz	r0, 8006a38 <__swsetup_r+0x14>
 8006a30:	6a03      	ldr	r3, [r0, #32]
 8006a32:	b90b      	cbnz	r3, 8006a38 <__swsetup_r+0x14>
 8006a34:	f7ff fa2a 	bl	8005e8c <__sinit>
 8006a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a3c:	0719      	lsls	r1, r3, #28
 8006a3e:	d422      	bmi.n	8006a86 <__swsetup_r+0x62>
 8006a40:	06da      	lsls	r2, r3, #27
 8006a42:	d407      	bmi.n	8006a54 <__swsetup_r+0x30>
 8006a44:	2209      	movs	r2, #9
 8006a46:	602a      	str	r2, [r5, #0]
 8006a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a4c:	81a3      	strh	r3, [r4, #12]
 8006a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a52:	e033      	b.n	8006abc <__swsetup_r+0x98>
 8006a54:	0758      	lsls	r0, r3, #29
 8006a56:	d512      	bpl.n	8006a7e <__swsetup_r+0x5a>
 8006a58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a5a:	b141      	cbz	r1, 8006a6e <__swsetup_r+0x4a>
 8006a5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a60:	4299      	cmp	r1, r3
 8006a62:	d002      	beq.n	8006a6a <__swsetup_r+0x46>
 8006a64:	4628      	mov	r0, r5
 8006a66:	f7ff fb2b 	bl	80060c0 <_free_r>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a6e:	89a3      	ldrh	r3, [r4, #12]
 8006a70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a74:	81a3      	strh	r3, [r4, #12]
 8006a76:	2300      	movs	r3, #0
 8006a78:	6063      	str	r3, [r4, #4]
 8006a7a:	6923      	ldr	r3, [r4, #16]
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
 8006a80:	f043 0308 	orr.w	r3, r3, #8
 8006a84:	81a3      	strh	r3, [r4, #12]
 8006a86:	6923      	ldr	r3, [r4, #16]
 8006a88:	b94b      	cbnz	r3, 8006a9e <__swsetup_r+0x7a>
 8006a8a:	89a3      	ldrh	r3, [r4, #12]
 8006a8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a94:	d003      	beq.n	8006a9e <__swsetup_r+0x7a>
 8006a96:	4621      	mov	r1, r4
 8006a98:	4628      	mov	r0, r5
 8006a9a:	f000 f84f 	bl	8006b3c <__smakebuf_r>
 8006a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aa2:	f013 0201 	ands.w	r2, r3, #1
 8006aa6:	d00a      	beq.n	8006abe <__swsetup_r+0x9a>
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	60a2      	str	r2, [r4, #8]
 8006aac:	6962      	ldr	r2, [r4, #20]
 8006aae:	4252      	negs	r2, r2
 8006ab0:	61a2      	str	r2, [r4, #24]
 8006ab2:	6922      	ldr	r2, [r4, #16]
 8006ab4:	b942      	cbnz	r2, 8006ac8 <__swsetup_r+0xa4>
 8006ab6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006aba:	d1c5      	bne.n	8006a48 <__swsetup_r+0x24>
 8006abc:	bd38      	pop	{r3, r4, r5, pc}
 8006abe:	0799      	lsls	r1, r3, #30
 8006ac0:	bf58      	it	pl
 8006ac2:	6962      	ldrpl	r2, [r4, #20]
 8006ac4:	60a2      	str	r2, [r4, #8]
 8006ac6:	e7f4      	b.n	8006ab2 <__swsetup_r+0x8e>
 8006ac8:	2000      	movs	r0, #0
 8006aca:	e7f7      	b.n	8006abc <__swsetup_r+0x98>
 8006acc:	20000030 	.word	0x20000030

08006ad0 <_sbrk_r>:
 8006ad0:	b538      	push	{r3, r4, r5, lr}
 8006ad2:	4d06      	ldr	r5, [pc, #24]	@ (8006aec <_sbrk_r+0x1c>)
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	4608      	mov	r0, r1
 8006ada:	602b      	str	r3, [r5, #0]
 8006adc:	f7fa fa6e 	bl	8000fbc <_sbrk>
 8006ae0:	1c43      	adds	r3, r0, #1
 8006ae2:	d102      	bne.n	8006aea <_sbrk_r+0x1a>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	b103      	cbz	r3, 8006aea <_sbrk_r+0x1a>
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	bd38      	pop	{r3, r4, r5, pc}
 8006aec:	200003a0 	.word	0x200003a0

08006af0 <__swhatbuf_r>:
 8006af0:	b570      	push	{r4, r5, r6, lr}
 8006af2:	460c      	mov	r4, r1
 8006af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af8:	2900      	cmp	r1, #0
 8006afa:	b096      	sub	sp, #88	@ 0x58
 8006afc:	4615      	mov	r5, r2
 8006afe:	461e      	mov	r6, r3
 8006b00:	da0d      	bge.n	8006b1e <__swhatbuf_r+0x2e>
 8006b02:	89a3      	ldrh	r3, [r4, #12]
 8006b04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b08:	f04f 0100 	mov.w	r1, #0
 8006b0c:	bf14      	ite	ne
 8006b0e:	2340      	movne	r3, #64	@ 0x40
 8006b10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b14:	2000      	movs	r0, #0
 8006b16:	6031      	str	r1, [r6, #0]
 8006b18:	602b      	str	r3, [r5, #0]
 8006b1a:	b016      	add	sp, #88	@ 0x58
 8006b1c:	bd70      	pop	{r4, r5, r6, pc}
 8006b1e:	466a      	mov	r2, sp
 8006b20:	f000 f848 	bl	8006bb4 <_fstat_r>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	dbec      	blt.n	8006b02 <__swhatbuf_r+0x12>
 8006b28:	9901      	ldr	r1, [sp, #4]
 8006b2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b32:	4259      	negs	r1, r3
 8006b34:	4159      	adcs	r1, r3
 8006b36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b3a:	e7eb      	b.n	8006b14 <__swhatbuf_r+0x24>

08006b3c <__smakebuf_r>:
 8006b3c:	898b      	ldrh	r3, [r1, #12]
 8006b3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b40:	079d      	lsls	r5, r3, #30
 8006b42:	4606      	mov	r6, r0
 8006b44:	460c      	mov	r4, r1
 8006b46:	d507      	bpl.n	8006b58 <__smakebuf_r+0x1c>
 8006b48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b4c:	6023      	str	r3, [r4, #0]
 8006b4e:	6123      	str	r3, [r4, #16]
 8006b50:	2301      	movs	r3, #1
 8006b52:	6163      	str	r3, [r4, #20]
 8006b54:	b003      	add	sp, #12
 8006b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b58:	ab01      	add	r3, sp, #4
 8006b5a:	466a      	mov	r2, sp
 8006b5c:	f7ff ffc8 	bl	8006af0 <__swhatbuf_r>
 8006b60:	9f00      	ldr	r7, [sp, #0]
 8006b62:	4605      	mov	r5, r0
 8006b64:	4639      	mov	r1, r7
 8006b66:	4630      	mov	r0, r6
 8006b68:	f7ff fb16 	bl	8006198 <_malloc_r>
 8006b6c:	b948      	cbnz	r0, 8006b82 <__smakebuf_r+0x46>
 8006b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b72:	059a      	lsls	r2, r3, #22
 8006b74:	d4ee      	bmi.n	8006b54 <__smakebuf_r+0x18>
 8006b76:	f023 0303 	bic.w	r3, r3, #3
 8006b7a:	f043 0302 	orr.w	r3, r3, #2
 8006b7e:	81a3      	strh	r3, [r4, #12]
 8006b80:	e7e2      	b.n	8006b48 <__smakebuf_r+0xc>
 8006b82:	89a3      	ldrh	r3, [r4, #12]
 8006b84:	6020      	str	r0, [r4, #0]
 8006b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b8a:	81a3      	strh	r3, [r4, #12]
 8006b8c:	9b01      	ldr	r3, [sp, #4]
 8006b8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006b92:	b15b      	cbz	r3, 8006bac <__smakebuf_r+0x70>
 8006b94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b98:	4630      	mov	r0, r6
 8006b9a:	f000 f81d 	bl	8006bd8 <_isatty_r>
 8006b9e:	b128      	cbz	r0, 8006bac <__smakebuf_r+0x70>
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	f023 0303 	bic.w	r3, r3, #3
 8006ba6:	f043 0301 	orr.w	r3, r3, #1
 8006baa:	81a3      	strh	r3, [r4, #12]
 8006bac:	89a3      	ldrh	r3, [r4, #12]
 8006bae:	431d      	orrs	r5, r3
 8006bb0:	81a5      	strh	r5, [r4, #12]
 8006bb2:	e7cf      	b.n	8006b54 <__smakebuf_r+0x18>

08006bb4 <_fstat_r>:
 8006bb4:	b538      	push	{r3, r4, r5, lr}
 8006bb6:	4d07      	ldr	r5, [pc, #28]	@ (8006bd4 <_fstat_r+0x20>)
 8006bb8:	2300      	movs	r3, #0
 8006bba:	4604      	mov	r4, r0
 8006bbc:	4608      	mov	r0, r1
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	602b      	str	r3, [r5, #0]
 8006bc2:	f7fa f9d3 	bl	8000f6c <_fstat>
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	d102      	bne.n	8006bd0 <_fstat_r+0x1c>
 8006bca:	682b      	ldr	r3, [r5, #0]
 8006bcc:	b103      	cbz	r3, 8006bd0 <_fstat_r+0x1c>
 8006bce:	6023      	str	r3, [r4, #0]
 8006bd0:	bd38      	pop	{r3, r4, r5, pc}
 8006bd2:	bf00      	nop
 8006bd4:	200003a0 	.word	0x200003a0

08006bd8 <_isatty_r>:
 8006bd8:	b538      	push	{r3, r4, r5, lr}
 8006bda:	4d06      	ldr	r5, [pc, #24]	@ (8006bf4 <_isatty_r+0x1c>)
 8006bdc:	2300      	movs	r3, #0
 8006bde:	4604      	mov	r4, r0
 8006be0:	4608      	mov	r0, r1
 8006be2:	602b      	str	r3, [r5, #0]
 8006be4:	f7fa f9d2 	bl	8000f8c <_isatty>
 8006be8:	1c43      	adds	r3, r0, #1
 8006bea:	d102      	bne.n	8006bf2 <_isatty_r+0x1a>
 8006bec:	682b      	ldr	r3, [r5, #0]
 8006bee:	b103      	cbz	r3, 8006bf2 <_isatty_r+0x1a>
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	bd38      	pop	{r3, r4, r5, pc}
 8006bf4:	200003a0 	.word	0x200003a0

08006bf8 <_init>:
 8006bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfa:	bf00      	nop
 8006bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfe:	bc08      	pop	{r3}
 8006c00:	469e      	mov	lr, r3
 8006c02:	4770      	bx	lr

08006c04 <_fini>:
 8006c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c06:	bf00      	nop
 8006c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0a:	bc08      	pop	{r3}
 8006c0c:	469e      	mov	lr, r3
 8006c0e:	4770      	bx	lr
