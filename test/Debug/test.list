
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082e0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  080084c0  080084c0  000094c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800888c  0800888c  0000a080  2**0
                  CONTENTS
  4 .ARM          00000008  0800888c  0800888c  0000988c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008894  08008894  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008894  08008894  00009894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008898  08008898  00009898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800889c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  20000080  0800891c  0000a080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  0800891c  0000a494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197af  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035d3  00000000  00000000  0002385f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  00026e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001123  00000000  00000000  00028438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002152f  00000000  00000000  0002955b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c762  00000000  00000000  0004aa8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdddb  00000000  00000000  000671ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134fc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064a0  00000000  00000000  0013500c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0013b4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	080084a8 	.word	0x080084a8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	080084a8 	.word	0x080084a8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	@ 0x28
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	4b21      	ldr	r3, [pc, #132]	@ (800064c <MX_GPIO_Init+0x9c>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ca:	4a20      	ldr	r2, [pc, #128]	@ (800064c <MX_GPIO_Init+0x9c>)
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d2:	4b1e      	ldr	r3, [pc, #120]	@ (800064c <MX_GPIO_Init+0x9c>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d6:	f003 0304 	and.w	r3, r3, #4
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005de:	4b1b      	ldr	r3, [pc, #108]	@ (800064c <MX_GPIO_Init+0x9c>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e2:	4a1a      	ldr	r2, [pc, #104]	@ (800064c <MX_GPIO_Init+0x9c>)
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ea:	4b18      	ldr	r3, [pc, #96]	@ (800064c <MX_GPIO_Init+0x9c>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ee:	f003 0320 	and.w	r3, r3, #32
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b15      	ldr	r3, [pc, #84]	@ (800064c <MX_GPIO_Init+0x9c>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fa:	4a14      	ldr	r2, [pc, #80]	@ (800064c <MX_GPIO_Init+0x9c>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000602:	4b12      	ldr	r3, [pc, #72]	@ (800064c <MX_GPIO_Init+0x9c>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <MX_GPIO_Init+0x9c>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000612:	4a0e      	ldr	r2, [pc, #56]	@ (800064c <MX_GPIO_Init+0x9c>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800061a:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <MX_GPIO_Init+0x9c>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : encoder_Pin */
  GPIO_InitStruct.Pin = encoder_Pin;
 8000626:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800062a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800062c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(encoder_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4619      	mov	r1, r3
 800063c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000640:	f001 fd80 	bl	8002144 <HAL_GPIO_Init>

}
 8000644:	bf00      	nop
 8000646:	3728      	adds	r7, #40	@ 0x28
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40021000 	.word	0x40021000

08000650 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000654:	4b1b      	ldr	r3, [pc, #108]	@ (80006c4 <MX_I2C1_Init+0x74>)
 8000656:	4a1c      	ldr	r2, [pc, #112]	@ (80006c8 <MX_I2C1_Init+0x78>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 800065a:	4b1a      	ldr	r3, [pc, #104]	@ (80006c4 <MX_I2C1_Init+0x74>)
 800065c:	4a1b      	ldr	r2, [pc, #108]	@ (80006cc <MX_I2C1_Init+0x7c>)
 800065e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000660:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <MX_I2C1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000666:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <MX_I2C1_Init+0x74>)
 8000668:	2201      	movs	r2, #1
 800066a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066c:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <MX_I2C1_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000672:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <MX_I2C1_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000678:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <MX_I2C1_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_I2C1_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000684:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800068a:	480e      	ldr	r0, [pc, #56]	@ (80006c4 <MX_I2C1_Init+0x74>)
 800068c:	f001 ff0e 	bl	80024ac <HAL_I2C_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000696:	f000 fc83 	bl	8000fa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800069a:	2100      	movs	r1, #0
 800069c:	4809      	ldr	r0, [pc, #36]	@ (80006c4 <MX_I2C1_Init+0x74>)
 800069e:	f002 fc91 	bl	8002fc4 <HAL_I2CEx_ConfigAnalogFilter>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a8:	f000 fc7a 	bl	8000fa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006ac:	2100      	movs	r1, #0
 80006ae:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <MX_I2C1_Init+0x74>)
 80006b0:	f002 fcd3 	bl	800305a <HAL_I2CEx_ConfigDigitalFilter>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ba:	f000 fc71 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000009c 	.word	0x2000009c
 80006c8:	40005400 	.word	0x40005400
 80006cc:	40b285c2 	.word	0x40b285c2

080006d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09a      	sub	sp, #104	@ 0x68
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	2244      	movs	r2, #68	@ 0x44
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f007 f8ae 	bl	8007852 <memset>
  if(i2cHandle->Instance==I2C1)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a1f      	ldr	r2, [pc, #124]	@ (8000778 <HAL_I2C_MspInit+0xa8>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d136      	bne.n	800076e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000700:	2340      	movs	r3, #64	@ 0x40
 8000702:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000704:	2300      	movs	r3, #0
 8000706:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000708:	f107 0310 	add.w	r3, r7, #16
 800070c:	4618      	mov	r0, r3
 800070e:	f003 fad3 	bl	8003cb8 <HAL_RCCEx_PeriphCLKConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000718:	f000 fc42 	bl	8000fa0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071c:	4b17      	ldr	r3, [pc, #92]	@ (800077c <HAL_I2C_MspInit+0xac>)
 800071e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000720:	4a16      	ldr	r2, [pc, #88]	@ (800077c <HAL_I2C_MspInit+0xac>)
 8000722:	f043 0302 	orr.w	r3, r3, #2
 8000726:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <HAL_I2C_MspInit+0xac>)
 800072a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072c:	f003 0302 	and.w	r3, r3, #2
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000734:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000738:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800073a:	2312      	movs	r3, #18
 800073c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2300      	movs	r3, #0
 8000744:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000746:	2304      	movs	r3, #4
 8000748:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800074e:	4619      	mov	r1, r3
 8000750:	480b      	ldr	r0, [pc, #44]	@ (8000780 <HAL_I2C_MspInit+0xb0>)
 8000752:	f001 fcf7 	bl	8002144 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <HAL_I2C_MspInit+0xac>)
 8000758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800075a:	4a08      	ldr	r2, [pc, #32]	@ (800077c <HAL_I2C_MspInit+0xac>)
 800075c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000760:	6593      	str	r3, [r2, #88]	@ 0x58
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <HAL_I2C_MspInit+0xac>)
 8000764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000766:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800076e:	bf00      	nop
 8000770:	3768      	adds	r7, #104	@ 0x68
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40005400 	.word	0x40005400
 800077c:	40021000 	.word	0x40021000
 8000780:	48000400 	.word	0x48000400

08000784 <imu_write_register>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Write to an IMU register
void imu_write_register(uint8_t reg, uint8_t value) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af04      	add	r7, sp, #16
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 1000);
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	b29a      	uxth	r2, r3
 8000798:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800079c:	9302      	str	r3, [sp, #8]
 800079e:	2301      	movs	r3, #1
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	1dbb      	adds	r3, r7, #6
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2301      	movs	r3, #1
 80007a8:	21d4      	movs	r1, #212	@ 0xd4
 80007aa:	4803      	ldr	r0, [pc, #12]	@ (80007b8 <imu_write_register+0x34>)
 80007ac:	f001 ff1a 	bl	80025e4 <HAL_I2C_Mem_Write>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	2000009c 	.word	0x2000009c

080007bc <imu_read_registers>:

// Read from IMU registers
void imu_read_registers(uint8_t reg, uint8_t *data, uint16_t len) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af04      	add	r7, sp, #16
 80007c2:	4603      	mov	r3, r0
 80007c4:	6039      	str	r1, [r7, #0]
 80007c6:	71fb      	strb	r3, [r7, #7]
 80007c8:	4613      	mov	r3, r2
 80007ca:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, len, 1000);
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007d4:	9302      	str	r3, [sp, #8]
 80007d6:	88bb      	ldrh	r3, [r7, #4]
 80007d8:	9301      	str	r3, [sp, #4]
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2301      	movs	r3, #1
 80007e0:	21d4      	movs	r1, #212	@ 0xd4
 80007e2:	4803      	ldr	r0, [pc, #12]	@ (80007f0 <imu_read_registers+0x34>)
 80007e4:	f002 f812 	bl	800280c <HAL_I2C_Mem_Read>
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2000009c 	.word	0x2000009c

080007f4 <imu_init>:

// Initialize the IMU
void imu_init(void) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
    uint8_t whoami;
    imu_read_registers(0x0F, &whoami, 1);  // Read WHO_AM_I register
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	2201      	movs	r2, #1
 80007fe:	4619      	mov	r1, r3
 8000800:	200f      	movs	r0, #15
 8000802:	f7ff ffdb 	bl	80007bc <imu_read_registers>
    if (whoami != WHO_AM_I_VALUE) {
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b6c      	cmp	r3, #108	@ 0x6c
 800080a:	d006      	beq.n	800081a <imu_init+0x26>
        printf("IMU not found: 0x%02X\n\r", whoami);
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	4619      	mov	r1, r3
 8000810:	480a      	ldr	r0, [pc, #40]	@ (800083c <imu_init+0x48>)
 8000812:	f006 ffc9 	bl	80077a8 <iprintf>
        while (1);  // Hang if IMU not detected
 8000816:	bf00      	nop
 8000818:	e7fd      	b.n	8000816 <imu_init+0x22>
    }
    imu_write_register(0x12, 0x40);  // CTRL3_C: Enable Block Data Update (BDU)
 800081a:	2140      	movs	r1, #64	@ 0x40
 800081c:	2012      	movs	r0, #18
 800081e:	f7ff ffb1 	bl	8000784 <imu_write_register>
    imu_write_register(0x10, 0x64);  // CTRL1_XL: 104 Hz, ±8g (was 0x60 for ±2g)
 8000822:	2164      	movs	r1, #100	@ 0x64
 8000824:	2010      	movs	r0, #16
 8000826:	f7ff ffad 	bl	8000784 <imu_write_register>
    imu_write_register(0x11, 0x64);  // CTRL2_G: 104 Hz, ±500 dps (was 0x6C for ±2000 dps)
 800082a:	2164      	movs	r1, #100	@ 0x64
 800082c:	2011      	movs	r0, #17
 800082e:	f7ff ffa9 	bl	8000784 <imu_write_register>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	080084c0 	.word	0x080084c0

08000840 <imu_read_accel>:

// Read accelerometer data
void imu_read_accel(imu_data_t *accel) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
    uint8_t buffer[6];
    imu_read_registers(0x28, buffer, 6);  // OUTX_L_XL to OUTZ_H_XL
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	2206      	movs	r2, #6
 800084e:	4619      	mov	r1, r3
 8000850:	2028      	movs	r0, #40	@ 0x28
 8000852:	f7ff ffb3 	bl	80007bc <imu_read_registers>
    accel->x = (int16_t)(buffer[0] | (buffer[1] << 8));
 8000856:	7a3b      	ldrb	r3, [r7, #8]
 8000858:	b21a      	sxth	r2, r3
 800085a:	7a7b      	ldrb	r3, [r7, #9]
 800085c:	021b      	lsls	r3, r3, #8
 800085e:	b21b      	sxth	r3, r3
 8000860:	4313      	orrs	r3, r2
 8000862:	b21a      	sxth	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	801a      	strh	r2, [r3, #0]
    accel->y = (int16_t)(buffer[2] | (buffer[3] << 8));
 8000868:	7abb      	ldrb	r3, [r7, #10]
 800086a:	b21a      	sxth	r2, r3
 800086c:	7afb      	ldrb	r3, [r7, #11]
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	b21b      	sxth	r3, r3
 8000872:	4313      	orrs	r3, r2
 8000874:	b21a      	sxth	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	805a      	strh	r2, [r3, #2]
    accel->z = (int16_t)(buffer[4] | (buffer[5] << 8));
 800087a:	7b3b      	ldrb	r3, [r7, #12]
 800087c:	b21a      	sxth	r2, r3
 800087e:	7b7b      	ldrb	r3, [r7, #13]
 8000880:	021b      	lsls	r3, r3, #8
 8000882:	b21b      	sxth	r3, r3
 8000884:	4313      	orrs	r3, r2
 8000886:	b21a      	sxth	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	809a      	strh	r2, [r3, #4]
}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <imu_read_gyro>:

// Read gyroscope data
void imu_read_gyro(imu_data_t *gyro) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[6];
    imu_read_registers(0x22, buffer, 6);  // OUTX_L_G to OUTZ_H_G
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	2206      	movs	r2, #6
 80008a2:	4619      	mov	r1, r3
 80008a4:	2022      	movs	r0, #34	@ 0x22
 80008a6:	f7ff ff89 	bl	80007bc <imu_read_registers>
    gyro->x = (int16_t)(buffer[0] | (buffer[1] << 8));
 80008aa:	7a3b      	ldrb	r3, [r7, #8]
 80008ac:	b21a      	sxth	r2, r3
 80008ae:	7a7b      	ldrb	r3, [r7, #9]
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	4313      	orrs	r3, r2
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	801a      	strh	r2, [r3, #0]
    gyro->y = (int16_t)(buffer[2] | (buffer[3] << 8));
 80008bc:	7abb      	ldrb	r3, [r7, #10]
 80008be:	b21a      	sxth	r2, r3
 80008c0:	7afb      	ldrb	r3, [r7, #11]
 80008c2:	021b      	lsls	r3, r3, #8
 80008c4:	b21b      	sxth	r3, r3
 80008c6:	4313      	orrs	r3, r2
 80008c8:	b21a      	sxth	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	805a      	strh	r2, [r3, #2]
    gyro->z = (int16_t)(buffer[4] | (buffer[5] << 8));
 80008ce:	7b3b      	ldrb	r3, [r7, #12]
 80008d0:	b21a      	sxth	r2, r3
 80008d2:	7b7b      	ldrb	r3, [r7, #13]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	4313      	orrs	r3, r2
 80008da:	b21a      	sxth	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	809a      	strh	r2, [r3, #4]
}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <parseMessage>:
// UART parsing message
// there was a problem with first char so I change ptr++ to ptr += 2
// and Python code sends two [[ but here it sees only one
// weird but it works like that

void parseMessage(char* msg) {
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b08b      	sub	sp, #44	@ 0x2c
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	6078      	str	r0, [r7, #4]
  if (!msg) {
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d103      	bne.n	80008fe <parseMessage+0x16>
      printf("Error: Null message pointer\n\r");
 80008f6:	4886      	ldr	r0, [pc, #536]	@ (8000b10 <parseMessage+0x228>)
 80008f8:	f006 ff56 	bl	80077a8 <iprintf>
      return;
 80008fc:	e105      	b.n	8000b0a <parseMessage+0x222>
  }

  printf("Original message: %s\n\r", msg);  // Debug original message
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	4884      	ldr	r0, [pc, #528]	@ (8000b14 <parseMessage+0x22c>)
 8000902:	f006 ff51 	bl	80077a8 <iprintf>
  char* ptr = msg;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	61fb      	str	r3, [r7, #28]
  

  // First, let's check and skip the opening bracket
  if (*ptr == '[') {
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b5b      	cmp	r3, #91	@ 0x5b
 8000910:	d107      	bne.n	8000922 <parseMessage+0x3a>
      // ptr++;
      ptr += 2;
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3302      	adds	r3, #2
 8000916:	61fb      	str	r3, [r7, #28]
      printf("After bracket check, ptr points to: %s\n\r", ptr);
 8000918:	69f9      	ldr	r1, [r7, #28]
 800091a:	487f      	ldr	r0, [pc, #508]	@ (8000b18 <parseMessage+0x230>)
 800091c:	f006 ff44 	bl	80077a8 <iprintf>
 8000920:	e0d0      	b.n	8000ac4 <parseMessage+0x1dc>
  } else {
      printf("Error: Message doesn't start with [\n\r");
 8000922:	487e      	ldr	r0, [pc, #504]	@ (8000b1c <parseMessage+0x234>)
 8000924:	f006 ff40 	bl	80077a8 <iprintf>
      // ptr++;
      ptr += 2;
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	3302      	adds	r3, #2
 800092c:	61fb      	str	r3, [r7, #28]
  }
  
  // Parse all fields in sequence
  while (*ptr != ']' && *ptr != '\0') {
 800092e:	e0c9      	b.n	8000ac4 <parseMessage+0x1dc>
      printf("Current parsing position: '%s'\n\r", ptr);  // Show exactly what we're looking at
 8000930:	69f9      	ldr	r1, [r7, #28]
 8000932:	487b      	ldr	r0, [pc, #492]	@ (8000b20 <parseMessage+0x238>)
 8000934:	f006 ff38 	bl	80077a8 <iprintf>
      
      // Print the first few characters for debugging
      printf("Next 3 chars: '%c%c%c'\n\r", ptr[0], ptr[1], ptr[2]);
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3301      	adds	r3, #1
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3302      	adds	r3, #2
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4875      	ldr	r0, [pc, #468]	@ (8000b24 <parseMessage+0x23c>)
 800094e:	f006 ff2b 	bl	80077a8 <iprintf>
      
      if (strncmp(ptr, "S:", 2) == 0) {
 8000952:	2202      	movs	r2, #2
 8000954:	4974      	ldr	r1, [pc, #464]	@ (8000b28 <parseMessage+0x240>)
 8000956:	69f8      	ldr	r0, [r7, #28]
 8000958:	f006 ff83 	bl	8007862 <strncmp>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d116      	bne.n	8000990 <parseMessage+0xa8>
          ptr += 2;  // Skip "S:"
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3302      	adds	r3, #2
 8000966:	61fb      	str	r3, [r7, #28]
          if (*ptr != '\0') {  // Safety check
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	f000 809e 	beq.w	8000aae <parseMessage+0x1c6>
              Steering = *ptr;
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	781a      	ldrb	r2, [r3, #0]
 8000976:	4b6d      	ldr	r3, [pc, #436]	@ (8000b2c <parseMessage+0x244>)
 8000978:	701a      	strb	r2, [r3, #0]
              printf("Found Steering: %c\n\r", Steering);
 800097a:	4b6c      	ldr	r3, [pc, #432]	@ (8000b2c <parseMessage+0x244>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	4619      	mov	r1, r3
 8000982:	486b      	ldr	r0, [pc, #428]	@ (8000b30 <parseMessage+0x248>)
 8000984:	f006 ff10 	bl	80077a8 <iprintf>
              ptr++;
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	3301      	adds	r3, #1
 800098c:	61fb      	str	r3, [r7, #28]
 800098e:	e08e      	b.n	8000aae <parseMessage+0x1c6>
          }
      }
      else if (strncmp(ptr, "G:", 2) == 0) {
 8000990:	2202      	movs	r2, #2
 8000992:	4968      	ldr	r1, [pc, #416]	@ (8000b34 <parseMessage+0x24c>)
 8000994:	69f8      	ldr	r0, [r7, #28]
 8000996:	f006 ff64 	bl	8007862 <strncmp>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d115      	bne.n	80009cc <parseMessage+0xe4>
          ptr += 2;  // Skip "G:"
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	3302      	adds	r3, #2
 80009a4:	61fb      	str	r3, [r7, #28]
          if (*ptr != '\0') {  // Safety check
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d07f      	beq.n	8000aae <parseMessage+0x1c6>
              Gear = *ptr;
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	781a      	ldrb	r2, [r3, #0]
 80009b2:	4b61      	ldr	r3, [pc, #388]	@ (8000b38 <parseMessage+0x250>)
 80009b4:	701a      	strb	r2, [r3, #0]
              printf("Found Gear: %c\n\r", Gear);
 80009b6:	4b60      	ldr	r3, [pc, #384]	@ (8000b38 <parseMessage+0x250>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	4619      	mov	r1, r3
 80009be:	485f      	ldr	r0, [pc, #380]	@ (8000b3c <parseMessage+0x254>)
 80009c0:	f006 fef2 	bl	80077a8 <iprintf>
              ptr++;
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	3301      	adds	r3, #1
 80009c8:	61fb      	str	r3, [r7, #28]
 80009ca:	e070      	b.n	8000aae <parseMessage+0x1c6>
          }
      }
      else if (strncmp(ptr, "T:", 2) == 0) {
 80009cc:	2202      	movs	r2, #2
 80009ce:	495c      	ldr	r1, [pc, #368]	@ (8000b40 <parseMessage+0x258>)
 80009d0:	69f8      	ldr	r0, [r7, #28]
 80009d2:	f006 ff46 	bl	8007862 <strncmp>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d115      	bne.n	8000a08 <parseMessage+0x120>
          ptr += 2;  // Skip "T:"
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	3302      	adds	r3, #2
 80009e0:	61fb      	str	r3, [r7, #28]
          if (*ptr != '\0') {  // Safety check
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d061      	beq.n	8000aae <parseMessage+0x1c6>
              Type = *ptr;
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	781a      	ldrb	r2, [r3, #0]
 80009ee:	4b55      	ldr	r3, [pc, #340]	@ (8000b44 <parseMessage+0x25c>)
 80009f0:	701a      	strb	r2, [r3, #0]
              printf("Found Type: %c\n\r", Type);
 80009f2:	4b54      	ldr	r3, [pc, #336]	@ (8000b44 <parseMessage+0x25c>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	4619      	mov	r1, r3
 80009fa:	4853      	ldr	r0, [pc, #332]	@ (8000b48 <parseMessage+0x260>)
 80009fc:	f006 fed4 	bl	80077a8 <iprintf>
              ptr++;
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	3301      	adds	r3, #1
 8000a04:	61fb      	str	r3, [r7, #28]
 8000a06:	e052      	b.n	8000aae <parseMessage+0x1c6>
          }
      }
      else if (strncmp(ptr, "V:", 2) == 0) {
 8000a08:	2202      	movs	r2, #2
 8000a0a:	4950      	ldr	r1, [pc, #320]	@ (8000b4c <parseMessage+0x264>)
 8000a0c:	69f8      	ldr	r0, [r7, #28]
 8000a0e:	f006 ff28 	bl	8007862 <strncmp>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d11c      	bne.n	8000a52 <parseMessage+0x16a>
          ptr += 2;  // Skip "V:"
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	3302      	adds	r3, #2
 8000a1c:	61fb      	str	r3, [r7, #28]
          char* endPtr;
          long temp = strtol(ptr, &endPtr, 10);
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	220a      	movs	r2, #10
 8000a24:	4619      	mov	r1, r3
 8000a26:	69f8      	ldr	r0, [r7, #28]
 8000a28:	f006 fdf2 	bl	8007610 <strtol>
 8000a2c:	6178      	str	r0, [r7, #20]
          if (endPtr != ptr) {
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	69fa      	ldr	r2, [r7, #28]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d03b      	beq.n	8000aae <parseMessage+0x1c6>
              Velocity = (uint8_t)temp;
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4b45      	ldr	r3, [pc, #276]	@ (8000b50 <parseMessage+0x268>)
 8000a3c:	701a      	strb	r2, [r3, #0]
              printf("Found Velocity: %d\n\r", Velocity);
 8000a3e:	4b44      	ldr	r3, [pc, #272]	@ (8000b50 <parseMessage+0x268>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	4619      	mov	r1, r3
 8000a46:	4843      	ldr	r0, [pc, #268]	@ (8000b54 <parseMessage+0x26c>)
 8000a48:	f006 feae 	bl	80077a8 <iprintf>
              ptr = endPtr;
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	e02d      	b.n	8000aae <parseMessage+0x1c6>
          }
      }
      else if (strncmp(ptr, "D:", 2) == 0) {
 8000a52:	2202      	movs	r2, #2
 8000a54:	4940      	ldr	r1, [pc, #256]	@ (8000b58 <parseMessage+0x270>)
 8000a56:	69f8      	ldr	r0, [r7, #28]
 8000a58:	f006 ff03 	bl	8007862 <strncmp>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d11c      	bne.n	8000a9c <parseMessage+0x1b4>
          ptr += 2;  // Skip "D:"
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3302      	adds	r3, #2
 8000a66:	61fb      	str	r3, [r7, #28]
          char* endPtr;
          long temp = strtol(ptr, &endPtr, 10);
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	220a      	movs	r2, #10
 8000a6e:	4619      	mov	r1, r3
 8000a70:	69f8      	ldr	r0, [r7, #28]
 8000a72:	f006 fdcd 	bl	8007610 <strtol>
 8000a76:	61b8      	str	r0, [r7, #24]
          if (endPtr != ptr) {
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	69fa      	ldr	r2, [r7, #28]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d016      	beq.n	8000aae <parseMessage+0x1c6>
              Duration = (uint8_t)temp;
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b35      	ldr	r3, [pc, #212]	@ (8000b5c <parseMessage+0x274>)
 8000a86:	701a      	strb	r2, [r3, #0]
              printf("Found Duration: %d\n\r", Duration);
 8000a88:	4b34      	ldr	r3, [pc, #208]	@ (8000b5c <parseMessage+0x274>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4833      	ldr	r0, [pc, #204]	@ (8000b60 <parseMessage+0x278>)
 8000a92:	f006 fe89 	bl	80077a8 <iprintf>
              ptr = endPtr;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	61fb      	str	r3, [r7, #28]
 8000a9a:	e008      	b.n	8000aae <parseMessage+0x1c6>
          }
      }
      else {
          // If we don't recognize the field, skip one character
          printf("Skipping unknown character: %c\n\r", *ptr);
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4830      	ldr	r0, [pc, #192]	@ (8000b64 <parseMessage+0x27c>)
 8000aa4:	f006 fe80 	bl	80077a8 <iprintf>
          ptr++;
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	61fb      	str	r3, [r7, #28]
      }
      
      // Skip comma if present
      if (*ptr == ',') {
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b2c      	cmp	r3, #44	@ 0x2c
 8000ab4:	d106      	bne.n	8000ac4 <parseMessage+0x1dc>
          ptr++;
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	61fb      	str	r3, [r7, #28]
          printf("Skipped comma, now at: %s\n\r", ptr);
 8000abc:	69f9      	ldr	r1, [r7, #28]
 8000abe:	482a      	ldr	r0, [pc, #168]	@ (8000b68 <parseMessage+0x280>)
 8000ac0:	f006 fe72 	bl	80077a8 <iprintf>
  while (*ptr != ']' && *ptr != '\0') {
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b5d      	cmp	r3, #93	@ 0x5d
 8000aca:	d004      	beq.n	8000ad6 <parseMessage+0x1ee>
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	f47f af2d 	bne.w	8000930 <parseMessage+0x48>
      }
  }
  
  printf("Final parsed values - S:%c G:%c T:%c V:%d D:%d\n\r", 
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <parseMessage+0x244>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	4619      	mov	r1, r3
 8000ade:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <parseMessage+0x250>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <parseMessage+0x25c>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	461c      	mov	r4, r3
 8000aee:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <parseMessage+0x268>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <parseMessage+0x274>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	9301      	str	r3, [sp, #4]
 8000afe:	9200      	str	r2, [sp, #0]
 8000b00:	4623      	mov	r3, r4
 8000b02:	4602      	mov	r2, r0
 8000b04:	4819      	ldr	r0, [pc, #100]	@ (8000b6c <parseMessage+0x284>)
 8000b06:	f006 fe4f 	bl	80077a8 <iprintf>
         Steering, Gear, Type, Velocity, Duration);
}
 8000b0a:	3724      	adds	r7, #36	@ 0x24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd90      	pop	{r4, r7, pc}
 8000b10:	080084d8 	.word	0x080084d8
 8000b14:	080084f8 	.word	0x080084f8
 8000b18:	08008510 	.word	0x08008510
 8000b1c:	0800853c 	.word	0x0800853c
 8000b20:	08008564 	.word	0x08008564
 8000b24:	08008588 	.word	0x08008588
 8000b28:	080085a4 	.word	0x080085a4
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	080085a8 	.word	0x080085a8
 8000b34:	080085c0 	.word	0x080085c0
 8000b38:	20000001 	.word	0x20000001
 8000b3c:	080085c4 	.word	0x080085c4
 8000b40:	080085d8 	.word	0x080085d8
 8000b44:	20000002 	.word	0x20000002
 8000b48:	080085dc 	.word	0x080085dc
 8000b4c:	080085f0 	.word	0x080085f0
 8000b50:	20000126 	.word	0x20000126
 8000b54:	080085f4 	.word	0x080085f4
 8000b58:	0800860c 	.word	0x0800860c
 8000b5c:	20000127 	.word	0x20000127
 8000b60:	08008610 	.word	0x08008610
 8000b64:	08008628 	.word	0x08008628
 8000b68:	0800864c 	.word	0x0800864c
 8000b6c:	08008668 	.word	0x08008668

08000b70 <runMotor>:

void runMotor(char gear, char type, uint8_t velocity) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	71bb      	strb	r3, [r7, #6]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	717b      	strb	r3, [r7, #5]
  //Gear = *gear;
  
  switch (Gear)
 8000b82:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <runMotor+0x48>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b42      	cmp	r3, #66	@ 0x42
 8000b8a:	d010      	beq.n	8000bae <runMotor+0x3e>
 8000b8c:	2b46      	cmp	r3, #70	@ 0x46
 8000b8e:	d106      	bne.n	8000b9e <runMotor+0x2e>
  {
  case 'F': // F tj 70
    // motorForward
    // Set PWM
    regulator(velocity, type);
 8000b90:	797b      	ldrb	r3, [r7, #5]
 8000b92:	79ba      	ldrb	r2, [r7, #6]
 8000b94:	4611      	mov	r1, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f85e 	bl	8000c58 <regulator>
    while(1){
        TIM8->CCR2 = PWM1;
        HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
    }
    */
    break;
 8000b9c:	e008      	b.n	8000bb0 <runMotor+0x40>
  case 'B':
    // motorBackward();
    break;
  default:
    TIM8->CCR2 = 0;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	@ (8000bbc <runMotor+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	4806      	ldr	r0, [pc, #24]	@ (8000bc0 <runMotor+0x50>)
 8000ba8:	f003 fb2e 	bl	8004208 <HAL_TIM_PWM_Start>
    break;
 8000bac:	e000      	b.n	8000bb0 <runMotor+0x40>
    break;
 8000bae:	bf00      	nop
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000001 	.word	0x20000001
 8000bbc:	40013400 	.word	0x40013400
 8000bc0:	200001c4 	.word	0x200001c4

08000bc4 <Steer>:

void Steer(char steering) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
	int PWMtoSteer = 30;
 8000bce:	231e      	movs	r3, #30
 8000bd0:	60fb      	str	r3, [r7, #12]
  //Gear = *gear;
  
    switch (Steering)
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <Steer+0x80>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b4c      	cmp	r3, #76	@ 0x4c
 8000bda:	d002      	beq.n	8000be2 <Steer+0x1e>
 8000bdc:	2b52      	cmp	r3, #82	@ 0x52
 8000bde:	d00f      	beq.n	8000c00 <Steer+0x3c>
 8000be0:	e01d      	b.n	8000c1e <Steer+0x5a>
    {
    case 'L':
    	// one to zero
        TIM3->CCR2 = 0;
 8000be2:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <Steer+0x84>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	639a      	str	r2, [r3, #56]	@ 0x38
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000be8:	2104      	movs	r1, #4
 8000bea:	4818      	ldr	r0, [pc, #96]	@ (8000c4c <Steer+0x88>)
 8000bec:	f003 fb0c 	bl	8004208 <HAL_TIM_PWM_Start>
    	// second to run
        TIM4->CCR1 = PWMtoSteer;
 8000bf0:	4a17      	ldr	r2, [pc, #92]	@ (8000c50 <Steer+0x8c>)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	6353      	str	r3, [r2, #52]	@ 0x34
        HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4816      	ldr	r0, [pc, #88]	@ (8000c54 <Steer+0x90>)
 8000bfa:	f003 fb05 	bl	8004208 <HAL_TIM_PWM_Start>
      break;
 8000bfe:	e01d      	b.n	8000c3c <Steer+0x78>
    case 'R':
    	// one to zero
        TIM4->CCR1 = 0;
 8000c00:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <Steer+0x8c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000c06:	2100      	movs	r1, #0
 8000c08:	4812      	ldr	r0, [pc, #72]	@ (8000c54 <Steer+0x90>)
 8000c0a:	f003 fafd 	bl	8004208 <HAL_TIM_PWM_Start>
    	// second to run
        TIM3->CCR2 = PWMtoSteer;
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c48 <Steer+0x84>)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	6393      	str	r3, [r2, #56]	@ 0x38
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c14:	2104      	movs	r1, #4
 8000c16:	480d      	ldr	r0, [pc, #52]	@ (8000c4c <Steer+0x88>)
 8000c18:	f003 faf6 	bl	8004208 <HAL_TIM_PWM_Start>
      break;
 8000c1c:	e00e      	b.n	8000c3c <Steer+0x78>
    default:
    	// both to zero
        TIM4->CCR1 = 0;
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <Steer+0x8c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000c24:	2100      	movs	r1, #0
 8000c26:	480b      	ldr	r0, [pc, #44]	@ (8000c54 <Steer+0x90>)
 8000c28:	f003 faee 	bl	8004208 <HAL_TIM_PWM_Start>
    	// both to zero
        TIM3->CCR2 = 0;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <Steer+0x84>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	639a      	str	r2, [r3, #56]	@ 0x38
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c32:	2104      	movs	r1, #4
 8000c34:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <Steer+0x88>)
 8000c36:	f003 fae7 	bl	8004208 <HAL_TIM_PWM_Start>
      break;
 8000c3a:	bf00      	nop
    }
}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000000 	.word	0x20000000
 8000c48:	40000400 	.word	0x40000400
 8000c4c:	2000012c 	.word	0x2000012c
 8000c50:	40000800 	.word	0x40000800
 8000c54:	20000178 	.word	0x20000178

08000c58 <regulator>:

void regulator(uint8_t velocity, char type){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	460a      	mov	r2, r1
 8000c62:	71fb      	strb	r3, [r7, #7]
 8000c64:	4613      	mov	r3, r2
 8000c66:	71bb      	strb	r3, [r7, #6]
  int PWM_Duty_Cycle = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
  PWM_Duty_Cycle = 30;
 8000c6c:	231e      	movs	r3, #30
 8000c6e:	60fb      	str	r3, [r7, #12]
  
  
  // Timers configuration
  TIM8->CCR2 = PWM_Duty_Cycle;
 8000c70:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <regulator+0x30>)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	6393      	str	r3, [r2, #56]	@ 0x38
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000c76:	2104      	movs	r1, #4
 8000c78:	4804      	ldr	r0, [pc, #16]	@ (8000c8c <regulator+0x34>)
 8000c7a:	f003 fac5 	bl	8004208 <HAL_TIM_PWM_Start>
}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40013400 	.word	0x40013400
 8000c8c:	200001c4 	.word	0x200001c4

08000c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	@ 0x28
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c96:	f000 ff93 	bl	8001bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9a:	f000 f8cf 	bl	8000e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9e:	f7ff fc87 	bl	80005b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ca2:	f7ff fcd5 	bl	8000650 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ca6:	f000 fd01 	bl	80016ac <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000caa:	f000 fa99 	bl	80011e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cae:	f000 fb0d 	bl	80012cc <MX_TIM4_Init>
  MX_TIM8_Init();
 8000cb2:	f000 fb81 	bl	80013b8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rxBuffer[0], 1);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4953      	ldr	r1, [pc, #332]	@ (8000e08 <main+0x178>)
 8000cba:	4854      	ldr	r0, [pc, #336]	@ (8000e0c <main+0x17c>)
 8000cbc:	f004 fbf2 	bl	80054a4 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f000 fdc9 	bl	8001858 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f000 fe27 	bl	800191c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000cce:	4b50      	ldr	r3, [pc, #320]	@ (8000e10 <main+0x180>)
 8000cd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cd4:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000cd6:	4b4e      	ldr	r3, [pc, #312]	@ (8000e10 <main+0x180>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000cdc:	4b4c      	ldr	r3, [pc, #304]	@ (8000e10 <main+0x180>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000ce2:	4b4b      	ldr	r3, [pc, #300]	@ (8000e10 <main+0x180>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000ce8:	4b49      	ldr	r3, [pc, #292]	@ (8000e10 <main+0x180>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000cee:	4948      	ldr	r1, [pc, #288]	@ (8000e10 <main+0x180>)
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f000 fe93 	bl	8001a1c <BSP_COM_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <main+0x70>
  {
    Error_Handler();
 8000cfc:	f000 f950 	bl	8000fa0 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000d00:	4844      	ldr	r0, [pc, #272]	@ (8000e14 <main+0x184>)
 8000d02:	f006 fd51 	bl	80077a8 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f000 fddc 	bl	80018c4 <BSP_LED_On>

  imu_init();  // Initialize the IMU after peripherals are set up
 8000d0c:	f7ff fd72 	bl	80007f4 <imu_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (messageComplete) {
 8000d10:	4b41      	ldr	r3, [pc, #260]	@ (8000e18 <main+0x188>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d005      	beq.n	8000d26 <main+0x96>
      parseMessage((char*)rxBuffer);
 8000d1a:	483b      	ldr	r0, [pc, #236]	@ (8000e08 <main+0x178>)
 8000d1c:	f7ff fde4 	bl	80008e8 <parseMessage>
      messageComplete = 0;
 8000d20:	4b3d      	ldr	r3, [pc, #244]	@ (8000e18 <main+0x188>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
    }
    runMotor(Gear, Type, Velocity);
 8000d26:	4b3d      	ldr	r3, [pc, #244]	@ (8000e1c <main+0x18c>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	4a3c      	ldr	r2, [pc, #240]	@ (8000e20 <main+0x190>)
 8000d2e:	7812      	ldrb	r2, [r2, #0]
 8000d30:	b2d1      	uxtb	r1, r2
 8000d32:	4a3c      	ldr	r2, [pc, #240]	@ (8000e24 <main+0x194>)
 8000d34:	7812      	ldrb	r2, [r2, #0]
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff19 	bl	8000b70 <runMotor>
    Steer(Steering);
 8000d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e28 <main+0x198>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff3d 	bl	8000bc4 <Steer>
    }
   */


    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000d4a:	4b38      	ldr	r3, [pc, #224]	@ (8000e2c <main+0x19c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d1de      	bne.n	8000d10 <main+0x80>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000d52:	4b36      	ldr	r3, [pc, #216]	@ (8000e2c <main+0x19c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f000 fdc9 	bl	80018f0 <BSP_LED_Toggle>

      /* ..... Perform your action ..... */
      printf("Let's do this !\n\r");
 8000d5e:	4834      	ldr	r0, [pc, #208]	@ (8000e30 <main+0x1a0>)
 8000d60:	f006 fd22 	bl	80077a8 <iprintf>
      // grok code starts
      imu_data_t accel, gyro;
      imu_read_accel(&accel);
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fd69 	bl	8000840 <imu_read_accel>
      imu_read_gyro(&gyro);
 8000d6e:	463b      	mov	r3, r7
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fd8f 	bl	8000894 <imu_read_gyro>

      // Compute scaled values using integer arithmetic
      int32_t accel_ug_x = (int32_t)accel.x * ACCEL_SENSITIVITY_UG;
 8000d76:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	23f4      	movs	r3, #244	@ 0xf4
 8000d7e:	fb02 f303 	mul.w	r3, r2, r3
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
      int32_t accel_ug_y = (int32_t)accel.y * ACCEL_SENSITIVITY_UG;
 8000d84:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	23f4      	movs	r3, #244	@ 0xf4
 8000d8c:	fb02 f303 	mul.w	r3, r2, r3
 8000d90:	623b      	str	r3, [r7, #32]
      int32_t accel_ug_z = (int32_t)accel.z * ACCEL_SENSITIVITY_UG;
 8000d92:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d96:	461a      	mov	r2, r3
 8000d98:	23f4      	movs	r3, #244	@ 0xf4
 8000d9a:	fb02 f303 	mul.w	r3, r2, r3
 8000d9e:	61fb      	str	r3, [r7, #28]
      int32_t gyro_udps_x = (int32_t)gyro.x * GYRO_SENSITIVITY_UDPS;
 8000da0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000da4:	461a      	mov	r2, r3
 8000da6:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000daa:	fb02 f303 	mul.w	r3, r2, r3
 8000dae:	61bb      	str	r3, [r7, #24]
      int32_t gyro_udps_y = (int32_t)gyro.y * GYRO_SENSITIVITY_UDPS;
 8000db0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000db4:	461a      	mov	r2, r3
 8000db6:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000dba:	fb02 f303 	mul.w	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
      int32_t gyro_udps_z = (int32_t)gyro.z * GYRO_SENSITIVITY_UDPS;
 8000dc0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000dca:	fb02 f303 	mul.w	r3, r2, r3
 8000dce:	613b      	str	r3, [r7, #16]

      // printing
      printf("Accel [ug]: X=%ld, Y=%ld, Z=%ld\n\r",
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	6a3a      	ldr	r2, [r7, #32]
 8000dd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000dd6:	4817      	ldr	r0, [pc, #92]	@ (8000e34 <main+0x1a4>)
 8000dd8:	f006 fce6 	bl	80077a8 <iprintf>
              accel_ug_x, accel_ug_y, accel_ug_z);
      printf("Gyro [mdps]: X=%ld, Y=%ld, Z=%ld\n\r",
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	69b9      	ldr	r1, [r7, #24]
 8000de2:	4815      	ldr	r0, [pc, #84]	@ (8000e38 <main+0x1a8>)
 8000de4:	f006 fce0 	bl	80077a8 <iprintf>
                    gyro_udps_x, gyro_udps_y, gyro_udps_z);

      HAL_Delay(100);
 8000de8:	2064      	movs	r0, #100	@ 0x64
 8000dea:	f000 ff59 	bl	8001ca0 <HAL_Delay>

      runMotor(Gear, Type, Velocity);
 8000dee:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <main+0x18c>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <main+0x190>)
 8000df6:	7812      	ldrb	r2, [r2, #0]
 8000df8:	b2d1      	uxtb	r1, r2
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <main+0x194>)
 8000dfc:	7812      	ldrb	r2, [r2, #0]
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff feb5 	bl	8000b70 <runMotor>
    if (messageComplete) {
 8000e06:	e783      	b.n	8000d10 <main+0x80>
 8000e08:	20000104 	.word	0x20000104
 8000e0c:	20000210 	.word	0x20000210
 8000e10:	200000f0 	.word	0x200000f0
 8000e14:	0800869c 	.word	0x0800869c
 8000e18:	20000125 	.word	0x20000125
 8000e1c:	20000001 	.word	0x20000001
 8000e20:	20000002 	.word	0x20000002
 8000e24:	20000126 	.word	0x20000126
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000100 	.word	0x20000100
 8000e30:	080086b8 	.word	0x080086b8
 8000e34:	080086cc 	.word	0x080086cc
 8000e38:	080086f0 	.word	0x080086f0

08000e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b094      	sub	sp, #80	@ 0x50
 8000e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e42:	f107 0318 	add.w	r3, r7, #24
 8000e46:	2238      	movs	r2, #56	@ 0x38
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f006 fd01 	bl	8007852 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f002 f948 	bl	80030f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6e:	2340      	movs	r3, #64	@ 0x40
 8000e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e72:	2302      	movs	r3, #2
 8000e74:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e76:	2302      	movs	r3, #2
 8000e78:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e7e:	2355      	movs	r3, #85	@ 0x55
 8000e80:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e82:	2302      	movs	r3, #2
 8000e84:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e86:	2302      	movs	r3, #2
 8000e88:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8e:	f107 0318 	add.w	r3, r7, #24
 8000e92:	4618      	mov	r0, r3
 8000e94:	f002 f9e2 	bl	800325c <HAL_RCC_OscConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e9e:	f000 f87f 	bl	8000fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2104      	movs	r1, #4
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f002 fce0 	bl	8003880 <HAL_RCC_ClockConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ec6:	f000 f86b 	bl	8000fa0 <Error_Handler>
  }
}
 8000eca:	bf00      	nop
 8000ecc:	3750      	adds	r7, #80	@ 0x50
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a20      	ldr	r2, [pc, #128]	@ (8000f64 <HAL_UART_RxCpltCallback+0x90>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d13b      	bne.n	8000f5e <HAL_UART_RxCpltCallback+0x8a>
      if (rxIndex == 0 && rxBuffer[0] != START_MARKER) {
 8000ee6:	4b20      	ldr	r3, [pc, #128]	@ (8000f68 <HAL_UART_RxCpltCallback+0x94>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d109      	bne.n	8000f04 <HAL_UART_RxCpltCallback+0x30>
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <HAL_UART_RxCpltCallback+0x98>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b5b      	cmp	r3, #91	@ 0x5b
 8000ef6:	d005      	beq.n	8000f04 <HAL_UART_RxCpltCallback+0x30>
          // Wait for start marker
          HAL_UART_Receive_IT(&huart1, &rxBuffer[0], 1);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	491c      	ldr	r1, [pc, #112]	@ (8000f6c <HAL_UART_RxCpltCallback+0x98>)
 8000efc:	481c      	ldr	r0, [pc, #112]	@ (8000f70 <HAL_UART_RxCpltCallback+0x9c>)
 8000efe:	f004 fad1 	bl	80054a4 <HAL_UART_Receive_IT>
          return;
 8000f02:	e02c      	b.n	8000f5e <HAL_UART_RxCpltCallback+0x8a>
      }
      
      if (rxBuffer[rxIndex] == END_MARKER) {
 8000f04:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <HAL_UART_RxCpltCallback+0x94>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4b17      	ldr	r3, [pc, #92]	@ (8000f6c <HAL_UART_RxCpltCallback+0x98>)
 8000f0e:	5c9b      	ldrb	r3, [r3, r2]
 8000f10:	2b5d      	cmp	r3, #93	@ 0x5d
 8000f12:	d10d      	bne.n	8000f30 <HAL_UART_RxCpltCallback+0x5c>
          // Message complete
          rxBuffer[rxIndex + 1] = '\0';  // Null terminate
 8000f14:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <HAL_UART_RxCpltCallback+0x94>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	4a13      	ldr	r2, [pc, #76]	@ (8000f6c <HAL_UART_RxCpltCallback+0x98>)
 8000f1e:	2100      	movs	r1, #0
 8000f20:	54d1      	strb	r1, [r2, r3]
          messageComplete = 1;
 8000f22:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <HAL_UART_RxCpltCallback+0xa0>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
          rxIndex = 0;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <HAL_UART_RxCpltCallback+0x94>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
 8000f2e:	e00b      	b.n	8000f48 <HAL_UART_RxCpltCallback+0x74>
      } else if (rxIndex < RX_BUFFER_SIZE - 2) {
 8000f30:	4b0d      	ldr	r3, [pc, #52]	@ (8000f68 <HAL_UART_RxCpltCallback+0x94>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b1d      	cmp	r3, #29
 8000f38:	d806      	bhi.n	8000f48 <HAL_UART_RxCpltCallback+0x74>
          rxIndex++;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <HAL_UART_RxCpltCallback+0x94>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	3301      	adds	r3, #1
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <HAL_UART_RxCpltCallback+0x94>)
 8000f46:	701a      	strb	r2, [r3, #0]
      }
      
      // Continue receiving
      HAL_UART_Receive_IT(&huart1, &rxBuffer[rxIndex], 1);
 8000f48:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <HAL_UART_RxCpltCallback+0x94>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_UART_RxCpltCallback+0x98>)
 8000f52:	4413      	add	r3, r2
 8000f54:	2201      	movs	r2, #1
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <HAL_UART_RxCpltCallback+0x9c>)
 8000f5a:	f004 faa3 	bl	80054a4 <HAL_UART_Receive_IT>
  }
}
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40013800 	.word	0x40013800
 8000f68:	20000124 	.word	0x20000124
 8000f6c:	20000104 	.word	0x20000104
 8000f70:	20000210 	.word	0x20000210
 8000f74:	20000125 	.word	0x20000125

08000f78 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <BSP_PB_Callback+0x24>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]
  }
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000100 	.word	0x20000100

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <Error_Handler+0x8>

08000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fce:	4a08      	ldr	r2, [pc, #32]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fe2:	f002 f92b 	bl	800323c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <MemManage_Handler+0x4>

0800100c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <UsageFault_Handler+0x4>

0800101c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104a:	f000 fe0b 	bl	8001c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <USART1_IRQHandler+0x10>)
 800105a:	f004 fa6f 	bl	800553c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000210 	.word	0x20000210

08001068 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800106c:	2000      	movs	r0, #0
 800106e:	f000 fcc3 	bl	80019f8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}

08001076 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	e00a      	b.n	800109e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001088:	f3af 8000 	nop.w
 800108c:	4601      	mov	r1, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	60ba      	str	r2, [r7, #8]
 8001094:	b2ca      	uxtb	r2, r1
 8001096:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3301      	adds	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dbf0      	blt.n	8001088 <_read+0x12>
  }

  return len;
 80010a6:	687b      	ldr	r3, [r7, #4]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	e009      	b.n	80010d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1c5a      	adds	r2, r3, #1
 80010c6:	60ba      	str	r2, [r7, #8]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fd08 	bl	8001ae0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	3301      	adds	r3, #1
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	429a      	cmp	r2, r3
 80010dc:	dbf1      	blt.n	80010c2 <_write+0x12>
  }
  return len;
 80010de:	687b      	ldr	r3, [r7, #4]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <_close>:

int _close(int file)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001110:	605a      	str	r2, [r3, #4]
  return 0;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <_isatty>:

int _isatty(int file)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001128:	2301      	movs	r3, #1
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001136:	b480      	push	{r7}
 8001138:	b085      	sub	sp, #20
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001158:	4a14      	ldr	r2, [pc, #80]	@ (80011ac <_sbrk+0x5c>)
 800115a:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <_sbrk+0x60>)
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001164:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800116c:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <_sbrk+0x64>)
 800116e:	4a12      	ldr	r2, [pc, #72]	@ (80011b8 <_sbrk+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	429a      	cmp	r2, r3
 800117e:	d207      	bcs.n	8001190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001180:	f006 fbc8 	bl	8007914 <__errno>
 8001184:	4603      	mov	r3, r0
 8001186:	220c      	movs	r2, #12
 8001188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	e009      	b.n	80011a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001190:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001196:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	4a05      	ldr	r2, [pc, #20]	@ (80011b4 <_sbrk+0x64>)
 80011a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a2:	68fb      	ldr	r3, [r7, #12]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20008000 	.word	0x20008000
 80011b0:	00000400 	.word	0x00000400
 80011b4:	20000128 	.word	0x20000128
 80011b8:	20000498 	.word	0x20000498

080011bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <SystemInit+0x20>)
 80011c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011c6:	4a05      	ldr	r2, [pc, #20]	@ (80011dc <SystemInit+0x20>)
 80011c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08e      	sub	sp, #56	@ 0x38
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001200:	463b      	mov	r3, r7
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]
 800120e:	615a      	str	r2, [r3, #20]
 8001210:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001212:	4b2c      	ldr	r3, [pc, #176]	@ (80012c4 <MX_TIM3_Init+0xe4>)
 8001214:	4a2c      	ldr	r2, [pc, #176]	@ (80012c8 <MX_TIM3_Init+0xe8>)
 8001216:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 8001218:	4b2a      	ldr	r3, [pc, #168]	@ (80012c4 <MX_TIM3_Init+0xe4>)
 800121a:	22a9      	movs	r2, #169	@ 0xa9
 800121c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121e:	4b29      	ldr	r3, [pc, #164]	@ (80012c4 <MX_TIM3_Init+0xe4>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32;
 8001224:	4b27      	ldr	r3, [pc, #156]	@ (80012c4 <MX_TIM3_Init+0xe4>)
 8001226:	2220      	movs	r2, #32
 8001228:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122a:	4b26      	ldr	r3, [pc, #152]	@ (80012c4 <MX_TIM3_Init+0xe4>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001230:	4b24      	ldr	r3, [pc, #144]	@ (80012c4 <MX_TIM3_Init+0xe4>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001236:	4823      	ldr	r0, [pc, #140]	@ (80012c4 <MX_TIM3_Init+0xe4>)
 8001238:	f002 ff2e 	bl	8004098 <HAL_TIM_Base_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001242:	f7ff fead 	bl	8000fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001246:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800124a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800124c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001250:	4619      	mov	r1, r3
 8001252:	481c      	ldr	r0, [pc, #112]	@ (80012c4 <MX_TIM3_Init+0xe4>)
 8001254:	f003 f9ec 	bl	8004630 <HAL_TIM_ConfigClockSource>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800125e:	f7ff fe9f 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001262:	4818      	ldr	r0, [pc, #96]	@ (80012c4 <MX_TIM3_Init+0xe4>)
 8001264:	f002 ff6f 	bl	8004146 <HAL_TIM_PWM_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800126e:	f7ff fe97 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800127a:	f107 031c 	add.w	r3, r7, #28
 800127e:	4619      	mov	r1, r3
 8001280:	4810      	ldr	r0, [pc, #64]	@ (80012c4 <MX_TIM3_Init+0xe4>)
 8001282:	f003 ff23 	bl	80050cc <HAL_TIMEx_MasterConfigSynchronization>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800128c:	f7ff fe88 	bl	8000fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001290:	2360      	movs	r3, #96	@ 0x60
 8001292:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	2204      	movs	r2, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	4807      	ldr	r0, [pc, #28]	@ (80012c4 <MX_TIM3_Init+0xe4>)
 80012a8:	f003 f8ae 	bl	8004408 <HAL_TIM_PWM_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80012b2:	f7ff fe75 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012b6:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <MX_TIM3_Init+0xe4>)
 80012b8:	f000 f976 	bl	80015a8 <HAL_TIM_MspPostInit>

}
 80012bc:	bf00      	nop
 80012be:	3738      	adds	r7, #56	@ 0x38
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2000012c 	.word	0x2000012c
 80012c8:	40000400 	.word	0x40000400

080012cc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08e      	sub	sp, #56	@ 0x38
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]
 80012fa:	615a      	str	r2, [r3, #20]
 80012fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012fe:	4b2c      	ldr	r3, [pc, #176]	@ (80013b0 <MX_TIM4_Init+0xe4>)
 8001300:	4a2c      	ldr	r2, [pc, #176]	@ (80013b4 <MX_TIM4_Init+0xe8>)
 8001302:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 170-1;
 8001304:	4b2a      	ldr	r3, [pc, #168]	@ (80013b0 <MX_TIM4_Init+0xe4>)
 8001306:	22a9      	movs	r2, #169	@ 0xa9
 8001308:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130a:	4b29      	ldr	r3, [pc, #164]	@ (80013b0 <MX_TIM4_Init+0xe4>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 32;
 8001310:	4b27      	ldr	r3, [pc, #156]	@ (80013b0 <MX_TIM4_Init+0xe4>)
 8001312:	2220      	movs	r2, #32
 8001314:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001316:	4b26      	ldr	r3, [pc, #152]	@ (80013b0 <MX_TIM4_Init+0xe4>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131c:	4b24      	ldr	r3, [pc, #144]	@ (80013b0 <MX_TIM4_Init+0xe4>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001322:	4823      	ldr	r0, [pc, #140]	@ (80013b0 <MX_TIM4_Init+0xe4>)
 8001324:	f002 feb8 	bl	8004098 <HAL_TIM_Base_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800132e:	f7ff fe37 	bl	8000fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001332:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001336:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001338:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800133c:	4619      	mov	r1, r3
 800133e:	481c      	ldr	r0, [pc, #112]	@ (80013b0 <MX_TIM4_Init+0xe4>)
 8001340:	f003 f976 	bl	8004630 <HAL_TIM_ConfigClockSource>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800134a:	f7ff fe29 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800134e:	4818      	ldr	r0, [pc, #96]	@ (80013b0 <MX_TIM4_Init+0xe4>)
 8001350:	f002 fef9 	bl	8004146 <HAL_TIM_PWM_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800135a:	f7ff fe21 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	4619      	mov	r1, r3
 800136c:	4810      	ldr	r0, [pc, #64]	@ (80013b0 <MX_TIM4_Init+0xe4>)
 800136e:	f003 fead 	bl	80050cc <HAL_TIMEx_MasterConfigSynchronization>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001378:	f7ff fe12 	bl	8000fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137c:	2360      	movs	r3, #96	@ 0x60
 800137e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	2200      	movs	r2, #0
 8001390:	4619      	mov	r1, r3
 8001392:	4807      	ldr	r0, [pc, #28]	@ (80013b0 <MX_TIM4_Init+0xe4>)
 8001394:	f003 f838 	bl	8004408 <HAL_TIM_PWM_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800139e:	f7ff fdff 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013a2:	4803      	ldr	r0, [pc, #12]	@ (80013b0 <MX_TIM4_Init+0xe4>)
 80013a4:	f000 f900 	bl	80015a8 <HAL_TIM_MspPostInit>

}
 80013a8:	bf00      	nop
 80013aa:	3738      	adds	r7, #56	@ 0x38
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000178 	.word	0x20000178
 80013b4:	40000800 	.word	0x40000800

080013b8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b09c      	sub	sp, #112	@ 0x70
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013be:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	615a      	str	r2, [r3, #20]
 80013ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2234      	movs	r2, #52	@ 0x34
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f006 fa2d 	bl	8007852 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80013f8:	4b45      	ldr	r3, [pc, #276]	@ (8001510 <MX_TIM8_Init+0x158>)
 80013fa:	4a46      	ldr	r2, [pc, #280]	@ (8001514 <MX_TIM8_Init+0x15c>)
 80013fc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 170-1;
 80013fe:	4b44      	ldr	r3, [pc, #272]	@ (8001510 <MX_TIM8_Init+0x158>)
 8001400:	22a9      	movs	r2, #169	@ 0xa9
 8001402:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001404:	4b42      	ldr	r3, [pc, #264]	@ (8001510 <MX_TIM8_Init+0x158>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 32;
 800140a:	4b41      	ldr	r3, [pc, #260]	@ (8001510 <MX_TIM8_Init+0x158>)
 800140c:	2220      	movs	r2, #32
 800140e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001410:	4b3f      	ldr	r3, [pc, #252]	@ (8001510 <MX_TIM8_Init+0x158>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001416:	4b3e      	ldr	r3, [pc, #248]	@ (8001510 <MX_TIM8_Init+0x158>)
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141c:	4b3c      	ldr	r3, [pc, #240]	@ (8001510 <MX_TIM8_Init+0x158>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001422:	483b      	ldr	r0, [pc, #236]	@ (8001510 <MX_TIM8_Init+0x158>)
 8001424:	f002 fe38 	bl	8004098 <HAL_TIM_Base_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800142e:	f7ff fdb7 	bl	8000fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001432:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001436:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001438:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800143c:	4619      	mov	r1, r3
 800143e:	4834      	ldr	r0, [pc, #208]	@ (8001510 <MX_TIM8_Init+0x158>)
 8001440:	f003 f8f6 	bl	8004630 <HAL_TIM_ConfigClockSource>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800144a:	f7ff fda9 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800144e:	4830      	ldr	r0, [pc, #192]	@ (8001510 <MX_TIM8_Init+0x158>)
 8001450:	f002 fe79 	bl	8004146 <HAL_TIM_PWM_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800145a:	f7ff fda1 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800146a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800146e:	4619      	mov	r1, r3
 8001470:	4827      	ldr	r0, [pc, #156]	@ (8001510 <MX_TIM8_Init+0x158>)
 8001472:	f003 fe2b 	bl	80050cc <HAL_TIMEx_MasterConfigSynchronization>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 800147c:	f7ff fd90 	bl	8000fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001480:	2360      	movs	r3, #96	@ 0x60
 8001482:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001488:	2300      	movs	r3, #0
 800148a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800148c:	2300      	movs	r3, #0
 800148e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800149c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014a0:	2204      	movs	r2, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	481a      	ldr	r0, [pc, #104]	@ (8001510 <MX_TIM8_Init+0x158>)
 80014a6:	f002 ffaf 	bl	8004408 <HAL_TIM_PWM_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 80014b0:	f7ff fd76 	bl	8000fa0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80014e4:	2300      	movs	r3, #0
 80014e6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	4807      	ldr	r0, [pc, #28]	@ (8001510 <MX_TIM8_Init+0x158>)
 80014f2:	f003 fe6d 	bl	80051d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 80014fc:	f7ff fd50 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001500:	4803      	ldr	r0, [pc, #12]	@ (8001510 <MX_TIM8_Init+0x158>)
 8001502:	f000 f851 	bl	80015a8 <HAL_TIM_MspPostInit>

}
 8001506:	bf00      	nop
 8001508:	3770      	adds	r7, #112	@ 0x70
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200001c4 	.word	0x200001c4
 8001514:	40013400 	.word	0x40013400

08001518 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a1c      	ldr	r2, [pc, #112]	@ (8001598 <HAL_TIM_Base_MspInit+0x80>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10c      	bne.n	8001544 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800152a:	4b1c      	ldr	r3, [pc, #112]	@ (800159c <HAL_TIM_Base_MspInit+0x84>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152e:	4a1b      	ldr	r2, [pc, #108]	@ (800159c <HAL_TIM_Base_MspInit+0x84>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	6593      	str	r3, [r2, #88]	@ 0x58
 8001536:	4b19      	ldr	r3, [pc, #100]	@ (800159c <HAL_TIM_Base_MspInit+0x84>)
 8001538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001542:	e022      	b.n	800158a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a15      	ldr	r2, [pc, #84]	@ (80015a0 <HAL_TIM_Base_MspInit+0x88>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d10c      	bne.n	8001568 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800154e:	4b13      	ldr	r3, [pc, #76]	@ (800159c <HAL_TIM_Base_MspInit+0x84>)
 8001550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001552:	4a12      	ldr	r2, [pc, #72]	@ (800159c <HAL_TIM_Base_MspInit+0x84>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6593      	str	r3, [r2, #88]	@ 0x58
 800155a:	4b10      	ldr	r3, [pc, #64]	@ (800159c <HAL_TIM_Base_MspInit+0x84>)
 800155c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
}
 8001566:	e010      	b.n	800158a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM8)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0d      	ldr	r2, [pc, #52]	@ (80015a4 <HAL_TIM_Base_MspInit+0x8c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d10b      	bne.n	800158a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001572:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <HAL_TIM_Base_MspInit+0x84>)
 8001574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001576:	4a09      	ldr	r2, [pc, #36]	@ (800159c <HAL_TIM_Base_MspInit+0x84>)
 8001578:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800157c:	6613      	str	r3, [r2, #96]	@ 0x60
 800157e:	4b07      	ldr	r3, [pc, #28]	@ (800159c <HAL_TIM_Base_MspInit+0x84>)
 8001580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001582:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
}
 800158a:	bf00      	nop
 800158c:	371c      	adds	r7, #28
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40000400 	.word	0x40000400
 800159c:	40021000 	.word	0x40021000
 80015a0:	40000800 	.word	0x40000800
 80015a4:	40013400 	.word	0x40013400

080015a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	@ 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a33      	ldr	r2, [pc, #204]	@ (8001694 <HAL_TIM_MspPostInit+0xec>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d11d      	bne.n	8001606 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4b33      	ldr	r3, [pc, #204]	@ (8001698 <HAL_TIM_MspPostInit+0xf0>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	4a32      	ldr	r2, [pc, #200]	@ (8001698 <HAL_TIM_MspPostInit+0xf0>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d6:	4b30      	ldr	r3, [pc, #192]	@ (8001698 <HAL_TIM_MspPostInit+0xf0>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015e2:	2380      	movs	r3, #128	@ 0x80
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015f2:	2302      	movs	r3, #2
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001600:	f000 fda0 	bl	8002144 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001604:	e042      	b.n	800168c <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM4)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a24      	ldr	r2, [pc, #144]	@ (800169c <HAL_TIM_MspPostInit+0xf4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d11c      	bne.n	800164a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001610:	4b21      	ldr	r3, [pc, #132]	@ (8001698 <HAL_TIM_MspPostInit+0xf0>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001614:	4a20      	ldr	r2, [pc, #128]	@ (8001698 <HAL_TIM_MspPostInit+0xf0>)
 8001616:	f043 0302 	orr.w	r3, r3, #2
 800161a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161c:	4b1e      	ldr	r3, [pc, #120]	@ (8001698 <HAL_TIM_MspPostInit+0xf0>)
 800161e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001628:	2340      	movs	r3, #64	@ 0x40
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001638:	2302      	movs	r3, #2
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	4817      	ldr	r0, [pc, #92]	@ (80016a0 <HAL_TIM_MspPostInit+0xf8>)
 8001644:	f000 fd7e 	bl	8002144 <HAL_GPIO_Init>
}
 8001648:	e020      	b.n	800168c <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a15      	ldr	r2, [pc, #84]	@ (80016a4 <HAL_TIM_MspPostInit+0xfc>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d11b      	bne.n	800168c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001654:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <HAL_TIM_MspPostInit+0xf0>)
 8001656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001658:	4a0f      	ldr	r2, [pc, #60]	@ (8001698 <HAL_TIM_MspPostInit+0xf0>)
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001660:	4b0d      	ldr	r3, [pc, #52]	@ (8001698 <HAL_TIM_MspPostInit+0xf0>)
 8001662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800166c:	2380      	movs	r3, #128	@ 0x80
 800166e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800167c:	2304      	movs	r3, #4
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	4808      	ldr	r0, [pc, #32]	@ (80016a8 <HAL_TIM_MspPostInit+0x100>)
 8001688:	f000 fd5c 	bl	8002144 <HAL_GPIO_Init>
}
 800168c:	bf00      	nop
 800168e:	3728      	adds	r7, #40	@ 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40000400 	.word	0x40000400
 8001698:	40021000 	.word	0x40021000
 800169c:	40000800 	.word	0x40000800
 80016a0:	48000400 	.word	0x48000400
 80016a4:	40013400 	.word	0x40013400
 80016a8:	48000800 	.word	0x48000800

080016ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016b0:	4b22      	ldr	r3, [pc, #136]	@ (800173c <MX_USART1_UART_Init+0x90>)
 80016b2:	4a23      	ldr	r2, [pc, #140]	@ (8001740 <MX_USART1_UART_Init+0x94>)
 80016b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016b6:	4b21      	ldr	r3, [pc, #132]	@ (800173c <MX_USART1_UART_Init+0x90>)
 80016b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016be:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <MX_USART1_UART_Init+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016c4:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <MX_USART1_UART_Init+0x90>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ca:	4b1c      	ldr	r3, [pc, #112]	@ (800173c <MX_USART1_UART_Init+0x90>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <MX_USART1_UART_Init+0x90>)
 80016d2:	220c      	movs	r2, #12
 80016d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d6:	4b19      	ldr	r3, [pc, #100]	@ (800173c <MX_USART1_UART_Init+0x90>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016dc:	4b17      	ldr	r3, [pc, #92]	@ (800173c <MX_USART1_UART_Init+0x90>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016e2:	4b16      	ldr	r3, [pc, #88]	@ (800173c <MX_USART1_UART_Init+0x90>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016e8:	4b14      	ldr	r3, [pc, #80]	@ (800173c <MX_USART1_UART_Init+0x90>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ee:	4b13      	ldr	r3, [pc, #76]	@ (800173c <MX_USART1_UART_Init+0x90>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016f4:	4811      	ldr	r0, [pc, #68]	@ (800173c <MX_USART1_UART_Init+0x90>)
 80016f6:	f003 fdf7 	bl	80052e8 <HAL_UART_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001700:	f7ff fc4e 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001704:	2100      	movs	r1, #0
 8001706:	480d      	ldr	r0, [pc, #52]	@ (800173c <MX_USART1_UART_Init+0x90>)
 8001708:	f005 fe3d 	bl	8007386 <HAL_UARTEx_SetTxFifoThreshold>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001712:	f7ff fc45 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001716:	2100      	movs	r1, #0
 8001718:	4808      	ldr	r0, [pc, #32]	@ (800173c <MX_USART1_UART_Init+0x90>)
 800171a:	f005 fe72 	bl	8007402 <HAL_UARTEx_SetRxFifoThreshold>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001724:	f7ff fc3c 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001728:	4804      	ldr	r0, [pc, #16]	@ (800173c <MX_USART1_UART_Init+0x90>)
 800172a:	f005 fdf3 	bl	8007314 <HAL_UARTEx_DisableFifoMode>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001734:	f7ff fc34 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000210 	.word	0x20000210
 8001740:	40013800 	.word	0x40013800

08001744 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b09a      	sub	sp, #104	@ 0x68
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	2244      	movs	r2, #68	@ 0x44
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f006 f874 	bl	8007852 <memset>
  if(uartHandle->Instance==USART1)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a22      	ldr	r2, [pc, #136]	@ (80017f8 <HAL_UART_MspInit+0xb4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d13d      	bne.n	80017f0 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001774:	2301      	movs	r3, #1
 8001776:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4618      	mov	r0, r3
 8001782:	f002 fa99 	bl	8003cb8 <HAL_RCCEx_PeriphCLKConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800178c:	f7ff fc08 	bl	8000fa0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001790:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <HAL_UART_MspInit+0xb8>)
 8001792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001794:	4a19      	ldr	r2, [pc, #100]	@ (80017fc <HAL_UART_MspInit+0xb8>)
 8001796:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800179a:	6613      	str	r3, [r2, #96]	@ 0x60
 800179c:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <HAL_UART_MspInit+0xb8>)
 800179e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a8:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <HAL_UART_MspInit+0xb8>)
 80017aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ac:	4a13      	ldr	r2, [pc, #76]	@ (80017fc <HAL_UART_MspInit+0xb8>)
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <HAL_UART_MspInit+0xb8>)
 80017b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017c0:	2330      	movs	r3, #48	@ 0x30
 80017c2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017d0:	2307      	movs	r3, #7
 80017d2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017d8:	4619      	mov	r1, r3
 80017da:	4809      	ldr	r0, [pc, #36]	@ (8001800 <HAL_UART_MspInit+0xbc>)
 80017dc:	f000 fcb2 	bl	8002144 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	2025      	movs	r0, #37	@ 0x25
 80017e6:	f000 fb58 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017ea:	2025      	movs	r0, #37	@ 0x25
 80017ec:	f000 fb6f 	bl	8001ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017f0:	bf00      	nop
 80017f2:	3768      	adds	r7, #104	@ 0x68
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40013800 	.word	0x40013800
 80017fc:	40021000 	.word	0x40021000
 8001800:	48000800 	.word	0x48000800

08001804 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001804:	480d      	ldr	r0, [pc, #52]	@ (800183c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001806:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001808:	f7ff fcd8 	bl	80011bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800180c:	480c      	ldr	r0, [pc, #48]	@ (8001840 <LoopForever+0x6>)
  ldr r1, =_edata
 800180e:	490d      	ldr	r1, [pc, #52]	@ (8001844 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001810:	4a0d      	ldr	r2, [pc, #52]	@ (8001848 <LoopForever+0xe>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001814:	e002      	b.n	800181c <LoopCopyDataInit>

08001816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181a:	3304      	adds	r3, #4

0800181c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800181c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001820:	d3f9      	bcc.n	8001816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001822:	4a0a      	ldr	r2, [pc, #40]	@ (800184c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001824:	4c0a      	ldr	r4, [pc, #40]	@ (8001850 <LoopForever+0x16>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001828:	e001      	b.n	800182e <LoopFillZerobss>

0800182a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800182c:	3204      	adds	r2, #4

0800182e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001830:	d3fb      	bcc.n	800182a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001832:	f006 f875 	bl	8007920 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001836:	f7ff fa2b 	bl	8000c90 <main>

0800183a <LoopForever>:

LoopForever:
    b LoopForever
 800183a:	e7fe      	b.n	800183a <LoopForever>
  ldr   r0, =_estack
 800183c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001844:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001848:	0800889c 	.word	0x0800889c
  ldr r2, =_sbss
 800184c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001850:	20000494 	.word	0x20000494

08001854 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001854:	e7fe      	b.n	8001854 <ADC1_2_IRQHandler>
	...

08001858 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8001862:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <BSP_LED_Init+0x64>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	4a15      	ldr	r2, [pc, #84]	@ (80018bc <BSP_LED_Init+0x64>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800186e:	4b13      	ldr	r3, [pc, #76]	@ (80018bc <BSP_LED_Init+0x64>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 800187a:	2320      	movs	r3, #32
 800187c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	4a0c      	ldr	r2, [pc, #48]	@ (80018c0 <BSP_LED_Init+0x68>)
 800188e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001892:	f107 020c 	add.w	r2, r7, #12
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f000 fc53 	bl	8002144 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	4a07      	ldr	r2, [pc, #28]	@ (80018c0 <BSP_LED_Init+0x68>)
 80018a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a6:	2120      	movs	r1, #32
 80018a8:	2200      	movs	r2, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 fdcc 	bl	8002448 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3720      	adds	r7, #32
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	20000008 	.word	0x20000008

080018c4 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	4a06      	ldr	r2, [pc, #24]	@ (80018ec <BSP_LED_On+0x28>)
 80018d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d6:	2120      	movs	r1, #32
 80018d8:	2201      	movs	r2, #1
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fdb4 	bl	8002448 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000008 	.word	0x20000008

080018f0 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	4a06      	ldr	r2, [pc, #24]	@ (8001918 <BSP_LED_Toggle+0x28>)
 80018fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001902:	2220      	movs	r2, #32
 8001904:	4611      	mov	r1, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fdb6 	bl	8002478 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000008 	.word	0x20000008

0800191c <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	460a      	mov	r2, r1
 8001926:	71fb      	strb	r3, [r7, #7]
 8001928:	4613      	mov	r3, r2
 800192a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 800192c:	4b2c      	ldr	r3, [pc, #176]	@ (80019e0 <BSP_PB_Init+0xc4>)
 800192e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001930:	4a2b      	ldr	r2, [pc, #172]	@ (80019e0 <BSP_PB_Init+0xc4>)
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001938:	4b29      	ldr	r3, [pc, #164]	@ (80019e0 <BSP_PB_Init+0xc4>)
 800193a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001944:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001948:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800194a:	2302      	movs	r3, #2
 800194c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800194e:	2302      	movs	r3, #2
 8001950:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001952:	79bb      	ldrb	r3, [r7, #6]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10c      	bne.n	8001972 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	4a21      	ldr	r2, [pc, #132]	@ (80019e4 <BSP_PB_Init+0xc8>)
 8001960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001964:	f107 020c 	add.w	r2, r7, #12
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f000 fbea 	bl	8002144 <HAL_GPIO_Init>
 8001970:	e031      	b.n	80019d6 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001972:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001976:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	4a1a      	ldr	r2, [pc, #104]	@ (80019e4 <BSP_PB_Init+0xc8>)
 800197c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001980:	f107 020c 	add.w	r2, r7, #12
 8001984:	4611      	mov	r1, r2
 8001986:	4618      	mov	r0, r3
 8001988:	f000 fbdc 	bl	8002144 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4a15      	ldr	r2, [pc, #84]	@ (80019e8 <BSP_PB_Init+0xcc>)
 8001992:	441a      	add	r2, r3
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	4915      	ldr	r1, [pc, #84]	@ (80019ec <BSP_PB_Init+0xd0>)
 8001998:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800199c:	4619      	mov	r1, r3
 800199e:	4610      	mov	r0, r2
 80019a0:	f000 fb8c 	bl	80020bc <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4a0f      	ldr	r2, [pc, #60]	@ (80019e8 <BSP_PB_Init+0xcc>)
 80019aa:	1898      	adds	r0, r3, r2
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	4a10      	ldr	r2, [pc, #64]	@ (80019f0 <BSP_PB_Init+0xd4>)
 80019b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b4:	461a      	mov	r2, r3
 80019b6:	2100      	movs	r1, #0
 80019b8:	f000 fb63 	bl	8002082 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80019bc:	2028      	movs	r0, #40	@ 0x28
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	4a0c      	ldr	r2, [pc, #48]	@ (80019f4 <BSP_PB_Init+0xd8>)
 80019c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c6:	2200      	movs	r2, #0
 80019c8:	4619      	mov	r1, r3
 80019ca:	f000 fa66 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80019ce:	2328      	movs	r3, #40	@ 0x28
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 fa7c 	bl	8001ece <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3720      	adds	r7, #32
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021000 	.word	0x40021000
 80019e4:	2000000c 	.word	0x2000000c
 80019e8:	200002a4 	.word	0x200002a4
 80019ec:	0800872c 	.word	0x0800872c
 80019f0:	20000014 	.word	0x20000014
 80019f4:	20000018 	.word	0x20000018

080019f8 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <BSP_PB_IRQHandler+0x20>)
 8001a08:	4413      	add	r3, r2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fb6a 	bl	80020e4 <HAL_EXTI_IRQHandler>
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	200002a4 	.word	0x200002a4

08001a1c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d903      	bls.n	8001a3a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a32:	f06f 0301 	mvn.w	r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	e018      	b.n	8001a6c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	2294      	movs	r2, #148	@ 0x94
 8001a3e:	fb02 f303 	mul.w	r3, r2, r3
 8001a42:	4a0d      	ldr	r2, [pc, #52]	@ (8001a78 <BSP_COM_Init+0x5c>)
 8001a44:	4413      	add	r3, r2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f86e 	bl	8001b28 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	2294      	movs	r2, #148	@ 0x94
 8001a50:	fb02 f303 	mul.w	r3, r2, r3
 8001a54:	4a08      	ldr	r2, [pc, #32]	@ (8001a78 <BSP_COM_Init+0x5c>)
 8001a56:	4413      	add	r3, r2
 8001a58:	6839      	ldr	r1, [r7, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f80e 	bl	8001a7c <MX_LPUART1_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001a66:	f06f 0303 	mvn.w	r3, #3
 8001a6a:	e000      	b.n	8001a6e <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200002ac 	.word	0x200002ac

08001a7c <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <MX_LPUART1_Init+0x60>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	220c      	movs	r2, #12
 8001a9a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	895b      	ldrh	r3, [r3, #10]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	891b      	ldrh	r3, [r3, #8]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	899b      	ldrh	r3, [r3, #12]
 8001abc:	461a      	mov	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ac8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f003 fc0c 	bl	80052e8 <HAL_UART_Init>
 8001ad0:	4603      	mov	r3, r0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000010 	.word	0x20000010

08001ae0 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001ae8:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <__io_putchar+0x30>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	2394      	movs	r3, #148	@ 0x94
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	4a07      	ldr	r2, [pc, #28]	@ (8001b14 <__io_putchar+0x34>)
 8001af6:	1898      	adds	r0, r3, r2
 8001af8:	1d39      	adds	r1, r7, #4
 8001afa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001afe:	2201      	movs	r2, #1
 8001b00:	f003 fc42 	bl	8005388 <HAL_UART_Transmit>
  return ch;
 8001b04:	687b      	ldr	r3, [r7, #4]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000340 	.word	0x20000340
 8001b14:	200002ac 	.word	0x200002ac

08001b18 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f7ff fa2b 	bl	8000f78 <BSP_PB_Callback>
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	@ 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001b30:	4b22      	ldr	r3, [pc, #136]	@ (8001bbc <COM1_MspInit+0x94>)
 8001b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b34:	4a21      	ldr	r2, [pc, #132]	@ (8001bbc <COM1_MspInit+0x94>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bbc <COM1_MspInit+0x94>)
 8001b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001b48:	4b1c      	ldr	r3, [pc, #112]	@ (8001bbc <COM1_MspInit+0x94>)
 8001b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bbc <COM1_MspInit+0x94>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b54:	4b19      	ldr	r3, [pc, #100]	@ (8001bbc <COM1_MspInit+0x94>)
 8001b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001b60:	4b16      	ldr	r3, [pc, #88]	@ (8001bbc <COM1_MspInit+0x94>)
 8001b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b64:	4a15      	ldr	r2, [pc, #84]	@ (8001bbc <COM1_MspInit+0x94>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001b6c:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <COM1_MspInit+0x94>)
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001b78:	2304      	movs	r3, #4
 8001b7a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001b80:	2302      	movs	r3, #2
 8001b82:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001b84:	2301      	movs	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001b88:	230c      	movs	r3, #12
 8001b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b96:	f000 fad5 	bl	8002144 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001b9a:	2308      	movs	r3, #8
 8001b9c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb0:	f000 fac8 	bl	8002144 <HAL_GPIO_Init>
}
 8001bb4:	bf00      	nop
 8001bb6:	3728      	adds	r7, #40	@ 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bca:	2003      	movs	r0, #3
 8001bcc:	f000 f95a 	bl	8001e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f000 f80d 	bl	8001bf0 <HAL_InitTick>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	71fb      	strb	r3, [r7, #7]
 8001be0:	e001      	b.n	8001be6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001be2:	f7ff f9e3 	bl	8000fac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001be6:	79fb      	ldrb	r3, [r7, #7]

}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001bfc:	4b16      	ldr	r3, [pc, #88]	@ (8001c58 <HAL_InitTick+0x68>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d022      	beq.n	8001c4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c04:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <HAL_InitTick+0x6c>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <HAL_InitTick+0x68>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 f966 	bl	8001eea <HAL_SYSTICK_Config>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10f      	bne.n	8001c44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b0f      	cmp	r3, #15
 8001c28:	d809      	bhi.n	8001c3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c32:	f000 f932 	bl	8001e9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c36:	4a0a      	ldr	r2, [pc, #40]	@ (8001c60 <HAL_InitTick+0x70>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	e007      	b.n	8001c4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	73fb      	strb	r3, [r7, #15]
 8001c42:	e004      	b.n	8001c4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
 8001c48:	e001      	b.n	8001c4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000020 	.word	0x20000020
 8001c5c:	20000004 	.word	0x20000004
 8001c60:	2000001c 	.word	0x2000001c

08001c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c68:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <HAL_IncTick+0x1c>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_IncTick+0x20>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4413      	add	r3, r2
 8001c72:	4a03      	ldr	r2, [pc, #12]	@ (8001c80 <HAL_IncTick+0x1c>)
 8001c74:	6013      	str	r3, [r2, #0]
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	20000344 	.word	0x20000344
 8001c84:	20000020 	.word	0x20000020

08001c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	@ (8001c9c <HAL_GetTick+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000344 	.word	0x20000344

08001ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca8:	f7ff ffee 	bl	8001c88 <HAL_GetTick>
 8001cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb8:	d004      	beq.n	8001cc4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cba:	4b09      	ldr	r3, [pc, #36]	@ (8001ce0 <HAL_Delay+0x40>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cc4:	bf00      	nop
 8001cc6:	f7ff ffdf 	bl	8001c88 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d8f7      	bhi.n	8001cc6 <HAL_Delay+0x26>
  {
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000020 	.word	0x20000020

08001ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d00:	4013      	ands	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d16:	4a04      	ldr	r2, [pc, #16]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	60d3      	str	r3, [r2, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d30:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <__NVIC_GetPriorityGrouping+0x18>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	f003 0307 	and.w	r3, r3, #7
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	db0b      	blt.n	8001d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	f003 021f 	and.w	r2, r3, #31
 8001d60:	4907      	ldr	r1, [pc, #28]	@ (8001d80 <__NVIC_EnableIRQ+0x38>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2001      	movs	r0, #1
 8001d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	@ (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	@ (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	@ 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	@ 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e50:	d301      	bcc.n	8001e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00f      	b.n	8001e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e56:	4a0a      	ldr	r2, [pc, #40]	@ (8001e80 <SysTick_Config+0x40>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5e:	210f      	movs	r1, #15
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	f7ff ff8e 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e68:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <SysTick_Config+0x40>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6e:	4b04      	ldr	r3, [pc, #16]	@ (8001e80 <SysTick_Config+0x40>)
 8001e70:	2207      	movs	r2, #7
 8001e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	e000e010 	.word	0xe000e010

08001e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff29 	bl	8001ce4 <__NVIC_SetPriorityGrouping>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea8:	f7ff ff40 	bl	8001d2c <__NVIC_GetPriorityGrouping>
 8001eac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff90 	bl	8001dd8 <NVIC_EncodePriority>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff5f 	bl	8001d84 <__NVIC_SetPriority>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff33 	bl	8001d48 <__NVIC_EnableIRQ>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffa4 	bl	8001e40 <SysTick_Config>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b085      	sub	sp, #20
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d005      	beq.n	8001f26 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
 8001f24:	e037      	b.n	8001f96 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 020e 	bic.w	r2, r2, #14
 8001f34:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f44:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0201 	bic.w	r2, r2, #1
 8001f54:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5a:	f003 021f 	and.w	r2, r3, #31
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	2101      	movs	r1, #1
 8001f64:	fa01 f202 	lsl.w	r2, r1, r2
 8001f68:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f72:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00c      	beq.n	8001f96 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f86:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f8a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001f94:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d00d      	beq.n	8001fe8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2204      	movs	r2, #4
 8001fd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	e047      	b.n	8002078 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 020e 	bic.w	r2, r2, #14
 8001ff6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002012:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002016:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	2101      	movs	r1, #1
 8002026:	fa01 f202 	lsl.w	r2, r1, r2
 800202a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002034:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00c      	beq.n	8002058 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002048:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800204c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002056:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	4798      	blx	r3
    }
  }
  return status;
 8002078:	7bfb      	ldrb	r3, [r7, #15]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002082:	b480      	push	{r7}
 8002084:	b087      	sub	sp, #28
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	460b      	mov	r3, r1
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8002094:	7afb      	ldrb	r3, [r7, #11]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d103      	bne.n	80020a2 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	605a      	str	r2, [r3, #4]
      break;
 80020a0:	e005      	b.n	80020ae <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	75fb      	strb	r3, [r7, #23]
      break;
 80020ac:	bf00      	nop
  }

  return status;
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	371c      	adds	r7, #28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e003      	b.n	80020d8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80020d6:	2300      	movs	r3, #0
  }
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0c1b      	lsrs	r3, r3, #16
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	2201      	movs	r2, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	4b0c      	ldr	r3, [pc, #48]	@ (8002140 <HAL_EXTI_IRQHandler+0x5c>)
 800210e:	4413      	add	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4798      	blx	r3
    }
  }
}
 8002136:	bf00      	nop
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40010414 	.word	0x40010414

08002144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002152:	e15a      	b.n	800240a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2101      	movs	r1, #1
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	fa01 f303 	lsl.w	r3, r1, r3
 8002160:	4013      	ands	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 814c 	beq.w	8002404 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	2b01      	cmp	r3, #1
 8002176:	d005      	beq.n	8002184 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002180:	2b02      	cmp	r3, #2
 8002182:	d130      	bne.n	80021e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021ba:	2201      	movs	r2, #1
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	091b      	lsrs	r3, r3, #4
 80021d0:	f003 0201 	and.w	r2, r3, #1
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d017      	beq.n	8002222 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	2203      	movs	r2, #3
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d123      	bne.n	8002276 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	08da      	lsrs	r2, r3, #3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3208      	adds	r2, #8
 8002236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800223a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	220f      	movs	r2, #15
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	691a      	ldr	r2, [r3, #16]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	08da      	lsrs	r2, r3, #3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3208      	adds	r2, #8
 8002270:	6939      	ldr	r1, [r7, #16]
 8002272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	2203      	movs	r2, #3
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4013      	ands	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 0203 	and.w	r2, r3, #3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 80a6 	beq.w	8002404 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b8:	4b5b      	ldr	r3, [pc, #364]	@ (8002428 <HAL_GPIO_Init+0x2e4>)
 80022ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022bc:	4a5a      	ldr	r2, [pc, #360]	@ (8002428 <HAL_GPIO_Init+0x2e4>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80022c4:	4b58      	ldr	r3, [pc, #352]	@ (8002428 <HAL_GPIO_Init+0x2e4>)
 80022c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022d0:	4a56      	ldr	r2, [pc, #344]	@ (800242c <HAL_GPIO_Init+0x2e8>)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	089b      	lsrs	r3, r3, #2
 80022d6:	3302      	adds	r3, #2
 80022d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022fa:	d01f      	beq.n	800233c <HAL_GPIO_Init+0x1f8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a4c      	ldr	r2, [pc, #304]	@ (8002430 <HAL_GPIO_Init+0x2ec>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d019      	beq.n	8002338 <HAL_GPIO_Init+0x1f4>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a4b      	ldr	r2, [pc, #300]	@ (8002434 <HAL_GPIO_Init+0x2f0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d013      	beq.n	8002334 <HAL_GPIO_Init+0x1f0>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a4a      	ldr	r2, [pc, #296]	@ (8002438 <HAL_GPIO_Init+0x2f4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d00d      	beq.n	8002330 <HAL_GPIO_Init+0x1ec>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a49      	ldr	r2, [pc, #292]	@ (800243c <HAL_GPIO_Init+0x2f8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d007      	beq.n	800232c <HAL_GPIO_Init+0x1e8>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a48      	ldr	r2, [pc, #288]	@ (8002440 <HAL_GPIO_Init+0x2fc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d101      	bne.n	8002328 <HAL_GPIO_Init+0x1e4>
 8002324:	2305      	movs	r3, #5
 8002326:	e00a      	b.n	800233e <HAL_GPIO_Init+0x1fa>
 8002328:	2306      	movs	r3, #6
 800232a:	e008      	b.n	800233e <HAL_GPIO_Init+0x1fa>
 800232c:	2304      	movs	r3, #4
 800232e:	e006      	b.n	800233e <HAL_GPIO_Init+0x1fa>
 8002330:	2303      	movs	r3, #3
 8002332:	e004      	b.n	800233e <HAL_GPIO_Init+0x1fa>
 8002334:	2302      	movs	r3, #2
 8002336:	e002      	b.n	800233e <HAL_GPIO_Init+0x1fa>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <HAL_GPIO_Init+0x1fa>
 800233c:	2300      	movs	r3, #0
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	f002 0203 	and.w	r2, r2, #3
 8002344:	0092      	lsls	r2, r2, #2
 8002346:	4093      	lsls	r3, r2
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800234e:	4937      	ldr	r1, [pc, #220]	@ (800242c <HAL_GPIO_Init+0x2e8>)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	089b      	lsrs	r3, r3, #2
 8002354:	3302      	adds	r3, #2
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800235c:	4b39      	ldr	r3, [pc, #228]	@ (8002444 <HAL_GPIO_Init+0x300>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	43db      	mvns	r3, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4013      	ands	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002380:	4a30      	ldr	r2, [pc, #192]	@ (8002444 <HAL_GPIO_Init+0x300>)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002386:	4b2f      	ldr	r3, [pc, #188]	@ (8002444 <HAL_GPIO_Init+0x300>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023aa:	4a26      	ldr	r2, [pc, #152]	@ (8002444 <HAL_GPIO_Init+0x300>)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80023b0:	4b24      	ldr	r3, [pc, #144]	@ (8002444 <HAL_GPIO_Init+0x300>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002444 <HAL_GPIO_Init+0x300>)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023da:	4b1a      	ldr	r3, [pc, #104]	@ (8002444 <HAL_GPIO_Init+0x300>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023fe:	4a11      	ldr	r2, [pc, #68]	@ (8002444 <HAL_GPIO_Init+0x300>)
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	3301      	adds	r3, #1
 8002408:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	f47f ae9d 	bne.w	8002154 <HAL_GPIO_Init+0x10>
  }
}
 800241a:	bf00      	nop
 800241c:	bf00      	nop
 800241e:	371c      	adds	r7, #28
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	40021000 	.word	0x40021000
 800242c:	40010000 	.word	0x40010000
 8002430:	48000400 	.word	0x48000400
 8002434:	48000800 	.word	0x48000800
 8002438:	48000c00 	.word	0x48000c00
 800243c:	48001000 	.word	0x48001000
 8002440:	48001400 	.word	0x48001400
 8002444:	40010400 	.word	0x40010400

08002448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]
 8002454:	4613      	mov	r3, r2
 8002456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002458:	787b      	ldrb	r3, [r7, #1]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002464:	e002      	b.n	800246c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4013      	ands	r3, r2
 8002490:	041a      	lsls	r2, r3, #16
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	43d9      	mvns	r1, r3
 8002496:	887b      	ldrh	r3, [r7, #2]
 8002498:	400b      	ands	r3, r1
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	619a      	str	r2, [r3, #24]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e08d      	b.n	80025da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe f8fc 	bl	80006d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2224      	movs	r2, #36	@ 0x24
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0201 	bic.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800250c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d107      	bne.n	8002526 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	e006      	b.n	8002534 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002532:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d108      	bne.n	800254e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	e007      	b.n	800255e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800255c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800256c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002570:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002580:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69d9      	ldr	r1, [r3, #28]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1a      	ldr	r2, [r3, #32]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	4608      	mov	r0, r1
 80025ee:	4611      	mov	r1, r2
 80025f0:	461a      	mov	r2, r3
 80025f2:	4603      	mov	r3, r0
 80025f4:	817b      	strh	r3, [r7, #10]
 80025f6:	460b      	mov	r3, r1
 80025f8:	813b      	strh	r3, [r7, #8]
 80025fa:	4613      	mov	r3, r2
 80025fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b20      	cmp	r3, #32
 8002608:	f040 80f9 	bne.w	80027fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d002      	beq.n	8002618 <HAL_I2C_Mem_Write+0x34>
 8002612:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002614:	2b00      	cmp	r3, #0
 8002616:	d105      	bne.n	8002624 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800261e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0ed      	b.n	8002800 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_I2C_Mem_Write+0x4e>
 800262e:	2302      	movs	r3, #2
 8002630:	e0e6      	b.n	8002800 <HAL_I2C_Mem_Write+0x21c>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800263a:	f7ff fb25 	bl	8001c88 <HAL_GetTick>
 800263e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	2319      	movs	r3, #25
 8002646:	2201      	movs	r2, #1
 8002648:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fac3 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0d1      	b.n	8002800 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2221      	movs	r2, #33	@ 0x21
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2240      	movs	r2, #64	@ 0x40
 8002668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a3a      	ldr	r2, [r7, #32]
 8002676:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800267c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002684:	88f8      	ldrh	r0, [r7, #6]
 8002686:	893a      	ldrh	r2, [r7, #8]
 8002688:	8979      	ldrh	r1, [r7, #10]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	4603      	mov	r3, r0
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f9d3 	bl	8002a40 <I2C_RequestMemoryWrite>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0a9      	b.n	8002800 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2bff      	cmp	r3, #255	@ 0xff
 80026b4:	d90e      	bls.n	80026d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	22ff      	movs	r2, #255	@ 0xff
 80026ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	8979      	ldrh	r1, [r7, #10]
 80026c4:	2300      	movs	r3, #0
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 fc47 	bl	8002f60 <I2C_TransferConfig>
 80026d2:	e00f      	b.n	80026f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	8979      	ldrh	r1, [r7, #10]
 80026e6:	2300      	movs	r3, #0
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fc36 	bl	8002f60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 fac6 	bl	8002c8a <I2C_WaitOnTXISFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e07b      	b.n	8002800 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270c:	781a      	ldrb	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d034      	beq.n	80027ac <HAL_I2C_Mem_Write+0x1c8>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002746:	2b00      	cmp	r3, #0
 8002748:	d130      	bne.n	80027ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002750:	2200      	movs	r2, #0
 8002752:	2180      	movs	r1, #128	@ 0x80
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 fa3f 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e04d      	b.n	8002800 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002768:	b29b      	uxth	r3, r3
 800276a:	2bff      	cmp	r3, #255	@ 0xff
 800276c:	d90e      	bls.n	800278c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	22ff      	movs	r2, #255	@ 0xff
 8002772:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002778:	b2da      	uxtb	r2, r3
 800277a:	8979      	ldrh	r1, [r7, #10]
 800277c:	2300      	movs	r3, #0
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fbeb 	bl	8002f60 <I2C_TransferConfig>
 800278a:	e00f      	b.n	80027ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279a:	b2da      	uxtb	r2, r3
 800279c:	8979      	ldrh	r1, [r7, #10]
 800279e:	2300      	movs	r3, #0
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fbda 	bl	8002f60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d19e      	bne.n	80026f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 faac 	bl	8002d18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e01a      	b.n	8002800 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2220      	movs	r2, #32
 80027d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6859      	ldr	r1, [r3, #4]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002808 <HAL_I2C_Mem_Write+0x224>)
 80027de:	400b      	ands	r3, r1
 80027e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2220      	movs	r2, #32
 80027e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e000      	b.n	8002800 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80027fe:	2302      	movs	r3, #2
  }
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	fe00e800 	.word	0xfe00e800

0800280c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af02      	add	r7, sp, #8
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	4608      	mov	r0, r1
 8002816:	4611      	mov	r1, r2
 8002818:	461a      	mov	r2, r3
 800281a:	4603      	mov	r3, r0
 800281c:	817b      	strh	r3, [r7, #10]
 800281e:	460b      	mov	r3, r1
 8002820:	813b      	strh	r3, [r7, #8]
 8002822:	4613      	mov	r3, r2
 8002824:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b20      	cmp	r3, #32
 8002830:	f040 80fd 	bne.w	8002a2e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_I2C_Mem_Read+0x34>
 800283a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002846:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0f1      	b.n	8002a30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_I2C_Mem_Read+0x4e>
 8002856:	2302      	movs	r3, #2
 8002858:	e0ea      	b.n	8002a30 <HAL_I2C_Mem_Read+0x224>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002862:	f7ff fa11 	bl	8001c88 <HAL_GetTick>
 8002866:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	2319      	movs	r3, #25
 800286e:	2201      	movs	r2, #1
 8002870:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 f9af 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0d5      	b.n	8002a30 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2222      	movs	r2, #34	@ 0x22
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2240      	movs	r2, #64	@ 0x40
 8002890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a3a      	ldr	r2, [r7, #32]
 800289e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80028a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ac:	88f8      	ldrh	r0, [r7, #6]
 80028ae:	893a      	ldrh	r2, [r7, #8]
 80028b0:	8979      	ldrh	r1, [r7, #10]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	4603      	mov	r3, r0
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 f913 	bl	8002ae8 <I2C_RequestMemoryRead>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0ad      	b.n	8002a30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2bff      	cmp	r3, #255	@ 0xff
 80028dc:	d90e      	bls.n	80028fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	22ff      	movs	r2, #255	@ 0xff
 80028e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	8979      	ldrh	r1, [r7, #10]
 80028ec:	4b52      	ldr	r3, [pc, #328]	@ (8002a38 <HAL_I2C_Mem_Read+0x22c>)
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 fb33 	bl	8002f60 <I2C_TransferConfig>
 80028fa:	e00f      	b.n	800291c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290a:	b2da      	uxtb	r2, r3
 800290c:	8979      	ldrh	r1, [r7, #10]
 800290e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a38 <HAL_I2C_Mem_Read+0x22c>)
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fb22 	bl	8002f60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002922:	2200      	movs	r2, #0
 8002924:	2104      	movs	r1, #4
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 f956 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e07c      	b.n	8002a30 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d034      	beq.n	80029dc <HAL_I2C_Mem_Read+0x1d0>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002976:	2b00      	cmp	r3, #0
 8002978:	d130      	bne.n	80029dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002980:	2200      	movs	r2, #0
 8002982:	2180      	movs	r1, #128	@ 0x80
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f927 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e04d      	b.n	8002a30 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	2bff      	cmp	r3, #255	@ 0xff
 800299c:	d90e      	bls.n	80029bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	22ff      	movs	r2, #255	@ 0xff
 80029a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	8979      	ldrh	r1, [r7, #10]
 80029ac:	2300      	movs	r3, #0
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 fad3 	bl	8002f60 <I2C_TransferConfig>
 80029ba:	e00f      	b.n	80029dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	8979      	ldrh	r1, [r7, #10]
 80029ce:	2300      	movs	r3, #0
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fac2 	bl	8002f60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d19a      	bne.n	800291c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f994 	bl	8002d18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e01a      	b.n	8002a30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2220      	movs	r2, #32
 8002a00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a3c <HAL_I2C_Mem_Read+0x230>)
 8002a0e:	400b      	ands	r3, r1
 8002a10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e000      	b.n	8002a30 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a2e:	2302      	movs	r3, #2
  }
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	80002400 	.word	0x80002400
 8002a3c:	fe00e800 	.word	0xfe00e800

08002a40 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	4608      	mov	r0, r1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4603      	mov	r3, r0
 8002a50:	817b      	strh	r3, [r7, #10]
 8002a52:	460b      	mov	r3, r1
 8002a54:	813b      	strh	r3, [r7, #8]
 8002a56:	4613      	mov	r3, r2
 8002a58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	8979      	ldrh	r1, [r7, #10]
 8002a60:	4b20      	ldr	r3, [pc, #128]	@ (8002ae4 <I2C_RequestMemoryWrite+0xa4>)
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 fa79 	bl	8002f60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	69b9      	ldr	r1, [r7, #24]
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f909 	bl	8002c8a <I2C_WaitOnTXISFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e02c      	b.n	8002adc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d105      	bne.n	8002a94 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a88:	893b      	ldrh	r3, [r7, #8]
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a92:	e015      	b.n	8002ac0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a94:	893b      	ldrh	r3, [r7, #8]
 8002a96:	0a1b      	lsrs	r3, r3, #8
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	69b9      	ldr	r1, [r7, #24]
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f8ef 	bl	8002c8a <I2C_WaitOnTXISFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e012      	b.n	8002adc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ab6:	893b      	ldrh	r3, [r7, #8]
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2180      	movs	r1, #128	@ 0x80
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f884 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	80002000 	.word	0x80002000

08002ae8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	4608      	mov	r0, r1
 8002af2:	4611      	mov	r1, r2
 8002af4:	461a      	mov	r2, r3
 8002af6:	4603      	mov	r3, r0
 8002af8:	817b      	strh	r3, [r7, #10]
 8002afa:	460b      	mov	r3, r1
 8002afc:	813b      	strh	r3, [r7, #8]
 8002afe:	4613      	mov	r3, r2
 8002b00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	8979      	ldrh	r1, [r7, #10]
 8002b08:	4b20      	ldr	r3, [pc, #128]	@ (8002b8c <I2C_RequestMemoryRead+0xa4>)
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 fa26 	bl	8002f60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	69b9      	ldr	r1, [r7, #24]
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f8b6 	bl	8002c8a <I2C_WaitOnTXISFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e02c      	b.n	8002b82 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d105      	bne.n	8002b3a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b2e:	893b      	ldrh	r3, [r7, #8]
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b38:	e015      	b.n	8002b66 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b3a:	893b      	ldrh	r3, [r7, #8]
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	69b9      	ldr	r1, [r7, #24]
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f89c 	bl	8002c8a <I2C_WaitOnTXISFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e012      	b.n	8002b82 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b5c:	893b      	ldrh	r3, [r7, #8]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2140      	movs	r1, #64	@ 0x40
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f831 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	80002000 	.word	0x80002000

08002b90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d103      	bne.n	8002bae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2200      	movs	r2, #0
 8002bac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d007      	beq.n	8002bcc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	619a      	str	r2, [r3, #24]
  }
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	4613      	mov	r3, r2
 8002be6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002be8:	e03b      	b.n	8002c62 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	6839      	ldr	r1, [r7, #0]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f8d6 	bl	8002da0 <I2C_IsErrorOccurred>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e041      	b.n	8002c82 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c04:	d02d      	beq.n	8002c62 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c06:	f7ff f83f 	bl	8001c88 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d302      	bcc.n	8002c1c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d122      	bne.n	8002c62 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	4013      	ands	r3, r2
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d113      	bne.n	8002c62 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3e:	f043 0220 	orr.w	r2, r3, #32
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e00f      	b.n	8002c82 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699a      	ldr	r2, [r3, #24]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	bf0c      	ite	eq
 8002c72:	2301      	moveq	r3, #1
 8002c74:	2300      	movne	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d0b4      	beq.n	8002bea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c96:	e033      	b.n	8002d00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f87f 	bl	8002da0 <I2C_IsErrorOccurred>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e031      	b.n	8002d10 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb2:	d025      	beq.n	8002d00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb4:	f7fe ffe8 	bl	8001c88 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d302      	bcc.n	8002cca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d11a      	bne.n	8002d00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d013      	beq.n	8002d00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cdc:	f043 0220 	orr.w	r2, r3, #32
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e007      	b.n	8002d10 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d1c4      	bne.n	8002c98 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d24:	e02f      	b.n	8002d86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f838 	bl	8002da0 <I2C_IsErrorOccurred>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e02d      	b.n	8002d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3a:	f7fe ffa5 	bl	8001c88 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d302      	bcc.n	8002d50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d11a      	bne.n	8002d86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	d013      	beq.n	8002d86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d62:	f043 0220 	orr.w	r2, r3, #32
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e007      	b.n	8002d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	d1c8      	bne.n	8002d26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08a      	sub	sp, #40	@ 0x28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d068      	beq.n	8002e9e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2210      	movs	r2, #16
 8002dd2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dd4:	e049      	b.n	8002e6a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ddc:	d045      	beq.n	8002e6a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dde:	f7fe ff53 	bl	8001c88 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d302      	bcc.n	8002df4 <I2C_IsErrorOccurred+0x54>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d13a      	bne.n	8002e6a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dfe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e16:	d121      	bne.n	8002e5c <I2C_IsErrorOccurred+0xbc>
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e1e:	d01d      	beq.n	8002e5c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e20:	7cfb      	ldrb	r3, [r7, #19]
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	d01a      	beq.n	8002e5c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e34:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e36:	f7fe ff27 	bl	8001c88 <HAL_GetTick>
 8002e3a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e3c:	e00e      	b.n	8002e5c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e3e:	f7fe ff23 	bl	8001c88 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b19      	cmp	r3, #25
 8002e4a:	d907      	bls.n	8002e5c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	f043 0320 	orr.w	r3, r3, #32
 8002e52:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002e5a:	e006      	b.n	8002e6a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d1e9      	bne.n	8002e3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b20      	cmp	r3, #32
 8002e76:	d003      	beq.n	8002e80 <I2C_IsErrorOccurred+0xe0>
 8002e78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0aa      	beq.n	8002dd6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d103      	bne.n	8002e90 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	f043 0304 	orr.w	r3, r3, #4
 8002e96:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00b      	beq.n	8002ec8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ec0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	f043 0308 	orr.w	r3, r3, #8
 8002ed8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ee2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00b      	beq.n	8002f0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	f043 0302 	orr.w	r3, r3, #2
 8002efa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d01c      	beq.n	8002f4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7ff fe3b 	bl	8002b90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6859      	ldr	r1, [r3, #4]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b0d      	ldr	r3, [pc, #52]	@ (8002f5c <I2C_IsErrorOccurred+0x1bc>)
 8002f26:	400b      	ands	r3, r1
 8002f28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	431a      	orrs	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3728      	adds	r7, #40	@ 0x28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	fe00e800 	.word	0xfe00e800

08002f60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	607b      	str	r3, [r7, #4]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	817b      	strh	r3, [r7, #10]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f72:	897b      	ldrh	r3, [r7, #10]
 8002f74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f78:	7a7b      	ldrb	r3, [r7, #9]
 8002f7a:	041b      	lsls	r3, r3, #16
 8002f7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	0d5b      	lsrs	r3, r3, #21
 8002f9a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002f9e:	4b08      	ldr	r3, [pc, #32]	@ (8002fc0 <I2C_TransferConfig+0x60>)
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	ea02 0103 	and.w	r1, r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fb2:	bf00      	nop
 8002fb4:	371c      	adds	r7, #28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	03ff63ff 	.word	0x03ff63ff

08002fc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d138      	bne.n	800304c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e032      	b.n	800304e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2224      	movs	r2, #36	@ 0x24
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003016:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6819      	ldr	r1, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	e000      	b.n	800304e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800305a:	b480      	push	{r7}
 800305c:	b085      	sub	sp, #20
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b20      	cmp	r3, #32
 800306e:	d139      	bne.n	80030e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800307a:	2302      	movs	r3, #2
 800307c:	e033      	b.n	80030e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2224      	movs	r2, #36	@ 0x24
 800308a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0201 	bic.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	e000      	b.n	80030e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030e4:	2302      	movs	r3, #2
  }
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d141      	bne.n	8003186 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003102:	4b4b      	ldr	r3, [pc, #300]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800310a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800310e:	d131      	bne.n	8003174 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003110:	4b47      	ldr	r3, [pc, #284]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003116:	4a46      	ldr	r2, [pc, #280]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003118:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800311c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003120:	4b43      	ldr	r3, [pc, #268]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003128:	4a41      	ldr	r2, [pc, #260]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800312e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003130:	4b40      	ldr	r3, [pc, #256]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2232      	movs	r2, #50	@ 0x32
 8003136:	fb02 f303 	mul.w	r3, r2, r3
 800313a:	4a3f      	ldr	r2, [pc, #252]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	0c9b      	lsrs	r3, r3, #18
 8003142:	3301      	adds	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003146:	e002      	b.n	800314e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3b01      	subs	r3, #1
 800314c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800314e:	4b38      	ldr	r3, [pc, #224]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800315a:	d102      	bne.n	8003162 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f2      	bne.n	8003148 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003162:	4b33      	ldr	r3, [pc, #204]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800316e:	d158      	bne.n	8003222 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e057      	b.n	8003224 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003174:	4b2e      	ldr	r3, [pc, #184]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800317a:	4a2d      	ldr	r2, [pc, #180]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800317c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003180:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003184:	e04d      	b.n	8003222 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800318c:	d141      	bne.n	8003212 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800318e:	4b28      	ldr	r3, [pc, #160]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800319a:	d131      	bne.n	8003200 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800319c:	4b24      	ldr	r3, [pc, #144]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031a2:	4a23      	ldr	r2, [pc, #140]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031ac:	4b20      	ldr	r3, [pc, #128]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2232      	movs	r2, #50	@ 0x32
 80031c2:	fb02 f303 	mul.w	r3, r2, r3
 80031c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031c8:	fba2 2303 	umull	r2, r3, r2, r3
 80031cc:	0c9b      	lsrs	r3, r3, #18
 80031ce:	3301      	adds	r3, #1
 80031d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031d2:	e002      	b.n	80031da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031da:	4b15      	ldr	r3, [pc, #84]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e6:	d102      	bne.n	80031ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f2      	bne.n	80031d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031ee:	4b10      	ldr	r3, [pc, #64]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031fa:	d112      	bne.n	8003222 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e011      	b.n	8003224 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003200:	4b0b      	ldr	r3, [pc, #44]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003206:	4a0a      	ldr	r2, [pc, #40]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800320c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003210:	e007      	b.n	8003222 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003212:	4b07      	ldr	r3, [pc, #28]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800321a:	4a05      	ldr	r2, [pc, #20]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003220:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	40007000 	.word	0x40007000
 8003234:	20000004 	.word	0x20000004
 8003238:	431bde83 	.word	0x431bde83

0800323c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003240:	4b05      	ldr	r3, [pc, #20]	@ (8003258 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a04      	ldr	r2, [pc, #16]	@ (8003258 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003246:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800324a:	6093      	str	r3, [r2, #8]
}
 800324c:	bf00      	nop
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40007000 	.word	0x40007000

0800325c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e2fe      	b.n	800386c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d075      	beq.n	8003366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800327a:	4b97      	ldr	r3, [pc, #604]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003284:	4b94      	ldr	r3, [pc, #592]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	2b0c      	cmp	r3, #12
 8003292:	d102      	bne.n	800329a <HAL_RCC_OscConfig+0x3e>
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b03      	cmp	r3, #3
 8003298:	d002      	beq.n	80032a0 <HAL_RCC_OscConfig+0x44>
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2b08      	cmp	r3, #8
 800329e:	d10b      	bne.n	80032b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a0:	4b8d      	ldr	r3, [pc, #564]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d05b      	beq.n	8003364 <HAL_RCC_OscConfig+0x108>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d157      	bne.n	8003364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e2d9      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c0:	d106      	bne.n	80032d0 <HAL_RCC_OscConfig+0x74>
 80032c2:	4b85      	ldr	r3, [pc, #532]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a84      	ldr	r2, [pc, #528]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e01d      	b.n	800330c <HAL_RCC_OscConfig+0xb0>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x98>
 80032da:	4b7f      	ldr	r3, [pc, #508]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a7e      	ldr	r2, [pc, #504]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80032e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b7c      	ldr	r3, [pc, #496]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a7b      	ldr	r2, [pc, #492]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e00b      	b.n	800330c <HAL_RCC_OscConfig+0xb0>
 80032f4:	4b78      	ldr	r3, [pc, #480]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a77      	ldr	r2, [pc, #476]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80032fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	4b75      	ldr	r3, [pc, #468]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a74      	ldr	r2, [pc, #464]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800330a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d013      	beq.n	800333c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fe fcb8 	bl	8001c88 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331c:	f7fe fcb4 	bl	8001c88 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	@ 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e29e      	b.n	800386c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800332e:	4b6a      	ldr	r3, [pc, #424]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0xc0>
 800333a:	e014      	b.n	8003366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7fe fca4 	bl	8001c88 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003344:	f7fe fca0 	bl	8001c88 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	@ 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e28a      	b.n	800386c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003356:	4b60      	ldr	r3, [pc, #384]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0xe8>
 8003362:	e000      	b.n	8003366 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d075      	beq.n	800345e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003372:	4b59      	ldr	r3, [pc, #356]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800337c:	4b56      	ldr	r3, [pc, #344]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	2b0c      	cmp	r3, #12
 800338a:	d102      	bne.n	8003392 <HAL_RCC_OscConfig+0x136>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d002      	beq.n	8003398 <HAL_RCC_OscConfig+0x13c>
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2b04      	cmp	r3, #4
 8003396:	d11f      	bne.n	80033d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003398:	4b4f      	ldr	r3, [pc, #316]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_RCC_OscConfig+0x154>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e25d      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b0:	4b49      	ldr	r3, [pc, #292]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	061b      	lsls	r3, r3, #24
 80033be:	4946      	ldr	r1, [pc, #280]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033c4:	4b45      	ldr	r3, [pc, #276]	@ (80034dc <HAL_RCC_OscConfig+0x280>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fe fc11 	bl	8001bf0 <HAL_InitTick>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d043      	beq.n	800345c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e249      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d023      	beq.n	8003428 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e0:	4b3d      	ldr	r3, [pc, #244]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a3c      	ldr	r2, [pc, #240]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80033e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fe fc4c 	bl	8001c88 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f4:	f7fe fc48 	bl	8001c88 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e232      	b.n	800386c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003406:	4b34      	ldr	r3, [pc, #208]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003412:	4b31      	ldr	r3, [pc, #196]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	061b      	lsls	r3, r3, #24
 8003420:	492d      	ldr	r1, [pc, #180]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]
 8003426:	e01a      	b.n	800345e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003428:	4b2b      	ldr	r3, [pc, #172]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a2a      	ldr	r2, [pc, #168]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 800342e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fe fc28 	bl	8001c88 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800343c:	f7fe fc24 	bl	8001c88 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e20e      	b.n	800386c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800344e:	4b22      	ldr	r3, [pc, #136]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x1e0>
 800345a:	e000      	b.n	800345e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800345c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d041      	beq.n	80034ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d01c      	beq.n	80034ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003472:	4b19      	ldr	r3, [pc, #100]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003474:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003478:	4a17      	ldr	r2, [pc, #92]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003482:	f7fe fc01 	bl	8001c88 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348a:	f7fe fbfd 	bl	8001c88 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e1e7      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800349c:	4b0e      	ldr	r3, [pc, #56]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 800349e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0ef      	beq.n	800348a <HAL_RCC_OscConfig+0x22e>
 80034aa:	e020      	b.n	80034ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ac:	4b0a      	ldr	r3, [pc, #40]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80034ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034b2:	4a09      	ldr	r2, [pc, #36]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80034b4:	f023 0301 	bic.w	r3, r3, #1
 80034b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034bc:	f7fe fbe4 	bl	8001c88 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034c2:	e00d      	b.n	80034e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c4:	f7fe fbe0 	bl	8001c88 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d906      	bls.n	80034e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e1ca      	b.n	800386c <HAL_RCC_OscConfig+0x610>
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000
 80034dc:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034e0:	4b8c      	ldr	r3, [pc, #560]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80034e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1ea      	bne.n	80034c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 80a6 	beq.w	8003648 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fc:	2300      	movs	r3, #0
 80034fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003500:	4b84      	ldr	r3, [pc, #528]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 8003502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_OscConfig+0x2b4>
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <HAL_RCC_OscConfig+0x2b6>
 8003510:	2300      	movs	r3, #0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00d      	beq.n	8003532 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003516:	4b7f      	ldr	r3, [pc, #508]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 8003518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351a:	4a7e      	ldr	r2, [pc, #504]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 800351c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003520:	6593      	str	r3, [r2, #88]	@ 0x58
 8003522:	4b7c      	ldr	r3, [pc, #496]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 8003524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800352e:	2301      	movs	r3, #1
 8003530:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003532:	4b79      	ldr	r3, [pc, #484]	@ (8003718 <HAL_RCC_OscConfig+0x4bc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d118      	bne.n	8003570 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800353e:	4b76      	ldr	r3, [pc, #472]	@ (8003718 <HAL_RCC_OscConfig+0x4bc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a75      	ldr	r2, [pc, #468]	@ (8003718 <HAL_RCC_OscConfig+0x4bc>)
 8003544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354a:	f7fe fb9d 	bl	8001c88 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003552:	f7fe fb99 	bl	8001c88 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e183      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003564:	4b6c      	ldr	r3, [pc, #432]	@ (8003718 <HAL_RCC_OscConfig+0x4bc>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d108      	bne.n	800358a <HAL_RCC_OscConfig+0x32e>
 8003578:	4b66      	ldr	r3, [pc, #408]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 800357a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800357e:	4a65      	ldr	r2, [pc, #404]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003588:	e024      	b.n	80035d4 <HAL_RCC_OscConfig+0x378>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b05      	cmp	r3, #5
 8003590:	d110      	bne.n	80035b4 <HAL_RCC_OscConfig+0x358>
 8003592:	4b60      	ldr	r3, [pc, #384]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003598:	4a5e      	ldr	r2, [pc, #376]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 800359a:	f043 0304 	orr.w	r3, r3, #4
 800359e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80035a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a8:	4a5a      	ldr	r2, [pc, #360]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035b2:	e00f      	b.n	80035d4 <HAL_RCC_OscConfig+0x378>
 80035b4:	4b57      	ldr	r3, [pc, #348]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ba:	4a56      	ldr	r2, [pc, #344]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80035bc:	f023 0301 	bic.w	r3, r3, #1
 80035c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035c4:	4b53      	ldr	r3, [pc, #332]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ca:	4a52      	ldr	r2, [pc, #328]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80035cc:	f023 0304 	bic.w	r3, r3, #4
 80035d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d016      	beq.n	800360a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035dc:	f7fe fb54 	bl	8001c88 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e2:	e00a      	b.n	80035fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e4:	f7fe fb50 	bl	8001c88 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e138      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035fa:	4b46      	ldr	r3, [pc, #280]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80035fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0ed      	beq.n	80035e4 <HAL_RCC_OscConfig+0x388>
 8003608:	e015      	b.n	8003636 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360a:	f7fe fb3d 	bl	8001c88 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003610:	e00a      	b.n	8003628 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003612:	f7fe fb39 	bl	8001c88 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003620:	4293      	cmp	r3, r2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e121      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003628:	4b3a      	ldr	r3, [pc, #232]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1ed      	bne.n	8003612 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003636:	7ffb      	ldrb	r3, [r7, #31]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d105      	bne.n	8003648 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363c:	4b35      	ldr	r3, [pc, #212]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 800363e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003640:	4a34      	ldr	r2, [pc, #208]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 8003642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003646:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d03c      	beq.n	80036ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01c      	beq.n	8003696 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800365c:	4b2d      	ldr	r3, [pc, #180]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 800365e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003662:	4a2c      	ldr	r2, [pc, #176]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366c:	f7fe fb0c 	bl	8001c88 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003674:	f7fe fb08 	bl	8001c88 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e0f2      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003686:	4b23      	ldr	r3, [pc, #140]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 8003688:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0ef      	beq.n	8003674 <HAL_RCC_OscConfig+0x418>
 8003694:	e01b      	b.n	80036ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003696:	4b1f      	ldr	r3, [pc, #124]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 8003698:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800369c:	4a1d      	ldr	r2, [pc, #116]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a6:	f7fe faef 	bl	8001c88 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036ae:	f7fe faeb 	bl	8001c88 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e0d5      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036c0:	4b14      	ldr	r3, [pc, #80]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80036c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1ef      	bne.n	80036ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80c9 	beq.w	800386a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 030c 	and.w	r3, r3, #12
 80036e0:	2b0c      	cmp	r3, #12
 80036e2:	f000 8083 	beq.w	80037ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d15e      	bne.n	80037ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ee:	4b09      	ldr	r3, [pc, #36]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a08      	ldr	r2, [pc, #32]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80036f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fa:	f7fe fac5 	bl	8001c88 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003700:	e00c      	b.n	800371c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003702:	f7fe fac1 	bl	8001c88 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d905      	bls.n	800371c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e0ab      	b.n	800386c <HAL_RCC_OscConfig+0x610>
 8003714:	40021000 	.word	0x40021000
 8003718:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800371c:	4b55      	ldr	r3, [pc, #340]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1ec      	bne.n	8003702 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003728:	4b52      	ldr	r3, [pc, #328]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	4b52      	ldr	r3, [pc, #328]	@ (8003878 <HAL_RCC_OscConfig+0x61c>)
 800372e:	4013      	ands	r3, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6a11      	ldr	r1, [r2, #32]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003738:	3a01      	subs	r2, #1
 800373a:	0112      	lsls	r2, r2, #4
 800373c:	4311      	orrs	r1, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003742:	0212      	lsls	r2, r2, #8
 8003744:	4311      	orrs	r1, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800374a:	0852      	lsrs	r2, r2, #1
 800374c:	3a01      	subs	r2, #1
 800374e:	0552      	lsls	r2, r2, #21
 8003750:	4311      	orrs	r1, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003756:	0852      	lsrs	r2, r2, #1
 8003758:	3a01      	subs	r2, #1
 800375a:	0652      	lsls	r2, r2, #25
 800375c:	4311      	orrs	r1, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003762:	06d2      	lsls	r2, r2, #27
 8003764:	430a      	orrs	r2, r1
 8003766:	4943      	ldr	r1, [pc, #268]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 8003768:	4313      	orrs	r3, r2
 800376a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800376c:	4b41      	ldr	r3, [pc, #260]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a40      	ldr	r2, [pc, #256]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 8003772:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003776:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003778:	4b3e      	ldr	r3, [pc, #248]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4a3d      	ldr	r2, [pc, #244]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 800377e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003782:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fe fa80 	bl	8001c88 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378c:	f7fe fa7c 	bl	8001c88 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e066      	b.n	800386c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379e:	4b35      	ldr	r3, [pc, #212]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x530>
 80037aa:	e05e      	b.n	800386a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ac:	4b31      	ldr	r3, [pc, #196]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a30      	ldr	r2, [pc, #192]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 80037b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fe fa66 	bl	8001c88 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fe fa62 	bl	8001c88 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e04c      	b.n	800386c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d2:	4b28      	ldr	r3, [pc, #160]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80037de:	4b25      	ldr	r3, [pc, #148]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	4924      	ldr	r1, [pc, #144]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 80037e4:	4b25      	ldr	r3, [pc, #148]	@ (800387c <HAL_RCC_OscConfig+0x620>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	60cb      	str	r3, [r1, #12]
 80037ea:	e03e      	b.n	800386a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e039      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80037f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f003 0203 	and.w	r2, r3, #3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	429a      	cmp	r2, r3
 800380a:	d12c      	bne.n	8003866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003816:	3b01      	subs	r3, #1
 8003818:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d123      	bne.n	8003866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003828:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800382a:	429a      	cmp	r2, r3
 800382c:	d11b      	bne.n	8003866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003838:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800383a:	429a      	cmp	r2, r3
 800383c:	d113      	bne.n	8003866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003848:	085b      	lsrs	r3, r3, #1
 800384a:	3b01      	subs	r3, #1
 800384c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d109      	bne.n	8003866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	3b01      	subs	r3, #1
 8003860:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003862:	429a      	cmp	r2, r3
 8003864:	d001      	beq.n	800386a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3720      	adds	r7, #32
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000
 8003878:	019f800c 	.word	0x019f800c
 800387c:	feeefffc 	.word	0xfeeefffc

08003880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e11e      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003898:	4b91      	ldr	r3, [pc, #580]	@ (8003ae0 <HAL_RCC_ClockConfig+0x260>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d910      	bls.n	80038c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a6:	4b8e      	ldr	r3, [pc, #568]	@ (8003ae0 <HAL_RCC_ClockConfig+0x260>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 020f 	bic.w	r2, r3, #15
 80038ae:	498c      	ldr	r1, [pc, #560]	@ (8003ae0 <HAL_RCC_ClockConfig+0x260>)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b6:	4b8a      	ldr	r3, [pc, #552]	@ (8003ae0 <HAL_RCC_ClockConfig+0x260>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d001      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e106      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d073      	beq.n	80039bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d129      	bne.n	8003930 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038dc:	4b81      	ldr	r3, [pc, #516]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0f4      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80038ec:	f000 f99e 	bl	8003c2c <RCC_GetSysClockFreqFromPLLSource>
 80038f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4a7c      	ldr	r2, [pc, #496]	@ (8003ae8 <HAL_RCC_ClockConfig+0x268>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d93f      	bls.n	800397a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80038fa:	4b7a      	ldr	r3, [pc, #488]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d009      	beq.n	800391a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800390e:	2b00      	cmp	r3, #0
 8003910:	d033      	beq.n	800397a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003916:	2b00      	cmp	r3, #0
 8003918:	d12f      	bne.n	800397a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800391a:	4b72      	ldr	r3, [pc, #456]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003922:	4a70      	ldr	r2, [pc, #448]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003928:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800392a:	2380      	movs	r3, #128	@ 0x80
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	e024      	b.n	800397a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d107      	bne.n	8003948 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003938:	4b6a      	ldr	r3, [pc, #424]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d109      	bne.n	8003958 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0c6      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003948:	4b66      	ldr	r3, [pc, #408]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0be      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003958:	f000 f8ce 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 800395c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4a61      	ldr	r2, [pc, #388]	@ (8003ae8 <HAL_RCC_ClockConfig+0x268>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d909      	bls.n	800397a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003966:	4b5f      	ldr	r3, [pc, #380]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800396e:	4a5d      	ldr	r2, [pc, #372]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003974:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003976:	2380      	movs	r3, #128	@ 0x80
 8003978:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800397a:	4b5a      	ldr	r3, [pc, #360]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f023 0203 	bic.w	r2, r3, #3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4957      	ldr	r1, [pc, #348]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003988:	4313      	orrs	r3, r2
 800398a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398c:	f7fe f97c 	bl	8001c88 <HAL_GetTick>
 8003990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003992:	e00a      	b.n	80039aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003994:	f7fe f978 	bl	8001c88 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e095      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	4b4e      	ldr	r3, [pc, #312]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 020c 	and.w	r2, r3, #12
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d1eb      	bne.n	8003994 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d023      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039d4:	4b43      	ldr	r3, [pc, #268]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	4a42      	ldr	r2, [pc, #264]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 80039da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80039de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d007      	beq.n	80039fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80039ec:	4b3d      	ldr	r3, [pc, #244]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80039f4:	4a3b      	ldr	r2, [pc, #236]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 80039f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80039fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039fc:	4b39      	ldr	r3, [pc, #228]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4936      	ldr	r1, [pc, #216]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	608b      	str	r3, [r1, #8]
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2b80      	cmp	r3, #128	@ 0x80
 8003a14:	d105      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a16:	4b33      	ldr	r3, [pc, #204]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	4a32      	ldr	r2, [pc, #200]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003a1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a20:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a22:	4b2f      	ldr	r3, [pc, #188]	@ (8003ae0 <HAL_RCC_ClockConfig+0x260>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d21d      	bcs.n	8003a6c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a30:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae0 <HAL_RCC_ClockConfig+0x260>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f023 020f 	bic.w	r2, r3, #15
 8003a38:	4929      	ldr	r1, [pc, #164]	@ (8003ae0 <HAL_RCC_ClockConfig+0x260>)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a40:	f7fe f922 	bl	8001c88 <HAL_GetTick>
 8003a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a48:	f7fe f91e 	bl	8001c88 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e03b      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ae0 <HAL_RCC_ClockConfig+0x260>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d1ed      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a78:	4b1a      	ldr	r3, [pc, #104]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4917      	ldr	r1, [pc, #92]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a96:	4b13      	ldr	r3, [pc, #76]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	490f      	ldr	r1, [pc, #60]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aaa:	f000 f825 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	490c      	ldr	r1, [pc, #48]	@ (8003aec <HAL_RCC_ClockConfig+0x26c>)
 8003abc:	5ccb      	ldrb	r3, [r1, r3]
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8003af0 <HAL_RCC_ClockConfig+0x270>)
 8003ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003aca:	4b0a      	ldr	r3, [pc, #40]	@ (8003af4 <HAL_RCC_ClockConfig+0x274>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe f88e 	bl	8001bf0 <HAL_InitTick>
 8003ad4:	4603      	mov	r3, r0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40022000 	.word	0x40022000
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	04c4b400 	.word	0x04c4b400
 8003aec:	08008714 	.word	0x08008714
 8003af0:	20000004 	.word	0x20000004
 8003af4:	2000001c 	.word	0x2000001c

08003af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003afe:	4b2c      	ldr	r3, [pc, #176]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d102      	bne.n	8003b10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	e047      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b10:	4b27      	ldr	r3, [pc, #156]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 030c 	and.w	r3, r3, #12
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d102      	bne.n	8003b22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b1c:	4b26      	ldr	r3, [pc, #152]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	e03e      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b22:	4b23      	ldr	r3, [pc, #140]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 030c 	and.w	r3, r3, #12
 8003b2a:	2b0c      	cmp	r3, #12
 8003b2c:	d136      	bne.n	8003b9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b2e:	4b20      	ldr	r3, [pc, #128]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b38:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	3301      	adds	r3, #1
 8003b44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d10c      	bne.n	8003b66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b54:	4a16      	ldr	r2, [pc, #88]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b56:	68d2      	ldr	r2, [r2, #12]
 8003b58:	0a12      	lsrs	r2, r2, #8
 8003b5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	617b      	str	r3, [r7, #20]
      break;
 8003b64:	e00c      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b66:	4a13      	ldr	r2, [pc, #76]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6e:	4a10      	ldr	r2, [pc, #64]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b70:	68d2      	ldr	r2, [r2, #12]
 8003b72:	0a12      	lsrs	r2, r2, #8
 8003b74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b78:	fb02 f303 	mul.w	r3, r2, r3
 8003b7c:	617b      	str	r3, [r7, #20]
      break;
 8003b7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b80:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	0e5b      	lsrs	r3, r3, #25
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	e001      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ba0:	693b      	ldr	r3, [r7, #16]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	00f42400 	.word	0x00f42400
 8003bb8:	016e3600 	.word	0x016e3600

08003bbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	@ (8003bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20000004 	.word	0x20000004

08003bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bd8:	f7ff fff0 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	4904      	ldr	r1, [pc, #16]	@ (8003bfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bea:	5ccb      	ldrb	r3, [r1, r3]
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	08008724 	.word	0x08008724

08003c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c04:	f7ff ffda 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b06      	ldr	r3, [pc, #24]	@ (8003c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	0adb      	lsrs	r3, r3, #11
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	4904      	ldr	r1, [pc, #16]	@ (8003c28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c16:	5ccb      	ldrb	r3, [r1, r3]
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000
 8003c28:	08008724 	.word	0x08008724

08003c2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c32:	4b1e      	ldr	r3, [pc, #120]	@ (8003cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	3301      	adds	r3, #1
 8003c48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d10c      	bne.n	8003c6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c50:	4a17      	ldr	r2, [pc, #92]	@ (8003cb0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c58:	4a14      	ldr	r2, [pc, #80]	@ (8003cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c5a:	68d2      	ldr	r2, [r2, #12]
 8003c5c:	0a12      	lsrs	r2, r2, #8
 8003c5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c62:	fb02 f303 	mul.w	r3, r2, r3
 8003c66:	617b      	str	r3, [r7, #20]
    break;
 8003c68:	e00c      	b.n	8003c84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c6a:	4a12      	ldr	r2, [pc, #72]	@ (8003cb4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c72:	4a0e      	ldr	r2, [pc, #56]	@ (8003cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c74:	68d2      	ldr	r2, [r2, #12]
 8003c76:	0a12      	lsrs	r2, r2, #8
 8003c78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c7c:	fb02 f303 	mul.w	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]
    break;
 8003c82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c84:	4b09      	ldr	r3, [pc, #36]	@ (8003cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	0e5b      	lsrs	r3, r3, #25
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	3301      	adds	r3, #1
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003c9e:	687b      	ldr	r3, [r7, #4]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	371c      	adds	r7, #28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	016e3600 	.word	0x016e3600
 8003cb4:	00f42400 	.word	0x00f42400

08003cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8098 	beq.w	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cda:	4b43      	ldr	r3, [pc, #268]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10d      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce6:	4b40      	ldr	r3, [pc, #256]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cea:	4a3f      	ldr	r2, [pc, #252]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cfa:	60bb      	str	r3, [r7, #8]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d02:	4b3a      	ldr	r3, [pc, #232]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a39      	ldr	r2, [pc, #228]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d0e:	f7fd ffbb 	bl	8001c88 <HAL_GetTick>
 8003d12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d14:	e009      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d16:	f7fd ffb7 	bl	8001c88 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d902      	bls.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	74fb      	strb	r3, [r7, #19]
        break;
 8003d28:	e005      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d2a:	4b30      	ldr	r3, [pc, #192]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0ef      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003d36:	7cfb      	ldrb	r3, [r7, #19]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d159      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d01e      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d019      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d58:	4b23      	ldr	r3, [pc, #140]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d64:	4b20      	ldr	r3, [pc, #128]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d74:	4b1c      	ldr	r3, [pc, #112]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d84:	4a18      	ldr	r2, [pc, #96]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d016      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d96:	f7fd ff77 	bl	8001c88 <HAL_GetTick>
 8003d9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d9c:	e00b      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9e:	f7fd ff73 	bl	8001c88 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d902      	bls.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	74fb      	strb	r3, [r7, #19]
            break;
 8003db4:	e006      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003db6:	4b0c      	ldr	r3, [pc, #48]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0ec      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003dc4:	7cfb      	ldrb	r3, [r7, #19]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10b      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dca:	4b07      	ldr	r3, [pc, #28]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd8:	4903      	ldr	r1, [pc, #12]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003de0:	e008      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003de2:	7cfb      	ldrb	r3, [r7, #19]
 8003de4:	74bb      	strb	r3, [r7, #18]
 8003de6:	e005      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003de8:	40021000 	.word	0x40021000
 8003dec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df0:	7cfb      	ldrb	r3, [r7, #19]
 8003df2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003df4:	7c7b      	ldrb	r3, [r7, #17]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d105      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfa:	4ba6      	ldr	r3, [pc, #664]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfe:	4aa5      	ldr	r2, [pc, #660]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e04:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e12:	4ba0      	ldr	r3, [pc, #640]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e18:	f023 0203 	bic.w	r2, r3, #3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	499c      	ldr	r1, [pc, #624]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e34:	4b97      	ldr	r3, [pc, #604]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3a:	f023 020c 	bic.w	r2, r3, #12
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	4994      	ldr	r1, [pc, #592]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e56:	4b8f      	ldr	r3, [pc, #572]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	498b      	ldr	r1, [pc, #556]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e78:	4b86      	ldr	r3, [pc, #536]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	4983      	ldr	r1, [pc, #524]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e9a:	4b7e      	ldr	r3, [pc, #504]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	497a      	ldr	r1, [pc, #488]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ebc:	4b75      	ldr	r3, [pc, #468]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	4972      	ldr	r1, [pc, #456]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ede:	4b6d      	ldr	r3, [pc, #436]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	4969      	ldr	r1, [pc, #420]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f00:	4b64      	ldr	r3, [pc, #400]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	4961      	ldr	r1, [pc, #388]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f22:	4b5c      	ldr	r3, [pc, #368]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f30:	4958      	ldr	r1, [pc, #352]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d015      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f44:	4b53      	ldr	r3, [pc, #332]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f52:	4950      	ldr	r1, [pc, #320]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f62:	d105      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f64:	4b4b      	ldr	r3, [pc, #300]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	4a4a      	ldr	r2, [pc, #296]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f6e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d015      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f7c:	4b45      	ldr	r3, [pc, #276]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f82:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8a:	4942      	ldr	r1, [pc, #264]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f9a:	d105      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f9c:	4b3d      	ldr	r3, [pc, #244]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	4a3c      	ldr	r2, [pc, #240]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fa6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d015      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fb4:	4b37      	ldr	r3, [pc, #220]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc2:	4934      	ldr	r1, [pc, #208]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fd2:	d105      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fde:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d015      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fec:	4b29      	ldr	r3, [pc, #164]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffa:	4926      	ldr	r1, [pc, #152]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004006:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800400a:	d105      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800400c:	4b21      	ldr	r3, [pc, #132]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4a20      	ldr	r2, [pc, #128]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004016:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d015      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004024:	4b1b      	ldr	r3, [pc, #108]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004032:	4918      	ldr	r1, [pc, #96]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004042:	d105      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004044:	4b13      	ldr	r3, [pc, #76]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	4a12      	ldr	r2, [pc, #72]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800404e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d015      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800405c:	4b0d      	ldr	r3, [pc, #52]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004062:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406a:	490a      	ldr	r1, [pc, #40]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004076:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800407a:	d105      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800407c:	4b05      	ldr	r3, [pc, #20]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4a04      	ldr	r2, [pc, #16]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004086:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004088:	7cbb      	ldrb	r3, [r7, #18]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40021000 	.word	0x40021000

08004098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e049      	b.n	800413e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fd fa2a 	bl	8001518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4619      	mov	r1, r3
 80040d6:	4610      	mov	r0, r2
 80040d8:	f000 fba4 	bl	8004824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e049      	b.n	80041ec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d106      	bne.n	8004172 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f841 	bl	80041f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2202      	movs	r2, #2
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3304      	adds	r3, #4
 8004182:	4619      	mov	r1, r3
 8004184:	4610      	mov	r0, r2
 8004186:	f000 fb4d 	bl	8004824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d109      	bne.n	800422c <HAL_TIM_PWM_Start+0x24>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	bf14      	ite	ne
 8004224:	2301      	movne	r3, #1
 8004226:	2300      	moveq	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	e03c      	b.n	80042a6 <HAL_TIM_PWM_Start+0x9e>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2b04      	cmp	r3, #4
 8004230:	d109      	bne.n	8004246 <HAL_TIM_PWM_Start+0x3e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b01      	cmp	r3, #1
 800423c:	bf14      	ite	ne
 800423e:	2301      	movne	r3, #1
 8004240:	2300      	moveq	r3, #0
 8004242:	b2db      	uxtb	r3, r3
 8004244:	e02f      	b.n	80042a6 <HAL_TIM_PWM_Start+0x9e>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b08      	cmp	r3, #8
 800424a:	d109      	bne.n	8004260 <HAL_TIM_PWM_Start+0x58>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b01      	cmp	r3, #1
 8004256:	bf14      	ite	ne
 8004258:	2301      	movne	r3, #1
 800425a:	2300      	moveq	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	e022      	b.n	80042a6 <HAL_TIM_PWM_Start+0x9e>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b0c      	cmp	r3, #12
 8004264:	d109      	bne.n	800427a <HAL_TIM_PWM_Start+0x72>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b01      	cmp	r3, #1
 8004270:	bf14      	ite	ne
 8004272:	2301      	movne	r3, #1
 8004274:	2300      	moveq	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	e015      	b.n	80042a6 <HAL_TIM_PWM_Start+0x9e>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b10      	cmp	r3, #16
 800427e:	d109      	bne.n	8004294 <HAL_TIM_PWM_Start+0x8c>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b01      	cmp	r3, #1
 800428a:	bf14      	ite	ne
 800428c:	2301      	movne	r3, #1
 800428e:	2300      	moveq	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	e008      	b.n	80042a6 <HAL_TIM_PWM_Start+0x9e>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	bf14      	ite	ne
 80042a0:	2301      	movne	r3, #1
 80042a2:	2300      	moveq	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e097      	b.n	80043de <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d104      	bne.n	80042be <HAL_TIM_PWM_Start+0xb6>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042bc:	e023      	b.n	8004306 <HAL_TIM_PWM_Start+0xfe>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d104      	bne.n	80042ce <HAL_TIM_PWM_Start+0xc6>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042cc:	e01b      	b.n	8004306 <HAL_TIM_PWM_Start+0xfe>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d104      	bne.n	80042de <HAL_TIM_PWM_Start+0xd6>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042dc:	e013      	b.n	8004306 <HAL_TIM_PWM_Start+0xfe>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b0c      	cmp	r3, #12
 80042e2:	d104      	bne.n	80042ee <HAL_TIM_PWM_Start+0xe6>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042ec:	e00b      	b.n	8004306 <HAL_TIM_PWM_Start+0xfe>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d104      	bne.n	80042fe <HAL_TIM_PWM_Start+0xf6>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042fc:	e003      	b.n	8004306 <HAL_TIM_PWM_Start+0xfe>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2202      	movs	r2, #2
 8004302:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2201      	movs	r2, #1
 800430c:	6839      	ldr	r1, [r7, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f000 feb6 	bl	8005080 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a33      	ldr	r2, [pc, #204]	@ (80043e8 <HAL_TIM_PWM_Start+0x1e0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d013      	beq.n	8004346 <HAL_TIM_PWM_Start+0x13e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a32      	ldr	r2, [pc, #200]	@ (80043ec <HAL_TIM_PWM_Start+0x1e4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00e      	beq.n	8004346 <HAL_TIM_PWM_Start+0x13e>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a30      	ldr	r2, [pc, #192]	@ (80043f0 <HAL_TIM_PWM_Start+0x1e8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d009      	beq.n	8004346 <HAL_TIM_PWM_Start+0x13e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a2f      	ldr	r2, [pc, #188]	@ (80043f4 <HAL_TIM_PWM_Start+0x1ec>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d004      	beq.n	8004346 <HAL_TIM_PWM_Start+0x13e>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a2d      	ldr	r2, [pc, #180]	@ (80043f8 <HAL_TIM_PWM_Start+0x1f0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d101      	bne.n	800434a <HAL_TIM_PWM_Start+0x142>
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <HAL_TIM_PWM_Start+0x144>
 800434a:	2300      	movs	r3, #0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d007      	beq.n	8004360 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800435e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a20      	ldr	r2, [pc, #128]	@ (80043e8 <HAL_TIM_PWM_Start+0x1e0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d018      	beq.n	800439c <HAL_TIM_PWM_Start+0x194>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004372:	d013      	beq.n	800439c <HAL_TIM_PWM_Start+0x194>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a20      	ldr	r2, [pc, #128]	@ (80043fc <HAL_TIM_PWM_Start+0x1f4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00e      	beq.n	800439c <HAL_TIM_PWM_Start+0x194>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1f      	ldr	r2, [pc, #124]	@ (8004400 <HAL_TIM_PWM_Start+0x1f8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d009      	beq.n	800439c <HAL_TIM_PWM_Start+0x194>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a17      	ldr	r2, [pc, #92]	@ (80043ec <HAL_TIM_PWM_Start+0x1e4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <HAL_TIM_PWM_Start+0x194>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a16      	ldr	r2, [pc, #88]	@ (80043f0 <HAL_TIM_PWM_Start+0x1e8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d115      	bne.n	80043c8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	4b18      	ldr	r3, [pc, #96]	@ (8004404 <HAL_TIM_PWM_Start+0x1fc>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b06      	cmp	r3, #6
 80043ac:	d015      	beq.n	80043da <HAL_TIM_PWM_Start+0x1d2>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b4:	d011      	beq.n	80043da <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0201 	orr.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c6:	e008      	b.n	80043da <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	e000      	b.n	80043dc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40012c00 	.word	0x40012c00
 80043ec:	40013400 	.word	0x40013400
 80043f0:	40014000 	.word	0x40014000
 80043f4:	40014400 	.word	0x40014400
 80043f8:	40014800 	.word	0x40014800
 80043fc:	40000400 	.word	0x40000400
 8004400:	40000800 	.word	0x40000800
 8004404:	00010007 	.word	0x00010007

08004408 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004422:	2302      	movs	r3, #2
 8004424:	e0ff      	b.n	8004626 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b14      	cmp	r3, #20
 8004432:	f200 80f0 	bhi.w	8004616 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004436:	a201      	add	r2, pc, #4	@ (adr r2, 800443c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443c:	08004491 	.word	0x08004491
 8004440:	08004617 	.word	0x08004617
 8004444:	08004617 	.word	0x08004617
 8004448:	08004617 	.word	0x08004617
 800444c:	080044d1 	.word	0x080044d1
 8004450:	08004617 	.word	0x08004617
 8004454:	08004617 	.word	0x08004617
 8004458:	08004617 	.word	0x08004617
 800445c:	08004513 	.word	0x08004513
 8004460:	08004617 	.word	0x08004617
 8004464:	08004617 	.word	0x08004617
 8004468:	08004617 	.word	0x08004617
 800446c:	08004553 	.word	0x08004553
 8004470:	08004617 	.word	0x08004617
 8004474:	08004617 	.word	0x08004617
 8004478:	08004617 	.word	0x08004617
 800447c:	08004595 	.word	0x08004595
 8004480:	08004617 	.word	0x08004617
 8004484:	08004617 	.word	0x08004617
 8004488:	08004617 	.word	0x08004617
 800448c:	080045d5 	.word	0x080045d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68b9      	ldr	r1, [r7, #8]
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fa60 	bl	800495c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699a      	ldr	r2, [r3, #24]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0208 	orr.w	r2, r2, #8
 80044aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0204 	bic.w	r2, r2, #4
 80044ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6999      	ldr	r1, [r3, #24]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	619a      	str	r2, [r3, #24]
      break;
 80044ce:	e0a5      	b.n	800461c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68b9      	ldr	r1, [r7, #8]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fad0 	bl	8004a7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699a      	ldr	r2, [r3, #24]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6999      	ldr	r1, [r3, #24]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	021a      	lsls	r2, r3, #8
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	619a      	str	r2, [r3, #24]
      break;
 8004510:	e084      	b.n	800461c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68b9      	ldr	r1, [r7, #8]
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fb39 	bl	8004b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	69da      	ldr	r2, [r3, #28]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0208 	orr.w	r2, r2, #8
 800452c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69da      	ldr	r2, [r3, #28]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0204 	bic.w	r2, r2, #4
 800453c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69d9      	ldr	r1, [r3, #28]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	61da      	str	r2, [r3, #28]
      break;
 8004550:	e064      	b.n	800461c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68b9      	ldr	r1, [r7, #8]
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fba1 	bl	8004ca0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69da      	ldr	r2, [r3, #28]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800456c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800457c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69d9      	ldr	r1, [r3, #28]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	021a      	lsls	r2, r3, #8
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	61da      	str	r2, [r3, #28]
      break;
 8004592:	e043      	b.n	800461c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68b9      	ldr	r1, [r7, #8]
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fc0a 	bl	8004db4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0208 	orr.w	r2, r2, #8
 80045ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0204 	bic.w	r2, r2, #4
 80045be:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80045d2:	e023      	b.n	800461c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68b9      	ldr	r1, [r7, #8]
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fc4e 	bl	8004e7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045fe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	021a      	lsls	r2, r3, #8
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004614:	e002      	b.n	800461c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	75fb      	strb	r3, [r7, #23]
      break;
 800461a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004624:	7dfb      	ldrb	r3, [r7, #23]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop

08004630 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_TIM_ConfigClockSource+0x1c>
 8004648:	2302      	movs	r3, #2
 800464a:	e0de      	b.n	800480a <HAL_TIM_ConfigClockSource+0x1da>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800466a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800466e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004676:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a63      	ldr	r2, [pc, #396]	@ (8004814 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	f000 80a9 	beq.w	80047de <HAL_TIM_ConfigClockSource+0x1ae>
 800468c:	4a61      	ldr	r2, [pc, #388]	@ (8004814 <HAL_TIM_ConfigClockSource+0x1e4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	f200 80ae 	bhi.w	80047f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004694:	4a60      	ldr	r2, [pc, #384]	@ (8004818 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	f000 80a1 	beq.w	80047de <HAL_TIM_ConfigClockSource+0x1ae>
 800469c:	4a5e      	ldr	r2, [pc, #376]	@ (8004818 <HAL_TIM_ConfigClockSource+0x1e8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	f200 80a6 	bhi.w	80047f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80046a4:	4a5d      	ldr	r2, [pc, #372]	@ (800481c <HAL_TIM_ConfigClockSource+0x1ec>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	f000 8099 	beq.w	80047de <HAL_TIM_ConfigClockSource+0x1ae>
 80046ac:	4a5b      	ldr	r2, [pc, #364]	@ (800481c <HAL_TIM_ConfigClockSource+0x1ec>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	f200 809e 	bhi.w	80047f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80046b4:	4a5a      	ldr	r2, [pc, #360]	@ (8004820 <HAL_TIM_ConfigClockSource+0x1f0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	f000 8091 	beq.w	80047de <HAL_TIM_ConfigClockSource+0x1ae>
 80046bc:	4a58      	ldr	r2, [pc, #352]	@ (8004820 <HAL_TIM_ConfigClockSource+0x1f0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	f200 8096 	bhi.w	80047f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80046c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80046c8:	f000 8089 	beq.w	80047de <HAL_TIM_ConfigClockSource+0x1ae>
 80046cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80046d0:	f200 808e 	bhi.w	80047f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80046d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046d8:	d03e      	beq.n	8004758 <HAL_TIM_ConfigClockSource+0x128>
 80046da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046de:	f200 8087 	bhi.w	80047f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80046e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046e6:	f000 8086 	beq.w	80047f6 <HAL_TIM_ConfigClockSource+0x1c6>
 80046ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ee:	d87f      	bhi.n	80047f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80046f0:	2b70      	cmp	r3, #112	@ 0x70
 80046f2:	d01a      	beq.n	800472a <HAL_TIM_ConfigClockSource+0xfa>
 80046f4:	2b70      	cmp	r3, #112	@ 0x70
 80046f6:	d87b      	bhi.n	80047f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80046f8:	2b60      	cmp	r3, #96	@ 0x60
 80046fa:	d050      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x16e>
 80046fc:	2b60      	cmp	r3, #96	@ 0x60
 80046fe:	d877      	bhi.n	80047f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004700:	2b50      	cmp	r3, #80	@ 0x50
 8004702:	d03c      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x14e>
 8004704:	2b50      	cmp	r3, #80	@ 0x50
 8004706:	d873      	bhi.n	80047f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004708:	2b40      	cmp	r3, #64	@ 0x40
 800470a:	d058      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x18e>
 800470c:	2b40      	cmp	r3, #64	@ 0x40
 800470e:	d86f      	bhi.n	80047f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004710:	2b30      	cmp	r3, #48	@ 0x30
 8004712:	d064      	beq.n	80047de <HAL_TIM_ConfigClockSource+0x1ae>
 8004714:	2b30      	cmp	r3, #48	@ 0x30
 8004716:	d86b      	bhi.n	80047f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004718:	2b20      	cmp	r3, #32
 800471a:	d060      	beq.n	80047de <HAL_TIM_ConfigClockSource+0x1ae>
 800471c:	2b20      	cmp	r3, #32
 800471e:	d867      	bhi.n	80047f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004720:	2b00      	cmp	r3, #0
 8004722:	d05c      	beq.n	80047de <HAL_TIM_ConfigClockSource+0x1ae>
 8004724:	2b10      	cmp	r3, #16
 8004726:	d05a      	beq.n	80047de <HAL_TIM_ConfigClockSource+0x1ae>
 8004728:	e062      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800473a:	f000 fc81 	bl	8005040 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800474c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	609a      	str	r2, [r3, #8]
      break;
 8004756:	e04f      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004768:	f000 fc6a 	bl	8005040 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800477a:	609a      	str	r2, [r3, #8]
      break;
 800477c:	e03c      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800478a:	461a      	mov	r2, r3
 800478c:	f000 fbdc 	bl	8004f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2150      	movs	r1, #80	@ 0x50
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fc35 	bl	8005006 <TIM_ITRx_SetConfig>
      break;
 800479c:	e02c      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047aa:	461a      	mov	r2, r3
 80047ac:	f000 fbfb 	bl	8004fa6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2160      	movs	r1, #96	@ 0x60
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fc25 	bl	8005006 <TIM_ITRx_SetConfig>
      break;
 80047bc:	e01c      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ca:	461a      	mov	r2, r3
 80047cc:	f000 fbbc 	bl	8004f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2140      	movs	r1, #64	@ 0x40
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fc15 	bl	8005006 <TIM_ITRx_SetConfig>
      break;
 80047dc:	e00c      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4619      	mov	r1, r3
 80047e8:	4610      	mov	r0, r2
 80047ea:	f000 fc0c 	bl	8005006 <TIM_ITRx_SetConfig>
      break;
 80047ee:	e003      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	73fb      	strb	r3, [r7, #15]
      break;
 80047f4:	e000      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80047f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004808:	7bfb      	ldrb	r3, [r7, #15]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	00100070 	.word	0x00100070
 8004818:	00100040 	.word	0x00100040
 800481c:	00100030 	.word	0x00100030
 8004820:	00100020 	.word	0x00100020

08004824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a42      	ldr	r2, [pc, #264]	@ (8004940 <TIM_Base_SetConfig+0x11c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d00f      	beq.n	800485c <TIM_Base_SetConfig+0x38>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004842:	d00b      	beq.n	800485c <TIM_Base_SetConfig+0x38>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a3f      	ldr	r2, [pc, #252]	@ (8004944 <TIM_Base_SetConfig+0x120>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d007      	beq.n	800485c <TIM_Base_SetConfig+0x38>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a3e      	ldr	r2, [pc, #248]	@ (8004948 <TIM_Base_SetConfig+0x124>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d003      	beq.n	800485c <TIM_Base_SetConfig+0x38>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a3d      	ldr	r2, [pc, #244]	@ (800494c <TIM_Base_SetConfig+0x128>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d108      	bne.n	800486e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a33      	ldr	r2, [pc, #204]	@ (8004940 <TIM_Base_SetConfig+0x11c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d01b      	beq.n	80048ae <TIM_Base_SetConfig+0x8a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800487c:	d017      	beq.n	80048ae <TIM_Base_SetConfig+0x8a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a30      	ldr	r2, [pc, #192]	@ (8004944 <TIM_Base_SetConfig+0x120>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d013      	beq.n	80048ae <TIM_Base_SetConfig+0x8a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a2f      	ldr	r2, [pc, #188]	@ (8004948 <TIM_Base_SetConfig+0x124>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d00f      	beq.n	80048ae <TIM_Base_SetConfig+0x8a>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a2e      	ldr	r2, [pc, #184]	@ (800494c <TIM_Base_SetConfig+0x128>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00b      	beq.n	80048ae <TIM_Base_SetConfig+0x8a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a2d      	ldr	r2, [pc, #180]	@ (8004950 <TIM_Base_SetConfig+0x12c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d007      	beq.n	80048ae <TIM_Base_SetConfig+0x8a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004954 <TIM_Base_SetConfig+0x130>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d003      	beq.n	80048ae <TIM_Base_SetConfig+0x8a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004958 <TIM_Base_SetConfig+0x134>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d108      	bne.n	80048c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a16      	ldr	r2, [pc, #88]	@ (8004940 <TIM_Base_SetConfig+0x11c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00f      	beq.n	800490c <TIM_Base_SetConfig+0xe8>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a17      	ldr	r2, [pc, #92]	@ (800494c <TIM_Base_SetConfig+0x128>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00b      	beq.n	800490c <TIM_Base_SetConfig+0xe8>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a16      	ldr	r2, [pc, #88]	@ (8004950 <TIM_Base_SetConfig+0x12c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d007      	beq.n	800490c <TIM_Base_SetConfig+0xe8>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a15      	ldr	r2, [pc, #84]	@ (8004954 <TIM_Base_SetConfig+0x130>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d003      	beq.n	800490c <TIM_Base_SetConfig+0xe8>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a14      	ldr	r2, [pc, #80]	@ (8004958 <TIM_Base_SetConfig+0x134>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d103      	bne.n	8004914 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b01      	cmp	r3, #1
 8004924:	d105      	bne.n	8004932 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f023 0201 	bic.w	r2, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	611a      	str	r2, [r3, #16]
  }
}
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	40012c00 	.word	0x40012c00
 8004944:	40000400 	.word	0x40000400
 8004948:	40000800 	.word	0x40000800
 800494c:	40013400 	.word	0x40013400
 8004950:	40014000 	.word	0x40014000
 8004954:	40014400 	.word	0x40014400
 8004958:	40014800 	.word	0x40014800

0800495c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	f023 0201 	bic.w	r2, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800498a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800498e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0303 	bic.w	r3, r3, #3
 8004996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f023 0302 	bic.w	r3, r3, #2
 80049a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004a68 <TIM_OC1_SetConfig+0x10c>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00f      	beq.n	80049dc <TIM_OC1_SetConfig+0x80>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a2b      	ldr	r2, [pc, #172]	@ (8004a6c <TIM_OC1_SetConfig+0x110>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00b      	beq.n	80049dc <TIM_OC1_SetConfig+0x80>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004a70 <TIM_OC1_SetConfig+0x114>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d007      	beq.n	80049dc <TIM_OC1_SetConfig+0x80>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a29      	ldr	r2, [pc, #164]	@ (8004a74 <TIM_OC1_SetConfig+0x118>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d003      	beq.n	80049dc <TIM_OC1_SetConfig+0x80>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a28      	ldr	r2, [pc, #160]	@ (8004a78 <TIM_OC1_SetConfig+0x11c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d10c      	bne.n	80049f6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f023 0308 	bic.w	r3, r3, #8
 80049e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f023 0304 	bic.w	r3, r3, #4
 80049f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004a68 <TIM_OC1_SetConfig+0x10c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00f      	beq.n	8004a1e <TIM_OC1_SetConfig+0xc2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a1a      	ldr	r2, [pc, #104]	@ (8004a6c <TIM_OC1_SetConfig+0x110>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00b      	beq.n	8004a1e <TIM_OC1_SetConfig+0xc2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a19      	ldr	r2, [pc, #100]	@ (8004a70 <TIM_OC1_SetConfig+0x114>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d007      	beq.n	8004a1e <TIM_OC1_SetConfig+0xc2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a18      	ldr	r2, [pc, #96]	@ (8004a74 <TIM_OC1_SetConfig+0x118>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d003      	beq.n	8004a1e <TIM_OC1_SetConfig+0xc2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a17      	ldr	r2, [pc, #92]	@ (8004a78 <TIM_OC1_SetConfig+0x11c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d111      	bne.n	8004a42 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	621a      	str	r2, [r3, #32]
}
 8004a5c:	bf00      	nop
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	40012c00 	.word	0x40012c00
 8004a6c:	40013400 	.word	0x40013400
 8004a70:	40014000 	.word	0x40014000
 8004a74:	40014400 	.word	0x40014400
 8004a78:	40014800 	.word	0x40014800

08004a7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	f023 0210 	bic.w	r2, r3, #16
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	021b      	lsls	r3, r3, #8
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f023 0320 	bic.w	r3, r3, #32
 8004aca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a28      	ldr	r2, [pc, #160]	@ (8004b7c <TIM_OC2_SetConfig+0x100>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d003      	beq.n	8004ae8 <TIM_OC2_SetConfig+0x6c>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a27      	ldr	r2, [pc, #156]	@ (8004b80 <TIM_OC2_SetConfig+0x104>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d10d      	bne.n	8004b04 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a1d      	ldr	r2, [pc, #116]	@ (8004b7c <TIM_OC2_SetConfig+0x100>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00f      	beq.n	8004b2c <TIM_OC2_SetConfig+0xb0>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8004b80 <TIM_OC2_SetConfig+0x104>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00b      	beq.n	8004b2c <TIM_OC2_SetConfig+0xb0>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a1b      	ldr	r2, [pc, #108]	@ (8004b84 <TIM_OC2_SetConfig+0x108>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d007      	beq.n	8004b2c <TIM_OC2_SetConfig+0xb0>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004b88 <TIM_OC2_SetConfig+0x10c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d003      	beq.n	8004b2c <TIM_OC2_SetConfig+0xb0>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a19      	ldr	r2, [pc, #100]	@ (8004b8c <TIM_OC2_SetConfig+0x110>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d113      	bne.n	8004b54 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	621a      	str	r2, [r3, #32]
}
 8004b6e:	bf00      	nop
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	40012c00 	.word	0x40012c00
 8004b80:	40013400 	.word	0x40013400
 8004b84:	40014000 	.word	0x40014000
 8004b88:	40014400 	.word	0x40014400
 8004b8c:	40014800 	.word	0x40014800

08004b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0303 	bic.w	r3, r3, #3
 8004bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	021b      	lsls	r3, r3, #8
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a27      	ldr	r2, [pc, #156]	@ (8004c8c <TIM_OC3_SetConfig+0xfc>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_OC3_SetConfig+0x6a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a26      	ldr	r2, [pc, #152]	@ (8004c90 <TIM_OC3_SetConfig+0x100>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d10d      	bne.n	8004c16 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a1c      	ldr	r2, [pc, #112]	@ (8004c8c <TIM_OC3_SetConfig+0xfc>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00f      	beq.n	8004c3e <TIM_OC3_SetConfig+0xae>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a1b      	ldr	r2, [pc, #108]	@ (8004c90 <TIM_OC3_SetConfig+0x100>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00b      	beq.n	8004c3e <TIM_OC3_SetConfig+0xae>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a1a      	ldr	r2, [pc, #104]	@ (8004c94 <TIM_OC3_SetConfig+0x104>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d007      	beq.n	8004c3e <TIM_OC3_SetConfig+0xae>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a19      	ldr	r2, [pc, #100]	@ (8004c98 <TIM_OC3_SetConfig+0x108>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d003      	beq.n	8004c3e <TIM_OC3_SetConfig+0xae>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a18      	ldr	r2, [pc, #96]	@ (8004c9c <TIM_OC3_SetConfig+0x10c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d113      	bne.n	8004c66 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	621a      	str	r2, [r3, #32]
}
 8004c80:	bf00      	nop
 8004c82:	371c      	adds	r7, #28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	40012c00 	.word	0x40012c00
 8004c90:	40013400 	.word	0x40013400
 8004c94:	40014000 	.word	0x40014000
 8004c98:	40014400 	.word	0x40014400
 8004c9c:	40014800 	.word	0x40014800

08004ca0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	031b      	lsls	r3, r3, #12
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a28      	ldr	r2, [pc, #160]	@ (8004da0 <TIM_OC4_SetConfig+0x100>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d003      	beq.n	8004d0c <TIM_OC4_SetConfig+0x6c>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a27      	ldr	r2, [pc, #156]	@ (8004da4 <TIM_OC4_SetConfig+0x104>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d10d      	bne.n	8004d28 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	031b      	lsls	r3, r3, #12
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8004da0 <TIM_OC4_SetConfig+0x100>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00f      	beq.n	8004d50 <TIM_OC4_SetConfig+0xb0>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a1c      	ldr	r2, [pc, #112]	@ (8004da4 <TIM_OC4_SetConfig+0x104>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00b      	beq.n	8004d50 <TIM_OC4_SetConfig+0xb0>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8004da8 <TIM_OC4_SetConfig+0x108>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d007      	beq.n	8004d50 <TIM_OC4_SetConfig+0xb0>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a1a      	ldr	r2, [pc, #104]	@ (8004dac <TIM_OC4_SetConfig+0x10c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d003      	beq.n	8004d50 <TIM_OC4_SetConfig+0xb0>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a19      	ldr	r2, [pc, #100]	@ (8004db0 <TIM_OC4_SetConfig+0x110>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d113      	bne.n	8004d78 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d56:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004d5e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	019b      	lsls	r3, r3, #6
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	019b      	lsls	r3, r3, #6
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	621a      	str	r2, [r3, #32]
}
 8004d92:	bf00      	nop
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40012c00 	.word	0x40012c00
 8004da4:	40013400 	.word	0x40013400
 8004da8:	40014000 	.word	0x40014000
 8004dac:	40014400 	.word	0x40014400
 8004db0:	40014800 	.word	0x40014800

08004db4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004df8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	041b      	lsls	r3, r3, #16
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a17      	ldr	r2, [pc, #92]	@ (8004e68 <TIM_OC5_SetConfig+0xb4>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00f      	beq.n	8004e2e <TIM_OC5_SetConfig+0x7a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a16      	ldr	r2, [pc, #88]	@ (8004e6c <TIM_OC5_SetConfig+0xb8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d00b      	beq.n	8004e2e <TIM_OC5_SetConfig+0x7a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a15      	ldr	r2, [pc, #84]	@ (8004e70 <TIM_OC5_SetConfig+0xbc>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d007      	beq.n	8004e2e <TIM_OC5_SetConfig+0x7a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a14      	ldr	r2, [pc, #80]	@ (8004e74 <TIM_OC5_SetConfig+0xc0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d003      	beq.n	8004e2e <TIM_OC5_SetConfig+0x7a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a13      	ldr	r2, [pc, #76]	@ (8004e78 <TIM_OC5_SetConfig+0xc4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d109      	bne.n	8004e42 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	021b      	lsls	r3, r3, #8
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	621a      	str	r2, [r3, #32]
}
 8004e5c:	bf00      	nop
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	40012c00 	.word	0x40012c00
 8004e6c:	40013400 	.word	0x40013400
 8004e70:	40014000 	.word	0x40014000
 8004e74:	40014400 	.word	0x40014400
 8004e78:	40014800 	.word	0x40014800

08004e7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004eaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	021b      	lsls	r3, r3, #8
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004ec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	051b      	lsls	r3, r3, #20
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a18      	ldr	r2, [pc, #96]	@ (8004f34 <TIM_OC6_SetConfig+0xb8>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00f      	beq.n	8004ef8 <TIM_OC6_SetConfig+0x7c>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a17      	ldr	r2, [pc, #92]	@ (8004f38 <TIM_OC6_SetConfig+0xbc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00b      	beq.n	8004ef8 <TIM_OC6_SetConfig+0x7c>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a16      	ldr	r2, [pc, #88]	@ (8004f3c <TIM_OC6_SetConfig+0xc0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d007      	beq.n	8004ef8 <TIM_OC6_SetConfig+0x7c>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a15      	ldr	r2, [pc, #84]	@ (8004f40 <TIM_OC6_SetConfig+0xc4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d003      	beq.n	8004ef8 <TIM_OC6_SetConfig+0x7c>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a14      	ldr	r2, [pc, #80]	@ (8004f44 <TIM_OC6_SetConfig+0xc8>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d109      	bne.n	8004f0c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004efe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	029b      	lsls	r3, r3, #10
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	621a      	str	r2, [r3, #32]
}
 8004f26:	bf00      	nop
 8004f28:	371c      	adds	r7, #28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40012c00 	.word	0x40012c00
 8004f38:	40013400 	.word	0x40013400
 8004f3c:	40014000 	.word	0x40014000
 8004f40:	40014400 	.word	0x40014400
 8004f44:	40014800 	.word	0x40014800

08004f48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f023 0201 	bic.w	r2, r3, #1
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f023 030a 	bic.w	r3, r3, #10
 8004f84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	621a      	str	r2, [r3, #32]
}
 8004f9a:	bf00      	nop
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b087      	sub	sp, #28
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	f023 0210 	bic.w	r2, r3, #16
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	031b      	lsls	r3, r3, #12
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fe2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	621a      	str	r2, [r3, #32]
}
 8004ffa:	bf00      	nop
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005006:	b480      	push	{r7}
 8005008:	b085      	sub	sp, #20
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800501c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005020:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	f043 0307 	orr.w	r3, r3, #7
 800502c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	609a      	str	r2, [r3, #8]
}
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800505a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	021a      	lsls	r2, r3, #8
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	431a      	orrs	r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4313      	orrs	r3, r2
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	609a      	str	r2, [r3, #8]
}
 8005074:	bf00      	nop
 8005076:	371c      	adds	r7, #28
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f003 031f 	and.w	r3, r3, #31
 8005092:	2201      	movs	r2, #1
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a1a      	ldr	r2, [r3, #32]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	43db      	mvns	r3, r3
 80050a2:	401a      	ands	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a1a      	ldr	r2, [r3, #32]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f003 031f 	and.w	r3, r3, #31
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	fa01 f303 	lsl.w	r3, r1, r3
 80050b8:	431a      	orrs	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	621a      	str	r2, [r3, #32]
}
 80050be:	bf00      	nop
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
	...

080050cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e065      	b.n	80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a2c      	ldr	r2, [pc, #176]	@ (80051bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a2b      	ldr	r2, [pc, #172]	@ (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d108      	bne.n	800512a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800511e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005134:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a1b      	ldr	r2, [pc, #108]	@ (80051bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d018      	beq.n	8005184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800515a:	d013      	beq.n	8005184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a18      	ldr	r2, [pc, #96]	@ (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00e      	beq.n	8005184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a17      	ldr	r2, [pc, #92]	@ (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d009      	beq.n	8005184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a12      	ldr	r2, [pc, #72]	@ (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d004      	beq.n	8005184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a13      	ldr	r2, [pc, #76]	@ (80051cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d10c      	bne.n	800519e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800518a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	4313      	orrs	r3, r2
 8005194:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	40012c00 	.word	0x40012c00
 80051c0:	40013400 	.word	0x40013400
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40000800 	.word	0x40000800
 80051cc:	40014000 	.word	0x40014000

080051d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e073      	b.n	80052d4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	4313      	orrs	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4313      	orrs	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	041b      	lsls	r3, r3, #16
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	4313      	orrs	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a19      	ldr	r2, [pc, #100]	@ (80052e0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d004      	beq.n	8005288 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a18      	ldr	r2, [pc, #96]	@ (80052e4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d11c      	bne.n	80052c2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005292:	051b      	lsls	r3, r3, #20
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	40012c00 	.word	0x40012c00
 80052e4:	40013400 	.word	0x40013400

080052e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e042      	b.n	8005380 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7fc fa19 	bl	8001744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2224      	movs	r2, #36	@ 0x24
 8005316:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0201 	bic.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 ff30 	bl	8006198 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fc61 	bl	8005c00 <UART_SetConfig>
 800533e:	4603      	mov	r3, r0
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e01b      	b.n	8005380 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005356:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005366:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 ffaf 	bl	80062dc <UART_CheckIdleState>
 800537e:	4603      	mov	r3, r0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08a      	sub	sp, #40	@ 0x28
 800538c:	af02      	add	r7, sp, #8
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	603b      	str	r3, [r7, #0]
 8005394:	4613      	mov	r3, r2
 8005396:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539e:	2b20      	cmp	r3, #32
 80053a0:	d17b      	bne.n	800549a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <HAL_UART_Transmit+0x26>
 80053a8:	88fb      	ldrh	r3, [r7, #6]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e074      	b.n	800549c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2221      	movs	r2, #33	@ 0x21
 80053be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053c2:	f7fc fc61 	bl	8001c88 <HAL_GetTick>
 80053c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	88fa      	ldrh	r2, [r7, #6]
 80053cc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	88fa      	ldrh	r2, [r7, #6]
 80053d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053e0:	d108      	bne.n	80053f4 <HAL_UART_Transmit+0x6c>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d104      	bne.n	80053f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053ea:	2300      	movs	r3, #0
 80053ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	61bb      	str	r3, [r7, #24]
 80053f2:	e003      	b.n	80053fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053fc:	e030      	b.n	8005460 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2200      	movs	r2, #0
 8005406:	2180      	movs	r1, #128	@ 0x80
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f001 f811 	bl	8006430 <UART_WaitOnFlagUntilTimeout>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2220      	movs	r2, #32
 8005418:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e03d      	b.n	800549c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10b      	bne.n	800543e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005434:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	3302      	adds	r3, #2
 800543a:	61bb      	str	r3, [r7, #24]
 800543c:	e007      	b.n	800544e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	781a      	ldrb	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	3301      	adds	r3, #1
 800544c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005454:	b29b      	uxth	r3, r3
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1c8      	bne.n	80053fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2200      	movs	r2, #0
 8005474:	2140      	movs	r1, #64	@ 0x40
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 ffda 	bl	8006430 <UART_WaitOnFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2220      	movs	r2, #32
 8005486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e006      	b.n	800549c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2220      	movs	r2, #32
 8005492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	e000      	b.n	800549c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800549a:	2302      	movs	r3, #2
  }
}
 800549c:	4618      	mov	r0, r3
 800549e:	3720      	adds	r7, #32
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08a      	sub	sp, #40	@ 0x28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	4613      	mov	r3, r2
 80054b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d137      	bne.n	800552c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <HAL_UART_Receive_IT+0x24>
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e030      	b.n	800552e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a18      	ldr	r2, [pc, #96]	@ (8005538 <HAL_UART_Receive_IT+0x94>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d01f      	beq.n	800551c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d018      	beq.n	800551c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	613b      	str	r3, [r7, #16]
   return(result);
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	623b      	str	r3, [r7, #32]
 800550a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	69f9      	ldr	r1, [r7, #28]
 800550e:	6a3a      	ldr	r2, [r7, #32]
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	61bb      	str	r3, [r7, #24]
   return(result);
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e6      	bne.n	80054ea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800551c:	88fb      	ldrh	r3, [r7, #6]
 800551e:	461a      	mov	r2, r3
 8005520:	68b9      	ldr	r1, [r7, #8]
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 fff2 	bl	800650c <UART_Start_Receive_IT>
 8005528:	4603      	mov	r3, r0
 800552a:	e000      	b.n	800552e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800552c:	2302      	movs	r3, #2
  }
}
 800552e:	4618      	mov	r0, r3
 8005530:	3728      	adds	r7, #40	@ 0x28
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40008000 	.word	0x40008000

0800553c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b0ba      	sub	sp, #232	@ 0xe8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005562:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005566:	f640 030f 	movw	r3, #2063	@ 0x80f
 800556a:	4013      	ands	r3, r2
 800556c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005574:	2b00      	cmp	r3, #0
 8005576:	d11b      	bne.n	80055b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800557c:	f003 0320 	and.w	r3, r3, #32
 8005580:	2b00      	cmp	r3, #0
 8005582:	d015      	beq.n	80055b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b00      	cmp	r3, #0
 800558e:	d105      	bne.n	800559c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d009      	beq.n	80055b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 8300 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	4798      	blx	r3
      }
      return;
 80055ae:	e2fa      	b.n	8005ba6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80055b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 8123 	beq.w	8005800 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80055ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80055be:	4b8d      	ldr	r3, [pc, #564]	@ (80057f4 <HAL_UART_IRQHandler+0x2b8>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d106      	bne.n	80055d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80055c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80055ca:	4b8b      	ldr	r3, [pc, #556]	@ (80057f8 <HAL_UART_IRQHandler+0x2bc>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 8116 	beq.w	8005800 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d011      	beq.n	8005604 <HAL_UART_IRQHandler+0xc8>
 80055e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00b      	beq.n	8005604 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2201      	movs	r2, #1
 80055f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fa:	f043 0201 	orr.w	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d011      	beq.n	8005634 <HAL_UART_IRQHandler+0xf8>
 8005610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00b      	beq.n	8005634 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2202      	movs	r2, #2
 8005622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800562a:	f043 0204 	orr.w	r2, r3, #4
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d011      	beq.n	8005664 <HAL_UART_IRQHandler+0x128>
 8005640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00b      	beq.n	8005664 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2204      	movs	r2, #4
 8005652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800565a:	f043 0202 	orr.w	r2, r3, #2
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005668:	f003 0308 	and.w	r3, r3, #8
 800566c:	2b00      	cmp	r3, #0
 800566e:	d017      	beq.n	80056a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005674:	f003 0320 	and.w	r3, r3, #32
 8005678:	2b00      	cmp	r3, #0
 800567a:	d105      	bne.n	8005688 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800567c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005680:	4b5c      	ldr	r3, [pc, #368]	@ (80057f4 <HAL_UART_IRQHandler+0x2b8>)
 8005682:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00b      	beq.n	80056a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2208      	movs	r2, #8
 800568e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005696:	f043 0208 	orr.w	r2, r3, #8
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d012      	beq.n	80056d2 <HAL_UART_IRQHandler+0x196>
 80056ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00c      	beq.n	80056d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c8:	f043 0220 	orr.w	r2, r3, #32
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 8266 	beq.w	8005baa <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d013      	beq.n	8005712 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d105      	bne.n	8005702 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d007      	beq.n	8005712 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005718:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005726:	2b40      	cmp	r3, #64	@ 0x40
 8005728:	d005      	beq.n	8005736 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800572a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800572e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005732:	2b00      	cmp	r3, #0
 8005734:	d054      	beq.n	80057e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f001 f80a 	bl	8006750 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005746:	2b40      	cmp	r3, #64	@ 0x40
 8005748:	d146      	bne.n	80057d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3308      	adds	r3, #8
 8005750:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005758:	e853 3f00 	ldrex	r3, [r3]
 800575c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005760:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005764:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005768:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3308      	adds	r3, #8
 8005772:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005776:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800577a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005782:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800578e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1d9      	bne.n	800574a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800579c:	2b00      	cmp	r3, #0
 800579e:	d017      	beq.n	80057d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057a6:	4a15      	ldr	r2, [pc, #84]	@ (80057fc <HAL_UART_IRQHandler+0x2c0>)
 80057a8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fc fbff 	bl	8001fb4 <HAL_DMA_Abort_IT>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d019      	beq.n	80057f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80057ca:	4610      	mov	r0, r2
 80057cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ce:	e00f      	b.n	80057f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f9ff 	bl	8005bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d6:	e00b      	b.n	80057f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f9fb 	bl	8005bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057de:	e007      	b.n	80057f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f9f7 	bl	8005bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80057ee:	e1dc      	b.n	8005baa <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f0:	bf00      	nop
    return;
 80057f2:	e1da      	b.n	8005baa <HAL_UART_IRQHandler+0x66e>
 80057f4:	10000001 	.word	0x10000001
 80057f8:	04000120 	.word	0x04000120
 80057fc:	0800681d 	.word	0x0800681d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005804:	2b01      	cmp	r3, #1
 8005806:	f040 8170 	bne.w	8005aea <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800580a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800580e:	f003 0310 	and.w	r3, r3, #16
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 8169 	beq.w	8005aea <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8162 	beq.w	8005aea <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2210      	movs	r2, #16
 800582c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005838:	2b40      	cmp	r3, #64	@ 0x40
 800583a:	f040 80d8 	bne.w	80059ee <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800584c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 80af 	beq.w	80059b4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800585c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005860:	429a      	cmp	r2, r3
 8005862:	f080 80a7 	bcs.w	80059b4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800586c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b00      	cmp	r3, #0
 8005880:	f040 8087 	bne.w	8005992 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005890:	e853 3f00 	ldrex	r3, [r3]
 8005894:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005898:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800589c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	461a      	mov	r2, r3
 80058aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80058ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80058b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80058ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80058c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1da      	bne.n	8005884 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3308      	adds	r3, #8
 80058d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058d8:	e853 3f00 	ldrex	r3, [r3]
 80058dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058e0:	f023 0301 	bic.w	r3, r3, #1
 80058e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3308      	adds	r3, #8
 80058ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80058f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80058f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80058fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005904:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e1      	bne.n	80058ce <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3308      	adds	r3, #8
 8005910:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005912:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005914:	e853 3f00 	ldrex	r3, [r3]
 8005918:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800591a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800591c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005920:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3308      	adds	r3, #8
 800592a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800592e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005930:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005934:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800593c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e3      	bne.n	800590a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800595e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005960:	f023 0310 	bic.w	r3, r3, #16
 8005964:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	461a      	mov	r2, r3
 800596e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005972:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005974:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005978:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005980:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e4      	bne.n	8005950 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800598c:	4618      	mov	r0, r3
 800598e:	f7fc fab8 	bl	8001f02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2202      	movs	r2, #2
 8005996:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	4619      	mov	r1, r3
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f91b 	bl	8005be8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80059b2:	e0fc      	b.n	8005bae <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80059ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059be:	429a      	cmp	r2, r3
 80059c0:	f040 80f5 	bne.w	8005bae <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0320 	and.w	r3, r3, #32
 80059d2:	2b20      	cmp	r3, #32
 80059d4:	f040 80eb 	bne.w	8005bae <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80059e4:	4619      	mov	r1, r3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f8fe 	bl	8005be8 <HAL_UARTEx_RxEventCallback>
      return;
 80059ec:	e0df      	b.n	8005bae <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 80d1 	beq.w	8005bb2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005a10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 80cc 	beq.w	8005bb2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a22:	e853 3f00 	ldrex	r3, [r3]
 8005a26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	461a      	mov	r2, r3
 8005a38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a44:	e841 2300 	strex	r3, r2, [r1]
 8005a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e4      	bne.n	8005a1a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3308      	adds	r3, #8
 8005a56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5a:	e853 3f00 	ldrex	r3, [r3]
 8005a5e:	623b      	str	r3, [r7, #32]
   return(result);
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a66:	f023 0301 	bic.w	r3, r3, #1
 8005a6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3308      	adds	r3, #8
 8005a74:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a78:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a80:	e841 2300 	strex	r3, r2, [r1]
 8005a84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1e1      	bne.n	8005a50 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	e853 3f00 	ldrex	r3, [r3]
 8005aac:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f023 0310 	bic.w	r3, r3, #16
 8005ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005ac2:	61fb      	str	r3, [r7, #28]
 8005ac4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac6:	69b9      	ldr	r1, [r7, #24]
 8005ac8:	69fa      	ldr	r2, [r7, #28]
 8005aca:	e841 2300 	strex	r3, r2, [r1]
 8005ace:	617b      	str	r3, [r7, #20]
   return(result);
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1e4      	bne.n	8005aa0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2202      	movs	r2, #2
 8005ada:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f880 	bl	8005be8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ae8:	e063      	b.n	8005bb2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00e      	beq.n	8005b14 <HAL_UART_IRQHandler+0x5d8>
 8005af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d008      	beq.n	8005b14 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005b0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f001 fbe3 	bl	80072d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b12:	e051      	b.n	8005bb8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d014      	beq.n	8005b4a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d105      	bne.n	8005b38 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d008      	beq.n	8005b4a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d03a      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	4798      	blx	r3
    }
    return;
 8005b48:	e035      	b.n	8005bb6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d009      	beq.n	8005b6a <HAL_UART_IRQHandler+0x62e>
 8005b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fe6c 	bl	8006840 <UART_EndTransmit_IT>
    return;
 8005b68:	e026      	b.n	8005bb8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d009      	beq.n	8005b8a <HAL_UART_IRQHandler+0x64e>
 8005b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b7a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f001 fbbc 	bl	8007300 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b88:	e016      	b.n	8005bb8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d010      	beq.n	8005bb8 <HAL_UART_IRQHandler+0x67c>
 8005b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	da0c      	bge.n	8005bb8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f001 fba4 	bl	80072ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ba4:	e008      	b.n	8005bb8 <HAL_UART_IRQHandler+0x67c>
      return;
 8005ba6:	bf00      	nop
 8005ba8:	e006      	b.n	8005bb8 <HAL_UART_IRQHandler+0x67c>
    return;
 8005baa:	bf00      	nop
 8005bac:	e004      	b.n	8005bb8 <HAL_UART_IRQHandler+0x67c>
      return;
 8005bae:	bf00      	nop
 8005bb0:	e002      	b.n	8005bb8 <HAL_UART_IRQHandler+0x67c>
      return;
 8005bb2:	bf00      	nop
 8005bb4:	e000      	b.n	8005bb8 <HAL_UART_IRQHandler+0x67c>
    return;
 8005bb6:	bf00      	nop
  }
}
 8005bb8:	37e8      	adds	r7, #232	@ 0xe8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop

08005bc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c04:	b08c      	sub	sp, #48	@ 0x30
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	4bab      	ldr	r3, [pc, #684]	@ (8005edc <UART_SetConfig+0x2dc>)
 8005c30:	4013      	ands	r3, r2
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	6812      	ldr	r2, [r2, #0]
 8005c36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c38:	430b      	orrs	r3, r1
 8005c3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4aa0      	ldr	r2, [pc, #640]	@ (8005ee0 <UART_SetConfig+0x2e0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d004      	beq.n	8005c6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005c76:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	6812      	ldr	r2, [r2, #0]
 8005c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c80:	430b      	orrs	r3, r1
 8005c82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8a:	f023 010f 	bic.w	r1, r3, #15
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a91      	ldr	r2, [pc, #580]	@ (8005ee4 <UART_SetConfig+0x2e4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d125      	bne.n	8005cf0 <UART_SetConfig+0xf0>
 8005ca4:	4b90      	ldr	r3, [pc, #576]	@ (8005ee8 <UART_SetConfig+0x2e8>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005caa:	f003 0303 	and.w	r3, r3, #3
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d81a      	bhi.n	8005ce8 <UART_SetConfig+0xe8>
 8005cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb8 <UART_SetConfig+0xb8>)
 8005cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb8:	08005cc9 	.word	0x08005cc9
 8005cbc:	08005cd9 	.word	0x08005cd9
 8005cc0:	08005cd1 	.word	0x08005cd1
 8005cc4:	08005ce1 	.word	0x08005ce1
 8005cc8:	2301      	movs	r3, #1
 8005cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cce:	e0d6      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cd6:	e0d2      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005cd8:	2304      	movs	r3, #4
 8005cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cde:	e0ce      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005ce0:	2308      	movs	r3, #8
 8005ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ce6:	e0ca      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005ce8:	2310      	movs	r3, #16
 8005cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cee:	e0c6      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a7d      	ldr	r2, [pc, #500]	@ (8005eec <UART_SetConfig+0x2ec>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d138      	bne.n	8005d6c <UART_SetConfig+0x16c>
 8005cfa:	4b7b      	ldr	r3, [pc, #492]	@ (8005ee8 <UART_SetConfig+0x2e8>)
 8005cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d00:	f003 030c 	and.w	r3, r3, #12
 8005d04:	2b0c      	cmp	r3, #12
 8005d06:	d82d      	bhi.n	8005d64 <UART_SetConfig+0x164>
 8005d08:	a201      	add	r2, pc, #4	@ (adr r2, 8005d10 <UART_SetConfig+0x110>)
 8005d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0e:	bf00      	nop
 8005d10:	08005d45 	.word	0x08005d45
 8005d14:	08005d65 	.word	0x08005d65
 8005d18:	08005d65 	.word	0x08005d65
 8005d1c:	08005d65 	.word	0x08005d65
 8005d20:	08005d55 	.word	0x08005d55
 8005d24:	08005d65 	.word	0x08005d65
 8005d28:	08005d65 	.word	0x08005d65
 8005d2c:	08005d65 	.word	0x08005d65
 8005d30:	08005d4d 	.word	0x08005d4d
 8005d34:	08005d65 	.word	0x08005d65
 8005d38:	08005d65 	.word	0x08005d65
 8005d3c:	08005d65 	.word	0x08005d65
 8005d40:	08005d5d 	.word	0x08005d5d
 8005d44:	2300      	movs	r3, #0
 8005d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d4a:	e098      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d52:	e094      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005d54:	2304      	movs	r3, #4
 8005d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d5a:	e090      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005d5c:	2308      	movs	r3, #8
 8005d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d62:	e08c      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005d64:	2310      	movs	r3, #16
 8005d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d6a:	e088      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a5f      	ldr	r2, [pc, #380]	@ (8005ef0 <UART_SetConfig+0x2f0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d125      	bne.n	8005dc2 <UART_SetConfig+0x1c2>
 8005d76:	4b5c      	ldr	r3, [pc, #368]	@ (8005ee8 <UART_SetConfig+0x2e8>)
 8005d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d80:	2b30      	cmp	r3, #48	@ 0x30
 8005d82:	d016      	beq.n	8005db2 <UART_SetConfig+0x1b2>
 8005d84:	2b30      	cmp	r3, #48	@ 0x30
 8005d86:	d818      	bhi.n	8005dba <UART_SetConfig+0x1ba>
 8005d88:	2b20      	cmp	r3, #32
 8005d8a:	d00a      	beq.n	8005da2 <UART_SetConfig+0x1a2>
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d814      	bhi.n	8005dba <UART_SetConfig+0x1ba>
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <UART_SetConfig+0x19a>
 8005d94:	2b10      	cmp	r3, #16
 8005d96:	d008      	beq.n	8005daa <UART_SetConfig+0x1aa>
 8005d98:	e00f      	b.n	8005dba <UART_SetConfig+0x1ba>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005da0:	e06d      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005da2:	2302      	movs	r3, #2
 8005da4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005da8:	e069      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005daa:	2304      	movs	r3, #4
 8005dac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005db0:	e065      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005db2:	2308      	movs	r3, #8
 8005db4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005db8:	e061      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005dba:	2310      	movs	r3, #16
 8005dbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dc0:	e05d      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a4b      	ldr	r2, [pc, #300]	@ (8005ef4 <UART_SetConfig+0x2f4>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d125      	bne.n	8005e18 <UART_SetConfig+0x218>
 8005dcc:	4b46      	ldr	r3, [pc, #280]	@ (8005ee8 <UART_SetConfig+0x2e8>)
 8005dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005dd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005dd8:	d016      	beq.n	8005e08 <UART_SetConfig+0x208>
 8005dda:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ddc:	d818      	bhi.n	8005e10 <UART_SetConfig+0x210>
 8005dde:	2b80      	cmp	r3, #128	@ 0x80
 8005de0:	d00a      	beq.n	8005df8 <UART_SetConfig+0x1f8>
 8005de2:	2b80      	cmp	r3, #128	@ 0x80
 8005de4:	d814      	bhi.n	8005e10 <UART_SetConfig+0x210>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <UART_SetConfig+0x1f0>
 8005dea:	2b40      	cmp	r3, #64	@ 0x40
 8005dec:	d008      	beq.n	8005e00 <UART_SetConfig+0x200>
 8005dee:	e00f      	b.n	8005e10 <UART_SetConfig+0x210>
 8005df0:	2300      	movs	r3, #0
 8005df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005df6:	e042      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dfe:	e03e      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005e00:	2304      	movs	r3, #4
 8005e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e06:	e03a      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005e08:	2308      	movs	r3, #8
 8005e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e0e:	e036      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005e10:	2310      	movs	r3, #16
 8005e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e16:	e032      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a30      	ldr	r2, [pc, #192]	@ (8005ee0 <UART_SetConfig+0x2e0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d12a      	bne.n	8005e78 <UART_SetConfig+0x278>
 8005e22:	4b31      	ldr	r3, [pc, #196]	@ (8005ee8 <UART_SetConfig+0x2e8>)
 8005e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e30:	d01a      	beq.n	8005e68 <UART_SetConfig+0x268>
 8005e32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e36:	d81b      	bhi.n	8005e70 <UART_SetConfig+0x270>
 8005e38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e3c:	d00c      	beq.n	8005e58 <UART_SetConfig+0x258>
 8005e3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e42:	d815      	bhi.n	8005e70 <UART_SetConfig+0x270>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <UART_SetConfig+0x250>
 8005e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e4c:	d008      	beq.n	8005e60 <UART_SetConfig+0x260>
 8005e4e:	e00f      	b.n	8005e70 <UART_SetConfig+0x270>
 8005e50:	2300      	movs	r3, #0
 8005e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e56:	e012      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e5e:	e00e      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005e60:	2304      	movs	r3, #4
 8005e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e66:	e00a      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005e68:	2308      	movs	r3, #8
 8005e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e6e:	e006      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005e70:	2310      	movs	r3, #16
 8005e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e76:	e002      	b.n	8005e7e <UART_SetConfig+0x27e>
 8005e78:	2310      	movs	r3, #16
 8005e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a17      	ldr	r2, [pc, #92]	@ (8005ee0 <UART_SetConfig+0x2e0>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	f040 80a8 	bne.w	8005fda <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e8e:	2b08      	cmp	r3, #8
 8005e90:	d834      	bhi.n	8005efc <UART_SetConfig+0x2fc>
 8005e92:	a201      	add	r2, pc, #4	@ (adr r2, 8005e98 <UART_SetConfig+0x298>)
 8005e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e98:	08005ebd 	.word	0x08005ebd
 8005e9c:	08005efd 	.word	0x08005efd
 8005ea0:	08005ec5 	.word	0x08005ec5
 8005ea4:	08005efd 	.word	0x08005efd
 8005ea8:	08005ecb 	.word	0x08005ecb
 8005eac:	08005efd 	.word	0x08005efd
 8005eb0:	08005efd 	.word	0x08005efd
 8005eb4:	08005efd 	.word	0x08005efd
 8005eb8:	08005ed3 	.word	0x08005ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ebc:	f7fd fe8a 	bl	8003bd4 <HAL_RCC_GetPCLK1Freq>
 8005ec0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ec2:	e021      	b.n	8005f08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ef8 <UART_SetConfig+0x2f8>)
 8005ec6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ec8:	e01e      	b.n	8005f08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eca:	f7fd fe15 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8005ece:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ed0:	e01a      	b.n	8005f08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ed6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ed8:	e016      	b.n	8005f08 <UART_SetConfig+0x308>
 8005eda:	bf00      	nop
 8005edc:	cfff69f3 	.word	0xcfff69f3
 8005ee0:	40008000 	.word	0x40008000
 8005ee4:	40013800 	.word	0x40013800
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	40004400 	.word	0x40004400
 8005ef0:	40004800 	.word	0x40004800
 8005ef4:	40004c00 	.word	0x40004c00
 8005ef8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005f06:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 812a 	beq.w	8006164 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f14:	4a9e      	ldr	r2, [pc, #632]	@ (8006190 <UART_SetConfig+0x590>)
 8005f16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f22:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	4413      	add	r3, r2
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d305      	bcc.n	8005f40 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d903      	bls.n	8005f48 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f46:	e10d      	b.n	8006164 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	60bb      	str	r3, [r7, #8]
 8005f4e:	60fa      	str	r2, [r7, #12]
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f54:	4a8e      	ldr	r2, [pc, #568]	@ (8006190 <UART_SetConfig+0x590>)
 8005f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	603b      	str	r3, [r7, #0]
 8005f60:	607a      	str	r2, [r7, #4]
 8005f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f6a:	f7fa f9a9 	bl	80002c0 <__aeabi_uldivmod>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	4610      	mov	r0, r2
 8005f74:	4619      	mov	r1, r3
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	f04f 0300 	mov.w	r3, #0
 8005f7e:	020b      	lsls	r3, r1, #8
 8005f80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f84:	0202      	lsls	r2, r0, #8
 8005f86:	6979      	ldr	r1, [r7, #20]
 8005f88:	6849      	ldr	r1, [r1, #4]
 8005f8a:	0849      	lsrs	r1, r1, #1
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	460c      	mov	r4, r1
 8005f90:	4605      	mov	r5, r0
 8005f92:	eb12 0804 	adds.w	r8, r2, r4
 8005f96:	eb43 0905 	adc.w	r9, r3, r5
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	469a      	mov	sl, r3
 8005fa2:	4693      	mov	fp, r2
 8005fa4:	4652      	mov	r2, sl
 8005fa6:	465b      	mov	r3, fp
 8005fa8:	4640      	mov	r0, r8
 8005faa:	4649      	mov	r1, r9
 8005fac:	f7fa f988 	bl	80002c0 <__aeabi_uldivmod>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fbe:	d308      	bcc.n	8005fd2 <UART_SetConfig+0x3d2>
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fc6:	d204      	bcs.n	8005fd2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6a3a      	ldr	r2, [r7, #32]
 8005fce:	60da      	str	r2, [r3, #12]
 8005fd0:	e0c8      	b.n	8006164 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005fd8:	e0c4      	b.n	8006164 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fe2:	d167      	bne.n	80060b4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005fe4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	d828      	bhi.n	800603e <UART_SetConfig+0x43e>
 8005fec:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff4 <UART_SetConfig+0x3f4>)
 8005fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff2:	bf00      	nop
 8005ff4:	08006019 	.word	0x08006019
 8005ff8:	08006021 	.word	0x08006021
 8005ffc:	08006029 	.word	0x08006029
 8006000:	0800603f 	.word	0x0800603f
 8006004:	0800602f 	.word	0x0800602f
 8006008:	0800603f 	.word	0x0800603f
 800600c:	0800603f 	.word	0x0800603f
 8006010:	0800603f 	.word	0x0800603f
 8006014:	08006037 	.word	0x08006037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006018:	f7fd fddc 	bl	8003bd4 <HAL_RCC_GetPCLK1Freq>
 800601c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800601e:	e014      	b.n	800604a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006020:	f7fd fdee 	bl	8003c00 <HAL_RCC_GetPCLK2Freq>
 8006024:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006026:	e010      	b.n	800604a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006028:	4b5a      	ldr	r3, [pc, #360]	@ (8006194 <UART_SetConfig+0x594>)
 800602a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800602c:	e00d      	b.n	800604a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800602e:	f7fd fd63 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8006032:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006034:	e009      	b.n	800604a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800603a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800603c:	e005      	b.n	800604a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800603e:	2300      	movs	r3, #0
 8006040:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006048:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800604a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 8089 	beq.w	8006164 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006056:	4a4e      	ldr	r2, [pc, #312]	@ (8006190 <UART_SetConfig+0x590>)
 8006058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800605c:	461a      	mov	r2, r3
 800605e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006060:	fbb3 f3f2 	udiv	r3, r3, r2
 8006064:	005a      	lsls	r2, r3, #1
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	085b      	lsrs	r3, r3, #1
 800606c:	441a      	add	r2, r3
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	fbb2 f3f3 	udiv	r3, r2, r3
 8006076:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	2b0f      	cmp	r3, #15
 800607c:	d916      	bls.n	80060ac <UART_SetConfig+0x4ac>
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006084:	d212      	bcs.n	80060ac <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	b29b      	uxth	r3, r3
 800608a:	f023 030f 	bic.w	r3, r3, #15
 800608e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	085b      	lsrs	r3, r3, #1
 8006094:	b29b      	uxth	r3, r3
 8006096:	f003 0307 	and.w	r3, r3, #7
 800609a:	b29a      	uxth	r2, r3
 800609c:	8bfb      	ldrh	r3, [r7, #30]
 800609e:	4313      	orrs	r3, r2
 80060a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	8bfa      	ldrh	r2, [r7, #30]
 80060a8:	60da      	str	r2, [r3, #12]
 80060aa:	e05b      	b.n	8006164 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80060b2:	e057      	b.n	8006164 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d828      	bhi.n	800610e <UART_SetConfig+0x50e>
 80060bc:	a201      	add	r2, pc, #4	@ (adr r2, 80060c4 <UART_SetConfig+0x4c4>)
 80060be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c2:	bf00      	nop
 80060c4:	080060e9 	.word	0x080060e9
 80060c8:	080060f1 	.word	0x080060f1
 80060cc:	080060f9 	.word	0x080060f9
 80060d0:	0800610f 	.word	0x0800610f
 80060d4:	080060ff 	.word	0x080060ff
 80060d8:	0800610f 	.word	0x0800610f
 80060dc:	0800610f 	.word	0x0800610f
 80060e0:	0800610f 	.word	0x0800610f
 80060e4:	08006107 	.word	0x08006107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e8:	f7fd fd74 	bl	8003bd4 <HAL_RCC_GetPCLK1Freq>
 80060ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060ee:	e014      	b.n	800611a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060f0:	f7fd fd86 	bl	8003c00 <HAL_RCC_GetPCLK2Freq>
 80060f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060f6:	e010      	b.n	800611a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060f8:	4b26      	ldr	r3, [pc, #152]	@ (8006194 <UART_SetConfig+0x594>)
 80060fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80060fc:	e00d      	b.n	800611a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060fe:	f7fd fcfb 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8006102:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006104:	e009      	b.n	800611a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800610a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800610c:	e005      	b.n	800611a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006118:	bf00      	nop
    }

    if (pclk != 0U)
 800611a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611c:	2b00      	cmp	r3, #0
 800611e:	d021      	beq.n	8006164 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006124:	4a1a      	ldr	r2, [pc, #104]	@ (8006190 <UART_SetConfig+0x590>)
 8006126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800612a:	461a      	mov	r2, r3
 800612c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	085b      	lsrs	r3, r3, #1
 8006138:	441a      	add	r2, r3
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006142:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	2b0f      	cmp	r3, #15
 8006148:	d909      	bls.n	800615e <UART_SetConfig+0x55e>
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006150:	d205      	bcs.n	800615e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	b29a      	uxth	r2, r3
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60da      	str	r2, [r3, #12]
 800615c:	e002      	b.n	8006164 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	2201      	movs	r2, #1
 8006168:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	2201      	movs	r2, #1
 8006170:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2200      	movs	r2, #0
 8006178:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2200      	movs	r2, #0
 800617e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006180:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006184:	4618      	mov	r0, r3
 8006186:	3730      	adds	r7, #48	@ 0x30
 8006188:	46bd      	mov	sp, r7
 800618a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800618e:	bf00      	nop
 8006190:	08008730 	.word	0x08008730
 8006194:	00f42400 	.word	0x00f42400

08006198 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a4:	f003 0308 	and.w	r3, r3, #8
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00a      	beq.n	80061c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00a      	beq.n	80061e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00a      	beq.n	8006206 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00a      	beq.n	8006228 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622c:	f003 0310 	and.w	r3, r3, #16
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00a      	beq.n	800624a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d01a      	beq.n	80062ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006292:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006296:	d10a      	bne.n	80062ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00a      	beq.n	80062d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	605a      	str	r2, [r3, #4]
  }
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b098      	sub	sp, #96	@ 0x60
 80062e0:	af02      	add	r7, sp, #8
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062ec:	f7fb fccc 	bl	8001c88 <HAL_GetTick>
 80062f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0308 	and.w	r3, r3, #8
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d12f      	bne.n	8006360 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006300:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006308:	2200      	movs	r2, #0
 800630a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f88e 	bl	8006430 <UART_WaitOnFlagUntilTimeout>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d022      	beq.n	8006360 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006322:	e853 3f00 	ldrex	r3, [r3]
 8006326:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800632a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800632e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	461a      	mov	r2, r3
 8006336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006338:	647b      	str	r3, [r7, #68]	@ 0x44
 800633a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800633e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006340:	e841 2300 	strex	r3, r2, [r1]
 8006344:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1e6      	bne.n	800631a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2220      	movs	r2, #32
 8006350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e063      	b.n	8006428 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0304 	and.w	r3, r3, #4
 800636a:	2b04      	cmp	r3, #4
 800636c:	d149      	bne.n	8006402 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800636e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006376:	2200      	movs	r2, #0
 8006378:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f857 	bl	8006430 <UART_WaitOnFlagUntilTimeout>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d03c      	beq.n	8006402 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006390:	e853 3f00 	ldrex	r3, [r3]
 8006394:	623b      	str	r3, [r7, #32]
   return(result);
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800639c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	461a      	mov	r2, r3
 80063a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80063a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063ae:	e841 2300 	strex	r3, r2, [r1]
 80063b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1e6      	bne.n	8006388 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3308      	adds	r3, #8
 80063c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f023 0301 	bic.w	r3, r3, #1
 80063d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3308      	adds	r3, #8
 80063d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063da:	61fa      	str	r2, [r7, #28]
 80063dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	69b9      	ldr	r1, [r7, #24]
 80063e0:	69fa      	ldr	r2, [r7, #28]
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	617b      	str	r3, [r7, #20]
   return(result);
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e5      	bne.n	80063ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e012      	b.n	8006428 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2220      	movs	r2, #32
 8006406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2220      	movs	r2, #32
 800640e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3758      	adds	r7, #88	@ 0x58
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	603b      	str	r3, [r7, #0]
 800643c:	4613      	mov	r3, r2
 800643e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006440:	e04f      	b.n	80064e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006448:	d04b      	beq.n	80064e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644a:	f7fb fc1d 	bl	8001c88 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	429a      	cmp	r2, r3
 8006458:	d302      	bcc.n	8006460 <UART_WaitOnFlagUntilTimeout+0x30>
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e04e      	b.n	8006502 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0304 	and.w	r3, r3, #4
 800646e:	2b00      	cmp	r3, #0
 8006470:	d037      	beq.n	80064e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2b80      	cmp	r3, #128	@ 0x80
 8006476:	d034      	beq.n	80064e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2b40      	cmp	r3, #64	@ 0x40
 800647c:	d031      	beq.n	80064e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69db      	ldr	r3, [r3, #28]
 8006484:	f003 0308 	and.w	r3, r3, #8
 8006488:	2b08      	cmp	r3, #8
 800648a:	d110      	bne.n	80064ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2208      	movs	r2, #8
 8006492:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f000 f95b 	bl	8006750 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2208      	movs	r2, #8
 800649e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e029      	b.n	8006502 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064bc:	d111      	bne.n	80064e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 f941 	bl	8006750 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2220      	movs	r2, #32
 80064d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e00f      	b.n	8006502 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69da      	ldr	r2, [r3, #28]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4013      	ands	r3, r2
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	bf0c      	ite	eq
 80064f2:	2301      	moveq	r3, #1
 80064f4:	2300      	movne	r3, #0
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	461a      	mov	r2, r3
 80064fa:	79fb      	ldrb	r3, [r7, #7]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d0a0      	beq.n	8006442 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
	...

0800650c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800650c:	b480      	push	{r7}
 800650e:	b0a3      	sub	sp, #140	@ 0x8c
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	4613      	mov	r3, r2
 8006518:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	88fa      	ldrh	r2, [r7, #6]
 8006524:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	88fa      	ldrh	r2, [r7, #6]
 800652c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800653e:	d10e      	bne.n	800655e <UART_Start_Receive_IT+0x52>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d105      	bne.n	8006554 <UART_Start_Receive_IT+0x48>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800654e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006552:	e02d      	b.n	80065b0 <UART_Start_Receive_IT+0xa4>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	22ff      	movs	r2, #255	@ 0xff
 8006558:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800655c:	e028      	b.n	80065b0 <UART_Start_Receive_IT+0xa4>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10d      	bne.n	8006582 <UART_Start_Receive_IT+0x76>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d104      	bne.n	8006578 <UART_Start_Receive_IT+0x6c>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	22ff      	movs	r2, #255	@ 0xff
 8006572:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006576:	e01b      	b.n	80065b0 <UART_Start_Receive_IT+0xa4>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	227f      	movs	r2, #127	@ 0x7f
 800657c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006580:	e016      	b.n	80065b0 <UART_Start_Receive_IT+0xa4>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800658a:	d10d      	bne.n	80065a8 <UART_Start_Receive_IT+0x9c>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d104      	bne.n	800659e <UART_Start_Receive_IT+0x92>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	227f      	movs	r2, #127	@ 0x7f
 8006598:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800659c:	e008      	b.n	80065b0 <UART_Start_Receive_IT+0xa4>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	223f      	movs	r2, #63	@ 0x3f
 80065a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80065a6:	e003      	b.n	80065b0 <UART_Start_Receive_IT+0xa4>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2222      	movs	r2, #34	@ 0x22
 80065bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3308      	adds	r3, #8
 80065c6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065ca:	e853 3f00 	ldrex	r3, [r3]
 80065ce:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80065d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065d2:	f043 0301 	orr.w	r3, r3, #1
 80065d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3308      	adds	r3, #8
 80065e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80065e4:	673a      	str	r2, [r7, #112]	@ 0x70
 80065e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80065ea:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80065ec:	e841 2300 	strex	r3, r2, [r1]
 80065f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80065f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e3      	bne.n	80065c0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006600:	d14f      	bne.n	80066a2 <UART_Start_Receive_IT+0x196>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006608:	88fa      	ldrh	r2, [r7, #6]
 800660a:	429a      	cmp	r2, r3
 800660c:	d349      	bcc.n	80066a2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006616:	d107      	bne.n	8006628 <UART_Start_Receive_IT+0x11c>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d103      	bne.n	8006628 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4a47      	ldr	r2, [pc, #284]	@ (8006740 <UART_Start_Receive_IT+0x234>)
 8006624:	675a      	str	r2, [r3, #116]	@ 0x74
 8006626:	e002      	b.n	800662e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4a46      	ldr	r2, [pc, #280]	@ (8006744 <UART_Start_Receive_IT+0x238>)
 800662c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d01a      	beq.n	800666c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800663e:	e853 3f00 	ldrex	r3, [r3]
 8006642:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006644:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006646:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800664a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006658:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800665a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800665e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006660:	e841 2300 	strex	r3, r2, [r1]
 8006664:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e4      	bne.n	8006636 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3308      	adds	r3, #8
 8006672:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006676:	e853 3f00 	ldrex	r3, [r3]
 800667a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800667c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006682:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3308      	adds	r3, #8
 800668a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800668c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800668e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006692:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006694:	e841 2300 	strex	r3, r2, [r1]
 8006698:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800669a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e5      	bne.n	800666c <UART_Start_Receive_IT+0x160>
 80066a0:	e046      	b.n	8006730 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066aa:	d107      	bne.n	80066bc <UART_Start_Receive_IT+0x1b0>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d103      	bne.n	80066bc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4a24      	ldr	r2, [pc, #144]	@ (8006748 <UART_Start_Receive_IT+0x23c>)
 80066b8:	675a      	str	r2, [r3, #116]	@ 0x74
 80066ba:	e002      	b.n	80066c2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4a23      	ldr	r2, [pc, #140]	@ (800674c <UART_Start_Receive_IT+0x240>)
 80066c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d019      	beq.n	80066fe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d2:	e853 3f00 	ldrex	r3, [r3]
 80066d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066da:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80066de:	677b      	str	r3, [r7, #116]	@ 0x74
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066ea:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80066ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066f0:	e841 2300 	strex	r3, r2, [r1]
 80066f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80066f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1e6      	bne.n	80066ca <UART_Start_Receive_IT+0x1be>
 80066fc:	e018      	b.n	8006730 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	e853 3f00 	ldrex	r3, [r3]
 800670a:	613b      	str	r3, [r7, #16]
   return(result);
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f043 0320 	orr.w	r3, r3, #32
 8006712:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	461a      	mov	r2, r3
 800671a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800671c:	623b      	str	r3, [r7, #32]
 800671e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	69f9      	ldr	r1, [r7, #28]
 8006722:	6a3a      	ldr	r2, [r7, #32]
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	61bb      	str	r3, [r7, #24]
   return(result);
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e6      	bne.n	80066fe <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	378c      	adds	r7, #140	@ 0x8c
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	08006f6d 	.word	0x08006f6d
 8006744:	08006c09 	.word	0x08006c09
 8006748:	08006a51 	.word	0x08006a51
 800674c:	08006899 	.word	0x08006899

08006750 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006750:	b480      	push	{r7}
 8006752:	b095      	sub	sp, #84	@ 0x54
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006768:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800676c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006776:	643b      	str	r3, [r7, #64]	@ 0x40
 8006778:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800677c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800677e:	e841 2300 	strex	r3, r2, [r1]
 8006782:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1e6      	bne.n	8006758 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3308      	adds	r3, #8
 8006790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	61fb      	str	r3, [r7, #28]
   return(result);
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3308      	adds	r3, #8
 80067ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e3      	bne.n	800678a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d118      	bne.n	80067fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f023 0310 	bic.w	r3, r3, #16
 80067de:	647b      	str	r3, [r7, #68]	@ 0x44
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	461a      	mov	r2, r3
 80067e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067e8:	61bb      	str	r3, [r7, #24]
 80067ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ec:	6979      	ldr	r1, [r7, #20]
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	e841 2300 	strex	r3, r2, [r1]
 80067f4:	613b      	str	r3, [r7, #16]
   return(result);
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e6      	bne.n	80067ca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2220      	movs	r2, #32
 8006800:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006810:	bf00      	nop
 8006812:	3754      	adds	r7, #84	@ 0x54
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006828:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f7ff f9ce 	bl	8005bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b088      	sub	sp, #32
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	60bb      	str	r3, [r7, #8]
   return(result);
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800685c:	61fb      	str	r3, [r7, #28]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	461a      	mov	r2, r3
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	61bb      	str	r3, [r7, #24]
 8006868:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686a:	6979      	ldr	r1, [r7, #20]
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	e841 2300 	strex	r3, r2, [r1]
 8006872:	613b      	str	r3, [r7, #16]
   return(result);
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e6      	bne.n	8006848 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2220      	movs	r2, #32
 800687e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff f999 	bl	8005bc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800688e:	bf00      	nop
 8006890:	3720      	adds	r7, #32
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
	...

08006898 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b09c      	sub	sp, #112	@ 0x70
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80068a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068b0:	2b22      	cmp	r3, #34	@ 0x22
 80068b2:	f040 80be 	bne.w	8006a32 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80068c4:	b2d9      	uxtb	r1, r3
 80068c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068d0:	400a      	ands	r2, r1
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	3b01      	subs	r3, #1
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f040 80a1 	bne.w	8006a42 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006908:	e853 3f00 	ldrex	r3, [r3]
 800690c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800690e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006910:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006914:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	461a      	mov	r2, r3
 800691c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800691e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006920:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006924:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800692c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e6      	bne.n	8006900 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3308      	adds	r3, #8
 8006938:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006944:	f023 0301 	bic.w	r3, r3, #1
 8006948:	667b      	str	r3, [r7, #100]	@ 0x64
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3308      	adds	r3, #8
 8006950:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006952:	647a      	str	r2, [r7, #68]	@ 0x44
 8006954:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006958:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e5      	bne.n	8006932 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2220      	movs	r2, #32
 800696a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a33      	ldr	r2, [pc, #204]	@ (8006a4c <UART_RxISR_8BIT+0x1b4>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d01f      	beq.n	80069c4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d018      	beq.n	80069c4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699a:	e853 3f00 	ldrex	r3, [r3]
 800699e:	623b      	str	r3, [r7, #32]
   return(result);
 80069a0:	6a3b      	ldr	r3, [r7, #32]
 80069a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80069b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069b8:	e841 2300 	strex	r3, r2, [r1]
 80069bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e6      	bne.n	8006992 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d12e      	bne.n	8006a2a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	60fb      	str	r3, [r7, #12]
   return(result);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0310 	bic.w	r3, r3, #16
 80069e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069f0:	61fb      	str	r3, [r7, #28]
 80069f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	69b9      	ldr	r1, [r7, #24]
 80069f6:	69fa      	ldr	r2, [r7, #28]
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	617b      	str	r3, [r7, #20]
   return(result);
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e6      	bne.n	80069d2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	f003 0310 	and.w	r3, r3, #16
 8006a0e:	2b10      	cmp	r3, #16
 8006a10:	d103      	bne.n	8006a1a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2210      	movs	r2, #16
 8006a18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7ff f8e0 	bl	8005be8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a28:	e00b      	b.n	8006a42 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7fa fa52 	bl	8000ed4 <HAL_UART_RxCpltCallback>
}
 8006a30:	e007      	b.n	8006a42 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	699a      	ldr	r2, [r3, #24]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f042 0208 	orr.w	r2, r2, #8
 8006a40:	619a      	str	r2, [r3, #24]
}
 8006a42:	bf00      	nop
 8006a44:	3770      	adds	r7, #112	@ 0x70
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	40008000 	.word	0x40008000

08006a50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b09c      	sub	sp, #112	@ 0x70
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006a5e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a68:	2b22      	cmp	r3, #34	@ 0x22
 8006a6a:	f040 80be 	bne.w	8006bea <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a74:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006a7e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006a82:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006a86:	4013      	ands	r3, r2
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a8c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a92:	1c9a      	adds	r2, r3, #2
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f040 80a1 	bne.w	8006bfa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ac8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006acc:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ad6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ad8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006adc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006ae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e6      	bne.n	8006ab8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3308      	adds	r3, #8
 8006af0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afc:	f023 0301 	bic.w	r3, r3, #1
 8006b00:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3308      	adds	r3, #8
 8006b08:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006b0a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e5      	bne.n	8006aea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a33      	ldr	r2, [pc, #204]	@ (8006c04 <UART_RxISR_16BIT+0x1b4>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d01f      	beq.n	8006b7c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d018      	beq.n	8006b7c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b6a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e6      	bne.n	8006b4a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d12e      	bne.n	8006be2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	e853 3f00 	ldrex	r3, [r3]
 8006b96:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f023 0310 	bic.w	r3, r3, #16
 8006b9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ba8:	61bb      	str	r3, [r7, #24]
 8006baa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bac:	6979      	ldr	r1, [r7, #20]
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	e841 2300 	strex	r3, r2, [r1]
 8006bb4:	613b      	str	r3, [r7, #16]
   return(result);
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1e6      	bne.n	8006b8a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	f003 0310 	and.w	r3, r3, #16
 8006bc6:	2b10      	cmp	r3, #16
 8006bc8:	d103      	bne.n	8006bd2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2210      	movs	r2, #16
 8006bd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006bd8:	4619      	mov	r1, r3
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff f804 	bl	8005be8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006be0:	e00b      	b.n	8006bfa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7fa f976 	bl	8000ed4 <HAL_UART_RxCpltCallback>
}
 8006be8:	e007      	b.n	8006bfa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	699a      	ldr	r2, [r3, #24]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f042 0208 	orr.w	r2, r2, #8
 8006bf8:	619a      	str	r2, [r3, #24]
}
 8006bfa:	bf00      	nop
 8006bfc:	3770      	adds	r7, #112	@ 0x70
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	40008000 	.word	0x40008000

08006c08 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b0ac      	sub	sp, #176	@ 0xb0
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006c16:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c3e:	2b22      	cmp	r3, #34	@ 0x22
 8006c40:	f040 8183 	bne.w	8006f4a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006c4a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c4e:	e126      	b.n	8006e9e <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c56:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c5a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006c5e:	b2d9      	uxtb	r1, r3
 8006c60:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c6a:	400a      	ands	r2, r1
 8006c6c:	b2d2      	uxtb	r2, r2
 8006c6e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c9a:	f003 0307 	and.w	r3, r3, #7
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d053      	beq.n	8006d4a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d011      	beq.n	8006cd2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006cae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00b      	beq.n	8006cd2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cc8:	f043 0201 	orr.w	r2, r3, #1
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d011      	beq.n	8006d02 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00b      	beq.n	8006d02 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cf8:	f043 0204 	orr.w	r2, r3, #4
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d06:	f003 0304 	and.w	r3, r3, #4
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d011      	beq.n	8006d32 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006d0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00b      	beq.n	8006d32 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2204      	movs	r2, #4
 8006d20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d28:	f043 0202 	orr.w	r2, r3, #2
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d006      	beq.n	8006d4a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7fe ff49 	bl	8005bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f040 80a3 	bne.w	8006e9e <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006d66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	461a      	mov	r2, r3
 8006d76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d7c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006d80:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006d88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e4      	bne.n	8006d58 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3308      	adds	r3, #8
 8006d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006d9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006da4:	f023 0301 	bic.w	r3, r3, #1
 8006da8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3308      	adds	r3, #8
 8006db2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006db6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006db8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006dbc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006dc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e1      	bne.n	8006d8e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a60      	ldr	r2, [pc, #384]	@ (8006f64 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d021      	beq.n	8006e2c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d01a      	beq.n	8006e2c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dfe:	e853 3f00 	ldrex	r3, [r3]
 8006e02:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006e18:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e1a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006e1e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e20:	e841 2300 	strex	r3, r2, [r1]
 8006e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006e26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1e4      	bne.n	8006df6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d130      	bne.n	8006e96 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e42:	e853 3f00 	ldrex	r3, [r3]
 8006e46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4a:	f023 0310 	bic.w	r3, r3, #16
 8006e4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e64:	e841 2300 	strex	r3, r2, [r1]
 8006e68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e4      	bne.n	8006e3a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	f003 0310 	and.w	r3, r3, #16
 8006e7a:	2b10      	cmp	r3, #16
 8006e7c:	d103      	bne.n	8006e86 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2210      	movs	r2, #16
 8006e84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7fe feaa 	bl	8005be8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006e94:	e00e      	b.n	8006eb4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7fa f81c 	bl	8000ed4 <HAL_UART_RxCpltCallback>
        break;
 8006e9c:	e00a      	b.n	8006eb4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e9e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d006      	beq.n	8006eb4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8006ea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006eaa:	f003 0320 	and.w	r3, r3, #32
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f47f aece 	bne.w	8006c50 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006eba:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006ebe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d049      	beq.n	8006f5a <UART_RxISR_8BIT_FIFOEN+0x352>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006ecc:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d242      	bcs.n	8006f5a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3308      	adds	r3, #8
 8006eda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	e853 3f00 	ldrex	r3, [r3]
 8006ee2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006eea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3308      	adds	r3, #8
 8006ef4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006ef8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006efa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006efe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f00:	e841 2300 	strex	r3, r2, [r1]
 8006f04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e3      	bne.n	8006ed4 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a16      	ldr	r2, [pc, #88]	@ (8006f68 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8006f10:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f043 0320 	orr.w	r3, r3, #32
 8006f26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f34:	61bb      	str	r3, [r7, #24]
 8006f36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	6979      	ldr	r1, [r7, #20]
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	613b      	str	r3, [r7, #16]
   return(result);
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e4      	bne.n	8006f12 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f48:	e007      	b.n	8006f5a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	699a      	ldr	r2, [r3, #24]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f042 0208 	orr.w	r2, r2, #8
 8006f58:	619a      	str	r2, [r3, #24]
}
 8006f5a:	bf00      	nop
 8006f5c:	37b0      	adds	r7, #176	@ 0xb0
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	40008000 	.word	0x40008000
 8006f68:	08006899 	.word	0x08006899

08006f6c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b0ae      	sub	sp, #184	@ 0xb8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006f7a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69db      	ldr	r3, [r3, #28]
 8006f84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fa2:	2b22      	cmp	r3, #34	@ 0x22
 8006fa4:	f040 8187 	bne.w	80072b6 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006fae:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006fb2:	e12a      	b.n	800720a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fba:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006fc6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006fca:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006fce:	4013      	ands	r3, r2
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006fd6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fdc:	1c9a      	adds	r2, r3, #2
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	3b01      	subs	r3, #1
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006ffe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007002:	f003 0307 	and.w	r3, r3, #7
 8007006:	2b00      	cmp	r3, #0
 8007008:	d053      	beq.n	80070b2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800700a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d011      	beq.n	800703a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800701a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00b      	beq.n	800703a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2201      	movs	r2, #1
 8007028:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007030:	f043 0201 	orr.w	r2, r3, #1
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800703a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d011      	beq.n	800706a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007046:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00b      	beq.n	800706a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2202      	movs	r2, #2
 8007058:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007060:	f043 0204 	orr.w	r2, r3, #4
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800706a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800706e:	f003 0304 	and.w	r3, r3, #4
 8007072:	2b00      	cmp	r3, #0
 8007074:	d011      	beq.n	800709a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007076:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00b      	beq.n	800709a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2204      	movs	r2, #4
 8007088:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007090:	f043 0202 	orr.w	r2, r3, #2
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d006      	beq.n	80070b2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7fe fd95 	bl	8005bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f040 80a5 	bne.w	800720a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070c8:	e853 3f00 	ldrex	r3, [r3]
 80070cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80070ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	461a      	mov	r2, r3
 80070de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80070e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80070ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80070f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e2      	bne.n	80070c0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	3308      	adds	r3, #8
 8007100:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007102:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007104:	e853 3f00 	ldrex	r3, [r3]
 8007108:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800710a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800710c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007110:	f023 0301 	bic.w	r3, r3, #1
 8007114:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3308      	adds	r3, #8
 800711e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007122:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007124:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007126:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007128:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007130:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e1      	bne.n	80070fa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2220      	movs	r2, #32
 800713a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a60      	ldr	r2, [pc, #384]	@ (80072d0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d021      	beq.n	8007198 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d01a      	beq.n	8007198 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007168:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800716a:	e853 3f00 	ldrex	r3, [r3]
 800716e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007170:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007172:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007176:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	461a      	mov	r2, r3
 8007180:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007184:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007186:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007188:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800718a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800718c:	e841 2300 	strex	r3, r2, [r1]
 8007190:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1e4      	bne.n	8007162 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800719c:	2b01      	cmp	r3, #1
 800719e:	d130      	bne.n	8007202 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ae:	e853 3f00 	ldrex	r3, [r3]
 80071b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b6:	f023 0310 	bic.w	r3, r3, #16
 80071ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80071c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80071ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e4      	bne.n	80071a6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	f003 0310 	and.w	r3, r3, #16
 80071e6:	2b10      	cmp	r3, #16
 80071e8:	d103      	bne.n	80071f2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2210      	movs	r2, #16
 80071f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7fe fcf4 	bl	8005be8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007200:	e00e      	b.n	8007220 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7f9 fe66 	bl	8000ed4 <HAL_UART_RxCpltCallback>
        break;
 8007208:	e00a      	b.n	8007220 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800720a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800720e:	2b00      	cmp	r3, #0
 8007210:	d006      	beq.n	8007220 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007212:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007216:	f003 0320 	and.w	r3, r3, #32
 800721a:	2b00      	cmp	r3, #0
 800721c:	f47f aeca 	bne.w	8006fb4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007226:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800722a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800722e:	2b00      	cmp	r3, #0
 8007230:	d049      	beq.n	80072c6 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007238:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800723c:	429a      	cmp	r2, r3
 800723e:	d242      	bcs.n	80072c6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3308      	adds	r3, #8
 8007246:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724a:	e853 3f00 	ldrex	r3, [r3]
 800724e:	623b      	str	r3, [r7, #32]
   return(result);
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007256:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3308      	adds	r3, #8
 8007260:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007264:	633a      	str	r2, [r7, #48]	@ 0x30
 8007266:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007268:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800726a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800726c:	e841 2300 	strex	r3, r2, [r1]
 8007270:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1e3      	bne.n	8007240 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a16      	ldr	r2, [pc, #88]	@ (80072d4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800727c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	e853 3f00 	ldrex	r3, [r3]
 800728a:	60fb      	str	r3, [r7, #12]
   return(result);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f043 0320 	orr.w	r3, r3, #32
 8007292:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072a0:	61fb      	str	r3, [r7, #28]
 80072a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a4:	69b9      	ldr	r1, [r7, #24]
 80072a6:	69fa      	ldr	r2, [r7, #28]
 80072a8:	e841 2300 	strex	r3, r2, [r1]
 80072ac:	617b      	str	r3, [r7, #20]
   return(result);
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1e4      	bne.n	800727e <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072b4:	e007      	b.n	80072c6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	699a      	ldr	r2, [r3, #24]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f042 0208 	orr.w	r2, r2, #8
 80072c4:	619a      	str	r2, [r3, #24]
}
 80072c6:	bf00      	nop
 80072c8:	37b8      	adds	r7, #184	@ 0xb8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	40008000 	.word	0x40008000
 80072d4:	08006a51 	.word	0x08006a51

080072d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007322:	2b01      	cmp	r3, #1
 8007324:	d101      	bne.n	800732a <HAL_UARTEx_DisableFifoMode+0x16>
 8007326:	2302      	movs	r3, #2
 8007328:	e027      	b.n	800737a <HAL_UARTEx_DisableFifoMode+0x66>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2224      	movs	r2, #36	@ 0x24
 8007336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 0201 	bic.w	r2, r2, #1
 8007350:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007358:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2220      	movs	r2, #32
 800736c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007396:	2b01      	cmp	r3, #1
 8007398:	d101      	bne.n	800739e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800739a:	2302      	movs	r3, #2
 800739c:	e02d      	b.n	80073fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2224      	movs	r2, #36	@ 0x24
 80073aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f022 0201 	bic.w	r2, r2, #1
 80073c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f850 	bl	8007480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007412:	2b01      	cmp	r3, #1
 8007414:	d101      	bne.n	800741a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007416:	2302      	movs	r3, #2
 8007418:	e02d      	b.n	8007476 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2224      	movs	r2, #36	@ 0x24
 8007426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0201 	bic.w	r2, r2, #1
 8007440:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f812 	bl	8007480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2220      	movs	r2, #32
 8007468:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800748c:	2b00      	cmp	r3, #0
 800748e:	d108      	bne.n	80074a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074a0:	e031      	b.n	8007506 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074a2:	2308      	movs	r3, #8
 80074a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074a6:	2308      	movs	r3, #8
 80074a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	0e5b      	lsrs	r3, r3, #25
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	0f5b      	lsrs	r3, r3, #29
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	f003 0307 	and.w	r3, r3, #7
 80074c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074ca:	7bbb      	ldrb	r3, [r7, #14]
 80074cc:	7b3a      	ldrb	r2, [r7, #12]
 80074ce:	4911      	ldr	r1, [pc, #68]	@ (8007514 <UARTEx_SetNbDataToProcess+0x94>)
 80074d0:	5c8a      	ldrb	r2, [r1, r2]
 80074d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074d6:	7b3a      	ldrb	r2, [r7, #12]
 80074d8:	490f      	ldr	r1, [pc, #60]	@ (8007518 <UARTEx_SetNbDataToProcess+0x98>)
 80074da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
 80074ea:	7b7a      	ldrb	r2, [r7, #13]
 80074ec:	4909      	ldr	r1, [pc, #36]	@ (8007514 <UARTEx_SetNbDataToProcess+0x94>)
 80074ee:	5c8a      	ldrb	r2, [r1, r2]
 80074f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80074f4:	7b7a      	ldrb	r2, [r7, #13]
 80074f6:	4908      	ldr	r1, [pc, #32]	@ (8007518 <UARTEx_SetNbDataToProcess+0x98>)
 80074f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80074fe:	b29a      	uxth	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007506:	bf00      	nop
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	08008748 	.word	0x08008748
 8007518:	08008750 	.word	0x08008750

0800751c <_strtol_l.constprop.0>:
 800751c:	2b24      	cmp	r3, #36	@ 0x24
 800751e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007522:	4686      	mov	lr, r0
 8007524:	4690      	mov	r8, r2
 8007526:	d801      	bhi.n	800752c <_strtol_l.constprop.0+0x10>
 8007528:	2b01      	cmp	r3, #1
 800752a:	d106      	bne.n	800753a <_strtol_l.constprop.0+0x1e>
 800752c:	f000 f9f2 	bl	8007914 <__errno>
 8007530:	2316      	movs	r3, #22
 8007532:	6003      	str	r3, [r0, #0]
 8007534:	2000      	movs	r0, #0
 8007536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800753a:	4834      	ldr	r0, [pc, #208]	@ (800760c <_strtol_l.constprop.0+0xf0>)
 800753c:	460d      	mov	r5, r1
 800753e:	462a      	mov	r2, r5
 8007540:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007544:	5d06      	ldrb	r6, [r0, r4]
 8007546:	f016 0608 	ands.w	r6, r6, #8
 800754a:	d1f8      	bne.n	800753e <_strtol_l.constprop.0+0x22>
 800754c:	2c2d      	cmp	r4, #45	@ 0x2d
 800754e:	d12d      	bne.n	80075ac <_strtol_l.constprop.0+0x90>
 8007550:	782c      	ldrb	r4, [r5, #0]
 8007552:	2601      	movs	r6, #1
 8007554:	1c95      	adds	r5, r2, #2
 8007556:	f033 0210 	bics.w	r2, r3, #16
 800755a:	d109      	bne.n	8007570 <_strtol_l.constprop.0+0x54>
 800755c:	2c30      	cmp	r4, #48	@ 0x30
 800755e:	d12a      	bne.n	80075b6 <_strtol_l.constprop.0+0x9a>
 8007560:	782a      	ldrb	r2, [r5, #0]
 8007562:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007566:	2a58      	cmp	r2, #88	@ 0x58
 8007568:	d125      	bne.n	80075b6 <_strtol_l.constprop.0+0x9a>
 800756a:	786c      	ldrb	r4, [r5, #1]
 800756c:	2310      	movs	r3, #16
 800756e:	3502      	adds	r5, #2
 8007570:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007574:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007578:	2200      	movs	r2, #0
 800757a:	fbbc f9f3 	udiv	r9, ip, r3
 800757e:	4610      	mov	r0, r2
 8007580:	fb03 ca19 	mls	sl, r3, r9, ip
 8007584:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007588:	2f09      	cmp	r7, #9
 800758a:	d81b      	bhi.n	80075c4 <_strtol_l.constprop.0+0xa8>
 800758c:	463c      	mov	r4, r7
 800758e:	42a3      	cmp	r3, r4
 8007590:	dd27      	ble.n	80075e2 <_strtol_l.constprop.0+0xc6>
 8007592:	1c57      	adds	r7, r2, #1
 8007594:	d007      	beq.n	80075a6 <_strtol_l.constprop.0+0x8a>
 8007596:	4581      	cmp	r9, r0
 8007598:	d320      	bcc.n	80075dc <_strtol_l.constprop.0+0xc0>
 800759a:	d101      	bne.n	80075a0 <_strtol_l.constprop.0+0x84>
 800759c:	45a2      	cmp	sl, r4
 800759e:	db1d      	blt.n	80075dc <_strtol_l.constprop.0+0xc0>
 80075a0:	fb00 4003 	mla	r0, r0, r3, r4
 80075a4:	2201      	movs	r2, #1
 80075a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075aa:	e7eb      	b.n	8007584 <_strtol_l.constprop.0+0x68>
 80075ac:	2c2b      	cmp	r4, #43	@ 0x2b
 80075ae:	bf04      	itt	eq
 80075b0:	782c      	ldrbeq	r4, [r5, #0]
 80075b2:	1c95      	addeq	r5, r2, #2
 80075b4:	e7cf      	b.n	8007556 <_strtol_l.constprop.0+0x3a>
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1da      	bne.n	8007570 <_strtol_l.constprop.0+0x54>
 80075ba:	2c30      	cmp	r4, #48	@ 0x30
 80075bc:	bf0c      	ite	eq
 80075be:	2308      	moveq	r3, #8
 80075c0:	230a      	movne	r3, #10
 80075c2:	e7d5      	b.n	8007570 <_strtol_l.constprop.0+0x54>
 80075c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80075c8:	2f19      	cmp	r7, #25
 80075ca:	d801      	bhi.n	80075d0 <_strtol_l.constprop.0+0xb4>
 80075cc:	3c37      	subs	r4, #55	@ 0x37
 80075ce:	e7de      	b.n	800758e <_strtol_l.constprop.0+0x72>
 80075d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80075d4:	2f19      	cmp	r7, #25
 80075d6:	d804      	bhi.n	80075e2 <_strtol_l.constprop.0+0xc6>
 80075d8:	3c57      	subs	r4, #87	@ 0x57
 80075da:	e7d8      	b.n	800758e <_strtol_l.constprop.0+0x72>
 80075dc:	f04f 32ff 	mov.w	r2, #4294967295
 80075e0:	e7e1      	b.n	80075a6 <_strtol_l.constprop.0+0x8a>
 80075e2:	1c53      	adds	r3, r2, #1
 80075e4:	d108      	bne.n	80075f8 <_strtol_l.constprop.0+0xdc>
 80075e6:	2322      	movs	r3, #34	@ 0x22
 80075e8:	f8ce 3000 	str.w	r3, [lr]
 80075ec:	4660      	mov	r0, ip
 80075ee:	f1b8 0f00 	cmp.w	r8, #0
 80075f2:	d0a0      	beq.n	8007536 <_strtol_l.constprop.0+0x1a>
 80075f4:	1e69      	subs	r1, r5, #1
 80075f6:	e006      	b.n	8007606 <_strtol_l.constprop.0+0xea>
 80075f8:	b106      	cbz	r6, 80075fc <_strtol_l.constprop.0+0xe0>
 80075fa:	4240      	negs	r0, r0
 80075fc:	f1b8 0f00 	cmp.w	r8, #0
 8007600:	d099      	beq.n	8007536 <_strtol_l.constprop.0+0x1a>
 8007602:	2a00      	cmp	r2, #0
 8007604:	d1f6      	bne.n	80075f4 <_strtol_l.constprop.0+0xd8>
 8007606:	f8c8 1000 	str.w	r1, [r8]
 800760a:	e794      	b.n	8007536 <_strtol_l.constprop.0+0x1a>
 800760c:	08008759 	.word	0x08008759

08007610 <strtol>:
 8007610:	4613      	mov	r3, r2
 8007612:	460a      	mov	r2, r1
 8007614:	4601      	mov	r1, r0
 8007616:	4802      	ldr	r0, [pc, #8]	@ (8007620 <strtol+0x10>)
 8007618:	6800      	ldr	r0, [r0, #0]
 800761a:	f7ff bf7f 	b.w	800751c <_strtol_l.constprop.0>
 800761e:	bf00      	nop
 8007620:	20000030 	.word	0x20000030

08007624 <std>:
 8007624:	2300      	movs	r3, #0
 8007626:	b510      	push	{r4, lr}
 8007628:	4604      	mov	r4, r0
 800762a:	e9c0 3300 	strd	r3, r3, [r0]
 800762e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007632:	6083      	str	r3, [r0, #8]
 8007634:	8181      	strh	r1, [r0, #12]
 8007636:	6643      	str	r3, [r0, #100]	@ 0x64
 8007638:	81c2      	strh	r2, [r0, #14]
 800763a:	6183      	str	r3, [r0, #24]
 800763c:	4619      	mov	r1, r3
 800763e:	2208      	movs	r2, #8
 8007640:	305c      	adds	r0, #92	@ 0x5c
 8007642:	f000 f906 	bl	8007852 <memset>
 8007646:	4b0d      	ldr	r3, [pc, #52]	@ (800767c <std+0x58>)
 8007648:	6263      	str	r3, [r4, #36]	@ 0x24
 800764a:	4b0d      	ldr	r3, [pc, #52]	@ (8007680 <std+0x5c>)
 800764c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800764e:	4b0d      	ldr	r3, [pc, #52]	@ (8007684 <std+0x60>)
 8007650:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007652:	4b0d      	ldr	r3, [pc, #52]	@ (8007688 <std+0x64>)
 8007654:	6323      	str	r3, [r4, #48]	@ 0x30
 8007656:	4b0d      	ldr	r3, [pc, #52]	@ (800768c <std+0x68>)
 8007658:	6224      	str	r4, [r4, #32]
 800765a:	429c      	cmp	r4, r3
 800765c:	d006      	beq.n	800766c <std+0x48>
 800765e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007662:	4294      	cmp	r4, r2
 8007664:	d002      	beq.n	800766c <std+0x48>
 8007666:	33d0      	adds	r3, #208	@ 0xd0
 8007668:	429c      	cmp	r4, r3
 800766a:	d105      	bne.n	8007678 <std+0x54>
 800766c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007674:	f000 b978 	b.w	8007968 <__retarget_lock_init_recursive>
 8007678:	bd10      	pop	{r4, pc}
 800767a:	bf00      	nop
 800767c:	080077cd 	.word	0x080077cd
 8007680:	080077ef 	.word	0x080077ef
 8007684:	08007827 	.word	0x08007827
 8007688:	0800784b 	.word	0x0800784b
 800768c:	20000348 	.word	0x20000348

08007690 <stdio_exit_handler>:
 8007690:	4a02      	ldr	r2, [pc, #8]	@ (800769c <stdio_exit_handler+0xc>)
 8007692:	4903      	ldr	r1, [pc, #12]	@ (80076a0 <stdio_exit_handler+0x10>)
 8007694:	4803      	ldr	r0, [pc, #12]	@ (80076a4 <stdio_exit_handler+0x14>)
 8007696:	f000 b869 	b.w	800776c <_fwalk_sglue>
 800769a:	bf00      	nop
 800769c:	20000024 	.word	0x20000024
 80076a0:	08008209 	.word	0x08008209
 80076a4:	20000034 	.word	0x20000034

080076a8 <cleanup_stdio>:
 80076a8:	6841      	ldr	r1, [r0, #4]
 80076aa:	4b0c      	ldr	r3, [pc, #48]	@ (80076dc <cleanup_stdio+0x34>)
 80076ac:	4299      	cmp	r1, r3
 80076ae:	b510      	push	{r4, lr}
 80076b0:	4604      	mov	r4, r0
 80076b2:	d001      	beq.n	80076b8 <cleanup_stdio+0x10>
 80076b4:	f000 fda8 	bl	8008208 <_fflush_r>
 80076b8:	68a1      	ldr	r1, [r4, #8]
 80076ba:	4b09      	ldr	r3, [pc, #36]	@ (80076e0 <cleanup_stdio+0x38>)
 80076bc:	4299      	cmp	r1, r3
 80076be:	d002      	beq.n	80076c6 <cleanup_stdio+0x1e>
 80076c0:	4620      	mov	r0, r4
 80076c2:	f000 fda1 	bl	8008208 <_fflush_r>
 80076c6:	68e1      	ldr	r1, [r4, #12]
 80076c8:	4b06      	ldr	r3, [pc, #24]	@ (80076e4 <cleanup_stdio+0x3c>)
 80076ca:	4299      	cmp	r1, r3
 80076cc:	d004      	beq.n	80076d8 <cleanup_stdio+0x30>
 80076ce:	4620      	mov	r0, r4
 80076d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076d4:	f000 bd98 	b.w	8008208 <_fflush_r>
 80076d8:	bd10      	pop	{r4, pc}
 80076da:	bf00      	nop
 80076dc:	20000348 	.word	0x20000348
 80076e0:	200003b0 	.word	0x200003b0
 80076e4:	20000418 	.word	0x20000418

080076e8 <global_stdio_init.part.0>:
 80076e8:	b510      	push	{r4, lr}
 80076ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007718 <global_stdio_init.part.0+0x30>)
 80076ec:	4c0b      	ldr	r4, [pc, #44]	@ (800771c <global_stdio_init.part.0+0x34>)
 80076ee:	4a0c      	ldr	r2, [pc, #48]	@ (8007720 <global_stdio_init.part.0+0x38>)
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	4620      	mov	r0, r4
 80076f4:	2200      	movs	r2, #0
 80076f6:	2104      	movs	r1, #4
 80076f8:	f7ff ff94 	bl	8007624 <std>
 80076fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007700:	2201      	movs	r2, #1
 8007702:	2109      	movs	r1, #9
 8007704:	f7ff ff8e 	bl	8007624 <std>
 8007708:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800770c:	2202      	movs	r2, #2
 800770e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007712:	2112      	movs	r1, #18
 8007714:	f7ff bf86 	b.w	8007624 <std>
 8007718:	20000480 	.word	0x20000480
 800771c:	20000348 	.word	0x20000348
 8007720:	08007691 	.word	0x08007691

08007724 <__sfp_lock_acquire>:
 8007724:	4801      	ldr	r0, [pc, #4]	@ (800772c <__sfp_lock_acquire+0x8>)
 8007726:	f000 b920 	b.w	800796a <__retarget_lock_acquire_recursive>
 800772a:	bf00      	nop
 800772c:	20000489 	.word	0x20000489

08007730 <__sfp_lock_release>:
 8007730:	4801      	ldr	r0, [pc, #4]	@ (8007738 <__sfp_lock_release+0x8>)
 8007732:	f000 b91b 	b.w	800796c <__retarget_lock_release_recursive>
 8007736:	bf00      	nop
 8007738:	20000489 	.word	0x20000489

0800773c <__sinit>:
 800773c:	b510      	push	{r4, lr}
 800773e:	4604      	mov	r4, r0
 8007740:	f7ff fff0 	bl	8007724 <__sfp_lock_acquire>
 8007744:	6a23      	ldr	r3, [r4, #32]
 8007746:	b11b      	cbz	r3, 8007750 <__sinit+0x14>
 8007748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800774c:	f7ff bff0 	b.w	8007730 <__sfp_lock_release>
 8007750:	4b04      	ldr	r3, [pc, #16]	@ (8007764 <__sinit+0x28>)
 8007752:	6223      	str	r3, [r4, #32]
 8007754:	4b04      	ldr	r3, [pc, #16]	@ (8007768 <__sinit+0x2c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1f5      	bne.n	8007748 <__sinit+0xc>
 800775c:	f7ff ffc4 	bl	80076e8 <global_stdio_init.part.0>
 8007760:	e7f2      	b.n	8007748 <__sinit+0xc>
 8007762:	bf00      	nop
 8007764:	080076a9 	.word	0x080076a9
 8007768:	20000480 	.word	0x20000480

0800776c <_fwalk_sglue>:
 800776c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007770:	4607      	mov	r7, r0
 8007772:	4688      	mov	r8, r1
 8007774:	4614      	mov	r4, r2
 8007776:	2600      	movs	r6, #0
 8007778:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800777c:	f1b9 0901 	subs.w	r9, r9, #1
 8007780:	d505      	bpl.n	800778e <_fwalk_sglue+0x22>
 8007782:	6824      	ldr	r4, [r4, #0]
 8007784:	2c00      	cmp	r4, #0
 8007786:	d1f7      	bne.n	8007778 <_fwalk_sglue+0xc>
 8007788:	4630      	mov	r0, r6
 800778a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800778e:	89ab      	ldrh	r3, [r5, #12]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d907      	bls.n	80077a4 <_fwalk_sglue+0x38>
 8007794:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007798:	3301      	adds	r3, #1
 800779a:	d003      	beq.n	80077a4 <_fwalk_sglue+0x38>
 800779c:	4629      	mov	r1, r5
 800779e:	4638      	mov	r0, r7
 80077a0:	47c0      	blx	r8
 80077a2:	4306      	orrs	r6, r0
 80077a4:	3568      	adds	r5, #104	@ 0x68
 80077a6:	e7e9      	b.n	800777c <_fwalk_sglue+0x10>

080077a8 <iprintf>:
 80077a8:	b40f      	push	{r0, r1, r2, r3}
 80077aa:	b507      	push	{r0, r1, r2, lr}
 80077ac:	4906      	ldr	r1, [pc, #24]	@ (80077c8 <iprintf+0x20>)
 80077ae:	ab04      	add	r3, sp, #16
 80077b0:	6808      	ldr	r0, [r1, #0]
 80077b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80077b6:	6881      	ldr	r1, [r0, #8]
 80077b8:	9301      	str	r3, [sp, #4]
 80077ba:	f000 f9fb 	bl	8007bb4 <_vfiprintf_r>
 80077be:	b003      	add	sp, #12
 80077c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80077c4:	b004      	add	sp, #16
 80077c6:	4770      	bx	lr
 80077c8:	20000030 	.word	0x20000030

080077cc <__sread>:
 80077cc:	b510      	push	{r4, lr}
 80077ce:	460c      	mov	r4, r1
 80077d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077d4:	f000 f87a 	bl	80078cc <_read_r>
 80077d8:	2800      	cmp	r0, #0
 80077da:	bfab      	itete	ge
 80077dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80077de:	89a3      	ldrhlt	r3, [r4, #12]
 80077e0:	181b      	addge	r3, r3, r0
 80077e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80077e6:	bfac      	ite	ge
 80077e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80077ea:	81a3      	strhlt	r3, [r4, #12]
 80077ec:	bd10      	pop	{r4, pc}

080077ee <__swrite>:
 80077ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f2:	461f      	mov	r7, r3
 80077f4:	898b      	ldrh	r3, [r1, #12]
 80077f6:	05db      	lsls	r3, r3, #23
 80077f8:	4605      	mov	r5, r0
 80077fa:	460c      	mov	r4, r1
 80077fc:	4616      	mov	r6, r2
 80077fe:	d505      	bpl.n	800780c <__swrite+0x1e>
 8007800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007804:	2302      	movs	r3, #2
 8007806:	2200      	movs	r2, #0
 8007808:	f000 f84e 	bl	80078a8 <_lseek_r>
 800780c:	89a3      	ldrh	r3, [r4, #12]
 800780e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007812:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007816:	81a3      	strh	r3, [r4, #12]
 8007818:	4632      	mov	r2, r6
 800781a:	463b      	mov	r3, r7
 800781c:	4628      	mov	r0, r5
 800781e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007822:	f000 b865 	b.w	80078f0 <_write_r>

08007826 <__sseek>:
 8007826:	b510      	push	{r4, lr}
 8007828:	460c      	mov	r4, r1
 800782a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800782e:	f000 f83b 	bl	80078a8 <_lseek_r>
 8007832:	1c43      	adds	r3, r0, #1
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	bf15      	itete	ne
 8007838:	6560      	strne	r0, [r4, #84]	@ 0x54
 800783a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800783e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007842:	81a3      	strheq	r3, [r4, #12]
 8007844:	bf18      	it	ne
 8007846:	81a3      	strhne	r3, [r4, #12]
 8007848:	bd10      	pop	{r4, pc}

0800784a <__sclose>:
 800784a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800784e:	f000 b81b 	b.w	8007888 <_close_r>

08007852 <memset>:
 8007852:	4402      	add	r2, r0
 8007854:	4603      	mov	r3, r0
 8007856:	4293      	cmp	r3, r2
 8007858:	d100      	bne.n	800785c <memset+0xa>
 800785a:	4770      	bx	lr
 800785c:	f803 1b01 	strb.w	r1, [r3], #1
 8007860:	e7f9      	b.n	8007856 <memset+0x4>

08007862 <strncmp>:
 8007862:	b510      	push	{r4, lr}
 8007864:	b16a      	cbz	r2, 8007882 <strncmp+0x20>
 8007866:	3901      	subs	r1, #1
 8007868:	1884      	adds	r4, r0, r2
 800786a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800786e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007872:	429a      	cmp	r2, r3
 8007874:	d103      	bne.n	800787e <strncmp+0x1c>
 8007876:	42a0      	cmp	r0, r4
 8007878:	d001      	beq.n	800787e <strncmp+0x1c>
 800787a:	2a00      	cmp	r2, #0
 800787c:	d1f5      	bne.n	800786a <strncmp+0x8>
 800787e:	1ad0      	subs	r0, r2, r3
 8007880:	bd10      	pop	{r4, pc}
 8007882:	4610      	mov	r0, r2
 8007884:	e7fc      	b.n	8007880 <strncmp+0x1e>
	...

08007888 <_close_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4d06      	ldr	r5, [pc, #24]	@ (80078a4 <_close_r+0x1c>)
 800788c:	2300      	movs	r3, #0
 800788e:	4604      	mov	r4, r0
 8007890:	4608      	mov	r0, r1
 8007892:	602b      	str	r3, [r5, #0]
 8007894:	f7f9 fc28 	bl	80010e8 <_close>
 8007898:	1c43      	adds	r3, r0, #1
 800789a:	d102      	bne.n	80078a2 <_close_r+0x1a>
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	b103      	cbz	r3, 80078a2 <_close_r+0x1a>
 80078a0:	6023      	str	r3, [r4, #0]
 80078a2:	bd38      	pop	{r3, r4, r5, pc}
 80078a4:	20000484 	.word	0x20000484

080078a8 <_lseek_r>:
 80078a8:	b538      	push	{r3, r4, r5, lr}
 80078aa:	4d07      	ldr	r5, [pc, #28]	@ (80078c8 <_lseek_r+0x20>)
 80078ac:	4604      	mov	r4, r0
 80078ae:	4608      	mov	r0, r1
 80078b0:	4611      	mov	r1, r2
 80078b2:	2200      	movs	r2, #0
 80078b4:	602a      	str	r2, [r5, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	f7f9 fc3d 	bl	8001136 <_lseek>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d102      	bne.n	80078c6 <_lseek_r+0x1e>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	b103      	cbz	r3, 80078c6 <_lseek_r+0x1e>
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	20000484 	.word	0x20000484

080078cc <_read_r>:
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	4d07      	ldr	r5, [pc, #28]	@ (80078ec <_read_r+0x20>)
 80078d0:	4604      	mov	r4, r0
 80078d2:	4608      	mov	r0, r1
 80078d4:	4611      	mov	r1, r2
 80078d6:	2200      	movs	r2, #0
 80078d8:	602a      	str	r2, [r5, #0]
 80078da:	461a      	mov	r2, r3
 80078dc:	f7f9 fbcb 	bl	8001076 <_read>
 80078e0:	1c43      	adds	r3, r0, #1
 80078e2:	d102      	bne.n	80078ea <_read_r+0x1e>
 80078e4:	682b      	ldr	r3, [r5, #0]
 80078e6:	b103      	cbz	r3, 80078ea <_read_r+0x1e>
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	bd38      	pop	{r3, r4, r5, pc}
 80078ec:	20000484 	.word	0x20000484

080078f0 <_write_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	4d07      	ldr	r5, [pc, #28]	@ (8007910 <_write_r+0x20>)
 80078f4:	4604      	mov	r4, r0
 80078f6:	4608      	mov	r0, r1
 80078f8:	4611      	mov	r1, r2
 80078fa:	2200      	movs	r2, #0
 80078fc:	602a      	str	r2, [r5, #0]
 80078fe:	461a      	mov	r2, r3
 8007900:	f7f9 fbd6 	bl	80010b0 <_write>
 8007904:	1c43      	adds	r3, r0, #1
 8007906:	d102      	bne.n	800790e <_write_r+0x1e>
 8007908:	682b      	ldr	r3, [r5, #0]
 800790a:	b103      	cbz	r3, 800790e <_write_r+0x1e>
 800790c:	6023      	str	r3, [r4, #0]
 800790e:	bd38      	pop	{r3, r4, r5, pc}
 8007910:	20000484 	.word	0x20000484

08007914 <__errno>:
 8007914:	4b01      	ldr	r3, [pc, #4]	@ (800791c <__errno+0x8>)
 8007916:	6818      	ldr	r0, [r3, #0]
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	20000030 	.word	0x20000030

08007920 <__libc_init_array>:
 8007920:	b570      	push	{r4, r5, r6, lr}
 8007922:	4d0d      	ldr	r5, [pc, #52]	@ (8007958 <__libc_init_array+0x38>)
 8007924:	4c0d      	ldr	r4, [pc, #52]	@ (800795c <__libc_init_array+0x3c>)
 8007926:	1b64      	subs	r4, r4, r5
 8007928:	10a4      	asrs	r4, r4, #2
 800792a:	2600      	movs	r6, #0
 800792c:	42a6      	cmp	r6, r4
 800792e:	d109      	bne.n	8007944 <__libc_init_array+0x24>
 8007930:	4d0b      	ldr	r5, [pc, #44]	@ (8007960 <__libc_init_array+0x40>)
 8007932:	4c0c      	ldr	r4, [pc, #48]	@ (8007964 <__libc_init_array+0x44>)
 8007934:	f000 fdb8 	bl	80084a8 <_init>
 8007938:	1b64      	subs	r4, r4, r5
 800793a:	10a4      	asrs	r4, r4, #2
 800793c:	2600      	movs	r6, #0
 800793e:	42a6      	cmp	r6, r4
 8007940:	d105      	bne.n	800794e <__libc_init_array+0x2e>
 8007942:	bd70      	pop	{r4, r5, r6, pc}
 8007944:	f855 3b04 	ldr.w	r3, [r5], #4
 8007948:	4798      	blx	r3
 800794a:	3601      	adds	r6, #1
 800794c:	e7ee      	b.n	800792c <__libc_init_array+0xc>
 800794e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007952:	4798      	blx	r3
 8007954:	3601      	adds	r6, #1
 8007956:	e7f2      	b.n	800793e <__libc_init_array+0x1e>
 8007958:	08008894 	.word	0x08008894
 800795c:	08008894 	.word	0x08008894
 8007960:	08008894 	.word	0x08008894
 8007964:	08008898 	.word	0x08008898

08007968 <__retarget_lock_init_recursive>:
 8007968:	4770      	bx	lr

0800796a <__retarget_lock_acquire_recursive>:
 800796a:	4770      	bx	lr

0800796c <__retarget_lock_release_recursive>:
 800796c:	4770      	bx	lr
	...

08007970 <_free_r>:
 8007970:	b538      	push	{r3, r4, r5, lr}
 8007972:	4605      	mov	r5, r0
 8007974:	2900      	cmp	r1, #0
 8007976:	d041      	beq.n	80079fc <_free_r+0x8c>
 8007978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800797c:	1f0c      	subs	r4, r1, #4
 800797e:	2b00      	cmp	r3, #0
 8007980:	bfb8      	it	lt
 8007982:	18e4      	addlt	r4, r4, r3
 8007984:	f000 f8e0 	bl	8007b48 <__malloc_lock>
 8007988:	4a1d      	ldr	r2, [pc, #116]	@ (8007a00 <_free_r+0x90>)
 800798a:	6813      	ldr	r3, [r2, #0]
 800798c:	b933      	cbnz	r3, 800799c <_free_r+0x2c>
 800798e:	6063      	str	r3, [r4, #4]
 8007990:	6014      	str	r4, [r2, #0]
 8007992:	4628      	mov	r0, r5
 8007994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007998:	f000 b8dc 	b.w	8007b54 <__malloc_unlock>
 800799c:	42a3      	cmp	r3, r4
 800799e:	d908      	bls.n	80079b2 <_free_r+0x42>
 80079a0:	6820      	ldr	r0, [r4, #0]
 80079a2:	1821      	adds	r1, r4, r0
 80079a4:	428b      	cmp	r3, r1
 80079a6:	bf01      	itttt	eq
 80079a8:	6819      	ldreq	r1, [r3, #0]
 80079aa:	685b      	ldreq	r3, [r3, #4]
 80079ac:	1809      	addeq	r1, r1, r0
 80079ae:	6021      	streq	r1, [r4, #0]
 80079b0:	e7ed      	b.n	800798e <_free_r+0x1e>
 80079b2:	461a      	mov	r2, r3
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	b10b      	cbz	r3, 80079bc <_free_r+0x4c>
 80079b8:	42a3      	cmp	r3, r4
 80079ba:	d9fa      	bls.n	80079b2 <_free_r+0x42>
 80079bc:	6811      	ldr	r1, [r2, #0]
 80079be:	1850      	adds	r0, r2, r1
 80079c0:	42a0      	cmp	r0, r4
 80079c2:	d10b      	bne.n	80079dc <_free_r+0x6c>
 80079c4:	6820      	ldr	r0, [r4, #0]
 80079c6:	4401      	add	r1, r0
 80079c8:	1850      	adds	r0, r2, r1
 80079ca:	4283      	cmp	r3, r0
 80079cc:	6011      	str	r1, [r2, #0]
 80079ce:	d1e0      	bne.n	8007992 <_free_r+0x22>
 80079d0:	6818      	ldr	r0, [r3, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	6053      	str	r3, [r2, #4]
 80079d6:	4408      	add	r0, r1
 80079d8:	6010      	str	r0, [r2, #0]
 80079da:	e7da      	b.n	8007992 <_free_r+0x22>
 80079dc:	d902      	bls.n	80079e4 <_free_r+0x74>
 80079de:	230c      	movs	r3, #12
 80079e0:	602b      	str	r3, [r5, #0]
 80079e2:	e7d6      	b.n	8007992 <_free_r+0x22>
 80079e4:	6820      	ldr	r0, [r4, #0]
 80079e6:	1821      	adds	r1, r4, r0
 80079e8:	428b      	cmp	r3, r1
 80079ea:	bf04      	itt	eq
 80079ec:	6819      	ldreq	r1, [r3, #0]
 80079ee:	685b      	ldreq	r3, [r3, #4]
 80079f0:	6063      	str	r3, [r4, #4]
 80079f2:	bf04      	itt	eq
 80079f4:	1809      	addeq	r1, r1, r0
 80079f6:	6021      	streq	r1, [r4, #0]
 80079f8:	6054      	str	r4, [r2, #4]
 80079fa:	e7ca      	b.n	8007992 <_free_r+0x22>
 80079fc:	bd38      	pop	{r3, r4, r5, pc}
 80079fe:	bf00      	nop
 8007a00:	20000490 	.word	0x20000490

08007a04 <sbrk_aligned>:
 8007a04:	b570      	push	{r4, r5, r6, lr}
 8007a06:	4e0f      	ldr	r6, [pc, #60]	@ (8007a44 <sbrk_aligned+0x40>)
 8007a08:	460c      	mov	r4, r1
 8007a0a:	6831      	ldr	r1, [r6, #0]
 8007a0c:	4605      	mov	r5, r0
 8007a0e:	b911      	cbnz	r1, 8007a16 <sbrk_aligned+0x12>
 8007a10:	f000 fcb6 	bl	8008380 <_sbrk_r>
 8007a14:	6030      	str	r0, [r6, #0]
 8007a16:	4621      	mov	r1, r4
 8007a18:	4628      	mov	r0, r5
 8007a1a:	f000 fcb1 	bl	8008380 <_sbrk_r>
 8007a1e:	1c43      	adds	r3, r0, #1
 8007a20:	d103      	bne.n	8007a2a <sbrk_aligned+0x26>
 8007a22:	f04f 34ff 	mov.w	r4, #4294967295
 8007a26:	4620      	mov	r0, r4
 8007a28:	bd70      	pop	{r4, r5, r6, pc}
 8007a2a:	1cc4      	adds	r4, r0, #3
 8007a2c:	f024 0403 	bic.w	r4, r4, #3
 8007a30:	42a0      	cmp	r0, r4
 8007a32:	d0f8      	beq.n	8007a26 <sbrk_aligned+0x22>
 8007a34:	1a21      	subs	r1, r4, r0
 8007a36:	4628      	mov	r0, r5
 8007a38:	f000 fca2 	bl	8008380 <_sbrk_r>
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	d1f2      	bne.n	8007a26 <sbrk_aligned+0x22>
 8007a40:	e7ef      	b.n	8007a22 <sbrk_aligned+0x1e>
 8007a42:	bf00      	nop
 8007a44:	2000048c 	.word	0x2000048c

08007a48 <_malloc_r>:
 8007a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a4c:	1ccd      	adds	r5, r1, #3
 8007a4e:	f025 0503 	bic.w	r5, r5, #3
 8007a52:	3508      	adds	r5, #8
 8007a54:	2d0c      	cmp	r5, #12
 8007a56:	bf38      	it	cc
 8007a58:	250c      	movcc	r5, #12
 8007a5a:	2d00      	cmp	r5, #0
 8007a5c:	4606      	mov	r6, r0
 8007a5e:	db01      	blt.n	8007a64 <_malloc_r+0x1c>
 8007a60:	42a9      	cmp	r1, r5
 8007a62:	d904      	bls.n	8007a6e <_malloc_r+0x26>
 8007a64:	230c      	movs	r3, #12
 8007a66:	6033      	str	r3, [r6, #0]
 8007a68:	2000      	movs	r0, #0
 8007a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b44 <_malloc_r+0xfc>
 8007a72:	f000 f869 	bl	8007b48 <__malloc_lock>
 8007a76:	f8d8 3000 	ldr.w	r3, [r8]
 8007a7a:	461c      	mov	r4, r3
 8007a7c:	bb44      	cbnz	r4, 8007ad0 <_malloc_r+0x88>
 8007a7e:	4629      	mov	r1, r5
 8007a80:	4630      	mov	r0, r6
 8007a82:	f7ff ffbf 	bl	8007a04 <sbrk_aligned>
 8007a86:	1c43      	adds	r3, r0, #1
 8007a88:	4604      	mov	r4, r0
 8007a8a:	d158      	bne.n	8007b3e <_malloc_r+0xf6>
 8007a8c:	f8d8 4000 	ldr.w	r4, [r8]
 8007a90:	4627      	mov	r7, r4
 8007a92:	2f00      	cmp	r7, #0
 8007a94:	d143      	bne.n	8007b1e <_malloc_r+0xd6>
 8007a96:	2c00      	cmp	r4, #0
 8007a98:	d04b      	beq.n	8007b32 <_malloc_r+0xea>
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	4639      	mov	r1, r7
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	eb04 0903 	add.w	r9, r4, r3
 8007aa4:	f000 fc6c 	bl	8008380 <_sbrk_r>
 8007aa8:	4581      	cmp	r9, r0
 8007aaa:	d142      	bne.n	8007b32 <_malloc_r+0xea>
 8007aac:	6821      	ldr	r1, [r4, #0]
 8007aae:	1a6d      	subs	r5, r5, r1
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	f7ff ffa6 	bl	8007a04 <sbrk_aligned>
 8007ab8:	3001      	adds	r0, #1
 8007aba:	d03a      	beq.n	8007b32 <_malloc_r+0xea>
 8007abc:	6823      	ldr	r3, [r4, #0]
 8007abe:	442b      	add	r3, r5
 8007ac0:	6023      	str	r3, [r4, #0]
 8007ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	bb62      	cbnz	r2, 8007b24 <_malloc_r+0xdc>
 8007aca:	f8c8 7000 	str.w	r7, [r8]
 8007ace:	e00f      	b.n	8007af0 <_malloc_r+0xa8>
 8007ad0:	6822      	ldr	r2, [r4, #0]
 8007ad2:	1b52      	subs	r2, r2, r5
 8007ad4:	d420      	bmi.n	8007b18 <_malloc_r+0xd0>
 8007ad6:	2a0b      	cmp	r2, #11
 8007ad8:	d917      	bls.n	8007b0a <_malloc_r+0xc2>
 8007ada:	1961      	adds	r1, r4, r5
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	6025      	str	r5, [r4, #0]
 8007ae0:	bf18      	it	ne
 8007ae2:	6059      	strne	r1, [r3, #4]
 8007ae4:	6863      	ldr	r3, [r4, #4]
 8007ae6:	bf08      	it	eq
 8007ae8:	f8c8 1000 	streq.w	r1, [r8]
 8007aec:	5162      	str	r2, [r4, r5]
 8007aee:	604b      	str	r3, [r1, #4]
 8007af0:	4630      	mov	r0, r6
 8007af2:	f000 f82f 	bl	8007b54 <__malloc_unlock>
 8007af6:	f104 000b 	add.w	r0, r4, #11
 8007afa:	1d23      	adds	r3, r4, #4
 8007afc:	f020 0007 	bic.w	r0, r0, #7
 8007b00:	1ac2      	subs	r2, r0, r3
 8007b02:	bf1c      	itt	ne
 8007b04:	1a1b      	subne	r3, r3, r0
 8007b06:	50a3      	strne	r3, [r4, r2]
 8007b08:	e7af      	b.n	8007a6a <_malloc_r+0x22>
 8007b0a:	6862      	ldr	r2, [r4, #4]
 8007b0c:	42a3      	cmp	r3, r4
 8007b0e:	bf0c      	ite	eq
 8007b10:	f8c8 2000 	streq.w	r2, [r8]
 8007b14:	605a      	strne	r2, [r3, #4]
 8007b16:	e7eb      	b.n	8007af0 <_malloc_r+0xa8>
 8007b18:	4623      	mov	r3, r4
 8007b1a:	6864      	ldr	r4, [r4, #4]
 8007b1c:	e7ae      	b.n	8007a7c <_malloc_r+0x34>
 8007b1e:	463c      	mov	r4, r7
 8007b20:	687f      	ldr	r7, [r7, #4]
 8007b22:	e7b6      	b.n	8007a92 <_malloc_r+0x4a>
 8007b24:	461a      	mov	r2, r3
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	42a3      	cmp	r3, r4
 8007b2a:	d1fb      	bne.n	8007b24 <_malloc_r+0xdc>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	6053      	str	r3, [r2, #4]
 8007b30:	e7de      	b.n	8007af0 <_malloc_r+0xa8>
 8007b32:	230c      	movs	r3, #12
 8007b34:	6033      	str	r3, [r6, #0]
 8007b36:	4630      	mov	r0, r6
 8007b38:	f000 f80c 	bl	8007b54 <__malloc_unlock>
 8007b3c:	e794      	b.n	8007a68 <_malloc_r+0x20>
 8007b3e:	6005      	str	r5, [r0, #0]
 8007b40:	e7d6      	b.n	8007af0 <_malloc_r+0xa8>
 8007b42:	bf00      	nop
 8007b44:	20000490 	.word	0x20000490

08007b48 <__malloc_lock>:
 8007b48:	4801      	ldr	r0, [pc, #4]	@ (8007b50 <__malloc_lock+0x8>)
 8007b4a:	f7ff bf0e 	b.w	800796a <__retarget_lock_acquire_recursive>
 8007b4e:	bf00      	nop
 8007b50:	20000488 	.word	0x20000488

08007b54 <__malloc_unlock>:
 8007b54:	4801      	ldr	r0, [pc, #4]	@ (8007b5c <__malloc_unlock+0x8>)
 8007b56:	f7ff bf09 	b.w	800796c <__retarget_lock_release_recursive>
 8007b5a:	bf00      	nop
 8007b5c:	20000488 	.word	0x20000488

08007b60 <__sfputc_r>:
 8007b60:	6893      	ldr	r3, [r2, #8]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	b410      	push	{r4}
 8007b68:	6093      	str	r3, [r2, #8]
 8007b6a:	da08      	bge.n	8007b7e <__sfputc_r+0x1e>
 8007b6c:	6994      	ldr	r4, [r2, #24]
 8007b6e:	42a3      	cmp	r3, r4
 8007b70:	db01      	blt.n	8007b76 <__sfputc_r+0x16>
 8007b72:	290a      	cmp	r1, #10
 8007b74:	d103      	bne.n	8007b7e <__sfputc_r+0x1e>
 8007b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b7a:	f000 bb6d 	b.w	8008258 <__swbuf_r>
 8007b7e:	6813      	ldr	r3, [r2, #0]
 8007b80:	1c58      	adds	r0, r3, #1
 8007b82:	6010      	str	r0, [r2, #0]
 8007b84:	7019      	strb	r1, [r3, #0]
 8007b86:	4608      	mov	r0, r1
 8007b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <__sfputs_r>:
 8007b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b90:	4606      	mov	r6, r0
 8007b92:	460f      	mov	r7, r1
 8007b94:	4614      	mov	r4, r2
 8007b96:	18d5      	adds	r5, r2, r3
 8007b98:	42ac      	cmp	r4, r5
 8007b9a:	d101      	bne.n	8007ba0 <__sfputs_r+0x12>
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	e007      	b.n	8007bb0 <__sfputs_r+0x22>
 8007ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ba4:	463a      	mov	r2, r7
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	f7ff ffda 	bl	8007b60 <__sfputc_r>
 8007bac:	1c43      	adds	r3, r0, #1
 8007bae:	d1f3      	bne.n	8007b98 <__sfputs_r+0xa>
 8007bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007bb4 <_vfiprintf_r>:
 8007bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb8:	460d      	mov	r5, r1
 8007bba:	b09d      	sub	sp, #116	@ 0x74
 8007bbc:	4614      	mov	r4, r2
 8007bbe:	4698      	mov	r8, r3
 8007bc0:	4606      	mov	r6, r0
 8007bc2:	b118      	cbz	r0, 8007bcc <_vfiprintf_r+0x18>
 8007bc4:	6a03      	ldr	r3, [r0, #32]
 8007bc6:	b90b      	cbnz	r3, 8007bcc <_vfiprintf_r+0x18>
 8007bc8:	f7ff fdb8 	bl	800773c <__sinit>
 8007bcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bce:	07d9      	lsls	r1, r3, #31
 8007bd0:	d405      	bmi.n	8007bde <_vfiprintf_r+0x2a>
 8007bd2:	89ab      	ldrh	r3, [r5, #12]
 8007bd4:	059a      	lsls	r2, r3, #22
 8007bd6:	d402      	bmi.n	8007bde <_vfiprintf_r+0x2a>
 8007bd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bda:	f7ff fec6 	bl	800796a <__retarget_lock_acquire_recursive>
 8007bde:	89ab      	ldrh	r3, [r5, #12]
 8007be0:	071b      	lsls	r3, r3, #28
 8007be2:	d501      	bpl.n	8007be8 <_vfiprintf_r+0x34>
 8007be4:	692b      	ldr	r3, [r5, #16]
 8007be6:	b99b      	cbnz	r3, 8007c10 <_vfiprintf_r+0x5c>
 8007be8:	4629      	mov	r1, r5
 8007bea:	4630      	mov	r0, r6
 8007bec:	f000 fb72 	bl	80082d4 <__swsetup_r>
 8007bf0:	b170      	cbz	r0, 8007c10 <_vfiprintf_r+0x5c>
 8007bf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bf4:	07dc      	lsls	r4, r3, #31
 8007bf6:	d504      	bpl.n	8007c02 <_vfiprintf_r+0x4e>
 8007bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfc:	b01d      	add	sp, #116	@ 0x74
 8007bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c02:	89ab      	ldrh	r3, [r5, #12]
 8007c04:	0598      	lsls	r0, r3, #22
 8007c06:	d4f7      	bmi.n	8007bf8 <_vfiprintf_r+0x44>
 8007c08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c0a:	f7ff feaf 	bl	800796c <__retarget_lock_release_recursive>
 8007c0e:	e7f3      	b.n	8007bf8 <_vfiprintf_r+0x44>
 8007c10:	2300      	movs	r3, #0
 8007c12:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c14:	2320      	movs	r3, #32
 8007c16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c1e:	2330      	movs	r3, #48	@ 0x30
 8007c20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007dd0 <_vfiprintf_r+0x21c>
 8007c24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c28:	f04f 0901 	mov.w	r9, #1
 8007c2c:	4623      	mov	r3, r4
 8007c2e:	469a      	mov	sl, r3
 8007c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c34:	b10a      	cbz	r2, 8007c3a <_vfiprintf_r+0x86>
 8007c36:	2a25      	cmp	r2, #37	@ 0x25
 8007c38:	d1f9      	bne.n	8007c2e <_vfiprintf_r+0x7a>
 8007c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8007c3e:	d00b      	beq.n	8007c58 <_vfiprintf_r+0xa4>
 8007c40:	465b      	mov	r3, fp
 8007c42:	4622      	mov	r2, r4
 8007c44:	4629      	mov	r1, r5
 8007c46:	4630      	mov	r0, r6
 8007c48:	f7ff ffa1 	bl	8007b8e <__sfputs_r>
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	f000 80a7 	beq.w	8007da0 <_vfiprintf_r+0x1ec>
 8007c52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c54:	445a      	add	r2, fp
 8007c56:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c58:	f89a 3000 	ldrb.w	r3, [sl]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 809f 	beq.w	8007da0 <_vfiprintf_r+0x1ec>
 8007c62:	2300      	movs	r3, #0
 8007c64:	f04f 32ff 	mov.w	r2, #4294967295
 8007c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c6c:	f10a 0a01 	add.w	sl, sl, #1
 8007c70:	9304      	str	r3, [sp, #16]
 8007c72:	9307      	str	r3, [sp, #28]
 8007c74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c78:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c7a:	4654      	mov	r4, sl
 8007c7c:	2205      	movs	r2, #5
 8007c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c82:	4853      	ldr	r0, [pc, #332]	@ (8007dd0 <_vfiprintf_r+0x21c>)
 8007c84:	f7f8 facc 	bl	8000220 <memchr>
 8007c88:	9a04      	ldr	r2, [sp, #16]
 8007c8a:	b9d8      	cbnz	r0, 8007cc4 <_vfiprintf_r+0x110>
 8007c8c:	06d1      	lsls	r1, r2, #27
 8007c8e:	bf44      	itt	mi
 8007c90:	2320      	movmi	r3, #32
 8007c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c96:	0713      	lsls	r3, r2, #28
 8007c98:	bf44      	itt	mi
 8007c9a:	232b      	movmi	r3, #43	@ 0x2b
 8007c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ca4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ca6:	d015      	beq.n	8007cd4 <_vfiprintf_r+0x120>
 8007ca8:	9a07      	ldr	r2, [sp, #28]
 8007caa:	4654      	mov	r4, sl
 8007cac:	2000      	movs	r0, #0
 8007cae:	f04f 0c0a 	mov.w	ip, #10
 8007cb2:	4621      	mov	r1, r4
 8007cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cb8:	3b30      	subs	r3, #48	@ 0x30
 8007cba:	2b09      	cmp	r3, #9
 8007cbc:	d94b      	bls.n	8007d56 <_vfiprintf_r+0x1a2>
 8007cbe:	b1b0      	cbz	r0, 8007cee <_vfiprintf_r+0x13a>
 8007cc0:	9207      	str	r2, [sp, #28]
 8007cc2:	e014      	b.n	8007cee <_vfiprintf_r+0x13a>
 8007cc4:	eba0 0308 	sub.w	r3, r0, r8
 8007cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	46a2      	mov	sl, r4
 8007cd2:	e7d2      	b.n	8007c7a <_vfiprintf_r+0xc6>
 8007cd4:	9b03      	ldr	r3, [sp, #12]
 8007cd6:	1d19      	adds	r1, r3, #4
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	9103      	str	r1, [sp, #12]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	bfbb      	ittet	lt
 8007ce0:	425b      	neglt	r3, r3
 8007ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ce6:	9307      	strge	r3, [sp, #28]
 8007ce8:	9307      	strlt	r3, [sp, #28]
 8007cea:	bfb8      	it	lt
 8007cec:	9204      	strlt	r2, [sp, #16]
 8007cee:	7823      	ldrb	r3, [r4, #0]
 8007cf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cf2:	d10a      	bne.n	8007d0a <_vfiprintf_r+0x156>
 8007cf4:	7863      	ldrb	r3, [r4, #1]
 8007cf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cf8:	d132      	bne.n	8007d60 <_vfiprintf_r+0x1ac>
 8007cfa:	9b03      	ldr	r3, [sp, #12]
 8007cfc:	1d1a      	adds	r2, r3, #4
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	9203      	str	r2, [sp, #12]
 8007d02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d06:	3402      	adds	r4, #2
 8007d08:	9305      	str	r3, [sp, #20]
 8007d0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007de0 <_vfiprintf_r+0x22c>
 8007d0e:	7821      	ldrb	r1, [r4, #0]
 8007d10:	2203      	movs	r2, #3
 8007d12:	4650      	mov	r0, sl
 8007d14:	f7f8 fa84 	bl	8000220 <memchr>
 8007d18:	b138      	cbz	r0, 8007d2a <_vfiprintf_r+0x176>
 8007d1a:	9b04      	ldr	r3, [sp, #16]
 8007d1c:	eba0 000a 	sub.w	r0, r0, sl
 8007d20:	2240      	movs	r2, #64	@ 0x40
 8007d22:	4082      	lsls	r2, r0
 8007d24:	4313      	orrs	r3, r2
 8007d26:	3401      	adds	r4, #1
 8007d28:	9304      	str	r3, [sp, #16]
 8007d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d2e:	4829      	ldr	r0, [pc, #164]	@ (8007dd4 <_vfiprintf_r+0x220>)
 8007d30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d34:	2206      	movs	r2, #6
 8007d36:	f7f8 fa73 	bl	8000220 <memchr>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	d03f      	beq.n	8007dbe <_vfiprintf_r+0x20a>
 8007d3e:	4b26      	ldr	r3, [pc, #152]	@ (8007dd8 <_vfiprintf_r+0x224>)
 8007d40:	bb1b      	cbnz	r3, 8007d8a <_vfiprintf_r+0x1d6>
 8007d42:	9b03      	ldr	r3, [sp, #12]
 8007d44:	3307      	adds	r3, #7
 8007d46:	f023 0307 	bic.w	r3, r3, #7
 8007d4a:	3308      	adds	r3, #8
 8007d4c:	9303      	str	r3, [sp, #12]
 8007d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d50:	443b      	add	r3, r7
 8007d52:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d54:	e76a      	b.n	8007c2c <_vfiprintf_r+0x78>
 8007d56:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d5a:	460c      	mov	r4, r1
 8007d5c:	2001      	movs	r0, #1
 8007d5e:	e7a8      	b.n	8007cb2 <_vfiprintf_r+0xfe>
 8007d60:	2300      	movs	r3, #0
 8007d62:	3401      	adds	r4, #1
 8007d64:	9305      	str	r3, [sp, #20]
 8007d66:	4619      	mov	r1, r3
 8007d68:	f04f 0c0a 	mov.w	ip, #10
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d72:	3a30      	subs	r2, #48	@ 0x30
 8007d74:	2a09      	cmp	r2, #9
 8007d76:	d903      	bls.n	8007d80 <_vfiprintf_r+0x1cc>
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d0c6      	beq.n	8007d0a <_vfiprintf_r+0x156>
 8007d7c:	9105      	str	r1, [sp, #20]
 8007d7e:	e7c4      	b.n	8007d0a <_vfiprintf_r+0x156>
 8007d80:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d84:	4604      	mov	r4, r0
 8007d86:	2301      	movs	r3, #1
 8007d88:	e7f0      	b.n	8007d6c <_vfiprintf_r+0x1b8>
 8007d8a:	ab03      	add	r3, sp, #12
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	462a      	mov	r2, r5
 8007d90:	4b12      	ldr	r3, [pc, #72]	@ (8007ddc <_vfiprintf_r+0x228>)
 8007d92:	a904      	add	r1, sp, #16
 8007d94:	4630      	mov	r0, r6
 8007d96:	f3af 8000 	nop.w
 8007d9a:	4607      	mov	r7, r0
 8007d9c:	1c78      	adds	r0, r7, #1
 8007d9e:	d1d6      	bne.n	8007d4e <_vfiprintf_r+0x19a>
 8007da0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007da2:	07d9      	lsls	r1, r3, #31
 8007da4:	d405      	bmi.n	8007db2 <_vfiprintf_r+0x1fe>
 8007da6:	89ab      	ldrh	r3, [r5, #12]
 8007da8:	059a      	lsls	r2, r3, #22
 8007daa:	d402      	bmi.n	8007db2 <_vfiprintf_r+0x1fe>
 8007dac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dae:	f7ff fddd 	bl	800796c <__retarget_lock_release_recursive>
 8007db2:	89ab      	ldrh	r3, [r5, #12]
 8007db4:	065b      	lsls	r3, r3, #25
 8007db6:	f53f af1f 	bmi.w	8007bf8 <_vfiprintf_r+0x44>
 8007dba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007dbc:	e71e      	b.n	8007bfc <_vfiprintf_r+0x48>
 8007dbe:	ab03      	add	r3, sp, #12
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	462a      	mov	r2, r5
 8007dc4:	4b05      	ldr	r3, [pc, #20]	@ (8007ddc <_vfiprintf_r+0x228>)
 8007dc6:	a904      	add	r1, sp, #16
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f000 f879 	bl	8007ec0 <_printf_i>
 8007dce:	e7e4      	b.n	8007d9a <_vfiprintf_r+0x1e6>
 8007dd0:	08008859 	.word	0x08008859
 8007dd4:	08008863 	.word	0x08008863
 8007dd8:	00000000 	.word	0x00000000
 8007ddc:	08007b8f 	.word	0x08007b8f
 8007de0:	0800885f 	.word	0x0800885f

08007de4 <_printf_common>:
 8007de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de8:	4616      	mov	r6, r2
 8007dea:	4698      	mov	r8, r3
 8007dec:	688a      	ldr	r2, [r1, #8]
 8007dee:	690b      	ldr	r3, [r1, #16]
 8007df0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007df4:	4293      	cmp	r3, r2
 8007df6:	bfb8      	it	lt
 8007df8:	4613      	movlt	r3, r2
 8007dfa:	6033      	str	r3, [r6, #0]
 8007dfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e00:	4607      	mov	r7, r0
 8007e02:	460c      	mov	r4, r1
 8007e04:	b10a      	cbz	r2, 8007e0a <_printf_common+0x26>
 8007e06:	3301      	adds	r3, #1
 8007e08:	6033      	str	r3, [r6, #0]
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	0699      	lsls	r1, r3, #26
 8007e0e:	bf42      	ittt	mi
 8007e10:	6833      	ldrmi	r3, [r6, #0]
 8007e12:	3302      	addmi	r3, #2
 8007e14:	6033      	strmi	r3, [r6, #0]
 8007e16:	6825      	ldr	r5, [r4, #0]
 8007e18:	f015 0506 	ands.w	r5, r5, #6
 8007e1c:	d106      	bne.n	8007e2c <_printf_common+0x48>
 8007e1e:	f104 0a19 	add.w	sl, r4, #25
 8007e22:	68e3      	ldr	r3, [r4, #12]
 8007e24:	6832      	ldr	r2, [r6, #0]
 8007e26:	1a9b      	subs	r3, r3, r2
 8007e28:	42ab      	cmp	r3, r5
 8007e2a:	dc26      	bgt.n	8007e7a <_printf_common+0x96>
 8007e2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e30:	6822      	ldr	r2, [r4, #0]
 8007e32:	3b00      	subs	r3, #0
 8007e34:	bf18      	it	ne
 8007e36:	2301      	movne	r3, #1
 8007e38:	0692      	lsls	r2, r2, #26
 8007e3a:	d42b      	bmi.n	8007e94 <_printf_common+0xb0>
 8007e3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e40:	4641      	mov	r1, r8
 8007e42:	4638      	mov	r0, r7
 8007e44:	47c8      	blx	r9
 8007e46:	3001      	adds	r0, #1
 8007e48:	d01e      	beq.n	8007e88 <_printf_common+0xa4>
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	6922      	ldr	r2, [r4, #16]
 8007e4e:	f003 0306 	and.w	r3, r3, #6
 8007e52:	2b04      	cmp	r3, #4
 8007e54:	bf02      	ittt	eq
 8007e56:	68e5      	ldreq	r5, [r4, #12]
 8007e58:	6833      	ldreq	r3, [r6, #0]
 8007e5a:	1aed      	subeq	r5, r5, r3
 8007e5c:	68a3      	ldr	r3, [r4, #8]
 8007e5e:	bf0c      	ite	eq
 8007e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e64:	2500      	movne	r5, #0
 8007e66:	4293      	cmp	r3, r2
 8007e68:	bfc4      	itt	gt
 8007e6a:	1a9b      	subgt	r3, r3, r2
 8007e6c:	18ed      	addgt	r5, r5, r3
 8007e6e:	2600      	movs	r6, #0
 8007e70:	341a      	adds	r4, #26
 8007e72:	42b5      	cmp	r5, r6
 8007e74:	d11a      	bne.n	8007eac <_printf_common+0xc8>
 8007e76:	2000      	movs	r0, #0
 8007e78:	e008      	b.n	8007e8c <_printf_common+0xa8>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	4652      	mov	r2, sl
 8007e7e:	4641      	mov	r1, r8
 8007e80:	4638      	mov	r0, r7
 8007e82:	47c8      	blx	r9
 8007e84:	3001      	adds	r0, #1
 8007e86:	d103      	bne.n	8007e90 <_printf_common+0xac>
 8007e88:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e90:	3501      	adds	r5, #1
 8007e92:	e7c6      	b.n	8007e22 <_printf_common+0x3e>
 8007e94:	18e1      	adds	r1, r4, r3
 8007e96:	1c5a      	adds	r2, r3, #1
 8007e98:	2030      	movs	r0, #48	@ 0x30
 8007e9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e9e:	4422      	add	r2, r4
 8007ea0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ea4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ea8:	3302      	adds	r3, #2
 8007eaa:	e7c7      	b.n	8007e3c <_printf_common+0x58>
 8007eac:	2301      	movs	r3, #1
 8007eae:	4622      	mov	r2, r4
 8007eb0:	4641      	mov	r1, r8
 8007eb2:	4638      	mov	r0, r7
 8007eb4:	47c8      	blx	r9
 8007eb6:	3001      	adds	r0, #1
 8007eb8:	d0e6      	beq.n	8007e88 <_printf_common+0xa4>
 8007eba:	3601      	adds	r6, #1
 8007ebc:	e7d9      	b.n	8007e72 <_printf_common+0x8e>
	...

08007ec0 <_printf_i>:
 8007ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec4:	7e0f      	ldrb	r7, [r1, #24]
 8007ec6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ec8:	2f78      	cmp	r7, #120	@ 0x78
 8007eca:	4691      	mov	r9, r2
 8007ecc:	4680      	mov	r8, r0
 8007ece:	460c      	mov	r4, r1
 8007ed0:	469a      	mov	sl, r3
 8007ed2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ed6:	d807      	bhi.n	8007ee8 <_printf_i+0x28>
 8007ed8:	2f62      	cmp	r7, #98	@ 0x62
 8007eda:	d80a      	bhi.n	8007ef2 <_printf_i+0x32>
 8007edc:	2f00      	cmp	r7, #0
 8007ede:	f000 80d2 	beq.w	8008086 <_printf_i+0x1c6>
 8007ee2:	2f58      	cmp	r7, #88	@ 0x58
 8007ee4:	f000 80b9 	beq.w	800805a <_printf_i+0x19a>
 8007ee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007eec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ef0:	e03a      	b.n	8007f68 <_printf_i+0xa8>
 8007ef2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ef6:	2b15      	cmp	r3, #21
 8007ef8:	d8f6      	bhi.n	8007ee8 <_printf_i+0x28>
 8007efa:	a101      	add	r1, pc, #4	@ (adr r1, 8007f00 <_printf_i+0x40>)
 8007efc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f00:	08007f59 	.word	0x08007f59
 8007f04:	08007f6d 	.word	0x08007f6d
 8007f08:	08007ee9 	.word	0x08007ee9
 8007f0c:	08007ee9 	.word	0x08007ee9
 8007f10:	08007ee9 	.word	0x08007ee9
 8007f14:	08007ee9 	.word	0x08007ee9
 8007f18:	08007f6d 	.word	0x08007f6d
 8007f1c:	08007ee9 	.word	0x08007ee9
 8007f20:	08007ee9 	.word	0x08007ee9
 8007f24:	08007ee9 	.word	0x08007ee9
 8007f28:	08007ee9 	.word	0x08007ee9
 8007f2c:	0800806d 	.word	0x0800806d
 8007f30:	08007f97 	.word	0x08007f97
 8007f34:	08008027 	.word	0x08008027
 8007f38:	08007ee9 	.word	0x08007ee9
 8007f3c:	08007ee9 	.word	0x08007ee9
 8007f40:	0800808f 	.word	0x0800808f
 8007f44:	08007ee9 	.word	0x08007ee9
 8007f48:	08007f97 	.word	0x08007f97
 8007f4c:	08007ee9 	.word	0x08007ee9
 8007f50:	08007ee9 	.word	0x08007ee9
 8007f54:	0800802f 	.word	0x0800802f
 8007f58:	6833      	ldr	r3, [r6, #0]
 8007f5a:	1d1a      	adds	r2, r3, #4
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	6032      	str	r2, [r6, #0]
 8007f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e09d      	b.n	80080a8 <_printf_i+0x1e8>
 8007f6c:	6833      	ldr	r3, [r6, #0]
 8007f6e:	6820      	ldr	r0, [r4, #0]
 8007f70:	1d19      	adds	r1, r3, #4
 8007f72:	6031      	str	r1, [r6, #0]
 8007f74:	0606      	lsls	r6, r0, #24
 8007f76:	d501      	bpl.n	8007f7c <_printf_i+0xbc>
 8007f78:	681d      	ldr	r5, [r3, #0]
 8007f7a:	e003      	b.n	8007f84 <_printf_i+0xc4>
 8007f7c:	0645      	lsls	r5, r0, #25
 8007f7e:	d5fb      	bpl.n	8007f78 <_printf_i+0xb8>
 8007f80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f84:	2d00      	cmp	r5, #0
 8007f86:	da03      	bge.n	8007f90 <_printf_i+0xd0>
 8007f88:	232d      	movs	r3, #45	@ 0x2d
 8007f8a:	426d      	negs	r5, r5
 8007f8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f90:	4859      	ldr	r0, [pc, #356]	@ (80080f8 <_printf_i+0x238>)
 8007f92:	230a      	movs	r3, #10
 8007f94:	e011      	b.n	8007fba <_printf_i+0xfa>
 8007f96:	6821      	ldr	r1, [r4, #0]
 8007f98:	6833      	ldr	r3, [r6, #0]
 8007f9a:	0608      	lsls	r0, r1, #24
 8007f9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007fa0:	d402      	bmi.n	8007fa8 <_printf_i+0xe8>
 8007fa2:	0649      	lsls	r1, r1, #25
 8007fa4:	bf48      	it	mi
 8007fa6:	b2ad      	uxthmi	r5, r5
 8007fa8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007faa:	4853      	ldr	r0, [pc, #332]	@ (80080f8 <_printf_i+0x238>)
 8007fac:	6033      	str	r3, [r6, #0]
 8007fae:	bf14      	ite	ne
 8007fb0:	230a      	movne	r3, #10
 8007fb2:	2308      	moveq	r3, #8
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007fba:	6866      	ldr	r6, [r4, #4]
 8007fbc:	60a6      	str	r6, [r4, #8]
 8007fbe:	2e00      	cmp	r6, #0
 8007fc0:	bfa2      	ittt	ge
 8007fc2:	6821      	ldrge	r1, [r4, #0]
 8007fc4:	f021 0104 	bicge.w	r1, r1, #4
 8007fc8:	6021      	strge	r1, [r4, #0]
 8007fca:	b90d      	cbnz	r5, 8007fd0 <_printf_i+0x110>
 8007fcc:	2e00      	cmp	r6, #0
 8007fce:	d04b      	beq.n	8008068 <_printf_i+0x1a8>
 8007fd0:	4616      	mov	r6, r2
 8007fd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fd6:	fb03 5711 	mls	r7, r3, r1, r5
 8007fda:	5dc7      	ldrb	r7, [r0, r7]
 8007fdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fe0:	462f      	mov	r7, r5
 8007fe2:	42bb      	cmp	r3, r7
 8007fe4:	460d      	mov	r5, r1
 8007fe6:	d9f4      	bls.n	8007fd2 <_printf_i+0x112>
 8007fe8:	2b08      	cmp	r3, #8
 8007fea:	d10b      	bne.n	8008004 <_printf_i+0x144>
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	07df      	lsls	r7, r3, #31
 8007ff0:	d508      	bpl.n	8008004 <_printf_i+0x144>
 8007ff2:	6923      	ldr	r3, [r4, #16]
 8007ff4:	6861      	ldr	r1, [r4, #4]
 8007ff6:	4299      	cmp	r1, r3
 8007ff8:	bfde      	ittt	le
 8007ffa:	2330      	movle	r3, #48	@ 0x30
 8007ffc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008000:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008004:	1b92      	subs	r2, r2, r6
 8008006:	6122      	str	r2, [r4, #16]
 8008008:	f8cd a000 	str.w	sl, [sp]
 800800c:	464b      	mov	r3, r9
 800800e:	aa03      	add	r2, sp, #12
 8008010:	4621      	mov	r1, r4
 8008012:	4640      	mov	r0, r8
 8008014:	f7ff fee6 	bl	8007de4 <_printf_common>
 8008018:	3001      	adds	r0, #1
 800801a:	d14a      	bne.n	80080b2 <_printf_i+0x1f2>
 800801c:	f04f 30ff 	mov.w	r0, #4294967295
 8008020:	b004      	add	sp, #16
 8008022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008026:	6823      	ldr	r3, [r4, #0]
 8008028:	f043 0320 	orr.w	r3, r3, #32
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	4833      	ldr	r0, [pc, #204]	@ (80080fc <_printf_i+0x23c>)
 8008030:	2778      	movs	r7, #120	@ 0x78
 8008032:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008036:	6823      	ldr	r3, [r4, #0]
 8008038:	6831      	ldr	r1, [r6, #0]
 800803a:	061f      	lsls	r7, r3, #24
 800803c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008040:	d402      	bmi.n	8008048 <_printf_i+0x188>
 8008042:	065f      	lsls	r7, r3, #25
 8008044:	bf48      	it	mi
 8008046:	b2ad      	uxthmi	r5, r5
 8008048:	6031      	str	r1, [r6, #0]
 800804a:	07d9      	lsls	r1, r3, #31
 800804c:	bf44      	itt	mi
 800804e:	f043 0320 	orrmi.w	r3, r3, #32
 8008052:	6023      	strmi	r3, [r4, #0]
 8008054:	b11d      	cbz	r5, 800805e <_printf_i+0x19e>
 8008056:	2310      	movs	r3, #16
 8008058:	e7ac      	b.n	8007fb4 <_printf_i+0xf4>
 800805a:	4827      	ldr	r0, [pc, #156]	@ (80080f8 <_printf_i+0x238>)
 800805c:	e7e9      	b.n	8008032 <_printf_i+0x172>
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	f023 0320 	bic.w	r3, r3, #32
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	e7f6      	b.n	8008056 <_printf_i+0x196>
 8008068:	4616      	mov	r6, r2
 800806a:	e7bd      	b.n	8007fe8 <_printf_i+0x128>
 800806c:	6833      	ldr	r3, [r6, #0]
 800806e:	6825      	ldr	r5, [r4, #0]
 8008070:	6961      	ldr	r1, [r4, #20]
 8008072:	1d18      	adds	r0, r3, #4
 8008074:	6030      	str	r0, [r6, #0]
 8008076:	062e      	lsls	r6, r5, #24
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	d501      	bpl.n	8008080 <_printf_i+0x1c0>
 800807c:	6019      	str	r1, [r3, #0]
 800807e:	e002      	b.n	8008086 <_printf_i+0x1c6>
 8008080:	0668      	lsls	r0, r5, #25
 8008082:	d5fb      	bpl.n	800807c <_printf_i+0x1bc>
 8008084:	8019      	strh	r1, [r3, #0]
 8008086:	2300      	movs	r3, #0
 8008088:	6123      	str	r3, [r4, #16]
 800808a:	4616      	mov	r6, r2
 800808c:	e7bc      	b.n	8008008 <_printf_i+0x148>
 800808e:	6833      	ldr	r3, [r6, #0]
 8008090:	1d1a      	adds	r2, r3, #4
 8008092:	6032      	str	r2, [r6, #0]
 8008094:	681e      	ldr	r6, [r3, #0]
 8008096:	6862      	ldr	r2, [r4, #4]
 8008098:	2100      	movs	r1, #0
 800809a:	4630      	mov	r0, r6
 800809c:	f7f8 f8c0 	bl	8000220 <memchr>
 80080a0:	b108      	cbz	r0, 80080a6 <_printf_i+0x1e6>
 80080a2:	1b80      	subs	r0, r0, r6
 80080a4:	6060      	str	r0, [r4, #4]
 80080a6:	6863      	ldr	r3, [r4, #4]
 80080a8:	6123      	str	r3, [r4, #16]
 80080aa:	2300      	movs	r3, #0
 80080ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080b0:	e7aa      	b.n	8008008 <_printf_i+0x148>
 80080b2:	6923      	ldr	r3, [r4, #16]
 80080b4:	4632      	mov	r2, r6
 80080b6:	4649      	mov	r1, r9
 80080b8:	4640      	mov	r0, r8
 80080ba:	47d0      	blx	sl
 80080bc:	3001      	adds	r0, #1
 80080be:	d0ad      	beq.n	800801c <_printf_i+0x15c>
 80080c0:	6823      	ldr	r3, [r4, #0]
 80080c2:	079b      	lsls	r3, r3, #30
 80080c4:	d413      	bmi.n	80080ee <_printf_i+0x22e>
 80080c6:	68e0      	ldr	r0, [r4, #12]
 80080c8:	9b03      	ldr	r3, [sp, #12]
 80080ca:	4298      	cmp	r0, r3
 80080cc:	bfb8      	it	lt
 80080ce:	4618      	movlt	r0, r3
 80080d0:	e7a6      	b.n	8008020 <_printf_i+0x160>
 80080d2:	2301      	movs	r3, #1
 80080d4:	4632      	mov	r2, r6
 80080d6:	4649      	mov	r1, r9
 80080d8:	4640      	mov	r0, r8
 80080da:	47d0      	blx	sl
 80080dc:	3001      	adds	r0, #1
 80080de:	d09d      	beq.n	800801c <_printf_i+0x15c>
 80080e0:	3501      	adds	r5, #1
 80080e2:	68e3      	ldr	r3, [r4, #12]
 80080e4:	9903      	ldr	r1, [sp, #12]
 80080e6:	1a5b      	subs	r3, r3, r1
 80080e8:	42ab      	cmp	r3, r5
 80080ea:	dcf2      	bgt.n	80080d2 <_printf_i+0x212>
 80080ec:	e7eb      	b.n	80080c6 <_printf_i+0x206>
 80080ee:	2500      	movs	r5, #0
 80080f0:	f104 0619 	add.w	r6, r4, #25
 80080f4:	e7f5      	b.n	80080e2 <_printf_i+0x222>
 80080f6:	bf00      	nop
 80080f8:	0800886a 	.word	0x0800886a
 80080fc:	0800887b 	.word	0x0800887b

08008100 <__sflush_r>:
 8008100:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008108:	0716      	lsls	r6, r2, #28
 800810a:	4605      	mov	r5, r0
 800810c:	460c      	mov	r4, r1
 800810e:	d454      	bmi.n	80081ba <__sflush_r+0xba>
 8008110:	684b      	ldr	r3, [r1, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	dc02      	bgt.n	800811c <__sflush_r+0x1c>
 8008116:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008118:	2b00      	cmp	r3, #0
 800811a:	dd48      	ble.n	80081ae <__sflush_r+0xae>
 800811c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800811e:	2e00      	cmp	r6, #0
 8008120:	d045      	beq.n	80081ae <__sflush_r+0xae>
 8008122:	2300      	movs	r3, #0
 8008124:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008128:	682f      	ldr	r7, [r5, #0]
 800812a:	6a21      	ldr	r1, [r4, #32]
 800812c:	602b      	str	r3, [r5, #0]
 800812e:	d030      	beq.n	8008192 <__sflush_r+0x92>
 8008130:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008132:	89a3      	ldrh	r3, [r4, #12]
 8008134:	0759      	lsls	r1, r3, #29
 8008136:	d505      	bpl.n	8008144 <__sflush_r+0x44>
 8008138:	6863      	ldr	r3, [r4, #4]
 800813a:	1ad2      	subs	r2, r2, r3
 800813c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800813e:	b10b      	cbz	r3, 8008144 <__sflush_r+0x44>
 8008140:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008142:	1ad2      	subs	r2, r2, r3
 8008144:	2300      	movs	r3, #0
 8008146:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008148:	6a21      	ldr	r1, [r4, #32]
 800814a:	4628      	mov	r0, r5
 800814c:	47b0      	blx	r6
 800814e:	1c43      	adds	r3, r0, #1
 8008150:	89a3      	ldrh	r3, [r4, #12]
 8008152:	d106      	bne.n	8008162 <__sflush_r+0x62>
 8008154:	6829      	ldr	r1, [r5, #0]
 8008156:	291d      	cmp	r1, #29
 8008158:	d82b      	bhi.n	80081b2 <__sflush_r+0xb2>
 800815a:	4a2a      	ldr	r2, [pc, #168]	@ (8008204 <__sflush_r+0x104>)
 800815c:	410a      	asrs	r2, r1
 800815e:	07d6      	lsls	r6, r2, #31
 8008160:	d427      	bmi.n	80081b2 <__sflush_r+0xb2>
 8008162:	2200      	movs	r2, #0
 8008164:	6062      	str	r2, [r4, #4]
 8008166:	04d9      	lsls	r1, r3, #19
 8008168:	6922      	ldr	r2, [r4, #16]
 800816a:	6022      	str	r2, [r4, #0]
 800816c:	d504      	bpl.n	8008178 <__sflush_r+0x78>
 800816e:	1c42      	adds	r2, r0, #1
 8008170:	d101      	bne.n	8008176 <__sflush_r+0x76>
 8008172:	682b      	ldr	r3, [r5, #0]
 8008174:	b903      	cbnz	r3, 8008178 <__sflush_r+0x78>
 8008176:	6560      	str	r0, [r4, #84]	@ 0x54
 8008178:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800817a:	602f      	str	r7, [r5, #0]
 800817c:	b1b9      	cbz	r1, 80081ae <__sflush_r+0xae>
 800817e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008182:	4299      	cmp	r1, r3
 8008184:	d002      	beq.n	800818c <__sflush_r+0x8c>
 8008186:	4628      	mov	r0, r5
 8008188:	f7ff fbf2 	bl	8007970 <_free_r>
 800818c:	2300      	movs	r3, #0
 800818e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008190:	e00d      	b.n	80081ae <__sflush_r+0xae>
 8008192:	2301      	movs	r3, #1
 8008194:	4628      	mov	r0, r5
 8008196:	47b0      	blx	r6
 8008198:	4602      	mov	r2, r0
 800819a:	1c50      	adds	r0, r2, #1
 800819c:	d1c9      	bne.n	8008132 <__sflush_r+0x32>
 800819e:	682b      	ldr	r3, [r5, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d0c6      	beq.n	8008132 <__sflush_r+0x32>
 80081a4:	2b1d      	cmp	r3, #29
 80081a6:	d001      	beq.n	80081ac <__sflush_r+0xac>
 80081a8:	2b16      	cmp	r3, #22
 80081aa:	d11e      	bne.n	80081ea <__sflush_r+0xea>
 80081ac:	602f      	str	r7, [r5, #0]
 80081ae:	2000      	movs	r0, #0
 80081b0:	e022      	b.n	80081f8 <__sflush_r+0xf8>
 80081b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081b6:	b21b      	sxth	r3, r3
 80081b8:	e01b      	b.n	80081f2 <__sflush_r+0xf2>
 80081ba:	690f      	ldr	r7, [r1, #16]
 80081bc:	2f00      	cmp	r7, #0
 80081be:	d0f6      	beq.n	80081ae <__sflush_r+0xae>
 80081c0:	0793      	lsls	r3, r2, #30
 80081c2:	680e      	ldr	r6, [r1, #0]
 80081c4:	bf08      	it	eq
 80081c6:	694b      	ldreq	r3, [r1, #20]
 80081c8:	600f      	str	r7, [r1, #0]
 80081ca:	bf18      	it	ne
 80081cc:	2300      	movne	r3, #0
 80081ce:	eba6 0807 	sub.w	r8, r6, r7
 80081d2:	608b      	str	r3, [r1, #8]
 80081d4:	f1b8 0f00 	cmp.w	r8, #0
 80081d8:	dde9      	ble.n	80081ae <__sflush_r+0xae>
 80081da:	6a21      	ldr	r1, [r4, #32]
 80081dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80081de:	4643      	mov	r3, r8
 80081e0:	463a      	mov	r2, r7
 80081e2:	4628      	mov	r0, r5
 80081e4:	47b0      	blx	r6
 80081e6:	2800      	cmp	r0, #0
 80081e8:	dc08      	bgt.n	80081fc <__sflush_r+0xfc>
 80081ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081f2:	81a3      	strh	r3, [r4, #12]
 80081f4:	f04f 30ff 	mov.w	r0, #4294967295
 80081f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081fc:	4407      	add	r7, r0
 80081fe:	eba8 0800 	sub.w	r8, r8, r0
 8008202:	e7e7      	b.n	80081d4 <__sflush_r+0xd4>
 8008204:	dfbffffe 	.word	0xdfbffffe

08008208 <_fflush_r>:
 8008208:	b538      	push	{r3, r4, r5, lr}
 800820a:	690b      	ldr	r3, [r1, #16]
 800820c:	4605      	mov	r5, r0
 800820e:	460c      	mov	r4, r1
 8008210:	b913      	cbnz	r3, 8008218 <_fflush_r+0x10>
 8008212:	2500      	movs	r5, #0
 8008214:	4628      	mov	r0, r5
 8008216:	bd38      	pop	{r3, r4, r5, pc}
 8008218:	b118      	cbz	r0, 8008222 <_fflush_r+0x1a>
 800821a:	6a03      	ldr	r3, [r0, #32]
 800821c:	b90b      	cbnz	r3, 8008222 <_fflush_r+0x1a>
 800821e:	f7ff fa8d 	bl	800773c <__sinit>
 8008222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d0f3      	beq.n	8008212 <_fflush_r+0xa>
 800822a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800822c:	07d0      	lsls	r0, r2, #31
 800822e:	d404      	bmi.n	800823a <_fflush_r+0x32>
 8008230:	0599      	lsls	r1, r3, #22
 8008232:	d402      	bmi.n	800823a <_fflush_r+0x32>
 8008234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008236:	f7ff fb98 	bl	800796a <__retarget_lock_acquire_recursive>
 800823a:	4628      	mov	r0, r5
 800823c:	4621      	mov	r1, r4
 800823e:	f7ff ff5f 	bl	8008100 <__sflush_r>
 8008242:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008244:	07da      	lsls	r2, r3, #31
 8008246:	4605      	mov	r5, r0
 8008248:	d4e4      	bmi.n	8008214 <_fflush_r+0xc>
 800824a:	89a3      	ldrh	r3, [r4, #12]
 800824c:	059b      	lsls	r3, r3, #22
 800824e:	d4e1      	bmi.n	8008214 <_fflush_r+0xc>
 8008250:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008252:	f7ff fb8b 	bl	800796c <__retarget_lock_release_recursive>
 8008256:	e7dd      	b.n	8008214 <_fflush_r+0xc>

08008258 <__swbuf_r>:
 8008258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825a:	460e      	mov	r6, r1
 800825c:	4614      	mov	r4, r2
 800825e:	4605      	mov	r5, r0
 8008260:	b118      	cbz	r0, 800826a <__swbuf_r+0x12>
 8008262:	6a03      	ldr	r3, [r0, #32]
 8008264:	b90b      	cbnz	r3, 800826a <__swbuf_r+0x12>
 8008266:	f7ff fa69 	bl	800773c <__sinit>
 800826a:	69a3      	ldr	r3, [r4, #24]
 800826c:	60a3      	str	r3, [r4, #8]
 800826e:	89a3      	ldrh	r3, [r4, #12]
 8008270:	071a      	lsls	r2, r3, #28
 8008272:	d501      	bpl.n	8008278 <__swbuf_r+0x20>
 8008274:	6923      	ldr	r3, [r4, #16]
 8008276:	b943      	cbnz	r3, 800828a <__swbuf_r+0x32>
 8008278:	4621      	mov	r1, r4
 800827a:	4628      	mov	r0, r5
 800827c:	f000 f82a 	bl	80082d4 <__swsetup_r>
 8008280:	b118      	cbz	r0, 800828a <__swbuf_r+0x32>
 8008282:	f04f 37ff 	mov.w	r7, #4294967295
 8008286:	4638      	mov	r0, r7
 8008288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	6922      	ldr	r2, [r4, #16]
 800828e:	1a98      	subs	r0, r3, r2
 8008290:	6963      	ldr	r3, [r4, #20]
 8008292:	b2f6      	uxtb	r6, r6
 8008294:	4283      	cmp	r3, r0
 8008296:	4637      	mov	r7, r6
 8008298:	dc05      	bgt.n	80082a6 <__swbuf_r+0x4e>
 800829a:	4621      	mov	r1, r4
 800829c:	4628      	mov	r0, r5
 800829e:	f7ff ffb3 	bl	8008208 <_fflush_r>
 80082a2:	2800      	cmp	r0, #0
 80082a4:	d1ed      	bne.n	8008282 <__swbuf_r+0x2a>
 80082a6:	68a3      	ldr	r3, [r4, #8]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	60a3      	str	r3, [r4, #8]
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	6022      	str	r2, [r4, #0]
 80082b2:	701e      	strb	r6, [r3, #0]
 80082b4:	6962      	ldr	r2, [r4, #20]
 80082b6:	1c43      	adds	r3, r0, #1
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d004      	beq.n	80082c6 <__swbuf_r+0x6e>
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	07db      	lsls	r3, r3, #31
 80082c0:	d5e1      	bpl.n	8008286 <__swbuf_r+0x2e>
 80082c2:	2e0a      	cmp	r6, #10
 80082c4:	d1df      	bne.n	8008286 <__swbuf_r+0x2e>
 80082c6:	4621      	mov	r1, r4
 80082c8:	4628      	mov	r0, r5
 80082ca:	f7ff ff9d 	bl	8008208 <_fflush_r>
 80082ce:	2800      	cmp	r0, #0
 80082d0:	d0d9      	beq.n	8008286 <__swbuf_r+0x2e>
 80082d2:	e7d6      	b.n	8008282 <__swbuf_r+0x2a>

080082d4 <__swsetup_r>:
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	4b29      	ldr	r3, [pc, #164]	@ (800837c <__swsetup_r+0xa8>)
 80082d8:	4605      	mov	r5, r0
 80082da:	6818      	ldr	r0, [r3, #0]
 80082dc:	460c      	mov	r4, r1
 80082de:	b118      	cbz	r0, 80082e8 <__swsetup_r+0x14>
 80082e0:	6a03      	ldr	r3, [r0, #32]
 80082e2:	b90b      	cbnz	r3, 80082e8 <__swsetup_r+0x14>
 80082e4:	f7ff fa2a 	bl	800773c <__sinit>
 80082e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ec:	0719      	lsls	r1, r3, #28
 80082ee:	d422      	bmi.n	8008336 <__swsetup_r+0x62>
 80082f0:	06da      	lsls	r2, r3, #27
 80082f2:	d407      	bmi.n	8008304 <__swsetup_r+0x30>
 80082f4:	2209      	movs	r2, #9
 80082f6:	602a      	str	r2, [r5, #0]
 80082f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082fc:	81a3      	strh	r3, [r4, #12]
 80082fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008302:	e033      	b.n	800836c <__swsetup_r+0x98>
 8008304:	0758      	lsls	r0, r3, #29
 8008306:	d512      	bpl.n	800832e <__swsetup_r+0x5a>
 8008308:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800830a:	b141      	cbz	r1, 800831e <__swsetup_r+0x4a>
 800830c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008310:	4299      	cmp	r1, r3
 8008312:	d002      	beq.n	800831a <__swsetup_r+0x46>
 8008314:	4628      	mov	r0, r5
 8008316:	f7ff fb2b 	bl	8007970 <_free_r>
 800831a:	2300      	movs	r3, #0
 800831c:	6363      	str	r3, [r4, #52]	@ 0x34
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008324:	81a3      	strh	r3, [r4, #12]
 8008326:	2300      	movs	r3, #0
 8008328:	6063      	str	r3, [r4, #4]
 800832a:	6923      	ldr	r3, [r4, #16]
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	89a3      	ldrh	r3, [r4, #12]
 8008330:	f043 0308 	orr.w	r3, r3, #8
 8008334:	81a3      	strh	r3, [r4, #12]
 8008336:	6923      	ldr	r3, [r4, #16]
 8008338:	b94b      	cbnz	r3, 800834e <__swsetup_r+0x7a>
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008344:	d003      	beq.n	800834e <__swsetup_r+0x7a>
 8008346:	4621      	mov	r1, r4
 8008348:	4628      	mov	r0, r5
 800834a:	f000 f84f 	bl	80083ec <__smakebuf_r>
 800834e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008352:	f013 0201 	ands.w	r2, r3, #1
 8008356:	d00a      	beq.n	800836e <__swsetup_r+0x9a>
 8008358:	2200      	movs	r2, #0
 800835a:	60a2      	str	r2, [r4, #8]
 800835c:	6962      	ldr	r2, [r4, #20]
 800835e:	4252      	negs	r2, r2
 8008360:	61a2      	str	r2, [r4, #24]
 8008362:	6922      	ldr	r2, [r4, #16]
 8008364:	b942      	cbnz	r2, 8008378 <__swsetup_r+0xa4>
 8008366:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800836a:	d1c5      	bne.n	80082f8 <__swsetup_r+0x24>
 800836c:	bd38      	pop	{r3, r4, r5, pc}
 800836e:	0799      	lsls	r1, r3, #30
 8008370:	bf58      	it	pl
 8008372:	6962      	ldrpl	r2, [r4, #20]
 8008374:	60a2      	str	r2, [r4, #8]
 8008376:	e7f4      	b.n	8008362 <__swsetup_r+0x8e>
 8008378:	2000      	movs	r0, #0
 800837a:	e7f7      	b.n	800836c <__swsetup_r+0x98>
 800837c:	20000030 	.word	0x20000030

08008380 <_sbrk_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	4d06      	ldr	r5, [pc, #24]	@ (800839c <_sbrk_r+0x1c>)
 8008384:	2300      	movs	r3, #0
 8008386:	4604      	mov	r4, r0
 8008388:	4608      	mov	r0, r1
 800838a:	602b      	str	r3, [r5, #0]
 800838c:	f7f8 fee0 	bl	8001150 <_sbrk>
 8008390:	1c43      	adds	r3, r0, #1
 8008392:	d102      	bne.n	800839a <_sbrk_r+0x1a>
 8008394:	682b      	ldr	r3, [r5, #0]
 8008396:	b103      	cbz	r3, 800839a <_sbrk_r+0x1a>
 8008398:	6023      	str	r3, [r4, #0]
 800839a:	bd38      	pop	{r3, r4, r5, pc}
 800839c:	20000484 	.word	0x20000484

080083a0 <__swhatbuf_r>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	460c      	mov	r4, r1
 80083a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a8:	2900      	cmp	r1, #0
 80083aa:	b096      	sub	sp, #88	@ 0x58
 80083ac:	4615      	mov	r5, r2
 80083ae:	461e      	mov	r6, r3
 80083b0:	da0d      	bge.n	80083ce <__swhatbuf_r+0x2e>
 80083b2:	89a3      	ldrh	r3, [r4, #12]
 80083b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80083b8:	f04f 0100 	mov.w	r1, #0
 80083bc:	bf14      	ite	ne
 80083be:	2340      	movne	r3, #64	@ 0x40
 80083c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80083c4:	2000      	movs	r0, #0
 80083c6:	6031      	str	r1, [r6, #0]
 80083c8:	602b      	str	r3, [r5, #0]
 80083ca:	b016      	add	sp, #88	@ 0x58
 80083cc:	bd70      	pop	{r4, r5, r6, pc}
 80083ce:	466a      	mov	r2, sp
 80083d0:	f000 f848 	bl	8008464 <_fstat_r>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	dbec      	blt.n	80083b2 <__swhatbuf_r+0x12>
 80083d8:	9901      	ldr	r1, [sp, #4]
 80083da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80083de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80083e2:	4259      	negs	r1, r3
 80083e4:	4159      	adcs	r1, r3
 80083e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083ea:	e7eb      	b.n	80083c4 <__swhatbuf_r+0x24>

080083ec <__smakebuf_r>:
 80083ec:	898b      	ldrh	r3, [r1, #12]
 80083ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083f0:	079d      	lsls	r5, r3, #30
 80083f2:	4606      	mov	r6, r0
 80083f4:	460c      	mov	r4, r1
 80083f6:	d507      	bpl.n	8008408 <__smakebuf_r+0x1c>
 80083f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	6123      	str	r3, [r4, #16]
 8008400:	2301      	movs	r3, #1
 8008402:	6163      	str	r3, [r4, #20]
 8008404:	b003      	add	sp, #12
 8008406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008408:	ab01      	add	r3, sp, #4
 800840a:	466a      	mov	r2, sp
 800840c:	f7ff ffc8 	bl	80083a0 <__swhatbuf_r>
 8008410:	9f00      	ldr	r7, [sp, #0]
 8008412:	4605      	mov	r5, r0
 8008414:	4639      	mov	r1, r7
 8008416:	4630      	mov	r0, r6
 8008418:	f7ff fb16 	bl	8007a48 <_malloc_r>
 800841c:	b948      	cbnz	r0, 8008432 <__smakebuf_r+0x46>
 800841e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008422:	059a      	lsls	r2, r3, #22
 8008424:	d4ee      	bmi.n	8008404 <__smakebuf_r+0x18>
 8008426:	f023 0303 	bic.w	r3, r3, #3
 800842a:	f043 0302 	orr.w	r3, r3, #2
 800842e:	81a3      	strh	r3, [r4, #12]
 8008430:	e7e2      	b.n	80083f8 <__smakebuf_r+0xc>
 8008432:	89a3      	ldrh	r3, [r4, #12]
 8008434:	6020      	str	r0, [r4, #0]
 8008436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800843a:	81a3      	strh	r3, [r4, #12]
 800843c:	9b01      	ldr	r3, [sp, #4]
 800843e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008442:	b15b      	cbz	r3, 800845c <__smakebuf_r+0x70>
 8008444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008448:	4630      	mov	r0, r6
 800844a:	f000 f81d 	bl	8008488 <_isatty_r>
 800844e:	b128      	cbz	r0, 800845c <__smakebuf_r+0x70>
 8008450:	89a3      	ldrh	r3, [r4, #12]
 8008452:	f023 0303 	bic.w	r3, r3, #3
 8008456:	f043 0301 	orr.w	r3, r3, #1
 800845a:	81a3      	strh	r3, [r4, #12]
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	431d      	orrs	r5, r3
 8008460:	81a5      	strh	r5, [r4, #12]
 8008462:	e7cf      	b.n	8008404 <__smakebuf_r+0x18>

08008464 <_fstat_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4d07      	ldr	r5, [pc, #28]	@ (8008484 <_fstat_r+0x20>)
 8008468:	2300      	movs	r3, #0
 800846a:	4604      	mov	r4, r0
 800846c:	4608      	mov	r0, r1
 800846e:	4611      	mov	r1, r2
 8008470:	602b      	str	r3, [r5, #0]
 8008472:	f7f8 fe45 	bl	8001100 <_fstat>
 8008476:	1c43      	adds	r3, r0, #1
 8008478:	d102      	bne.n	8008480 <_fstat_r+0x1c>
 800847a:	682b      	ldr	r3, [r5, #0]
 800847c:	b103      	cbz	r3, 8008480 <_fstat_r+0x1c>
 800847e:	6023      	str	r3, [r4, #0]
 8008480:	bd38      	pop	{r3, r4, r5, pc}
 8008482:	bf00      	nop
 8008484:	20000484 	.word	0x20000484

08008488 <_isatty_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4d06      	ldr	r5, [pc, #24]	@ (80084a4 <_isatty_r+0x1c>)
 800848c:	2300      	movs	r3, #0
 800848e:	4604      	mov	r4, r0
 8008490:	4608      	mov	r0, r1
 8008492:	602b      	str	r3, [r5, #0]
 8008494:	f7f8 fe44 	bl	8001120 <_isatty>
 8008498:	1c43      	adds	r3, r0, #1
 800849a:	d102      	bne.n	80084a2 <_isatty_r+0x1a>
 800849c:	682b      	ldr	r3, [r5, #0]
 800849e:	b103      	cbz	r3, 80084a2 <_isatty_r+0x1a>
 80084a0:	6023      	str	r3, [r4, #0]
 80084a2:	bd38      	pop	{r3, r4, r5, pc}
 80084a4:	20000484 	.word	0x20000484

080084a8 <_init>:
 80084a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084aa:	bf00      	nop
 80084ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ae:	bc08      	pop	{r3}
 80084b0:	469e      	mov	lr, r3
 80084b2:	4770      	bx	lr

080084b4 <_fini>:
 80084b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b6:	bf00      	nop
 80084b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ba:	bc08      	pop	{r3}
 80084bc:	469e      	mov	lr, r3
 80084be:	4770      	bx	lr
