
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000688c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08006a6c  08006a6c  00007a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c80  08006c80  0000807c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c80  08006c80  00007c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c88  08006c88  0000807c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c88  08006c88  00007c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c8c  08006c8c  00007c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08006c90  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  2000007c  08006d0c  0000807c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08006d0c  000083b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001363d  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ceb  00000000  00000000  0001b6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  0001e3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bdf  00000000  00000000  0001f350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fc56  00000000  00000000  0001ff2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015657  00000000  00000000  0003fb85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be5fb  00000000  00000000  000551dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001137d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046c8  00000000  00000000  0011381c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00117ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006a54 	.word	0x08006a54

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000080 	.word	0x20000080
 800021c:	08006a54 	.word	0x08006a54

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ba:	4a1a      	ldr	r2, [pc, #104]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c2:	4b18      	ldr	r3, [pc, #96]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ce:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	4a14      	ldr	r2, [pc, #80]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005d4:	f043 0320 	orr.w	r3, r3, #32
 80005d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005da:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	f003 0320 	and.w	r3, r3, #32
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <MX_GPIO_Init+0x74>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	4a08      	ldr	r2, [pc, #32]	@ (8000624 <MX_GPIO_Init+0x74>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <MX_GPIO_Init+0x74>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000

08000628 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800062c:	4b1b      	ldr	r3, [pc, #108]	@ (800069c <MX_I2C1_Init+0x74>)
 800062e:	4a1c      	ldr	r2, [pc, #112]	@ (80006a0 <MX_I2C1_Init+0x78>)
 8000630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8000632:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <MX_I2C1_Init+0x74>)
 8000634:	4a1b      	ldr	r2, [pc, #108]	@ (80006a4 <MX_I2C1_Init+0x7c>)
 8000636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000638:	4b18      	ldr	r3, [pc, #96]	@ (800069c <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063e:	4b17      	ldr	r3, [pc, #92]	@ (800069c <MX_I2C1_Init+0x74>)
 8000640:	2201      	movs	r2, #1
 8000642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b15      	ldr	r3, [pc, #84]	@ (800069c <MX_I2C1_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b14      	ldr	r3, [pc, #80]	@ (800069c <MX_I2C1_Init+0x74>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000650:	4b12      	ldr	r3, [pc, #72]	@ (800069c <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000656:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_I2C1_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065c:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000662:	480e      	ldr	r0, [pc, #56]	@ (800069c <MX_I2C1_Init+0x74>)
 8000664:	f001 fb1c 	bl	8001ca0 <HAL_I2C_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800066e:	f000 faf7 	bl	8000c60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000672:	2100      	movs	r1, #0
 8000674:	4809      	ldr	r0, [pc, #36]	@ (800069c <MX_I2C1_Init+0x74>)
 8000676:	f002 f89f 	bl	80027b8 <HAL_I2CEx_ConfigAnalogFilter>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000680:	f000 faee 	bl	8000c60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000684:	2100      	movs	r1, #0
 8000686:	4805      	ldr	r0, [pc, #20]	@ (800069c <MX_I2C1_Init+0x74>)
 8000688:	f002 f8e1 	bl	800284e <HAL_I2CEx_ConfigDigitalFilter>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000692:	f000 fae5 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000098 	.word	0x20000098
 80006a0:	40005400 	.word	0x40005400
 80006a4:	40b285c2 	.word	0x40b285c2

080006a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b09a      	sub	sp, #104	@ 0x68
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	2244      	movs	r2, #68	@ 0x44
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f005 fb98 	bl	8005dfe <memset>
  if(i2cHandle->Instance==I2C1)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a1f      	ldr	r2, [pc, #124]	@ (8000750 <HAL_I2C_MspInit+0xa8>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d136      	bne.n	8000746 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006d8:	2340      	movs	r3, #64	@ 0x40
 80006da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 fee1 	bl	80034ac <HAL_RCCEx_PeriphCLKConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80006f0:	f000 fab6 	bl	8000c60 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f4:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 80006f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f8:	4a16      	ldr	r2, [pc, #88]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 80006fa:	f043 0302 	orr.w	r3, r3, #2
 80006fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 8000702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000704:	f003 0302 	and.w	r3, r3, #2
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800070c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000710:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000712:	2312      	movs	r3, #18
 8000714:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800071e:	2304      	movs	r3, #4
 8000720:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000722:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000726:	4619      	mov	r1, r3
 8000728:	480b      	ldr	r0, [pc, #44]	@ (8000758 <HAL_I2C_MspInit+0xb0>)
 800072a:	f001 f905 	bl	8001938 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 8000730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000732:	4a08      	ldr	r2, [pc, #32]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 8000734:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000738:	6593      	str	r3, [r2, #88]	@ 0x58
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <HAL_I2C_MspInit+0xac>)
 800073c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800073e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000746:	bf00      	nop
 8000748:	3768      	adds	r7, #104	@ 0x68
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40005400 	.word	0x40005400
 8000754:	40021000 	.word	0x40021000
 8000758:	48000400 	.word	0x48000400

0800075c <imu_write_register>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Write to an IMU register
void imu_write_register(uint8_t reg, uint8_t value) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af04      	add	r7, sp, #16
 8000762:	4603      	mov	r3, r0
 8000764:	460a      	mov	r2, r1
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	4613      	mov	r3, r2
 800076a:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 1000);
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	b29a      	uxth	r2, r3
 8000770:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000774:	9302      	str	r3, [sp, #8]
 8000776:	2301      	movs	r3, #1
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	1dbb      	adds	r3, r7, #6
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	2301      	movs	r3, #1
 8000780:	21d4      	movs	r1, #212	@ 0xd4
 8000782:	4803      	ldr	r0, [pc, #12]	@ (8000790 <imu_write_register+0x34>)
 8000784:	f001 fb28 	bl	8001dd8 <HAL_I2C_Mem_Write>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000098 	.word	0x20000098

08000794 <imu_read_registers>:

// Read from IMU registers
void imu_read_registers(uint8_t reg, uint8_t *data, uint16_t len) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af04      	add	r7, sp, #16
 800079a:	4603      	mov	r3, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	71fb      	strb	r3, [r7, #7]
 80007a0:	4613      	mov	r3, r2
 80007a2:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, len, 1000);
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ac:	9302      	str	r3, [sp, #8]
 80007ae:	88bb      	ldrh	r3, [r7, #4]
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	21d4      	movs	r1, #212	@ 0xd4
 80007ba:	4803      	ldr	r0, [pc, #12]	@ (80007c8 <imu_read_registers+0x34>)
 80007bc:	f001 fc20 	bl	8002000 <HAL_I2C_Mem_Read>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000098 	.word	0x20000098

080007cc <imu_init>:

// Initialize the IMU
void imu_init(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
    uint8_t whoami;
    imu_read_registers(0x0F, &whoami, 1);  // Read WHO_AM_I register
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	2201      	movs	r2, #1
 80007d6:	4619      	mov	r1, r3
 80007d8:	200f      	movs	r0, #15
 80007da:	f7ff ffdb 	bl	8000794 <imu_read_registers>
    if (whoami != WHO_AM_I_VALUE) {
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b6c      	cmp	r3, #108	@ 0x6c
 80007e2:	d006      	beq.n	80007f2 <imu_init+0x26>
        printf("IMU not found: 0x%02X\n\r", whoami);
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	4619      	mov	r1, r3
 80007e8:	480a      	ldr	r0, [pc, #40]	@ (8000814 <imu_init+0x48>)
 80007ea:	f005 fab3 	bl	8005d54 <iprintf>
        while (1);  // Hang if IMU not detected
 80007ee:	bf00      	nop
 80007f0:	e7fd      	b.n	80007ee <imu_init+0x22>
    }
    imu_write_register(0x12, 0x40);  // CTRL3_C: Enable Block Data Update (BDU)
 80007f2:	2140      	movs	r1, #64	@ 0x40
 80007f4:	2012      	movs	r0, #18
 80007f6:	f7ff ffb1 	bl	800075c <imu_write_register>
    imu_write_register(0x10, 0x64);  // CTRL1_XL: 104 Hz, ±8g (was 0x60 for ±2g)
 80007fa:	2164      	movs	r1, #100	@ 0x64
 80007fc:	2010      	movs	r0, #16
 80007fe:	f7ff ffad 	bl	800075c <imu_write_register>
    imu_write_register(0x11, 0x64);  // CTRL2_G: 104 Hz, ±500 dps (was 0x6C for ±2000 dps)
 8000802:	2164      	movs	r1, #100	@ 0x64
 8000804:	2011      	movs	r0, #17
 8000806:	f7ff ffa9 	bl	800075c <imu_write_register>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	08006a6c 	.word	0x08006a6c

08000818 <imu_read_accel>:

// Read accelerometer data
void imu_read_accel(imu_data_t *accel) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
    uint8_t buffer[6];
    imu_read_registers(0x28, buffer, 6);  // OUTX_L_XL to OUTZ_H_XL
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2206      	movs	r2, #6
 8000826:	4619      	mov	r1, r3
 8000828:	2028      	movs	r0, #40	@ 0x28
 800082a:	f7ff ffb3 	bl	8000794 <imu_read_registers>
    accel->x = (int16_t)(buffer[0] | (buffer[1] << 8));
 800082e:	7a3b      	ldrb	r3, [r7, #8]
 8000830:	b21a      	sxth	r2, r3
 8000832:	7a7b      	ldrb	r3, [r7, #9]
 8000834:	021b      	lsls	r3, r3, #8
 8000836:	b21b      	sxth	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	b21a      	sxth	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	801a      	strh	r2, [r3, #0]
    accel->y = (int16_t)(buffer[2] | (buffer[3] << 8));
 8000840:	7abb      	ldrb	r3, [r7, #10]
 8000842:	b21a      	sxth	r2, r3
 8000844:	7afb      	ldrb	r3, [r7, #11]
 8000846:	021b      	lsls	r3, r3, #8
 8000848:	b21b      	sxth	r3, r3
 800084a:	4313      	orrs	r3, r2
 800084c:	b21a      	sxth	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	805a      	strh	r2, [r3, #2]
    accel->z = (int16_t)(buffer[4] | (buffer[5] << 8));
 8000852:	7b3b      	ldrb	r3, [r7, #12]
 8000854:	b21a      	sxth	r2, r3
 8000856:	7b7b      	ldrb	r3, [r7, #13]
 8000858:	021b      	lsls	r3, r3, #8
 800085a:	b21b      	sxth	r3, r3
 800085c:	4313      	orrs	r3, r2
 800085e:	b21a      	sxth	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	809a      	strh	r2, [r3, #4]
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <imu_read_gyro>:

// Read gyroscope data
void imu_read_gyro(imu_data_t *gyro) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
    uint8_t buffer[6];
    imu_read_registers(0x22, buffer, 6);  // OUTX_L_G to OUTZ_H_G
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	2206      	movs	r2, #6
 800087a:	4619      	mov	r1, r3
 800087c:	2022      	movs	r0, #34	@ 0x22
 800087e:	f7ff ff89 	bl	8000794 <imu_read_registers>
    gyro->x = (int16_t)(buffer[0] | (buffer[1] << 8));
 8000882:	7a3b      	ldrb	r3, [r7, #8]
 8000884:	b21a      	sxth	r2, r3
 8000886:	7a7b      	ldrb	r3, [r7, #9]
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b21b      	sxth	r3, r3
 800088c:	4313      	orrs	r3, r2
 800088e:	b21a      	sxth	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	801a      	strh	r2, [r3, #0]
    gyro->y = (int16_t)(buffer[2] | (buffer[3] << 8));
 8000894:	7abb      	ldrb	r3, [r7, #10]
 8000896:	b21a      	sxth	r2, r3
 8000898:	7afb      	ldrb	r3, [r7, #11]
 800089a:	021b      	lsls	r3, r3, #8
 800089c:	b21b      	sxth	r3, r3
 800089e:	4313      	orrs	r3, r2
 80008a0:	b21a      	sxth	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	805a      	strh	r2, [r3, #2]
    gyro->z = (int16_t)(buffer[4] | (buffer[5] << 8));
 80008a6:	7b3b      	ldrb	r3, [r7, #12]
 80008a8:	b21a      	sxth	r2, r3
 80008aa:	7b7b      	ldrb	r3, [r7, #13]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b21b      	sxth	r3, r3
 80008b0:	4313      	orrs	r3, r2
 80008b2:	b21a      	sxth	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	809a      	strh	r2, [r3, #4]
}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <parseMessage>:

// UART parsing message
void parseMessage(char* msg) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  char* ptr = msg;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	617b      	str	r3, [r7, #20]
  
  // Skip the opening bracket
  if (*ptr == '[') ptr++;
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b5b      	cmp	r3, #91	@ 0x5b
 80008d2:	d102      	bne.n	80008da <parseMessage+0x1a>
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	3301      	adds	r3, #1
 80008d8:	617b      	str	r3, [r7, #20]
  
  // Parse F value
  if (strncmp(ptr, "F:", 2) == 0) {
 80008da:	2202      	movs	r2, #2
 80008dc:	492c      	ldr	r1, [pc, #176]	@ (8000990 <parseMessage+0xd0>)
 80008de:	6978      	ldr	r0, [r7, #20]
 80008e0:	f005 fa95 	bl	8005e0e <strncmp>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d11b      	bne.n	8000922 <parseMessage+0x62>
    ptr += 2;  // Skip "F:"
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	3302      	adds	r3, #2
 80008ee:	617b      	str	r3, [r7, #20]
    char* endPtr;
    long temp = strtol(ptr, &endPtr, 10);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	220a      	movs	r2, #10
 80008f6:	4619      	mov	r1, r3
 80008f8:	6978      	ldr	r0, [r7, #20]
 80008fa:	f005 f95f 	bl	8005bbc <strtol>
 80008fe:	6138      	str	r0, [r7, #16]
    if (endPtr != ptr) {
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	429a      	cmp	r2, r3
 8000906:	d005      	beq.n	8000914 <parseMessage+0x54>
        F_value = (int16_t)temp;
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	b21a      	sxth	r2, r3
 800090c:	4b21      	ldr	r3, [pc, #132]	@ (8000994 <parseMessage+0xd4>)
 800090e:	801a      	strh	r2, [r3, #0]
        //printf("Found F value: %d\n\r", F_value);  // Debug print
        ptr = endPtr;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	617b      	str	r3, [r7, #20]
    }
    
    if (*ptr == ',') ptr++;
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b2c      	cmp	r3, #44	@ 0x2c
 800091a:	d102      	bne.n	8000922 <parseMessage+0x62>
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	3301      	adds	r3, #1
 8000920:	617b      	str	r3, [r7, #20]
}
  
  // Parse R value
  if (strncmp(ptr, "R:", 2) == 0) {
 8000922:	2202      	movs	r2, #2
 8000924:	491c      	ldr	r1, [pc, #112]	@ (8000998 <parseMessage+0xd8>)
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f005 fa71 	bl	8005e0e <strncmp>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d118      	bne.n	8000964 <parseMessage+0xa4>
      ptr += 2;  // Skip "R:"
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	3302      	adds	r3, #2
 8000936:	617b      	str	r3, [r7, #20]
      R_value = atoi(ptr);
 8000938:	6978      	ldr	r0, [r7, #20]
 800093a:	f005 f8c1 	bl	8005ac0 <atoi>
 800093e:	4603      	mov	r3, r0
 8000940:	b21a      	sxth	r2, r3
 8000942:	4b16      	ldr	r3, [pc, #88]	@ (800099c <parseMessage+0xdc>)
 8000944:	801a      	strh	r2, [r3, #0]
      while (*ptr && *ptr != ',') ptr++;  // Move to next value
 8000946:	e002      	b.n	800094e <parseMessage+0x8e>
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	3301      	adds	r3, #1
 800094c:	617b      	str	r3, [r7, #20]
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d003      	beq.n	800095e <parseMessage+0x9e>
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b2c      	cmp	r3, #44	@ 0x2c
 800095c:	d1f4      	bne.n	8000948 <parseMessage+0x88>
      ptr++;  // Skip comma
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	3301      	adds	r3, #1
 8000962:	617b      	str	r3, [r7, #20]
  }
  
  // Parse A value
  if (strncmp(ptr, "A:", 2) == 0) {
 8000964:	2202      	movs	r2, #2
 8000966:	490e      	ldr	r1, [pc, #56]	@ (80009a0 <parseMessage+0xe0>)
 8000968:	6978      	ldr	r0, [r7, #20]
 800096a:	f005 fa50 	bl	8005e0e <strncmp>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d109      	bne.n	8000988 <parseMessage+0xc8>
      ptr += 2;  // Skip "A:"
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	3302      	adds	r3, #2
 8000978:	617b      	str	r3, [r7, #20]
      A_value = atoi(ptr);
 800097a:	6978      	ldr	r0, [r7, #20]
 800097c:	f005 f8a0 	bl	8005ac0 <atoi>
 8000980:	4603      	mov	r3, r0
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <parseMessage+0xe4>)
 8000986:	701a      	strb	r2, [r3, #0]
  }
  
  // Print parsed values for debugging
  // printf("Parsed - F:%d R:%d A:%d\n\r", F_value, R_value, A_value);
}
 8000988:	bf00      	nop
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	08006a84 	.word	0x08006a84
 8000994:	20000122 	.word	0x20000122
 8000998:	08006a88 	.word	0x08006a88
 800099c:	20000124 	.word	0x20000124
 80009a0:	08006a8c 	.word	0x08006a8c
 80009a4:	20000126 	.word	0x20000126

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ae:	f000 fd01 	bl	80013b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b2:	f000 f8a3 	bl	8000afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b6:	f7ff fdfb 	bl	80005b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009ba:	f7ff fe35 	bl	8000628 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80009be:	f000 fa6f 	bl	8000ea0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rxBuffer[0], 1);
 80009c2:	2201      	movs	r2, #1
 80009c4:	4944      	ldr	r1, [pc, #272]	@ (8000ad8 <main+0x130>)
 80009c6:	4845      	ldr	r0, [pc, #276]	@ (8000adc <main+0x134>)
 80009c8:	f003 f83e 	bl	8003a48 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80009cc:	2000      	movs	r0, #0
 80009ce:	f000 fb3d 	bl	800104c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80009d2:	2101      	movs	r1, #1
 80009d4:	2000      	movs	r0, #0
 80009d6:	f000 fb9b 	bl	8001110 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80009da:	4b41      	ldr	r3, [pc, #260]	@ (8000ae0 <main+0x138>)
 80009dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009e0:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80009e2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae0 <main+0x138>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80009e8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ae0 <main+0x138>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80009ee:	4b3c      	ldr	r3, [pc, #240]	@ (8000ae0 <main+0x138>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80009f4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ae0 <main+0x138>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80009fa:	4939      	ldr	r1, [pc, #228]	@ (8000ae0 <main+0x138>)
 80009fc:	2000      	movs	r0, #0
 80009fe:	f000 fc07 	bl	8001210 <BSP_COM_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <main+0x64>
  {
    Error_Handler();
 8000a08:	f000 f92a 	bl	8000c60 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000a0c:	4835      	ldr	r0, [pc, #212]	@ (8000ae4 <main+0x13c>)
 8000a0e:	f005 f9a1 	bl	8005d54 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f000 fb50 	bl	80010b8 <BSP_LED_On>

  imu_init();  // Initialize the IMU after peripherals are set up
 8000a18:	f7ff fed8 	bl	80007cc <imu_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if (messageComplete) {
 8000a1c:	4b32      	ldr	r3, [pc, #200]	@ (8000ae8 <main+0x140>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d005      	beq.n	8000a32 <main+0x8a>
        parseMessage((char*)rxBuffer);
 8000a26:	482c      	ldr	r0, [pc, #176]	@ (8000ad8 <main+0x130>)
 8000a28:	f7ff ff4a 	bl	80008c0 <parseMessage>
        messageComplete = 0;
 8000a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae8 <main+0x140>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
    }

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000a32:	4b2e      	ldr	r3, [pc, #184]	@ (8000aec <main+0x144>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d1f0      	bne.n	8000a1c <main+0x74>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000aec <main+0x144>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000a40:	2000      	movs	r0, #0
 8000a42:	f000 fb4f 	bl	80010e4 <BSP_LED_Toggle>

      /* ..... Perform your action ..... */
      printf("Let's do this !\n\r");
 8000a46:	482a      	ldr	r0, [pc, #168]	@ (8000af0 <main+0x148>)
 8000a48:	f005 f984 	bl	8005d54 <iprintf>
      // grok code starts
      imu_data_t accel, gyro;
      imu_read_accel(&accel);
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fee1 	bl	8000818 <imu_read_accel>
      imu_read_gyro(&gyro);
 8000a56:	463b      	mov	r3, r7
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff07 	bl	800086c <imu_read_gyro>

      // Compute scaled values using integer arithmetic
      int32_t accel_ug_x = (int32_t)accel.x * ACCEL_SENSITIVITY_UG;
 8000a5e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a62:	461a      	mov	r2, r3
 8000a64:	23f4      	movs	r3, #244	@ 0xf4
 8000a66:	fb02 f303 	mul.w	r3, r2, r3
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
      int32_t accel_ug_y = (int32_t)accel.y * ACCEL_SENSITIVITY_UG;
 8000a6c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a70:	461a      	mov	r2, r3
 8000a72:	23f4      	movs	r3, #244	@ 0xf4
 8000a74:	fb02 f303 	mul.w	r3, r2, r3
 8000a78:	623b      	str	r3, [r7, #32]
      int32_t accel_ug_z = (int32_t)accel.z * ACCEL_SENSITIVITY_UG;
 8000a7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	23f4      	movs	r3, #244	@ 0xf4
 8000a82:	fb02 f303 	mul.w	r3, r2, r3
 8000a86:	61fb      	str	r3, [r7, #28]
      int32_t gyro_udps_x = (int32_t)gyro.x * GYRO_SENSITIVITY_UDPS;
 8000a88:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000a92:	fb02 f303 	mul.w	r3, r2, r3
 8000a96:	61bb      	str	r3, [r7, #24]
      int32_t gyro_udps_y = (int32_t)gyro.y * GYRO_SENSITIVITY_UDPS;
 8000a98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000aa2:	fb02 f303 	mul.w	r3, r2, r3
 8000aa6:	617b      	str	r3, [r7, #20]
      int32_t gyro_udps_z = (int32_t)gyro.z * GYRO_SENSITIVITY_UDPS;
 8000aa8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000aac:	461a      	mov	r2, r3
 8000aae:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	613b      	str	r3, [r7, #16]
      sprintf(message, "Gyro [mdps]: X=%ld, Y=%ld, Z=%ld\n\r",
              gyro_mdps_x, gyro_mdps_y, gyro_mdps_z);
      HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
      */
      // printing by me
      printf("Accel [ug]: X=%ld, Y=%ld, Z=%ld\n\r",
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	6a3a      	ldr	r2, [r7, #32]
 8000abc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000abe:	480d      	ldr	r0, [pc, #52]	@ (8000af4 <main+0x14c>)
 8000ac0:	f005 f948 	bl	8005d54 <iprintf>
              accel_ug_x, accel_ug_y, accel_ug_z);
      printf("Gyro [mdps]: X=%ld, Y=%ld, Z=%ld\n\r",
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	697a      	ldr	r2, [r7, #20]
 8000ac8:	69b9      	ldr	r1, [r7, #24]
 8000aca:	480b      	ldr	r0, [pc, #44]	@ (8000af8 <main+0x150>)
 8000acc:	f005 f942 	bl	8005d54 <iprintf>
                    gyro_udps_x, gyro_udps_y, gyro_udps_z);

      HAL_Delay(100);
 8000ad0:	2064      	movs	r0, #100	@ 0x64
 8000ad2:	f000 fcdf 	bl	8001494 <HAL_Delay>
      if (messageComplete) {
 8000ad6:	e7a1      	b.n	8000a1c <main+0x74>
 8000ad8:	20000100 	.word	0x20000100
 8000adc:	2000012c 	.word	0x2000012c
 8000ae0:	200000ec 	.word	0x200000ec
 8000ae4:	08006a90 	.word	0x08006a90
 8000ae8:	20000121 	.word	0x20000121
 8000aec:	200000fc 	.word	0x200000fc
 8000af0:	08006aac 	.word	0x08006aac
 8000af4:	08006ac0 	.word	0x08006ac0
 8000af8:	08006ae4 	.word	0x08006ae4

08000afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b094      	sub	sp, #80	@ 0x50
 8000b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b02:	f107 0318 	add.w	r3, r7, #24
 8000b06:	2238      	movs	r2, #56	@ 0x38
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f005 f977 	bl	8005dfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f001 fee2 	bl	80028e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b2e:	2340      	movs	r3, #64	@ 0x40
 8000b30:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b32:	2302      	movs	r3, #2
 8000b34:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b36:	2302      	movs	r3, #2
 8000b38:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b3e:	2355      	movs	r3, #85	@ 0x55
 8000b40:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b46:	2302      	movs	r3, #2
 8000b48:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4e:	f107 0318 	add.w	r3, r7, #24
 8000b52:	4618      	mov	r0, r3
 8000b54:	f001 ff7c 	bl	8002a50 <HAL_RCC_OscConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b5e:	f000 f87f 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b62:	230f      	movs	r3, #15
 8000b64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b66:	2303      	movs	r3, #3
 8000b68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2104      	movs	r1, #4
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 fa7a 	bl	8003074 <HAL_RCC_ClockConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b86:	f000 f86b 	bl	8000c60 <Error_Handler>
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3750      	adds	r7, #80	@ 0x50
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a20      	ldr	r2, [pc, #128]	@ (8000c24 <HAL_UART_RxCpltCallback+0x90>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d13b      	bne.n	8000c1e <HAL_UART_RxCpltCallback+0x8a>
      if (rxIndex == 0 && rxBuffer[0] != START_MARKER) {
 8000ba6:	4b20      	ldr	r3, [pc, #128]	@ (8000c28 <HAL_UART_RxCpltCallback+0x94>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d109      	bne.n	8000bc4 <HAL_UART_RxCpltCallback+0x30>
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <HAL_UART_RxCpltCallback+0x98>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b5b      	cmp	r3, #91	@ 0x5b
 8000bb6:	d005      	beq.n	8000bc4 <HAL_UART_RxCpltCallback+0x30>
          // Wait for start marker
          HAL_UART_Receive_IT(&huart1, &rxBuffer[0], 1);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	491c      	ldr	r1, [pc, #112]	@ (8000c2c <HAL_UART_RxCpltCallback+0x98>)
 8000bbc:	481c      	ldr	r0, [pc, #112]	@ (8000c30 <HAL_UART_RxCpltCallback+0x9c>)
 8000bbe:	f002 ff43 	bl	8003a48 <HAL_UART_Receive_IT>
          return;
 8000bc2:	e02c      	b.n	8000c1e <HAL_UART_RxCpltCallback+0x8a>
      }
      
      if (rxBuffer[rxIndex] == END_MARKER) {
 8000bc4:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <HAL_UART_RxCpltCallback+0x94>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <HAL_UART_RxCpltCallback+0x98>)
 8000bce:	5c9b      	ldrb	r3, [r3, r2]
 8000bd0:	2b5d      	cmp	r3, #93	@ 0x5d
 8000bd2:	d10d      	bne.n	8000bf0 <HAL_UART_RxCpltCallback+0x5c>
          // Message complete
          rxBuffer[rxIndex + 1] = '\0';  // Null terminate
 8000bd4:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <HAL_UART_RxCpltCallback+0x94>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	3301      	adds	r3, #1
 8000bdc:	4a13      	ldr	r2, [pc, #76]	@ (8000c2c <HAL_UART_RxCpltCallback+0x98>)
 8000bde:	2100      	movs	r1, #0
 8000be0:	54d1      	strb	r1, [r2, r3]
          messageComplete = 1;
 8000be2:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <HAL_UART_RxCpltCallback+0xa0>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	701a      	strb	r2, [r3, #0]
          rxIndex = 0;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <HAL_UART_RxCpltCallback+0x94>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
 8000bee:	e00b      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x74>
      } else if (rxIndex < RX_BUFFER_SIZE - 2) {
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <HAL_UART_RxCpltCallback+0x94>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b1d      	cmp	r3, #29
 8000bf8:	d806      	bhi.n	8000c08 <HAL_UART_RxCpltCallback+0x74>
          rxIndex++;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <HAL_UART_RxCpltCallback+0x94>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	3301      	adds	r3, #1
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <HAL_UART_RxCpltCallback+0x94>)
 8000c06:	701a      	strb	r2, [r3, #0]
      }
      
      // Continue receiving
      HAL_UART_Receive_IT(&huart1, &rxBuffer[rxIndex], 1);
 8000c08:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <HAL_UART_RxCpltCallback+0x94>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_UART_RxCpltCallback+0x98>)
 8000c12:	4413      	add	r3, r2
 8000c14:	2201      	movs	r2, #1
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <HAL_UART_RxCpltCallback+0x9c>)
 8000c1a:	f002 ff15 	bl	8003a48 <HAL_UART_Receive_IT>
  }
}
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40013800 	.word	0x40013800
 8000c28:	20000120 	.word	0x20000120
 8000c2c:	20000100 	.word	0x20000100
 8000c30:	2000012c 	.word	0x2000012c
 8000c34:	20000121 	.word	0x20000121

08000c38 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000c48:	4b04      	ldr	r3, [pc, #16]	@ (8000c5c <BSP_PB_Callback+0x24>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	601a      	str	r2, [r3, #0]
  }
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	200000fc 	.word	0x200000fc

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <Error_Handler+0x8>

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c76:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c8e:	4a08      	ldr	r2, [pc, #32]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_MspInit+0x44>)
 8000c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ca2:	f001 fec5 	bl	8002a30 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <NMI_Handler+0x4>

08000cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <MemManage_Handler+0x4>

08000ccc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0a:	f000 fba5 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d18:	4802      	ldr	r0, [pc, #8]	@ (8000d24 <USART1_IRQHandler+0x10>)
 8000d1a:	f002 fee1 	bl	8003ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2000012c 	.word	0x2000012c

08000d28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f000 fa5d 	bl	80011ec <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	60f8      	str	r0, [r7, #12]
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	e00a      	b.n	8000d5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d48:	f3af 8000 	nop.w
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	1c5a      	adds	r2, r3, #1
 8000d52:	60ba      	str	r2, [r7, #8]
 8000d54:	b2ca      	uxtb	r2, r1
 8000d56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	dbf0      	blt.n	8000d48 <_read+0x12>
  }

  return len;
 8000d66:	687b      	ldr	r3, [r7, #4]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	e009      	b.n	8000d96 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	1c5a      	adds	r2, r3, #1
 8000d86:	60ba      	str	r2, [r7, #8]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 faa2 	bl	80012d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	3301      	adds	r3, #1
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	dbf1      	blt.n	8000d82 <_write+0x12>
  }
  return len;
 8000d9e:	687b      	ldr	r3, [r7, #4]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <_close>:

int _close(int file)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000db0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dd0:	605a      	str	r2, [r3, #4]
  return 0;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_isatty>:

int _isatty(int file)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000de8:	2301      	movs	r3, #1
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b085      	sub	sp, #20
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	60f8      	str	r0, [r7, #12]
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	@ (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	@ (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f005 f83e 	bl	8005ec0 <__errno>
 8000e44:	4603      	mov	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a05      	ldr	r2, [pc, #20]	@ (8000e74 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20008000 	.word	0x20008000
 8000e70:	00000400 	.word	0x00000400
 8000e74:	20000128 	.word	0x20000128
 8000e78:	200003b0 	.word	0x200003b0

08000e7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <SystemInit+0x20>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e86:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <SystemInit+0x20>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ea4:	4b22      	ldr	r3, [pc, #136]	@ (8000f30 <MX_USART1_UART_Init+0x90>)
 8000ea6:	4a23      	ldr	r2, [pc, #140]	@ (8000f34 <MX_USART1_UART_Init+0x94>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eaa:	4b21      	ldr	r3, [pc, #132]	@ (8000f30 <MX_USART1_UART_Init+0x90>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000eb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f30 <MX_USART1_UART_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <MX_USART1_UART_Init+0x90>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f30 <MX_USART1_UART_Init+0x90>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f30 <MX_USART1_UART_Init+0x90>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <MX_USART1_UART_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	@ (8000f30 <MX_USART1_UART_Init+0x90>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed6:	4b16      	ldr	r3, [pc, #88]	@ (8000f30 <MX_USART1_UART_Init+0x90>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000edc:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <MX_USART1_UART_Init+0x90>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <MX_USART1_UART_Init+0x90>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ee8:	4811      	ldr	r0, [pc, #68]	@ (8000f30 <MX_USART1_UART_Init+0x90>)
 8000eea:	f002 fccf 	bl	800388c <HAL_UART_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ef4:	f7ff feb4 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	480d      	ldr	r0, [pc, #52]	@ (8000f30 <MX_USART1_UART_Init+0x90>)
 8000efc:	f004 fd15 	bl	800592a <HAL_UARTEx_SetTxFifoThreshold>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f06:	f7ff feab 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4808      	ldr	r0, [pc, #32]	@ (8000f30 <MX_USART1_UART_Init+0x90>)
 8000f0e:	f004 fd4a 	bl	80059a6 <HAL_UARTEx_SetRxFifoThreshold>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f18:	f7ff fea2 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f1c:	4804      	ldr	r0, [pc, #16]	@ (8000f30 <MX_USART1_UART_Init+0x90>)
 8000f1e:	f004 fccb 	bl	80058b8 <HAL_UARTEx_DisableFifoMode>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f28:	f7ff fe9a 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	2000012c 	.word	0x2000012c
 8000f34:	40013800 	.word	0x40013800

08000f38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b09a      	sub	sp, #104	@ 0x68
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	2244      	movs	r2, #68	@ 0x44
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f004 ff50 	bl	8005dfe <memset>
  if(uartHandle->Instance==USART1)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a22      	ldr	r2, [pc, #136]	@ (8000fec <HAL_UART_MspInit+0xb4>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d13d      	bne.n	8000fe4 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4618      	mov	r0, r3
 8000f76:	f002 fa99 	bl	80034ac <HAL_RCCEx_PeriphCLKConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f80:	f7ff fe6e 	bl	8000c60 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff0 <HAL_UART_MspInit+0xb8>)
 8000f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f88:	4a19      	ldr	r2, [pc, #100]	@ (8000ff0 <HAL_UART_MspInit+0xb8>)
 8000f8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f8e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f90:	4b17      	ldr	r3, [pc, #92]	@ (8000ff0 <HAL_UART_MspInit+0xb8>)
 8000f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <HAL_UART_MspInit+0xb8>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa0:	4a13      	ldr	r2, [pc, #76]	@ (8000ff0 <HAL_UART_MspInit+0xb8>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa8:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <HAL_UART_MspInit+0xb8>)
 8000faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fb4:	2330      	movs	r3, #48	@ 0x30
 8000fb6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc4:	2307      	movs	r3, #7
 8000fc6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4809      	ldr	r0, [pc, #36]	@ (8000ff4 <HAL_UART_MspInit+0xbc>)
 8000fd0:	f000 fcb2 	bl	8001938 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2025      	movs	r0, #37	@ 0x25
 8000fda:	f000 fb58 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fde:	2025      	movs	r0, #37	@ 0x25
 8000fe0:	f000 fb6f 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3768      	adds	r7, #104	@ 0x68
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40013800 	.word	0x40013800
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	48000800 	.word	0x48000800

08000ff8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ff8:	480d      	ldr	r0, [pc, #52]	@ (8001030 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ffa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ffc:	f7ff ff3e 	bl	8000e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001000:	480c      	ldr	r0, [pc, #48]	@ (8001034 <LoopForever+0x6>)
  ldr r1, =_edata
 8001002:	490d      	ldr	r1, [pc, #52]	@ (8001038 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001004:	4a0d      	ldr	r2, [pc, #52]	@ (800103c <LoopForever+0xe>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001018:	4c0a      	ldr	r4, [pc, #40]	@ (8001044 <LoopForever+0x16>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001026:	f004 ff51 	bl	8005ecc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800102a:	f7ff fcbd 	bl	80009a8 <main>

0800102e <LoopForever>:

LoopForever:
    b LoopForever
 800102e:	e7fe      	b.n	800102e <LoopForever>
  ldr   r0, =_estack
 8001030:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001038:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800103c:	08006c90 	.word	0x08006c90
  ldr r2, =_sbss
 8001040:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001044:	200003b0 	.word	0x200003b0

08001048 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC1_2_IRQHandler>
	...

0800104c <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8001056:	4b16      	ldr	r3, [pc, #88]	@ (80010b0 <BSP_LED_Init+0x64>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105a:	4a15      	ldr	r2, [pc, #84]	@ (80010b0 <BSP_LED_Init+0x64>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001062:	4b13      	ldr	r3, [pc, #76]	@ (80010b0 <BSP_LED_Init+0x64>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 800106e:	2320      	movs	r3, #32
 8001070:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001072:	2301      	movs	r3, #1
 8001074:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	4a0c      	ldr	r2, [pc, #48]	@ (80010b4 <BSP_LED_Init+0x68>)
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	f107 020c 	add.w	r2, r7, #12
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fc53 	bl	8001938 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4a07      	ldr	r2, [pc, #28]	@ (80010b4 <BSP_LED_Init+0x68>)
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	2120      	movs	r1, #32
 800109c:	2200      	movs	r2, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fdcc 	bl	8001c3c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000
 80010b4:	20000004 	.word	0x20000004

080010b8 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4a06      	ldr	r2, [pc, #24]	@ (80010e0 <BSP_LED_On+0x28>)
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	2120      	movs	r1, #32
 80010cc:	2201      	movs	r2, #1
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fdb4 	bl	8001c3c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000004 	.word	0x20000004

080010e4 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	4a06      	ldr	r2, [pc, #24]	@ (800110c <BSP_LED_Toggle+0x28>)
 80010f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f6:	2220      	movs	r2, #32
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fdb6 	bl	8001c6c <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000004 	.word	0x20000004

08001110 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	460a      	mov	r2, r1
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8001120:	4b2c      	ldr	r3, [pc, #176]	@ (80011d4 <BSP_PB_Init+0xc4>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001124:	4a2b      	ldr	r2, [pc, #172]	@ (80011d4 <BSP_PB_Init+0xc4>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112c:	4b29      	ldr	r3, [pc, #164]	@ (80011d4 <BSP_PB_Init+0xc4>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001138:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800113c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800113e:	2302      	movs	r3, #2
 8001140:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001146:	79bb      	ldrb	r3, [r7, #6]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10c      	bne.n	8001166 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	4a21      	ldr	r2, [pc, #132]	@ (80011d8 <BSP_PB_Init+0xc8>)
 8001154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001158:	f107 020c 	add.w	r2, r7, #12
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fbea 	bl	8001938 <HAL_GPIO_Init>
 8001164:	e031      	b.n	80011ca <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001166:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800116a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	4a1a      	ldr	r2, [pc, #104]	@ (80011d8 <BSP_PB_Init+0xc8>)
 8001170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001174:	f107 020c 	add.w	r2, r7, #12
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fbdc 	bl	8001938 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	4a15      	ldr	r2, [pc, #84]	@ (80011dc <BSP_PB_Init+0xcc>)
 8001186:	441a      	add	r2, r3
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	4915      	ldr	r1, [pc, #84]	@ (80011e0 <BSP_PB_Init+0xd0>)
 800118c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001190:	4619      	mov	r1, r3
 8001192:	4610      	mov	r0, r2
 8001194:	f000 fb8c 	bl	80018b0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4a0f      	ldr	r2, [pc, #60]	@ (80011dc <BSP_PB_Init+0xcc>)
 800119e:	1898      	adds	r0, r3, r2
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4a10      	ldr	r2, [pc, #64]	@ (80011e4 <BSP_PB_Init+0xd4>)
 80011a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a8:	461a      	mov	r2, r3
 80011aa:	2100      	movs	r1, #0
 80011ac:	f000 fb63 	bl	8001876 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80011b0:	2028      	movs	r0, #40	@ 0x28
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4a0c      	ldr	r2, [pc, #48]	@ (80011e8 <BSP_PB_Init+0xd8>)
 80011b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	f000 fa66 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80011c2:	2328      	movs	r3, #40	@ 0x28
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fa7c 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000
 80011d8:	20000008 	.word	0x20000008
 80011dc:	200001c0 	.word	0x200001c0
 80011e0:	08006b20 	.word	0x08006b20
 80011e4:	20000010 	.word	0x20000010
 80011e8:	20000014 	.word	0x20000014

080011ec <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	4a04      	ldr	r2, [pc, #16]	@ (800120c <BSP_PB_IRQHandler+0x20>)
 80011fc:	4413      	add	r3, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fb6a 	bl	80018d8 <HAL_EXTI_IRQHandler>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200001c0 	.word	0x200001c0

08001210 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d903      	bls.n	800122e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001226:	f06f 0301 	mvn.w	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	e018      	b.n	8001260 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2294      	movs	r2, #148	@ 0x94
 8001232:	fb02 f303 	mul.w	r3, r2, r3
 8001236:	4a0d      	ldr	r2, [pc, #52]	@ (800126c <BSP_COM_Init+0x5c>)
 8001238:	4413      	add	r3, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f86e 	bl	800131c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2294      	movs	r2, #148	@ 0x94
 8001244:	fb02 f303 	mul.w	r3, r2, r3
 8001248:	4a08      	ldr	r2, [pc, #32]	@ (800126c <BSP_COM_Init+0x5c>)
 800124a:	4413      	add	r3, r2
 800124c:	6839      	ldr	r1, [r7, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f80e 	bl	8001270 <MX_LPUART1_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800125a:	f06f 0303 	mvn.w	r3, #3
 800125e:	e000      	b.n	8001262 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001260:	68fb      	ldr	r3, [r7, #12]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200001c8 	.word	0x200001c8

08001270 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <MX_LPUART1_Init+0x60>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	220c      	movs	r2, #12
 800128e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	895b      	ldrh	r3, [r3, #10]
 8001294:	461a      	mov	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	891b      	ldrh	r3, [r3, #8]
 80012a6:	461a      	mov	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	899b      	ldrh	r3, [r3, #12]
 80012b0:	461a      	mov	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012bc:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f002 fae4 	bl	800388c <HAL_UART_Init>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000000c 	.word	0x2000000c

080012d4 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80012dc:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <__io_putchar+0x30>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	2394      	movs	r3, #148	@ 0x94
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
 80012e8:	4a07      	ldr	r2, [pc, #28]	@ (8001308 <__io_putchar+0x34>)
 80012ea:	1898      	adds	r0, r3, r2
 80012ec:	1d39      	adds	r1, r7, #4
 80012ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012f2:	2201      	movs	r2, #1
 80012f4:	f002 fb1a 	bl	800392c <HAL_UART_Transmit>
  return ch;
 80012f8:	687b      	ldr	r3, [r7, #4]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000025c 	.word	0x2000025c
 8001308:	200001c8 	.word	0x200001c8

0800130c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff fc91 	bl	8000c38 <BSP_PB_Callback>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001324:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <COM1_MspInit+0x94>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001328:	4a21      	ldr	r2, [pc, #132]	@ (80013b0 <COM1_MspInit+0x94>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001330:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <COM1_MspInit+0x94>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800133c:	4b1c      	ldr	r3, [pc, #112]	@ (80013b0 <COM1_MspInit+0x94>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001340:	4a1b      	ldr	r2, [pc, #108]	@ (80013b0 <COM1_MspInit+0x94>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001348:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <COM1_MspInit+0x94>)
 800134a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001354:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <COM1_MspInit+0x94>)
 8001356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001358:	4a15      	ldr	r2, [pc, #84]	@ (80013b0 <COM1_MspInit+0x94>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <COM1_MspInit+0x94>)
 8001362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800136c:	2304      	movs	r3, #4
 800136e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001374:	2302      	movs	r3, #2
 8001376:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001378:	2301      	movs	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800137c:	230c      	movs	r3, #12
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138a:	f000 fad5 	bl	8001938 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800138e:	2308      	movs	r3, #8
 8001390:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001396:	230c      	movs	r3, #12
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a4:	f000 fac8 	bl	8001938 <HAL_GPIO_Init>
}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	@ 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40021000 	.word	0x40021000

080013b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013be:	2003      	movs	r0, #3
 80013c0:	f000 f95a 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c4:	2000      	movs	r0, #0
 80013c6:	f000 f80d 	bl	80013e4 <HAL_InitTick>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	71fb      	strb	r3, [r7, #7]
 80013d4:	e001      	b.n	80013da <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013d6:	f7ff fc49 	bl	8000c6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013da:	79fb      	ldrb	r3, [r7, #7]

}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013f0:	4b16      	ldr	r3, [pc, #88]	@ (800144c <HAL_InitTick+0x68>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d022      	beq.n	800143e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013f8:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <HAL_InitTick+0x6c>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b13      	ldr	r3, [pc, #76]	@ (800144c <HAL_InitTick+0x68>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001404:	fbb1 f3f3 	udiv	r3, r1, r3
 8001408:	fbb2 f3f3 	udiv	r3, r2, r3
 800140c:	4618      	mov	r0, r3
 800140e:	f000 f966 	bl	80016de <HAL_SYSTICK_Config>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10f      	bne.n	8001438 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b0f      	cmp	r3, #15
 800141c:	d809      	bhi.n	8001432 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141e:	2200      	movs	r2, #0
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	f04f 30ff 	mov.w	r0, #4294967295
 8001426:	f000 f932 	bl	800168e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800142a:	4a0a      	ldr	r2, [pc, #40]	@ (8001454 <HAL_InitTick+0x70>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	e007      	b.n	8001442 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	e004      	b.n	8001442 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	e001      	b.n	8001442 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001442:	7bfb      	ldrb	r3, [r7, #15]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2000001c 	.word	0x2000001c
 8001450:	20000000 	.word	0x20000000
 8001454:	20000018 	.word	0x20000018

08001458 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800145c:	4b05      	ldr	r3, [pc, #20]	@ (8001474 <HAL_IncTick+0x1c>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <HAL_IncTick+0x20>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4413      	add	r3, r2
 8001466:	4a03      	ldr	r2, [pc, #12]	@ (8001474 <HAL_IncTick+0x1c>)
 8001468:	6013      	str	r3, [r2, #0]
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	20000260 	.word	0x20000260
 8001478:	2000001c 	.word	0x2000001c

0800147c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b03      	ldr	r3, [pc, #12]	@ (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000260 	.word	0x20000260

08001494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff ffee 	bl	800147c <HAL_GetTick>
 80014a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ac:	d004      	beq.n	80014b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <HAL_Delay+0x40>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4413      	add	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014b8:	bf00      	nop
 80014ba:	f7ff ffdf 	bl	800147c <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d8f7      	bhi.n	80014ba <HAL_Delay+0x26>
  {
  }
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	2000001c 	.word	0x2000001c

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <__NVIC_SetPriorityGrouping+0x44>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150a:	4a04      	ldr	r2, [pc, #16]	@ (800151c <__NVIC_SetPriorityGrouping+0x44>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0b      	blt.n	8001566 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4907      	ldr	r1, [pc, #28]	@ (8001574 <__NVIC_EnableIRQ+0x38>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	@ (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	@ (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	@ 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	@ 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff8e 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff29 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800169c:	f7ff ff40 	bl	8001520 <__NVIC_GetPriorityGrouping>
 80016a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	6978      	ldr	r0, [r7, #20]
 80016a8:	f7ff ff90 	bl	80015cc <NVIC_EncodePriority>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff5f 	bl	8001578 <__NVIC_SetPriority>
}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff33 	bl	800153c <__NVIC_EnableIRQ>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffa4 	bl	8001634 <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b085      	sub	sp, #20
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d005      	beq.n	800171a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2204      	movs	r2, #4
 8001712:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	e037      	b.n	800178a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 020e 	bic.w	r2, r2, #14
 8001728:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001734:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001738:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0201 	bic.w	r2, r2, #1
 8001748:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174e:	f003 021f 	and.w	r2, r3, #31
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	2101      	movs	r1, #1
 8001758:	fa01 f202 	lsl.w	r2, r1, r2
 800175c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001766:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00c      	beq.n	800178a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800177a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800177e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001788:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d00d      	beq.n	80017dc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2204      	movs	r2, #4
 80017c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	73fb      	strb	r3, [r7, #15]
 80017da:	e047      	b.n	800186c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 020e 	bic.w	r2, r2, #14
 80017ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0201 	bic.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001806:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800180a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001810:	f003 021f 	and.w	r2, r3, #31
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001818:	2101      	movs	r1, #1
 800181a:	fa01 f202 	lsl.w	r2, r1, r2
 800181e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001828:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00c      	beq.n	800184c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800183c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001840:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800184a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	4798      	blx	r3
    }
  }
  return status;
 800186c:	7bfb      	ldrb	r3, [r7, #15]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001876:	b480      	push	{r7}
 8001878:	b087      	sub	sp, #28
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	460b      	mov	r3, r1
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8001888:	7afb      	ldrb	r3, [r7, #11]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d103      	bne.n	8001896 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	605a      	str	r2, [r3, #4]
      break;
 8001894:	e005      	b.n	80018a2 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	75fb      	strb	r3, [r7, #23]
      break;
 80018a0:	bf00      	nop
  }

  return status;
 80018a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	371c      	adds	r7, #28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e003      	b.n	80018cc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80018ca:	2300      	movs	r3, #0
  }
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	2201      	movs	r2, #1
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	015a      	lsls	r2, r3, #5
 8001900:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <HAL_EXTI_IRQHandler+0x5c>)
 8001902:	4413      	add	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d009      	beq.n	800192a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	4798      	blx	r3
    }
  }
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40010414 	.word	0x40010414

08001938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001938:	b480      	push	{r7}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001946:	e15a      	b.n	8001bfe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	2101      	movs	r1, #1
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	4013      	ands	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 814c 	beq.w	8001bf8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b01      	cmp	r3, #1
 800196a:	d005      	beq.n	8001978 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001974:	2b02      	cmp	r3, #2
 8001976:	d130      	bne.n	80019da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2203      	movs	r2, #3
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ae:	2201      	movs	r2, #1
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	091b      	lsrs	r3, r3, #4
 80019c4:	f003 0201 	and.w	r2, r3, #1
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d017      	beq.n	8001a16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	2203      	movs	r2, #3
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d123      	bne.n	8001a6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	08da      	lsrs	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3208      	adds	r2, #8
 8001a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	220f      	movs	r2, #15
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	691a      	ldr	r2, [r3, #16]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	08da      	lsrs	r2, r3, #3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3208      	adds	r2, #8
 8001a64:	6939      	ldr	r1, [r7, #16]
 8001a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	2203      	movs	r2, #3
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0203 	and.w	r2, r3, #3
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 80a6 	beq.w	8001bf8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aac:	4b5b      	ldr	r3, [pc, #364]	@ (8001c1c <HAL_GPIO_Init+0x2e4>)
 8001aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab0:	4a5a      	ldr	r2, [pc, #360]	@ (8001c1c <HAL_GPIO_Init+0x2e4>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ab8:	4b58      	ldr	r3, [pc, #352]	@ (8001c1c <HAL_GPIO_Init+0x2e4>)
 8001aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ac4:	4a56      	ldr	r2, [pc, #344]	@ (8001c20 <HAL_GPIO_Init+0x2e8>)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	3302      	adds	r3, #2
 8001acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001aee:	d01f      	beq.n	8001b30 <HAL_GPIO_Init+0x1f8>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a4c      	ldr	r2, [pc, #304]	@ (8001c24 <HAL_GPIO_Init+0x2ec>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d019      	beq.n	8001b2c <HAL_GPIO_Init+0x1f4>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a4b      	ldr	r2, [pc, #300]	@ (8001c28 <HAL_GPIO_Init+0x2f0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d013      	beq.n	8001b28 <HAL_GPIO_Init+0x1f0>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a4a      	ldr	r2, [pc, #296]	@ (8001c2c <HAL_GPIO_Init+0x2f4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d00d      	beq.n	8001b24 <HAL_GPIO_Init+0x1ec>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a49      	ldr	r2, [pc, #292]	@ (8001c30 <HAL_GPIO_Init+0x2f8>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d007      	beq.n	8001b20 <HAL_GPIO_Init+0x1e8>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a48      	ldr	r2, [pc, #288]	@ (8001c34 <HAL_GPIO_Init+0x2fc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d101      	bne.n	8001b1c <HAL_GPIO_Init+0x1e4>
 8001b18:	2305      	movs	r3, #5
 8001b1a:	e00a      	b.n	8001b32 <HAL_GPIO_Init+0x1fa>
 8001b1c:	2306      	movs	r3, #6
 8001b1e:	e008      	b.n	8001b32 <HAL_GPIO_Init+0x1fa>
 8001b20:	2304      	movs	r3, #4
 8001b22:	e006      	b.n	8001b32 <HAL_GPIO_Init+0x1fa>
 8001b24:	2303      	movs	r3, #3
 8001b26:	e004      	b.n	8001b32 <HAL_GPIO_Init+0x1fa>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e002      	b.n	8001b32 <HAL_GPIO_Init+0x1fa>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <HAL_GPIO_Init+0x1fa>
 8001b30:	2300      	movs	r3, #0
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	f002 0203 	and.w	r2, r2, #3
 8001b38:	0092      	lsls	r2, r2, #2
 8001b3a:	4093      	lsls	r3, r2
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b42:	4937      	ldr	r1, [pc, #220]	@ (8001c20 <HAL_GPIO_Init+0x2e8>)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	3302      	adds	r3, #2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b50:	4b39      	ldr	r3, [pc, #228]	@ (8001c38 <HAL_GPIO_Init+0x300>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b74:	4a30      	ldr	r2, [pc, #192]	@ (8001c38 <HAL_GPIO_Init+0x300>)
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c38 <HAL_GPIO_Init+0x300>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b9e:	4a26      	ldr	r2, [pc, #152]	@ (8001c38 <HAL_GPIO_Init+0x300>)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ba4:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <HAL_GPIO_Init+0x300>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c38 <HAL_GPIO_Init+0x300>)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bce:	4b1a      	ldr	r3, [pc, #104]	@ (8001c38 <HAL_GPIO_Init+0x300>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bf2:	4a11      	ldr	r2, [pc, #68]	@ (8001c38 <HAL_GPIO_Init+0x300>)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	fa22 f303 	lsr.w	r3, r2, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f47f ae9d 	bne.w	8001948 <HAL_GPIO_Init+0x10>
  }
}
 8001c0e:	bf00      	nop
 8001c10:	bf00      	nop
 8001c12:	371c      	adds	r7, #28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010000 	.word	0x40010000
 8001c24:	48000400 	.word	0x48000400
 8001c28:	48000800 	.word	0x48000800
 8001c2c:	48000c00 	.word	0x48000c00
 8001c30:	48001000 	.word	0x48001000
 8001c34:	48001400 	.word	0x48001400
 8001c38:	40010400 	.word	0x40010400

08001c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c4c:	787b      	ldrb	r3, [r7, #1]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4013      	ands	r3, r2
 8001c84:	041a      	lsls	r2, r3, #16
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	43d9      	mvns	r1, r3
 8001c8a:	887b      	ldrh	r3, [r7, #2]
 8001c8c:	400b      	ands	r3, r1
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	619a      	str	r2, [r3, #24]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e08d      	b.n	8001dce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d106      	bne.n	8001ccc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7fe fcee 	bl	80006a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2224      	movs	r2, #36	@ 0x24
 8001cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0201 	bic.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cf0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d107      	bne.n	8001d1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	e006      	b.n	8001d28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d108      	bne.n	8001d42 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	e007      	b.n	8001d52 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69d9      	ldr	r1, [r3, #28]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a1a      	ldr	r2, [r3, #32]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2220      	movs	r2, #32
 8001dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	4608      	mov	r0, r1
 8001de2:	4611      	mov	r1, r2
 8001de4:	461a      	mov	r2, r3
 8001de6:	4603      	mov	r3, r0
 8001de8:	817b      	strh	r3, [r7, #10]
 8001dea:	460b      	mov	r3, r1
 8001dec:	813b      	strh	r3, [r7, #8]
 8001dee:	4613      	mov	r3, r2
 8001df0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	f040 80f9 	bne.w	8001ff2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <HAL_I2C_Mem_Write+0x34>
 8001e06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d105      	bne.n	8001e18 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e12:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0ed      	b.n	8001ff4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_I2C_Mem_Write+0x4e>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e0e6      	b.n	8001ff4 <HAL_I2C_Mem_Write+0x21c>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e2e:	f7ff fb25 	bl	800147c <HAL_GetTick>
 8001e32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2319      	movs	r3, #25
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 fac3 	bl	80023cc <I2C_WaitOnFlagUntilTimeout>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0d1      	b.n	8001ff4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2221      	movs	r2, #33	@ 0x21
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2240      	movs	r2, #64	@ 0x40
 8001e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6a3a      	ldr	r2, [r7, #32]
 8001e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e78:	88f8      	ldrh	r0, [r7, #6]
 8001e7a:	893a      	ldrh	r2, [r7, #8]
 8001e7c:	8979      	ldrh	r1, [r7, #10]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	4603      	mov	r3, r0
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 f9d3 	bl	8002234 <I2C_RequestMemoryWrite>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0a9      	b.n	8001ff4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	2bff      	cmp	r3, #255	@ 0xff
 8001ea8:	d90e      	bls.n	8001ec8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	22ff      	movs	r2, #255	@ 0xff
 8001eae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	8979      	ldrh	r1, [r7, #10]
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 fc47 	bl	8002754 <I2C_TransferConfig>
 8001ec6:	e00f      	b.n	8001ee8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	8979      	ldrh	r1, [r7, #10]
 8001eda:	2300      	movs	r3, #0
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 fc36 	bl	8002754 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 fac6 	bl	800247e <I2C_WaitOnTXISFlagUntilTimeout>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e07b      	b.n	8001ff4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d034      	beq.n	8001fa0 <HAL_I2C_Mem_Write+0x1c8>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d130      	bne.n	8001fa0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f44:	2200      	movs	r2, #0
 8001f46:	2180      	movs	r1, #128	@ 0x80
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 fa3f 	bl	80023cc <I2C_WaitOnFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e04d      	b.n	8001ff4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2bff      	cmp	r3, #255	@ 0xff
 8001f60:	d90e      	bls.n	8001f80 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	22ff      	movs	r2, #255	@ 0xff
 8001f66:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	8979      	ldrh	r1, [r7, #10]
 8001f70:	2300      	movs	r3, #0
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 fbeb 	bl	8002754 <I2C_TransferConfig>
 8001f7e:	e00f      	b.n	8001fa0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	8979      	ldrh	r1, [r7, #10]
 8001f92:	2300      	movs	r3, #0
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 fbda 	bl	8002754 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d19e      	bne.n	8001ee8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 faac 	bl	800250c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e01a      	b.n	8001ff4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6859      	ldr	r1, [r3, #4]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ffc <HAL_I2C_Mem_Write+0x224>)
 8001fd2:	400b      	ands	r3, r1
 8001fd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e000      	b.n	8001ff4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001ff2:	2302      	movs	r3, #2
  }
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	fe00e800 	.word	0xfe00e800

08002000 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af02      	add	r7, sp, #8
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	4608      	mov	r0, r1
 800200a:	4611      	mov	r1, r2
 800200c:	461a      	mov	r2, r3
 800200e:	4603      	mov	r3, r0
 8002010:	817b      	strh	r3, [r7, #10]
 8002012:	460b      	mov	r3, r1
 8002014:	813b      	strh	r3, [r7, #8]
 8002016:	4613      	mov	r3, r2
 8002018:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b20      	cmp	r3, #32
 8002024:	f040 80fd 	bne.w	8002222 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <HAL_I2C_Mem_Read+0x34>
 800202e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002030:	2b00      	cmp	r3, #0
 8002032:	d105      	bne.n	8002040 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800203a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0f1      	b.n	8002224 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_I2C_Mem_Read+0x4e>
 800204a:	2302      	movs	r3, #2
 800204c:	e0ea      	b.n	8002224 <HAL_I2C_Mem_Read+0x224>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002056:	f7ff fa11 	bl	800147c <HAL_GetTick>
 800205a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2319      	movs	r3, #25
 8002062:	2201      	movs	r2, #1
 8002064:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f9af 	bl	80023cc <I2C_WaitOnFlagUntilTimeout>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0d5      	b.n	8002224 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2222      	movs	r2, #34	@ 0x22
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2240      	movs	r2, #64	@ 0x40
 8002084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6a3a      	ldr	r2, [r7, #32]
 8002092:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002098:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020a0:	88f8      	ldrh	r0, [r7, #6]
 80020a2:	893a      	ldrh	r2, [r7, #8]
 80020a4:	8979      	ldrh	r1, [r7, #10]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	9301      	str	r3, [sp, #4]
 80020aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	4603      	mov	r3, r0
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 f913 	bl	80022dc <I2C_RequestMemoryRead>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0ad      	b.n	8002224 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	2bff      	cmp	r3, #255	@ 0xff
 80020d0:	d90e      	bls.n	80020f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	22ff      	movs	r2, #255	@ 0xff
 80020d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	8979      	ldrh	r1, [r7, #10]
 80020e0:	4b52      	ldr	r3, [pc, #328]	@ (800222c <HAL_I2C_Mem_Read+0x22c>)
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 fb33 	bl	8002754 <I2C_TransferConfig>
 80020ee:	e00f      	b.n	8002110 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	8979      	ldrh	r1, [r7, #10]
 8002102:	4b4a      	ldr	r3, [pc, #296]	@ (800222c <HAL_I2C_Mem_Read+0x22c>)
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 fb22 	bl	8002754 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002116:	2200      	movs	r2, #0
 8002118:	2104      	movs	r1, #4
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f956 	bl	80023cc <I2C_WaitOnFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e07c      	b.n	8002224 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002146:	3b01      	subs	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002160:	b29b      	uxth	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d034      	beq.n	80021d0 <HAL_I2C_Mem_Read+0x1d0>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800216a:	2b00      	cmp	r3, #0
 800216c:	d130      	bne.n	80021d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002174:	2200      	movs	r2, #0
 8002176:	2180      	movs	r1, #128	@ 0x80
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 f927 	bl	80023cc <I2C_WaitOnFlagUntilTimeout>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e04d      	b.n	8002224 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800218c:	b29b      	uxth	r3, r3
 800218e:	2bff      	cmp	r3, #255	@ 0xff
 8002190:	d90e      	bls.n	80021b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	22ff      	movs	r2, #255	@ 0xff
 8002196:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800219c:	b2da      	uxtb	r2, r3
 800219e:	8979      	ldrh	r1, [r7, #10]
 80021a0:	2300      	movs	r3, #0
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 fad3 	bl	8002754 <I2C_TransferConfig>
 80021ae:	e00f      	b.n	80021d0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	8979      	ldrh	r1, [r7, #10]
 80021c2:	2300      	movs	r3, #0
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 fac2 	bl	8002754 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d19a      	bne.n	8002110 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 f994 	bl	800250c <I2C_WaitOnSTOPFlagUntilTimeout>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e01a      	b.n	8002224 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2220      	movs	r2, #32
 80021f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6859      	ldr	r1, [r3, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <HAL_I2C_Mem_Read+0x230>)
 8002202:	400b      	ands	r3, r1
 8002204:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2220      	movs	r2, #32
 800220a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	e000      	b.n	8002224 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002222:	2302      	movs	r3, #2
  }
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	80002400 	.word	0x80002400
 8002230:	fe00e800 	.word	0xfe00e800

08002234 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af02      	add	r7, sp, #8
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	4608      	mov	r0, r1
 800223e:	4611      	mov	r1, r2
 8002240:	461a      	mov	r2, r3
 8002242:	4603      	mov	r3, r0
 8002244:	817b      	strh	r3, [r7, #10]
 8002246:	460b      	mov	r3, r1
 8002248:	813b      	strh	r3, [r7, #8]
 800224a:	4613      	mov	r3, r2
 800224c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	8979      	ldrh	r1, [r7, #10]
 8002254:	4b20      	ldr	r3, [pc, #128]	@ (80022d8 <I2C_RequestMemoryWrite+0xa4>)
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 fa79 	bl	8002754 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	69b9      	ldr	r1, [r7, #24]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f909 	bl	800247e <I2C_WaitOnTXISFlagUntilTimeout>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e02c      	b.n	80022d0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d105      	bne.n	8002288 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800227c:	893b      	ldrh	r3, [r7, #8]
 800227e:	b2da      	uxtb	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	629a      	str	r2, [r3, #40]	@ 0x28
 8002286:	e015      	b.n	80022b4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002288:	893b      	ldrh	r3, [r7, #8]
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	b29b      	uxth	r3, r3
 800228e:	b2da      	uxtb	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002296:	69fa      	ldr	r2, [r7, #28]
 8002298:	69b9      	ldr	r1, [r7, #24]
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 f8ef 	bl	800247e <I2C_WaitOnTXISFlagUntilTimeout>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e012      	b.n	80022d0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022aa:	893b      	ldrh	r3, [r7, #8]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	2200      	movs	r2, #0
 80022bc:	2180      	movs	r1, #128	@ 0x80
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f884 	bl	80023cc <I2C_WaitOnFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	80002000 	.word	0x80002000

080022dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	4608      	mov	r0, r1
 80022e6:	4611      	mov	r1, r2
 80022e8:	461a      	mov	r2, r3
 80022ea:	4603      	mov	r3, r0
 80022ec:	817b      	strh	r3, [r7, #10]
 80022ee:	460b      	mov	r3, r1
 80022f0:	813b      	strh	r3, [r7, #8]
 80022f2:	4613      	mov	r3, r2
 80022f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	8979      	ldrh	r1, [r7, #10]
 80022fc:	4b20      	ldr	r3, [pc, #128]	@ (8002380 <I2C_RequestMemoryRead+0xa4>)
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2300      	movs	r3, #0
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 fa26 	bl	8002754 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002308:	69fa      	ldr	r2, [r7, #28]
 800230a:	69b9      	ldr	r1, [r7, #24]
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f8b6 	bl	800247e <I2C_WaitOnTXISFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e02c      	b.n	8002376 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d105      	bne.n	800232e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002322:	893b      	ldrh	r3, [r7, #8]
 8002324:	b2da      	uxtb	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	629a      	str	r2, [r3, #40]	@ 0x28
 800232c:	e015      	b.n	800235a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800232e:	893b      	ldrh	r3, [r7, #8]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	b29b      	uxth	r3, r3
 8002334:	b2da      	uxtb	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	69b9      	ldr	r1, [r7, #24]
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 f89c 	bl	800247e <I2C_WaitOnTXISFlagUntilTimeout>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e012      	b.n	8002376 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002350:	893b      	ldrh	r3, [r7, #8]
 8002352:	b2da      	uxtb	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	2200      	movs	r2, #0
 8002362:	2140      	movs	r1, #64	@ 0x40
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 f831 	bl	80023cc <I2C_WaitOnFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	80002000 	.word	0x80002000

08002384 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b02      	cmp	r3, #2
 8002398:	d103      	bne.n	80023a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2200      	movs	r2, #0
 80023a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d007      	beq.n	80023c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699a      	ldr	r2, [r3, #24]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	619a      	str	r2, [r3, #24]
  }
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	4613      	mov	r3, r2
 80023da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023dc:	e03b      	b.n	8002456 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	6839      	ldr	r1, [r7, #0]
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f8d6 	bl	8002594 <I2C_IsErrorOccurred>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e041      	b.n	8002476 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f8:	d02d      	beq.n	8002456 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023fa:	f7ff f83f 	bl	800147c <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d302      	bcc.n	8002410 <I2C_WaitOnFlagUntilTimeout+0x44>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d122      	bne.n	8002456 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	4013      	ands	r3, r2
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	429a      	cmp	r2, r3
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	429a      	cmp	r2, r3
 800242c:	d113      	bne.n	8002456 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	f043 0220 	orr.w	r2, r3, #32
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e00f      	b.n	8002476 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699a      	ldr	r2, [r3, #24]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4013      	ands	r3, r2
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	429a      	cmp	r2, r3
 8002464:	bf0c      	ite	eq
 8002466:	2301      	moveq	r3, #1
 8002468:	2300      	movne	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	429a      	cmp	r2, r3
 8002472:	d0b4      	beq.n	80023de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800248a:	e033      	b.n	80024f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 f87f 	bl	8002594 <I2C_IsErrorOccurred>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e031      	b.n	8002504 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a6:	d025      	beq.n	80024f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a8:	f7fe ffe8 	bl	800147c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d302      	bcc.n	80024be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d11a      	bne.n	80024f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d013      	beq.n	80024f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d0:	f043 0220 	orr.w	r2, r3, #32
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e007      	b.n	8002504 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d1c4      	bne.n	800248c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002518:	e02f      	b.n	800257a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 f838 	bl	8002594 <I2C_IsErrorOccurred>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e02d      	b.n	800258a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252e:	f7fe ffa5 	bl	800147c <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	429a      	cmp	r2, r3
 800253c:	d302      	bcc.n	8002544 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d11a      	bne.n	800257a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b20      	cmp	r3, #32
 8002550:	d013      	beq.n	800257a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	f043 0220 	orr.w	r2, r3, #32
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e007      	b.n	800258a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	2b20      	cmp	r3, #32
 8002586:	d1c8      	bne.n	800251a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	@ 0x28
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d068      	beq.n	8002692 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2210      	movs	r2, #16
 80025c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025c8:	e049      	b.n	800265e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d0:	d045      	beq.n	800265e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025d2:	f7fe ff53 	bl	800147c <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d302      	bcc.n	80025e8 <I2C_IsErrorOccurred+0x54>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d13a      	bne.n	800265e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002606:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800260a:	d121      	bne.n	8002650 <I2C_IsErrorOccurred+0xbc>
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002612:	d01d      	beq.n	8002650 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002614:	7cfb      	ldrb	r3, [r7, #19]
 8002616:	2b20      	cmp	r3, #32
 8002618:	d01a      	beq.n	8002650 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002628:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800262a:	f7fe ff27 	bl	800147c <HAL_GetTick>
 800262e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002630:	e00e      	b.n	8002650 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002632:	f7fe ff23 	bl	800147c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b19      	cmp	r3, #25
 800263e:	d907      	bls.n	8002650 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	f043 0320 	orr.w	r3, r3, #32
 8002646:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800264e:	e006      	b.n	800265e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	2b20      	cmp	r3, #32
 800265c:	d1e9      	bne.n	8002632 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b20      	cmp	r3, #32
 800266a:	d003      	beq.n	8002674 <I2C_IsErrorOccurred+0xe0>
 800266c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0aa      	beq.n	80025ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002674:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002678:	2b00      	cmp	r3, #0
 800267a:	d103      	bne.n	8002684 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2220      	movs	r2, #32
 8002682:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	f043 0304 	orr.w	r3, r3, #4
 800268a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00b      	beq.n	80026bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	f043 0308 	orr.w	r3, r3, #8
 80026cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00b      	beq.n	8002700 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	f043 0302 	orr.w	r3, r3, #2
 80026ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002704:	2b00      	cmp	r3, #0
 8002706:	d01c      	beq.n	8002742 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f7ff fe3b 	bl	8002384 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6859      	ldr	r1, [r3, #4]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4b0d      	ldr	r3, [pc, #52]	@ (8002750 <I2C_IsErrorOccurred+0x1bc>)
 800271a:	400b      	ands	r3, r1
 800271c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	431a      	orrs	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2220      	movs	r2, #32
 800272e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002742:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002746:	4618      	mov	r0, r3
 8002748:	3728      	adds	r7, #40	@ 0x28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	fe00e800 	.word	0xfe00e800

08002754 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	817b      	strh	r3, [r7, #10]
 8002762:	4613      	mov	r3, r2
 8002764:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002766:	897b      	ldrh	r3, [r7, #10]
 8002768:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800276c:	7a7b      	ldrb	r3, [r7, #9]
 800276e:	041b      	lsls	r3, r3, #16
 8002770:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002774:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	4313      	orrs	r3, r2
 800277e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002782:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	0d5b      	lsrs	r3, r3, #21
 800278e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002792:	4b08      	ldr	r3, [pc, #32]	@ (80027b4 <I2C_TransferConfig+0x60>)
 8002794:	430b      	orrs	r3, r1
 8002796:	43db      	mvns	r3, r3
 8002798:	ea02 0103 	and.w	r1, r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80027a6:	bf00      	nop
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	03ff63ff 	.word	0x03ff63ff

080027b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	d138      	bne.n	8002840 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027d8:	2302      	movs	r3, #2
 80027da:	e032      	b.n	8002842 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2224      	movs	r2, #36	@ 0x24
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800280a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6819      	ldr	r1, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	e000      	b.n	8002842 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002840:	2302      	movs	r3, #2
  }
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800284e:	b480      	push	{r7}
 8002850:	b085      	sub	sp, #20
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b20      	cmp	r3, #32
 8002862:	d139      	bne.n	80028d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800286e:	2302      	movs	r3, #2
 8002870:	e033      	b.n	80028da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2224      	movs	r2, #36	@ 0x24
 800287e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0201 	bic.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	021b      	lsls	r3, r3, #8
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0201 	orr.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	e000      	b.n	80028da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028d8:	2302      	movs	r3, #2
  }
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d141      	bne.n	800297a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002902:	d131      	bne.n	8002968 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002904:	4b47      	ldr	r3, [pc, #284]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800290a:	4a46      	ldr	r2, [pc, #280]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800290c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002910:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002914:	4b43      	ldr	r3, [pc, #268]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800291c:	4a41      	ldr	r2, [pc, #260]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800291e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002922:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002924:	4b40      	ldr	r3, [pc, #256]	@ (8002a28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2232      	movs	r2, #50	@ 0x32
 800292a:	fb02 f303 	mul.w	r3, r2, r3
 800292e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	0c9b      	lsrs	r3, r3, #18
 8002936:	3301      	adds	r3, #1
 8002938:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800293a:	e002      	b.n	8002942 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	3b01      	subs	r3, #1
 8002940:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002942:	4b38      	ldr	r3, [pc, #224]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800294a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800294e:	d102      	bne.n	8002956 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f2      	bne.n	800293c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002956:	4b33      	ldr	r3, [pc, #204]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002962:	d158      	bne.n	8002a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e057      	b.n	8002a18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002968:	4b2e      	ldr	r3, [pc, #184]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800296a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800296e:	4a2d      	ldr	r2, [pc, #180]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002974:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002978:	e04d      	b.n	8002a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002980:	d141      	bne.n	8002a06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002982:	4b28      	ldr	r3, [pc, #160]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800298a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800298e:	d131      	bne.n	80029f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002990:	4b24      	ldr	r3, [pc, #144]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002996:	4a23      	ldr	r2, [pc, #140]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800299c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029a0:	4b20      	ldr	r3, [pc, #128]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2232      	movs	r2, #50	@ 0x32
 80029b6:	fb02 f303 	mul.w	r3, r2, r3
 80029ba:	4a1c      	ldr	r2, [pc, #112]	@ (8002a2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029bc:	fba2 2303 	umull	r2, r3, r2, r3
 80029c0:	0c9b      	lsrs	r3, r3, #18
 80029c2:	3301      	adds	r3, #1
 80029c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029c6:	e002      	b.n	80029ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029ce:	4b15      	ldr	r3, [pc, #84]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029da:	d102      	bne.n	80029e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f2      	bne.n	80029c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029e2:	4b10      	ldr	r3, [pc, #64]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ee:	d112      	bne.n	8002a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e011      	b.n	8002a18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a04:	e007      	b.n	8002a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a06:	4b07      	ldr	r3, [pc, #28]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a0e:	4a05      	ldr	r2, [pc, #20]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a14:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	40007000 	.word	0x40007000
 8002a28:	20000000 	.word	0x20000000
 8002a2c:	431bde83 	.word	0x431bde83

08002a30 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002a34:	4b05      	ldr	r3, [pc, #20]	@ (8002a4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4a04      	ldr	r2, [pc, #16]	@ (8002a4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a3e:	6093      	str	r3, [r2, #8]
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40007000 	.word	0x40007000

08002a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e2fe      	b.n	8003060 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d075      	beq.n	8002b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6e:	4b97      	ldr	r3, [pc, #604]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a78:	4b94      	ldr	r3, [pc, #592]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	2b0c      	cmp	r3, #12
 8002a86:	d102      	bne.n	8002a8e <HAL_RCC_OscConfig+0x3e>
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d002      	beq.n	8002a94 <HAL_RCC_OscConfig+0x44>
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d10b      	bne.n	8002aac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	4b8d      	ldr	r3, [pc, #564]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d05b      	beq.n	8002b58 <HAL_RCC_OscConfig+0x108>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d157      	bne.n	8002b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e2d9      	b.n	8003060 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x74>
 8002ab6:	4b85      	ldr	r3, [pc, #532]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a84      	ldr	r2, [pc, #528]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e01d      	b.n	8002b00 <HAL_RCC_OscConfig+0xb0>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x98>
 8002ace:	4b7f      	ldr	r3, [pc, #508]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a7e      	ldr	r2, [pc, #504]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b7c      	ldr	r3, [pc, #496]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a7b      	ldr	r2, [pc, #492]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0xb0>
 8002ae8:	4b78      	ldr	r3, [pc, #480]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a77      	ldr	r2, [pc, #476]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b75      	ldr	r3, [pc, #468]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a74      	ldr	r2, [pc, #464]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe fcb8 	bl	800147c <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe fcb4 	bl	800147c <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	@ 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e29e      	b.n	8003060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b22:	4b6a      	ldr	r3, [pc, #424]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0xc0>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe fca4 	bl	800147c <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe fca0 	bl	800147c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	@ 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e28a      	b.n	8003060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b4a:	4b60      	ldr	r3, [pc, #384]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0xe8>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d075      	beq.n	8002c52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b66:	4b59      	ldr	r3, [pc, #356]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b70:	4b56      	ldr	r3, [pc, #344]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	2b0c      	cmp	r3, #12
 8002b7e:	d102      	bne.n	8002b86 <HAL_RCC_OscConfig+0x136>
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d002      	beq.n	8002b8c <HAL_RCC_OscConfig+0x13c>
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d11f      	bne.n	8002bcc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b8c:	4b4f      	ldr	r3, [pc, #316]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x154>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e25d      	b.n	8003060 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba4:	4b49      	ldr	r3, [pc, #292]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	061b      	lsls	r3, r3, #24
 8002bb2:	4946      	ldr	r1, [pc, #280]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002bb8:	4b45      	ldr	r3, [pc, #276]	@ (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fe fc11 	bl	80013e4 <HAL_InitTick>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d043      	beq.n	8002c50 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e249      	b.n	8003060 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d023      	beq.n	8002c1c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd4:	4b3d      	ldr	r3, [pc, #244]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a3c      	ldr	r2, [pc, #240]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe fc4c 	bl	800147c <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be8:	f7fe fc48 	bl	800147c <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e232      	b.n	8003060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bfa:	4b34      	ldr	r3, [pc, #208]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c06:	4b31      	ldr	r3, [pc, #196]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	061b      	lsls	r3, r3, #24
 8002c14:	492d      	ldr	r1, [pc, #180]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
 8002c1a:	e01a      	b.n	8002c52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a2a      	ldr	r2, [pc, #168]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002c22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c28:	f7fe fc28 	bl	800147c <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c30:	f7fe fc24 	bl	800147c <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e20e      	b.n	8003060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c42:	4b22      	ldr	r3, [pc, #136]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x1e0>
 8002c4e:	e000      	b.n	8002c52 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d041      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d01c      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c66:	4b19      	ldr	r3, [pc, #100]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c6c:	4a17      	ldr	r2, [pc, #92]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c76:	f7fe fc01 	bl	800147c <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7e:	f7fe fbfd 	bl	800147c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e1e7      	b.n	8003060 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c90:	4b0e      	ldr	r3, [pc, #56]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0ef      	beq.n	8002c7e <HAL_RCC_OscConfig+0x22e>
 8002c9e:	e020      	b.n	8002ce2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ca6:	4a09      	ldr	r2, [pc, #36]	@ (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb0:	f7fe fbe4 	bl	800147c <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cb6:	e00d      	b.n	8002cd4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb8:	f7fe fbe0 	bl	800147c <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d906      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e1ca      	b.n	8003060 <HAL_RCC_OscConfig+0x610>
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cd4:	4b8c      	ldr	r3, [pc, #560]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1ea      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80a6 	beq.w	8002e3c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cf4:	4b84      	ldr	r3, [pc, #528]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_OscConfig+0x2b4>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <HAL_RCC_OscConfig+0x2b6>
 8002d04:	2300      	movs	r3, #0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00d      	beq.n	8002d26 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d14:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d16:	4b7c      	ldr	r3, [pc, #496]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d22:	2301      	movs	r3, #1
 8002d24:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d26:	4b79      	ldr	r3, [pc, #484]	@ (8002f0c <HAL_RCC_OscConfig+0x4bc>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d118      	bne.n	8002d64 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d32:	4b76      	ldr	r3, [pc, #472]	@ (8002f0c <HAL_RCC_OscConfig+0x4bc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a75      	ldr	r2, [pc, #468]	@ (8002f0c <HAL_RCC_OscConfig+0x4bc>)
 8002d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d3e:	f7fe fb9d 	bl	800147c <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d46:	f7fe fb99 	bl	800147c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e183      	b.n	8003060 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d58:	4b6c      	ldr	r3, [pc, #432]	@ (8002f0c <HAL_RCC_OscConfig+0x4bc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d108      	bne.n	8002d7e <HAL_RCC_OscConfig+0x32e>
 8002d6c:	4b66      	ldr	r3, [pc, #408]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d72:	4a65      	ldr	r2, [pc, #404]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d7c:	e024      	b.n	8002dc8 <HAL_RCC_OscConfig+0x378>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b05      	cmp	r3, #5
 8002d84:	d110      	bne.n	8002da8 <HAL_RCC_OscConfig+0x358>
 8002d86:	4b60      	ldr	r3, [pc, #384]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8c:	4a5e      	ldr	r2, [pc, #376]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002d8e:	f043 0304 	orr.w	r3, r3, #4
 8002d92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d96:	4b5c      	ldr	r3, [pc, #368]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d9c:	4a5a      	ldr	r2, [pc, #360]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002da6:	e00f      	b.n	8002dc8 <HAL_RCC_OscConfig+0x378>
 8002da8:	4b57      	ldr	r3, [pc, #348]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dae:	4a56      	ldr	r2, [pc, #344]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002db8:	4b53      	ldr	r3, [pc, #332]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dbe:	4a52      	ldr	r2, [pc, #328]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002dc0:	f023 0304 	bic.w	r3, r3, #4
 8002dc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d016      	beq.n	8002dfe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd0:	f7fe fb54 	bl	800147c <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd6:	e00a      	b.n	8002dee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd8:	f7fe fb50 	bl	800147c <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e138      	b.n	8003060 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dee:	4b46      	ldr	r3, [pc, #280]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ed      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x388>
 8002dfc:	e015      	b.n	8002e2a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfe:	f7fe fb3d 	bl	800147c <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e04:	e00a      	b.n	8002e1c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f7fe fb39 	bl	800147c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e121      	b.n	8003060 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1ed      	bne.n	8002e06 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e2a:	7ffb      	ldrb	r3, [r7, #31]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d105      	bne.n	8002e3c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e30:	4b35      	ldr	r3, [pc, #212]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e34:	4a34      	ldr	r2, [pc, #208]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002e36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e3a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d03c      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d01c      	beq.n	8002e8a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e50:	4b2d      	ldr	r3, [pc, #180]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e56:	4a2c      	ldr	r2, [pc, #176]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e60:	f7fe fb0c 	bl	800147c <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e68:	f7fe fb08 	bl	800147c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e0f2      	b.n	8003060 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e7a:	4b23      	ldr	r3, [pc, #140]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002e7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0ef      	beq.n	8002e68 <HAL_RCC_OscConfig+0x418>
 8002e88:	e01b      	b.n	8002ec2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e90:	4a1d      	ldr	r2, [pc, #116]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9a:	f7fe faef 	bl	800147c <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ea2:	f7fe faeb 	bl	800147c <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e0d5      	b.n	8003060 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002eb4:	4b14      	ldr	r3, [pc, #80]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1ef      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 80c9 	beq.w	800305e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b0c      	cmp	r3, #12
 8002ed6:	f000 8083 	beq.w	8002fe0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d15e      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee2:	4b09      	ldr	r3, [pc, #36]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a08      	ldr	r2, [pc, #32]	@ (8002f08 <HAL_RCC_OscConfig+0x4b8>)
 8002ee8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eee:	f7fe fac5 	bl	800147c <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef4:	e00c      	b.n	8002f10 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef6:	f7fe fac1 	bl	800147c <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d905      	bls.n	8002f10 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e0ab      	b.n	8003060 <HAL_RCC_OscConfig+0x610>
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f10:	4b55      	ldr	r3, [pc, #340]	@ (8003068 <HAL_RCC_OscConfig+0x618>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1ec      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f1c:	4b52      	ldr	r3, [pc, #328]	@ (8003068 <HAL_RCC_OscConfig+0x618>)
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	4b52      	ldr	r3, [pc, #328]	@ (800306c <HAL_RCC_OscConfig+0x61c>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6a11      	ldr	r1, [r2, #32]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f2c:	3a01      	subs	r2, #1
 8002f2e:	0112      	lsls	r2, r2, #4
 8002f30:	4311      	orrs	r1, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002f36:	0212      	lsls	r2, r2, #8
 8002f38:	4311      	orrs	r1, r2
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f3e:	0852      	lsrs	r2, r2, #1
 8002f40:	3a01      	subs	r2, #1
 8002f42:	0552      	lsls	r2, r2, #21
 8002f44:	4311      	orrs	r1, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f4a:	0852      	lsrs	r2, r2, #1
 8002f4c:	3a01      	subs	r2, #1
 8002f4e:	0652      	lsls	r2, r2, #25
 8002f50:	4311      	orrs	r1, r2
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f56:	06d2      	lsls	r2, r2, #27
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	4943      	ldr	r1, [pc, #268]	@ (8003068 <HAL_RCC_OscConfig+0x618>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f60:	4b41      	ldr	r3, [pc, #260]	@ (8003068 <HAL_RCC_OscConfig+0x618>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a40      	ldr	r2, [pc, #256]	@ (8003068 <HAL_RCC_OscConfig+0x618>)
 8002f66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f6a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f6c:	4b3e      	ldr	r3, [pc, #248]	@ (8003068 <HAL_RCC_OscConfig+0x618>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	4a3d      	ldr	r2, [pc, #244]	@ (8003068 <HAL_RCC_OscConfig+0x618>)
 8002f72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f76:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fe fa80 	bl	800147c <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f80:	f7fe fa7c 	bl	800147c <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e066      	b.n	8003060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f92:	4b35      	ldr	r3, [pc, #212]	@ (8003068 <HAL_RCC_OscConfig+0x618>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0x530>
 8002f9e:	e05e      	b.n	800305e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa0:	4b31      	ldr	r3, [pc, #196]	@ (8003068 <HAL_RCC_OscConfig+0x618>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a30      	ldr	r2, [pc, #192]	@ (8003068 <HAL_RCC_OscConfig+0x618>)
 8002fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe fa66 	bl	800147c <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7fe fa62 	bl	800147c <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e04c      	b.n	8003060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc6:	4b28      	ldr	r3, [pc, #160]	@ (8003068 <HAL_RCC_OscConfig+0x618>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002fd2:	4b25      	ldr	r3, [pc, #148]	@ (8003068 <HAL_RCC_OscConfig+0x618>)
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	4924      	ldr	r1, [pc, #144]	@ (8003068 <HAL_RCC_OscConfig+0x618>)
 8002fd8:	4b25      	ldr	r3, [pc, #148]	@ (8003070 <HAL_RCC_OscConfig+0x620>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	60cb      	str	r3, [r1, #12]
 8002fde:	e03e      	b.n	800305e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e039      	b.n	8003060 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002fec:	4b1e      	ldr	r3, [pc, #120]	@ (8003068 <HAL_RCC_OscConfig+0x618>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f003 0203 	and.w	r2, r3, #3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d12c      	bne.n	800305a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	3b01      	subs	r3, #1
 800300c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300e:	429a      	cmp	r2, r3
 8003010:	d123      	bne.n	800305a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800301e:	429a      	cmp	r2, r3
 8003020:	d11b      	bne.n	800305a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800302e:	429a      	cmp	r2, r3
 8003030:	d113      	bne.n	800305a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	3b01      	subs	r3, #1
 8003040:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003042:	429a      	cmp	r2, r3
 8003044:	d109      	bne.n	800305a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003050:	085b      	lsrs	r3, r3, #1
 8003052:	3b01      	subs	r3, #1
 8003054:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003056:	429a      	cmp	r2, r3
 8003058:	d001      	beq.n	800305e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3720      	adds	r7, #32
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000
 800306c:	019f800c 	.word	0x019f800c
 8003070:	feeefffc 	.word	0xfeeefffc

08003074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e11e      	b.n	80032ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800308c:	4b91      	ldr	r3, [pc, #580]	@ (80032d4 <HAL_RCC_ClockConfig+0x260>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d910      	bls.n	80030bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	4b8e      	ldr	r3, [pc, #568]	@ (80032d4 <HAL_RCC_ClockConfig+0x260>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 020f 	bic.w	r2, r3, #15
 80030a2:	498c      	ldr	r1, [pc, #560]	@ (80032d4 <HAL_RCC_ClockConfig+0x260>)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030aa:	4b8a      	ldr	r3, [pc, #552]	@ (80032d4 <HAL_RCC_ClockConfig+0x260>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e106      	b.n	80032ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d073      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d129      	bne.n	8003124 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d0:	4b81      	ldr	r3, [pc, #516]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0f4      	b.n	80032ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80030e0:	f000 f99e 	bl	8003420 <RCC_GetSysClockFreqFromPLLSource>
 80030e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4a7c      	ldr	r2, [pc, #496]	@ (80032dc <HAL_RCC_ClockConfig+0x268>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d93f      	bls.n	800316e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80030ee:	4b7a      	ldr	r3, [pc, #488]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d009      	beq.n	800310e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003102:	2b00      	cmp	r3, #0
 8003104:	d033      	beq.n	800316e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800310a:	2b00      	cmp	r3, #0
 800310c:	d12f      	bne.n	800316e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800310e:	4b72      	ldr	r3, [pc, #456]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003116:	4a70      	ldr	r2, [pc, #448]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 8003118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800311c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800311e:	2380      	movs	r3, #128	@ 0x80
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	e024      	b.n	800316e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b02      	cmp	r3, #2
 800312a:	d107      	bne.n	800313c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800312c:	4b6a      	ldr	r3, [pc, #424]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d109      	bne.n	800314c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0c6      	b.n	80032ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800313c:	4b66      	ldr	r3, [pc, #408]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0be      	b.n	80032ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800314c:	f000 f8ce 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 8003150:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4a61      	ldr	r2, [pc, #388]	@ (80032dc <HAL_RCC_ClockConfig+0x268>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d909      	bls.n	800316e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800315a:	4b5f      	ldr	r3, [pc, #380]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003162:	4a5d      	ldr	r2, [pc, #372]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 8003164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003168:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800316a:	2380      	movs	r3, #128	@ 0x80
 800316c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800316e:	4b5a      	ldr	r3, [pc, #360]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f023 0203 	bic.w	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	4957      	ldr	r1, [pc, #348]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 800317c:	4313      	orrs	r3, r2
 800317e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003180:	f7fe f97c 	bl	800147c <HAL_GetTick>
 8003184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003186:	e00a      	b.n	800319e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003188:	f7fe f978 	bl	800147c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003196:	4293      	cmp	r3, r2
 8003198:	d901      	bls.n	800319e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e095      	b.n	80032ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319e:	4b4e      	ldr	r3, [pc, #312]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 020c 	and.w	r2, r3, #12
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d1eb      	bne.n	8003188 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d023      	beq.n	8003204 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031c8:	4b43      	ldr	r3, [pc, #268]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4a42      	ldr	r2, [pc, #264]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 80031ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d007      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80031e0:	4b3d      	ldr	r3, [pc, #244]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80031e8:	4a3b      	ldr	r2, [pc, #236]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 80031ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f0:	4b39      	ldr	r3, [pc, #228]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	4936      	ldr	r1, [pc, #216]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]
 8003202:	e008      	b.n	8003216 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b80      	cmp	r3, #128	@ 0x80
 8003208:	d105      	bne.n	8003216 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800320a:	4b33      	ldr	r3, [pc, #204]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	4a32      	ldr	r2, [pc, #200]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 8003210:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003214:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003216:	4b2f      	ldr	r3, [pc, #188]	@ (80032d4 <HAL_RCC_ClockConfig+0x260>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d21d      	bcs.n	8003260 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003224:	4b2b      	ldr	r3, [pc, #172]	@ (80032d4 <HAL_RCC_ClockConfig+0x260>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f023 020f 	bic.w	r2, r3, #15
 800322c:	4929      	ldr	r1, [pc, #164]	@ (80032d4 <HAL_RCC_ClockConfig+0x260>)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	4313      	orrs	r3, r2
 8003232:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003234:	f7fe f922 	bl	800147c <HAL_GetTick>
 8003238:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	e00a      	b.n	8003252 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323c:	f7fe f91e 	bl	800147c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e03b      	b.n	80032ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	4b20      	ldr	r3, [pc, #128]	@ (80032d4 <HAL_RCC_ClockConfig+0x260>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d1ed      	bne.n	800323c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800326c:	4b1a      	ldr	r3, [pc, #104]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4917      	ldr	r1, [pc, #92]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d009      	beq.n	800329e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800328a:	4b13      	ldr	r3, [pc, #76]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	490f      	ldr	r1, [pc, #60]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800329e:	f000 f825 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 80032a2:	4602      	mov	r2, r0
 80032a4:	4b0c      	ldr	r3, [pc, #48]	@ (80032d8 <HAL_RCC_ClockConfig+0x264>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	490c      	ldr	r1, [pc, #48]	@ (80032e0 <HAL_RCC_ClockConfig+0x26c>)
 80032b0:	5ccb      	ldrb	r3, [r1, r3]
 80032b2:	f003 031f 	and.w	r3, r3, #31
 80032b6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ba:	4a0a      	ldr	r2, [pc, #40]	@ (80032e4 <HAL_RCC_ClockConfig+0x270>)
 80032bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80032be:	4b0a      	ldr	r3, [pc, #40]	@ (80032e8 <HAL_RCC_ClockConfig+0x274>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe f88e 	bl	80013e4 <HAL_InitTick>
 80032c8:	4603      	mov	r3, r0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40022000 	.word	0x40022000
 80032d8:	40021000 	.word	0x40021000
 80032dc:	04c4b400 	.word	0x04c4b400
 80032e0:	08006b08 	.word	0x08006b08
 80032e4:	20000000 	.word	0x20000000
 80032e8:	20000018 	.word	0x20000018

080032ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80032f2:	4b2c      	ldr	r3, [pc, #176]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 030c 	and.w	r3, r3, #12
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d102      	bne.n	8003304 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032fe:	4b2a      	ldr	r3, [pc, #168]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	e047      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003304:	4b27      	ldr	r3, [pc, #156]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b08      	cmp	r3, #8
 800330e:	d102      	bne.n	8003316 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003310:	4b26      	ldr	r3, [pc, #152]	@ (80033ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	e03e      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003316:	4b23      	ldr	r3, [pc, #140]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b0c      	cmp	r3, #12
 8003320:	d136      	bne.n	8003390 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003322:	4b20      	ldr	r3, [pc, #128]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800332c:	4b1d      	ldr	r3, [pc, #116]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	3301      	adds	r3, #1
 8003338:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b03      	cmp	r3, #3
 800333e:	d10c      	bne.n	800335a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003340:	4a1a      	ldr	r2, [pc, #104]	@ (80033ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	fbb2 f3f3 	udiv	r3, r2, r3
 8003348:	4a16      	ldr	r2, [pc, #88]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800334a:	68d2      	ldr	r2, [r2, #12]
 800334c:	0a12      	lsrs	r2, r2, #8
 800334e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003352:	fb02 f303 	mul.w	r3, r2, r3
 8003356:	617b      	str	r3, [r7, #20]
      break;
 8003358:	e00c      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800335a:	4a13      	ldr	r2, [pc, #76]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003362:	4a10      	ldr	r2, [pc, #64]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003364:	68d2      	ldr	r2, [r2, #12]
 8003366:	0a12      	lsrs	r2, r2, #8
 8003368:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800336c:	fb02 f303 	mul.w	r3, r2, r3
 8003370:	617b      	str	r3, [r7, #20]
      break;
 8003372:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003374:	4b0b      	ldr	r3, [pc, #44]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	0e5b      	lsrs	r3, r3, #25
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	3301      	adds	r3, #1
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	fbb2 f3f3 	udiv	r3, r2, r3
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	e001      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003394:	693b      	ldr	r3, [r7, #16]
}
 8003396:	4618      	mov	r0, r3
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40021000 	.word	0x40021000
 80033a8:	00f42400 	.word	0x00f42400
 80033ac:	016e3600 	.word	0x016e3600

080033b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b4:	4b03      	ldr	r3, [pc, #12]	@ (80033c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033b6:	681b      	ldr	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000000 	.word	0x20000000

080033c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033cc:	f7ff fff0 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b06      	ldr	r3, [pc, #24]	@ (80033ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	0a1b      	lsrs	r3, r3, #8
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	4904      	ldr	r1, [pc, #16]	@ (80033f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033de:	5ccb      	ldrb	r3, [r1, r3]
 80033e0:	f003 031f 	and.w	r3, r3, #31
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40021000 	.word	0x40021000
 80033f0:	08006b18 	.word	0x08006b18

080033f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033f8:	f7ff ffda 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 80033fc:	4602      	mov	r2, r0
 80033fe:	4b06      	ldr	r3, [pc, #24]	@ (8003418 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	0adb      	lsrs	r3, r3, #11
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	4904      	ldr	r1, [pc, #16]	@ (800341c <HAL_RCC_GetPCLK2Freq+0x28>)
 800340a:	5ccb      	ldrb	r3, [r1, r3]
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40021000 	.word	0x40021000
 800341c:	08006b18 	.word	0x08006b18

08003420 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003426:	4b1e      	ldr	r3, [pc, #120]	@ (80034a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003430:	4b1b      	ldr	r3, [pc, #108]	@ (80034a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	3301      	adds	r3, #1
 800343c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	2b03      	cmp	r3, #3
 8003442:	d10c      	bne.n	800345e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003444:	4a17      	ldr	r2, [pc, #92]	@ (80034a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	fbb2 f3f3 	udiv	r3, r2, r3
 800344c:	4a14      	ldr	r2, [pc, #80]	@ (80034a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800344e:	68d2      	ldr	r2, [r2, #12]
 8003450:	0a12      	lsrs	r2, r2, #8
 8003452:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	617b      	str	r3, [r7, #20]
    break;
 800345c:	e00c      	b.n	8003478 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800345e:	4a12      	ldr	r2, [pc, #72]	@ (80034a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	fbb2 f3f3 	udiv	r3, r2, r3
 8003466:	4a0e      	ldr	r2, [pc, #56]	@ (80034a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003468:	68d2      	ldr	r2, [r2, #12]
 800346a:	0a12      	lsrs	r2, r2, #8
 800346c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003470:	fb02 f303 	mul.w	r3, r2, r3
 8003474:	617b      	str	r3, [r7, #20]
    break;
 8003476:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003478:	4b09      	ldr	r3, [pc, #36]	@ (80034a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	0e5b      	lsrs	r3, r3, #25
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	3301      	adds	r3, #1
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003490:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003492:	687b      	ldr	r3, [r7, #4]
}
 8003494:	4618      	mov	r0, r3
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	40021000 	.word	0x40021000
 80034a4:	016e3600 	.word	0x016e3600
 80034a8:	00f42400 	.word	0x00f42400

080034ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034b4:	2300      	movs	r3, #0
 80034b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034b8:	2300      	movs	r3, #0
 80034ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 8098 	beq.w	80035fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ca:	2300      	movs	r3, #0
 80034cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ce:	4b43      	ldr	r3, [pc, #268]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10d      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034da:	4b40      	ldr	r3, [pc, #256]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034de:	4a3f      	ldr	r2, [pc, #252]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80034e6:	4b3d      	ldr	r3, [pc, #244]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f2:	2301      	movs	r3, #1
 80034f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034f6:	4b3a      	ldr	r3, [pc, #232]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a39      	ldr	r2, [pc, #228]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003500:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003502:	f7fd ffbb 	bl	800147c <HAL_GetTick>
 8003506:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003508:	e009      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350a:	f7fd ffb7 	bl	800147c <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d902      	bls.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	74fb      	strb	r3, [r7, #19]
        break;
 800351c:	e005      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800351e:	4b30      	ldr	r3, [pc, #192]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0ef      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800352a:	7cfb      	ldrb	r3, [r7, #19]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d159      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003530:	4b2a      	ldr	r3, [pc, #168]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800353a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01e      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	429a      	cmp	r2, r3
 800354a:	d019      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800354c:	4b23      	ldr	r3, [pc, #140]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003552:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003556:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003558:	4b20      	ldr	r3, [pc, #128]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355e:	4a1f      	ldr	r2, [pc, #124]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003568:	4b1c      	ldr	r3, [pc, #112]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356e:	4a1b      	ldr	r2, [pc, #108]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003570:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003578:	4a18      	ldr	r2, [pc, #96]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d016      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358a:	f7fd ff77 	bl	800147c <HAL_GetTick>
 800358e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003590:	e00b      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003592:	f7fd ff73 	bl	800147c <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d902      	bls.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	74fb      	strb	r3, [r7, #19]
            break;
 80035a8:	e006      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035aa:	4b0c      	ldr	r3, [pc, #48]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0ec      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80035b8:	7cfb      	ldrb	r3, [r7, #19]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10b      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035be:	4b07      	ldr	r3, [pc, #28]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035cc:	4903      	ldr	r1, [pc, #12]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035d4:	e008      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035d6:	7cfb      	ldrb	r3, [r7, #19]
 80035d8:	74bb      	strb	r3, [r7, #18]
 80035da:	e005      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e4:	7cfb      	ldrb	r3, [r7, #19]
 80035e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035e8:	7c7b      	ldrb	r3, [r7, #17]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d105      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ee:	4ba6      	ldr	r3, [pc, #664]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f2:	4aa5      	ldr	r2, [pc, #660]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003606:	4ba0      	ldr	r3, [pc, #640]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360c:	f023 0203 	bic.w	r2, r3, #3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	499c      	ldr	r1, [pc, #624]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003628:	4b97      	ldr	r3, [pc, #604]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362e:	f023 020c 	bic.w	r2, r3, #12
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	4994      	ldr	r1, [pc, #592]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800364a:	4b8f      	ldr	r3, [pc, #572]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003650:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	498b      	ldr	r1, [pc, #556]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0308 	and.w	r3, r3, #8
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800366c:	4b86      	ldr	r3, [pc, #536]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003672:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	4983      	ldr	r1, [pc, #524]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800368e:	4b7e      	ldr	r3, [pc, #504]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003694:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	497a      	ldr	r1, [pc, #488]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036b0:	4b75      	ldr	r3, [pc, #468]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	4972      	ldr	r1, [pc, #456]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	4969      	ldr	r1, [pc, #420]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036f4:	4b64      	ldr	r3, [pc, #400]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	4961      	ldr	r1, [pc, #388]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003716:	4b5c      	ldr	r3, [pc, #368]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	4958      	ldr	r1, [pc, #352]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003734:	2b00      	cmp	r3, #0
 8003736:	d015      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003738:	4b53      	ldr	r3, [pc, #332]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003746:	4950      	ldr	r1, [pc, #320]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003756:	d105      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003758:	4b4b      	ldr	r3, [pc, #300]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4a4a      	ldr	r2, [pc, #296]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800375e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003762:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800376c:	2b00      	cmp	r3, #0
 800376e:	d015      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003770:	4b45      	ldr	r3, [pc, #276]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003776:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377e:	4942      	ldr	r1, [pc, #264]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800378e:	d105      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003790:	4b3d      	ldr	r3, [pc, #244]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4a3c      	ldr	r2, [pc, #240]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003796:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800379a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d015      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037a8:	4b37      	ldr	r3, [pc, #220]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b6:	4934      	ldr	r1, [pc, #208]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037c6:	d105      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037c8:	4b2f      	ldr	r3, [pc, #188]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4a2e      	ldr	r2, [pc, #184]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d015      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037e0:	4b29      	ldr	r3, [pc, #164]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ee:	4926      	ldr	r1, [pc, #152]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037fe:	d105      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003800:	4b21      	ldr	r3, [pc, #132]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4a20      	ldr	r2, [pc, #128]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003806:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800380a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d015      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003818:	4b1b      	ldr	r3, [pc, #108]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003826:	4918      	ldr	r1, [pc, #96]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003832:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003836:	d105      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003838:	4b13      	ldr	r3, [pc, #76]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4a12      	ldr	r2, [pc, #72]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800383e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003842:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d015      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003850:	4b0d      	ldr	r3, [pc, #52]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003856:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385e:	490a      	ldr	r1, [pc, #40]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003860:	4313      	orrs	r3, r2
 8003862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800386e:	d105      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003870:	4b05      	ldr	r3, [pc, #20]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4a04      	ldr	r2, [pc, #16]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800387a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800387c:	7cbb      	ldrb	r3, [r7, #18]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40021000 	.word	0x40021000

0800388c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e042      	b.n	8003924 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d106      	bne.n	80038b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fd fb41 	bl	8000f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2224      	movs	r2, #36	@ 0x24
 80038ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 ff30 	bl	800473c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fc61 	bl	80041a4 <UART_SetConfig>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e01b      	b.n	8003924 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800390a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 ffaf 	bl	8004880 <UART_CheckIdleState>
 8003922:	4603      	mov	r3, r0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08a      	sub	sp, #40	@ 0x28
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	4613      	mov	r3, r2
 800393a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003942:	2b20      	cmp	r3, #32
 8003944:	d17b      	bne.n	8003a3e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_UART_Transmit+0x26>
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e074      	b.n	8003a40 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2221      	movs	r2, #33	@ 0x21
 8003962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003966:	f7fd fd89 	bl	800147c <HAL_GetTick>
 800396a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	88fa      	ldrh	r2, [r7, #6]
 8003970:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	88fa      	ldrh	r2, [r7, #6]
 8003978:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003984:	d108      	bne.n	8003998 <HAL_UART_Transmit+0x6c>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d104      	bne.n	8003998 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	61bb      	str	r3, [r7, #24]
 8003996:	e003      	b.n	80039a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800399c:	2300      	movs	r3, #0
 800399e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039a0:	e030      	b.n	8003a04 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2200      	movs	r2, #0
 80039aa:	2180      	movs	r1, #128	@ 0x80
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f001 f811 	bl	80049d4 <UART_WaitOnFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e03d      	b.n	8003a40 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10b      	bne.n	80039e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039d8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	3302      	adds	r3, #2
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	e007      	b.n	80039f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	781a      	ldrb	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	3301      	adds	r3, #1
 80039f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1c8      	bne.n	80039a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2200      	movs	r2, #0
 8003a18:	2140      	movs	r1, #64	@ 0x40
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 ffda 	bl	80049d4 <UART_WaitOnFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e006      	b.n	8003a40 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e000      	b.n	8003a40 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003a3e:	2302      	movs	r3, #2
  }
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3720      	adds	r7, #32
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	@ 0x28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	4613      	mov	r3, r2
 8003a54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d137      	bne.n	8003ad0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <HAL_UART_Receive_IT+0x24>
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e030      	b.n	8003ad2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a18      	ldr	r2, [pc, #96]	@ (8003adc <HAL_UART_Receive_IT+0x94>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d01f      	beq.n	8003ac0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d018      	beq.n	8003ac0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	e853 3f00 	ldrex	r3, [r3]
 8003a9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	623b      	str	r3, [r7, #32]
 8003aae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab0:	69f9      	ldr	r1, [r7, #28]
 8003ab2:	6a3a      	ldr	r2, [r7, #32]
 8003ab4:	e841 2300 	strex	r3, r2, [r1]
 8003ab8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e6      	bne.n	8003a8e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ac0:	88fb      	ldrh	r3, [r7, #6]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 fff2 	bl	8004ab0 <UART_Start_Receive_IT>
 8003acc:	4603      	mov	r3, r0
 8003ace:	e000      	b.n	8003ad2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ad0:	2302      	movs	r3, #2
  }
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3728      	adds	r7, #40	@ 0x28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40008000 	.word	0x40008000

08003ae0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b0ba      	sub	sp, #232	@ 0xe8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003b0a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003b0e:	4013      	ands	r3, r2
 8003b10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003b14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d11b      	bne.n	8003b54 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d015      	beq.n	8003b54 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d105      	bne.n	8003b40 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d009      	beq.n	8003b54 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 8300 	beq.w	800414a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	4798      	blx	r3
      }
      return;
 8003b52:	e2fa      	b.n	800414a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8123 	beq.w	8003da4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003b5e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003b62:	4b8d      	ldr	r3, [pc, #564]	@ (8003d98 <HAL_UART_IRQHandler+0x2b8>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003b6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003b6e:	4b8b      	ldr	r3, [pc, #556]	@ (8003d9c <HAL_UART_IRQHandler+0x2bc>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 8116 	beq.w	8003da4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d011      	beq.n	8003ba8 <HAL_UART_IRQHandler+0xc8>
 8003b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00b      	beq.n	8003ba8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2201      	movs	r2, #1
 8003b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9e:	f043 0201 	orr.w	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d011      	beq.n	8003bd8 <HAL_UART_IRQHandler+0xf8>
 8003bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00b      	beq.n	8003bd8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bce:	f043 0204 	orr.w	r2, r3, #4
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d011      	beq.n	8003c08 <HAL_UART_IRQHandler+0x128>
 8003be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00b      	beq.n	8003c08 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfe:	f043 0202 	orr.w	r2, r3, #2
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d017      	beq.n	8003c44 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d105      	bne.n	8003c2c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003c20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003c24:	4b5c      	ldr	r3, [pc, #368]	@ (8003d98 <HAL_UART_IRQHandler+0x2b8>)
 8003c26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00b      	beq.n	8003c44 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2208      	movs	r2, #8
 8003c32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3a:	f043 0208 	orr.w	r2, r3, #8
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d012      	beq.n	8003c76 <HAL_UART_IRQHandler+0x196>
 8003c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00c      	beq.n	8003c76 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6c:	f043 0220 	orr.w	r2, r3, #32
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8266 	beq.w	800414e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d013      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d105      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cbc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cca:	2b40      	cmp	r3, #64	@ 0x40
 8003ccc:	d005      	beq.n	8003cda <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cd2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d054      	beq.n	8003d84 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f001 f80a 	bl	8004cf4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cea:	2b40      	cmp	r3, #64	@ 0x40
 8003cec:	d146      	bne.n	8003d7c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3308      	adds	r3, #8
 8003cf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3308      	adds	r3, #8
 8003d16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1d9      	bne.n	8003cee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d017      	beq.n	8003d74 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d4a:	4a15      	ldr	r2, [pc, #84]	@ (8003da0 <HAL_UART_IRQHandler+0x2c0>)
 8003d4c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fd fd27 	bl	80017a8 <HAL_DMA_Abort_IT>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d019      	beq.n	8003d94 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003d6e:	4610      	mov	r0, r2
 8003d70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d72:	e00f      	b.n	8003d94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f9ff 	bl	8004178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7a:	e00b      	b.n	8003d94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f9fb 	bl	8004178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d82:	e007      	b.n	8003d94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f9f7 	bl	8004178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003d92:	e1dc      	b.n	800414e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d94:	bf00      	nop
    return;
 8003d96:	e1da      	b.n	800414e <HAL_UART_IRQHandler+0x66e>
 8003d98:	10000001 	.word	0x10000001
 8003d9c:	04000120 	.word	0x04000120
 8003da0:	08004dc1 	.word	0x08004dc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	f040 8170 	bne.w	800408e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003db2:	f003 0310 	and.w	r3, r3, #16
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 8169 	beq.w	800408e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dc0:	f003 0310 	and.w	r3, r3, #16
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 8162 	beq.w	800408e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2210      	movs	r2, #16
 8003dd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ddc:	2b40      	cmp	r3, #64	@ 0x40
 8003dde:	f040 80d8 	bne.w	8003f92 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003df0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80af 	beq.w	8003f58 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003e00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e04:	429a      	cmp	r2, r3
 8003e06:	f080 80a7 	bcs.w	8003f58 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f040 8087 	bne.w	8003f36 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e56:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1da      	bne.n	8003e28 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3308      	adds	r3, #8
 8003e78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3308      	adds	r3, #8
 8003e92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ea8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e1      	bne.n	8003e72 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ebe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ec0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3308      	adds	r3, #8
 8003ece:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003ed2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ed4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ed8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ee0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e3      	bne.n	8003eae <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f04:	f023 0310 	bic.w	r3, r3, #16
 8003f08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e4      	bne.n	8003ef4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fd fbe0 	bl	80016f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	4619      	mov	r1, r3
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f91b 	bl	800418c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003f56:	e0fc      	b.n	8004152 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f62:	429a      	cmp	r2, r3
 8003f64:	f040 80f5 	bne.w	8004152 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	f040 80eb 	bne.w	8004152 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003f88:	4619      	mov	r1, r3
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f8fe 	bl	800418c <HAL_UARTEx_RxEventCallback>
      return;
 8003f90:	e0df      	b.n	8004152 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 80d1 	beq.w	8004156 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003fb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 80cc 	beq.w	8004156 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc6:	e853 3f00 	ldrex	r3, [r3]
 8003fca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fd2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fe2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fe6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e4      	bne.n	8003fbe <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	623b      	str	r3, [r7, #32]
   return(result);
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3308      	adds	r3, #8
 8004018:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800401c:	633a      	str	r2, [r7, #48]	@ 0x30
 800401e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004020:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004022:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004024:	e841 2300 	strex	r3, r2, [r1]
 8004028:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800402a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e1      	bne.n	8003ff4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2220      	movs	r2, #32
 8004034:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	e853 3f00 	ldrex	r3, [r3]
 8004050:	60fb      	str	r3, [r7, #12]
   return(result);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f023 0310 	bic.w	r3, r3, #16
 8004058:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004066:	61fb      	str	r3, [r7, #28]
 8004068:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	69b9      	ldr	r1, [r7, #24]
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	617b      	str	r3, [r7, #20]
   return(result);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e4      	bne.n	8004044 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2202      	movs	r2, #2
 800407e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004080:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004084:	4619      	mov	r1, r3
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f880 	bl	800418c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800408c:	e063      	b.n	8004156 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800408e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00e      	beq.n	80040b8 <HAL_UART_IRQHandler+0x5d8>
 800409a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800409e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d008      	beq.n	80040b8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80040ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f001 fbe3 	bl	800587c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040b6:	e051      	b.n	800415c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80040b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d014      	beq.n	80040ee <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80040c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d105      	bne.n	80040dc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80040d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d03a      	beq.n	800415a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	4798      	blx	r3
    }
    return;
 80040ec:	e035      	b.n	800415a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d009      	beq.n	800410e <HAL_UART_IRQHandler+0x62e>
 80040fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fe6c 	bl	8004de4 <UART_EndTransmit_IT>
    return;
 800410c:	e026      	b.n	800415c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800410e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004112:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d009      	beq.n	800412e <HAL_UART_IRQHandler+0x64e>
 800411a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800411e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f001 fbbc 	bl	80058a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800412c:	e016      	b.n	800415c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800412e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004132:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d010      	beq.n	800415c <HAL_UART_IRQHandler+0x67c>
 800413a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800413e:	2b00      	cmp	r3, #0
 8004140:	da0c      	bge.n	800415c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f001 fba4 	bl	8005890 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004148:	e008      	b.n	800415c <HAL_UART_IRQHandler+0x67c>
      return;
 800414a:	bf00      	nop
 800414c:	e006      	b.n	800415c <HAL_UART_IRQHandler+0x67c>
    return;
 800414e:	bf00      	nop
 8004150:	e004      	b.n	800415c <HAL_UART_IRQHandler+0x67c>
      return;
 8004152:	bf00      	nop
 8004154:	e002      	b.n	800415c <HAL_UART_IRQHandler+0x67c>
      return;
 8004156:	bf00      	nop
 8004158:	e000      	b.n	800415c <HAL_UART_IRQHandler+0x67c>
    return;
 800415a:	bf00      	nop
  }
}
 800415c:	37e8      	adds	r7, #232	@ 0xe8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop

08004164 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041a8:	b08c      	sub	sp, #48	@ 0x30
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	431a      	orrs	r2, r3
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4bab      	ldr	r3, [pc, #684]	@ (8004480 <UART_SetConfig+0x2dc>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	6812      	ldr	r2, [r2, #0]
 80041da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041dc:	430b      	orrs	r3, r1
 80041de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4aa0      	ldr	r2, [pc, #640]	@ (8004484 <UART_SetConfig+0x2e0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d004      	beq.n	8004210 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800420c:	4313      	orrs	r3, r2
 800420e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800421a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004224:	430b      	orrs	r3, r1
 8004226:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422e:	f023 010f 	bic.w	r1, r3, #15
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a91      	ldr	r2, [pc, #580]	@ (8004488 <UART_SetConfig+0x2e4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d125      	bne.n	8004294 <UART_SetConfig+0xf0>
 8004248:	4b90      	ldr	r3, [pc, #576]	@ (800448c <UART_SetConfig+0x2e8>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	2b03      	cmp	r3, #3
 8004254:	d81a      	bhi.n	800428c <UART_SetConfig+0xe8>
 8004256:	a201      	add	r2, pc, #4	@ (adr r2, 800425c <UART_SetConfig+0xb8>)
 8004258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425c:	0800426d 	.word	0x0800426d
 8004260:	0800427d 	.word	0x0800427d
 8004264:	08004275 	.word	0x08004275
 8004268:	08004285 	.word	0x08004285
 800426c:	2301      	movs	r3, #1
 800426e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004272:	e0d6      	b.n	8004422 <UART_SetConfig+0x27e>
 8004274:	2302      	movs	r3, #2
 8004276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800427a:	e0d2      	b.n	8004422 <UART_SetConfig+0x27e>
 800427c:	2304      	movs	r3, #4
 800427e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004282:	e0ce      	b.n	8004422 <UART_SetConfig+0x27e>
 8004284:	2308      	movs	r3, #8
 8004286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800428a:	e0ca      	b.n	8004422 <UART_SetConfig+0x27e>
 800428c:	2310      	movs	r3, #16
 800428e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004292:	e0c6      	b.n	8004422 <UART_SetConfig+0x27e>
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a7d      	ldr	r2, [pc, #500]	@ (8004490 <UART_SetConfig+0x2ec>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d138      	bne.n	8004310 <UART_SetConfig+0x16c>
 800429e:	4b7b      	ldr	r3, [pc, #492]	@ (800448c <UART_SetConfig+0x2e8>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a4:	f003 030c 	and.w	r3, r3, #12
 80042a8:	2b0c      	cmp	r3, #12
 80042aa:	d82d      	bhi.n	8004308 <UART_SetConfig+0x164>
 80042ac:	a201      	add	r2, pc, #4	@ (adr r2, 80042b4 <UART_SetConfig+0x110>)
 80042ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b2:	bf00      	nop
 80042b4:	080042e9 	.word	0x080042e9
 80042b8:	08004309 	.word	0x08004309
 80042bc:	08004309 	.word	0x08004309
 80042c0:	08004309 	.word	0x08004309
 80042c4:	080042f9 	.word	0x080042f9
 80042c8:	08004309 	.word	0x08004309
 80042cc:	08004309 	.word	0x08004309
 80042d0:	08004309 	.word	0x08004309
 80042d4:	080042f1 	.word	0x080042f1
 80042d8:	08004309 	.word	0x08004309
 80042dc:	08004309 	.word	0x08004309
 80042e0:	08004309 	.word	0x08004309
 80042e4:	08004301 	.word	0x08004301
 80042e8:	2300      	movs	r3, #0
 80042ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ee:	e098      	b.n	8004422 <UART_SetConfig+0x27e>
 80042f0:	2302      	movs	r3, #2
 80042f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042f6:	e094      	b.n	8004422 <UART_SetConfig+0x27e>
 80042f8:	2304      	movs	r3, #4
 80042fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042fe:	e090      	b.n	8004422 <UART_SetConfig+0x27e>
 8004300:	2308      	movs	r3, #8
 8004302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004306:	e08c      	b.n	8004422 <UART_SetConfig+0x27e>
 8004308:	2310      	movs	r3, #16
 800430a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800430e:	e088      	b.n	8004422 <UART_SetConfig+0x27e>
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a5f      	ldr	r2, [pc, #380]	@ (8004494 <UART_SetConfig+0x2f0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d125      	bne.n	8004366 <UART_SetConfig+0x1c2>
 800431a:	4b5c      	ldr	r3, [pc, #368]	@ (800448c <UART_SetConfig+0x2e8>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004320:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004324:	2b30      	cmp	r3, #48	@ 0x30
 8004326:	d016      	beq.n	8004356 <UART_SetConfig+0x1b2>
 8004328:	2b30      	cmp	r3, #48	@ 0x30
 800432a:	d818      	bhi.n	800435e <UART_SetConfig+0x1ba>
 800432c:	2b20      	cmp	r3, #32
 800432e:	d00a      	beq.n	8004346 <UART_SetConfig+0x1a2>
 8004330:	2b20      	cmp	r3, #32
 8004332:	d814      	bhi.n	800435e <UART_SetConfig+0x1ba>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <UART_SetConfig+0x19a>
 8004338:	2b10      	cmp	r3, #16
 800433a:	d008      	beq.n	800434e <UART_SetConfig+0x1aa>
 800433c:	e00f      	b.n	800435e <UART_SetConfig+0x1ba>
 800433e:	2300      	movs	r3, #0
 8004340:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004344:	e06d      	b.n	8004422 <UART_SetConfig+0x27e>
 8004346:	2302      	movs	r3, #2
 8004348:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800434c:	e069      	b.n	8004422 <UART_SetConfig+0x27e>
 800434e:	2304      	movs	r3, #4
 8004350:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004354:	e065      	b.n	8004422 <UART_SetConfig+0x27e>
 8004356:	2308      	movs	r3, #8
 8004358:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800435c:	e061      	b.n	8004422 <UART_SetConfig+0x27e>
 800435e:	2310      	movs	r3, #16
 8004360:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004364:	e05d      	b.n	8004422 <UART_SetConfig+0x27e>
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a4b      	ldr	r2, [pc, #300]	@ (8004498 <UART_SetConfig+0x2f4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d125      	bne.n	80043bc <UART_SetConfig+0x218>
 8004370:	4b46      	ldr	r3, [pc, #280]	@ (800448c <UART_SetConfig+0x2e8>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004376:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800437a:	2bc0      	cmp	r3, #192	@ 0xc0
 800437c:	d016      	beq.n	80043ac <UART_SetConfig+0x208>
 800437e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004380:	d818      	bhi.n	80043b4 <UART_SetConfig+0x210>
 8004382:	2b80      	cmp	r3, #128	@ 0x80
 8004384:	d00a      	beq.n	800439c <UART_SetConfig+0x1f8>
 8004386:	2b80      	cmp	r3, #128	@ 0x80
 8004388:	d814      	bhi.n	80043b4 <UART_SetConfig+0x210>
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <UART_SetConfig+0x1f0>
 800438e:	2b40      	cmp	r3, #64	@ 0x40
 8004390:	d008      	beq.n	80043a4 <UART_SetConfig+0x200>
 8004392:	e00f      	b.n	80043b4 <UART_SetConfig+0x210>
 8004394:	2300      	movs	r3, #0
 8004396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800439a:	e042      	b.n	8004422 <UART_SetConfig+0x27e>
 800439c:	2302      	movs	r3, #2
 800439e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043a2:	e03e      	b.n	8004422 <UART_SetConfig+0x27e>
 80043a4:	2304      	movs	r3, #4
 80043a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043aa:	e03a      	b.n	8004422 <UART_SetConfig+0x27e>
 80043ac:	2308      	movs	r3, #8
 80043ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043b2:	e036      	b.n	8004422 <UART_SetConfig+0x27e>
 80043b4:	2310      	movs	r3, #16
 80043b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ba:	e032      	b.n	8004422 <UART_SetConfig+0x27e>
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a30      	ldr	r2, [pc, #192]	@ (8004484 <UART_SetConfig+0x2e0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d12a      	bne.n	800441c <UART_SetConfig+0x278>
 80043c6:	4b31      	ldr	r3, [pc, #196]	@ (800448c <UART_SetConfig+0x2e8>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80043d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043d4:	d01a      	beq.n	800440c <UART_SetConfig+0x268>
 80043d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043da:	d81b      	bhi.n	8004414 <UART_SetConfig+0x270>
 80043dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043e0:	d00c      	beq.n	80043fc <UART_SetConfig+0x258>
 80043e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043e6:	d815      	bhi.n	8004414 <UART_SetConfig+0x270>
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <UART_SetConfig+0x250>
 80043ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f0:	d008      	beq.n	8004404 <UART_SetConfig+0x260>
 80043f2:	e00f      	b.n	8004414 <UART_SetConfig+0x270>
 80043f4:	2300      	movs	r3, #0
 80043f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043fa:	e012      	b.n	8004422 <UART_SetConfig+0x27e>
 80043fc:	2302      	movs	r3, #2
 80043fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004402:	e00e      	b.n	8004422 <UART_SetConfig+0x27e>
 8004404:	2304      	movs	r3, #4
 8004406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800440a:	e00a      	b.n	8004422 <UART_SetConfig+0x27e>
 800440c:	2308      	movs	r3, #8
 800440e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004412:	e006      	b.n	8004422 <UART_SetConfig+0x27e>
 8004414:	2310      	movs	r3, #16
 8004416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800441a:	e002      	b.n	8004422 <UART_SetConfig+0x27e>
 800441c:	2310      	movs	r3, #16
 800441e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a17      	ldr	r2, [pc, #92]	@ (8004484 <UART_SetConfig+0x2e0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	f040 80a8 	bne.w	800457e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800442e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004432:	2b08      	cmp	r3, #8
 8004434:	d834      	bhi.n	80044a0 <UART_SetConfig+0x2fc>
 8004436:	a201      	add	r2, pc, #4	@ (adr r2, 800443c <UART_SetConfig+0x298>)
 8004438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443c:	08004461 	.word	0x08004461
 8004440:	080044a1 	.word	0x080044a1
 8004444:	08004469 	.word	0x08004469
 8004448:	080044a1 	.word	0x080044a1
 800444c:	0800446f 	.word	0x0800446f
 8004450:	080044a1 	.word	0x080044a1
 8004454:	080044a1 	.word	0x080044a1
 8004458:	080044a1 	.word	0x080044a1
 800445c:	08004477 	.word	0x08004477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004460:	f7fe ffb2 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 8004464:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004466:	e021      	b.n	80044ac <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004468:	4b0c      	ldr	r3, [pc, #48]	@ (800449c <UART_SetConfig+0x2f8>)
 800446a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800446c:	e01e      	b.n	80044ac <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800446e:	f7fe ff3d 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 8004472:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004474:	e01a      	b.n	80044ac <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004476:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800447a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800447c:	e016      	b.n	80044ac <UART_SetConfig+0x308>
 800447e:	bf00      	nop
 8004480:	cfff69f3 	.word	0xcfff69f3
 8004484:	40008000 	.word	0x40008000
 8004488:	40013800 	.word	0x40013800
 800448c:	40021000 	.word	0x40021000
 8004490:	40004400 	.word	0x40004400
 8004494:	40004800 	.word	0x40004800
 8004498:	40004c00 	.word	0x40004c00
 800449c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80044aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 812a 	beq.w	8004708 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	4a9e      	ldr	r2, [pc, #632]	@ (8004734 <UART_SetConfig+0x590>)
 80044ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044be:	461a      	mov	r2, r3
 80044c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	4413      	add	r3, r2
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d305      	bcc.n	80044e4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d903      	bls.n	80044ec <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80044ea:	e10d      	b.n	8004708 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ee:	2200      	movs	r2, #0
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	60fa      	str	r2, [r7, #12]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f8:	4a8e      	ldr	r2, [pc, #568]	@ (8004734 <UART_SetConfig+0x590>)
 80044fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2200      	movs	r2, #0
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	607a      	str	r2, [r7, #4]
 8004506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800450a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800450e:	f7fb fed7 	bl	80002c0 <__aeabi_uldivmod>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4610      	mov	r0, r2
 8004518:	4619      	mov	r1, r3
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	020b      	lsls	r3, r1, #8
 8004524:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004528:	0202      	lsls	r2, r0, #8
 800452a:	6979      	ldr	r1, [r7, #20]
 800452c:	6849      	ldr	r1, [r1, #4]
 800452e:	0849      	lsrs	r1, r1, #1
 8004530:	2000      	movs	r0, #0
 8004532:	460c      	mov	r4, r1
 8004534:	4605      	mov	r5, r0
 8004536:	eb12 0804 	adds.w	r8, r2, r4
 800453a:	eb43 0905 	adc.w	r9, r3, r5
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	469a      	mov	sl, r3
 8004546:	4693      	mov	fp, r2
 8004548:	4652      	mov	r2, sl
 800454a:	465b      	mov	r3, fp
 800454c:	4640      	mov	r0, r8
 800454e:	4649      	mov	r1, r9
 8004550:	f7fb feb6 	bl	80002c0 <__aeabi_uldivmod>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4613      	mov	r3, r2
 800455a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004562:	d308      	bcc.n	8004576 <UART_SetConfig+0x3d2>
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800456a:	d204      	bcs.n	8004576 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6a3a      	ldr	r2, [r7, #32]
 8004572:	60da      	str	r2, [r3, #12]
 8004574:	e0c8      	b.n	8004708 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800457c:	e0c4      	b.n	8004708 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004586:	d167      	bne.n	8004658 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004588:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800458c:	2b08      	cmp	r3, #8
 800458e:	d828      	bhi.n	80045e2 <UART_SetConfig+0x43e>
 8004590:	a201      	add	r2, pc, #4	@ (adr r2, 8004598 <UART_SetConfig+0x3f4>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045bd 	.word	0x080045bd
 800459c:	080045c5 	.word	0x080045c5
 80045a0:	080045cd 	.word	0x080045cd
 80045a4:	080045e3 	.word	0x080045e3
 80045a8:	080045d3 	.word	0x080045d3
 80045ac:	080045e3 	.word	0x080045e3
 80045b0:	080045e3 	.word	0x080045e3
 80045b4:	080045e3 	.word	0x080045e3
 80045b8:	080045db 	.word	0x080045db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045bc:	f7fe ff04 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 80045c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045c2:	e014      	b.n	80045ee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c4:	f7fe ff16 	bl	80033f4 <HAL_RCC_GetPCLK2Freq>
 80045c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045ca:	e010      	b.n	80045ee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045cc:	4b5a      	ldr	r3, [pc, #360]	@ (8004738 <UART_SetConfig+0x594>)
 80045ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045d0:	e00d      	b.n	80045ee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d2:	f7fe fe8b 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 80045d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045d8:	e009      	b.n	80045ee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045e0:	e005      	b.n	80045ee <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80045ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 8089 	beq.w	8004708 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	4a4e      	ldr	r2, [pc, #312]	@ (8004734 <UART_SetConfig+0x590>)
 80045fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004600:	461a      	mov	r2, r3
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	fbb3 f3f2 	udiv	r3, r3, r2
 8004608:	005a      	lsls	r2, r3, #1
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	085b      	lsrs	r3, r3, #1
 8004610:	441a      	add	r2, r3
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	fbb2 f3f3 	udiv	r3, r2, r3
 800461a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	2b0f      	cmp	r3, #15
 8004620:	d916      	bls.n	8004650 <UART_SetConfig+0x4ac>
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004628:	d212      	bcs.n	8004650 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	b29b      	uxth	r3, r3
 800462e:	f023 030f 	bic.w	r3, r3, #15
 8004632:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	085b      	lsrs	r3, r3, #1
 8004638:	b29b      	uxth	r3, r3
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	b29a      	uxth	r2, r3
 8004640:	8bfb      	ldrh	r3, [r7, #30]
 8004642:	4313      	orrs	r3, r2
 8004644:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	8bfa      	ldrh	r2, [r7, #30]
 800464c:	60da      	str	r2, [r3, #12]
 800464e:	e05b      	b.n	8004708 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004656:	e057      	b.n	8004708 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004658:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800465c:	2b08      	cmp	r3, #8
 800465e:	d828      	bhi.n	80046b2 <UART_SetConfig+0x50e>
 8004660:	a201      	add	r2, pc, #4	@ (adr r2, 8004668 <UART_SetConfig+0x4c4>)
 8004662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004666:	bf00      	nop
 8004668:	0800468d 	.word	0x0800468d
 800466c:	08004695 	.word	0x08004695
 8004670:	0800469d 	.word	0x0800469d
 8004674:	080046b3 	.word	0x080046b3
 8004678:	080046a3 	.word	0x080046a3
 800467c:	080046b3 	.word	0x080046b3
 8004680:	080046b3 	.word	0x080046b3
 8004684:	080046b3 	.word	0x080046b3
 8004688:	080046ab 	.word	0x080046ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800468c:	f7fe fe9c 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 8004690:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004692:	e014      	b.n	80046be <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004694:	f7fe feae 	bl	80033f4 <HAL_RCC_GetPCLK2Freq>
 8004698:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800469a:	e010      	b.n	80046be <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800469c:	4b26      	ldr	r3, [pc, #152]	@ (8004738 <UART_SetConfig+0x594>)
 800469e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046a0:	e00d      	b.n	80046be <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a2:	f7fe fe23 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 80046a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046a8:	e009      	b.n	80046be <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046b0:	e005      	b.n	80046be <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80046bc:	bf00      	nop
    }

    if (pclk != 0U)
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d021      	beq.n	8004708 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004734 <UART_SetConfig+0x590>)
 80046ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046ce:	461a      	mov	r2, r3
 80046d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	085b      	lsrs	r3, r3, #1
 80046dc:	441a      	add	r2, r3
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	2b0f      	cmp	r3, #15
 80046ec:	d909      	bls.n	8004702 <UART_SetConfig+0x55e>
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046f4:	d205      	bcs.n	8004702 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60da      	str	r2, [r3, #12]
 8004700:	e002      	b.n	8004708 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2201      	movs	r2, #1
 800470c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2201      	movs	r2, #1
 8004714:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2200      	movs	r2, #0
 800471c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2200      	movs	r2, #0
 8004722:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004724:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004728:	4618      	mov	r0, r3
 800472a:	3730      	adds	r7, #48	@ 0x30
 800472c:	46bd      	mov	sp, r7
 800472e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004732:	bf00      	nop
 8004734:	08006b24 	.word	0x08006b24
 8004738:	00f42400 	.word	0x00f42400

0800473c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004748:	f003 0308 	and.w	r3, r3, #8
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01a      	beq.n	8004852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004836:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800483a:	d10a      	bne.n	8004852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	605a      	str	r2, [r3, #4]
  }
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b098      	sub	sp, #96	@ 0x60
 8004884:	af02      	add	r7, sp, #8
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004890:	f7fc fdf4 	bl	800147c <HAL_GetTick>
 8004894:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d12f      	bne.n	8004904 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ac:	2200      	movs	r2, #0
 80048ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f88e 	bl	80049d4 <UART_WaitOnFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d022      	beq.n	8004904 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c6:	e853 3f00 	ldrex	r3, [r3]
 80048ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80048de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e6      	bne.n	80048be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e063      	b.n	80049cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b04      	cmp	r3, #4
 8004910:	d149      	bne.n	80049a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004912:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800491a:	2200      	movs	r2, #0
 800491c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f857 	bl	80049d4 <UART_WaitOnFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d03c      	beq.n	80049a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	623b      	str	r3, [r7, #32]
   return(result);
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004940:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800494a:	633b      	str	r3, [r7, #48]	@ 0x30
 800494c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e6      	bne.n	800492c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3308      	adds	r3, #8
 8004964:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	60fb      	str	r3, [r7, #12]
   return(result);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f023 0301 	bic.w	r3, r3, #1
 8004974:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3308      	adds	r3, #8
 800497c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800497e:	61fa      	str	r2, [r7, #28]
 8004980:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	69b9      	ldr	r1, [r7, #24]
 8004984:	69fa      	ldr	r2, [r7, #28]
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	617b      	str	r3, [r7, #20]
   return(result);
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e5      	bne.n	800495e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e012      	b.n	80049cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3758      	adds	r7, #88	@ 0x58
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	4613      	mov	r3, r2
 80049e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e4:	e04f      	b.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d04b      	beq.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ee:	f7fc fd45 	bl	800147c <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d302      	bcc.n	8004a04 <UART_WaitOnFlagUntilTimeout+0x30>
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e04e      	b.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d037      	beq.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b80      	cmp	r3, #128	@ 0x80
 8004a1a:	d034      	beq.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	2b40      	cmp	r3, #64	@ 0x40
 8004a20:	d031      	beq.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d110      	bne.n	8004a52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2208      	movs	r2, #8
 8004a36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f95b 	bl	8004cf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2208      	movs	r2, #8
 8004a42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e029      	b.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a60:	d111      	bne.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 f941 	bl	8004cf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e00f      	b.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69da      	ldr	r2, [r3, #28]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	bf0c      	ite	eq
 8004a96:	2301      	moveq	r3, #1
 8004a98:	2300      	movne	r3, #0
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d0a0      	beq.n	80049e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b0a3      	sub	sp, #140	@ 0x8c
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	4613      	mov	r3, r2
 8004abc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	88fa      	ldrh	r2, [r7, #6]
 8004ac8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	88fa      	ldrh	r2, [r7, #6]
 8004ad0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ae2:	d10e      	bne.n	8004b02 <UART_Start_Receive_IT+0x52>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d105      	bne.n	8004af8 <UART_Start_Receive_IT+0x48>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004af2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004af6:	e02d      	b.n	8004b54 <UART_Start_Receive_IT+0xa4>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	22ff      	movs	r2, #255	@ 0xff
 8004afc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004b00:	e028      	b.n	8004b54 <UART_Start_Receive_IT+0xa4>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10d      	bne.n	8004b26 <UART_Start_Receive_IT+0x76>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d104      	bne.n	8004b1c <UART_Start_Receive_IT+0x6c>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	22ff      	movs	r2, #255	@ 0xff
 8004b16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004b1a:	e01b      	b.n	8004b54 <UART_Start_Receive_IT+0xa4>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	227f      	movs	r2, #127	@ 0x7f
 8004b20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004b24:	e016      	b.n	8004b54 <UART_Start_Receive_IT+0xa4>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b2e:	d10d      	bne.n	8004b4c <UART_Start_Receive_IT+0x9c>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d104      	bne.n	8004b42 <UART_Start_Receive_IT+0x92>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	227f      	movs	r2, #127	@ 0x7f
 8004b3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004b40:	e008      	b.n	8004b54 <UART_Start_Receive_IT+0xa4>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	223f      	movs	r2, #63	@ 0x3f
 8004b46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004b4a:	e003      	b.n	8004b54 <UART_Start_Receive_IT+0xa4>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2222      	movs	r2, #34	@ 0x22
 8004b60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3308      	adds	r3, #8
 8004b6a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b6e:	e853 3f00 	ldrex	r3, [r3]
 8004b72:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004b74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b76:	f043 0301 	orr.w	r3, r3, #1
 8004b7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3308      	adds	r3, #8
 8004b84:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004b88:	673a      	str	r2, [r7, #112]	@ 0x70
 8004b8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004b8e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004b90:	e841 2300 	strex	r3, r2, [r1]
 8004b94:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8004b96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1e3      	bne.n	8004b64 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ba0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ba4:	d14f      	bne.n	8004c46 <UART_Start_Receive_IT+0x196>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004bac:	88fa      	ldrh	r2, [r7, #6]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d349      	bcc.n	8004c46 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bba:	d107      	bne.n	8004bcc <UART_Start_Receive_IT+0x11c>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d103      	bne.n	8004bcc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4a47      	ldr	r2, [pc, #284]	@ (8004ce4 <UART_Start_Receive_IT+0x234>)
 8004bc8:	675a      	str	r2, [r3, #116]	@ 0x74
 8004bca:	e002      	b.n	8004bd2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4a46      	ldr	r2, [pc, #280]	@ (8004ce8 <UART_Start_Receive_IT+0x238>)
 8004bd0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d01a      	beq.n	8004c10 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004be2:	e853 3f00 	ldrex	r3, [r3]
 8004be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bfe:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c00:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004c02:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004c04:	e841 2300 	strex	r3, r2, [r1]
 8004c08:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1e4      	bne.n	8004bda <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3308      	adds	r3, #8
 8004c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3308      	adds	r3, #8
 8004c2e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004c30:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004c32:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004c36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e5      	bne.n	8004c10 <UART_Start_Receive_IT+0x160>
 8004c44:	e046      	b.n	8004cd4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4e:	d107      	bne.n	8004c60 <UART_Start_Receive_IT+0x1b0>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d103      	bne.n	8004c60 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4a24      	ldr	r2, [pc, #144]	@ (8004cec <UART_Start_Receive_IT+0x23c>)
 8004c5c:	675a      	str	r2, [r3, #116]	@ 0x74
 8004c5e:	e002      	b.n	8004c66 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4a23      	ldr	r2, [pc, #140]	@ (8004cf0 <UART_Start_Receive_IT+0x240>)
 8004c64:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d019      	beq.n	8004ca2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004c82:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c8e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e6      	bne.n	8004c6e <UART_Start_Receive_IT+0x1be>
 8004ca0:	e018      	b.n	8004cd4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f043 0320 	orr.w	r3, r3, #32
 8004cb6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cc0:	623b      	str	r3, [r7, #32]
 8004cc2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	69f9      	ldr	r1, [r7, #28]
 8004cc6:	6a3a      	ldr	r2, [r7, #32]
 8004cc8:	e841 2300 	strex	r3, r2, [r1]
 8004ccc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e6      	bne.n	8004ca2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	378c      	adds	r7, #140	@ 0x8c
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	08005511 	.word	0x08005511
 8004ce8:	080051ad 	.word	0x080051ad
 8004cec:	08004ff5 	.word	0x08004ff5
 8004cf0:	08004e3d 	.word	0x08004e3d

08004cf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b095      	sub	sp, #84	@ 0x54
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e6      	bne.n	8004cfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3308      	adds	r3, #8
 8004d34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d44:	f023 0301 	bic.w	r3, r3, #1
 8004d48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3308      	adds	r3, #8
 8004d50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e3      	bne.n	8004d2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d118      	bne.n	8004da0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	e853 3f00 	ldrex	r3, [r3]
 8004d7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f023 0310 	bic.w	r3, r3, #16
 8004d82:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	6979      	ldr	r1, [r7, #20]
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	613b      	str	r3, [r7, #16]
   return(result);
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e6      	bne.n	8004d6e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004db4:	bf00      	nop
 8004db6:	3754      	adds	r7, #84	@ 0x54
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f7ff f9ce 	bl	8004178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ddc:	bf00      	nop
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	e853 3f00 	ldrex	r3, [r3]
 8004df8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	461a      	mov	r2, r3
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	61bb      	str	r3, [r7, #24]
 8004e0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0e:	6979      	ldr	r1, [r7, #20]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	e841 2300 	strex	r3, r2, [r1]
 8004e16:	613b      	str	r3, [r7, #16]
   return(result);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1e6      	bne.n	8004dec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff f999 	bl	8004164 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e32:	bf00      	nop
 8004e34:	3720      	adds	r7, #32
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b09c      	sub	sp, #112	@ 0x70
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004e4a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e54:	2b22      	cmp	r3, #34	@ 0x22
 8004e56:	f040 80be 	bne.w	8004fd6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e64:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004e68:	b2d9      	uxtb	r1, r3
 8004e6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e74:	400a      	ands	r2, r1
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f040 80a1 	bne.w	8004fe6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004eb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004eb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ec2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ec4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ec8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004eca:	e841 2300 	strex	r3, r2, [r1]
 8004ece:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ed0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1e6      	bne.n	8004ea4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3308      	adds	r3, #8
 8004edc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee8:	f023 0301 	bic.w	r3, r3, #1
 8004eec:	667b      	str	r3, [r7, #100]	@ 0x64
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004ef6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ef8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004efc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e5      	bne.n	8004ed6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a33      	ldr	r2, [pc, #204]	@ (8004ff0 <UART_RxISR_8BIT+0x1b4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d01f      	beq.n	8004f68 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d018      	beq.n	8004f68 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	623b      	str	r3, [r7, #32]
   return(result);
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	461a      	mov	r2, r3
 8004f52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f54:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f56:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f5c:	e841 2300 	strex	r3, r2, [r1]
 8004f60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e6      	bne.n	8004f36 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d12e      	bne.n	8004fce <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0310 	bic.w	r3, r3, #16
 8004f8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f94:	61fb      	str	r3, [r7, #28]
 8004f96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	69b9      	ldr	r1, [r7, #24]
 8004f9a:	69fa      	ldr	r2, [r7, #28]
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e6      	bne.n	8004f76 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	2b10      	cmp	r3, #16
 8004fb4:	d103      	bne.n	8004fbe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2210      	movs	r2, #16
 8004fbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7ff f8e0 	bl	800418c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fcc:	e00b      	b.n	8004fe6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7fb fde0 	bl	8000b94 <HAL_UART_RxCpltCallback>
}
 8004fd4:	e007      	b.n	8004fe6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	699a      	ldr	r2, [r3, #24]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0208 	orr.w	r2, r2, #8
 8004fe4:	619a      	str	r2, [r3, #24]
}
 8004fe6:	bf00      	nop
 8004fe8:	3770      	adds	r7, #112	@ 0x70
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40008000 	.word	0x40008000

08004ff4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b09c      	sub	sp, #112	@ 0x70
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005002:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800500c:	2b22      	cmp	r3, #34	@ 0x22
 800500e:	f040 80be 	bne.w	800518e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005018:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005020:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005022:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005026:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800502a:	4013      	ands	r3, r2
 800502c:	b29a      	uxth	r2, r3
 800502e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005030:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005036:	1c9a      	adds	r2, r3, #2
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	f040 80a1 	bne.w	800519e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005064:	e853 3f00 	ldrex	r3, [r3]
 8005068:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800506a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800506c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005070:	667b      	str	r3, [r7, #100]	@ 0x64
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	461a      	mov	r2, r3
 8005078:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800507a:	657b      	str	r3, [r7, #84]	@ 0x54
 800507c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005080:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005082:	e841 2300 	strex	r3, r2, [r1]
 8005086:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1e6      	bne.n	800505c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3308      	adds	r3, #8
 8005094:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800509e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a0:	f023 0301 	bic.w	r3, r3, #1
 80050a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3308      	adds	r3, #8
 80050ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80050ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80050b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050b6:	e841 2300 	strex	r3, r2, [r1]
 80050ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1e5      	bne.n	800508e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2220      	movs	r2, #32
 80050c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a33      	ldr	r2, [pc, #204]	@ (80051a8 <UART_RxISR_16BIT+0x1b4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d01f      	beq.n	8005120 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d018      	beq.n	8005120 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005102:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800510c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800510e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e6      	bne.n	80050ee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d12e      	bne.n	8005186 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	60bb      	str	r3, [r7, #8]
   return(result);
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f023 0310 	bic.w	r3, r3, #16
 8005142:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	6979      	ldr	r1, [r7, #20]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	613b      	str	r3, [r7, #16]
   return(result);
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e6      	bne.n	800512e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b10      	cmp	r3, #16
 800516c:	d103      	bne.n	8005176 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2210      	movs	r2, #16
 8005174:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800517c:	4619      	mov	r1, r3
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7ff f804 	bl	800418c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005184:	e00b      	b.n	800519e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fb fd04 	bl	8000b94 <HAL_UART_RxCpltCallback>
}
 800518c:	e007      	b.n	800519e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699a      	ldr	r2, [r3, #24]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0208 	orr.w	r2, r2, #8
 800519c:	619a      	str	r2, [r3, #24]
}
 800519e:	bf00      	nop
 80051a0:	3770      	adds	r7, #112	@ 0x70
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40008000 	.word	0x40008000

080051ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b0ac      	sub	sp, #176	@ 0xb0
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80051ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051e2:	2b22      	cmp	r3, #34	@ 0x22
 80051e4:	f040 8183 	bne.w	80054ee <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80051ee:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80051f2:	e126      	b.n	8005442 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051fe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8005202:	b2d9      	uxtb	r1, r3
 8005204:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8005208:	b2da      	uxtb	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520e:	400a      	ands	r2, r1
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005224:	b29b      	uxth	r3, r3
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800523a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	2b00      	cmp	r3, #0
 8005244:	d053      	beq.n	80052ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d011      	beq.n	8005276 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005252:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00b      	beq.n	8005276 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2201      	movs	r2, #1
 8005264:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800526c:	f043 0201 	orr.w	r2, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d011      	beq.n	80052a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00b      	beq.n	80052a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2202      	movs	r2, #2
 8005294:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800529c:	f043 0204 	orr.w	r2, r3, #4
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d011      	beq.n	80052d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80052b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00b      	beq.n	80052d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2204      	movs	r2, #4
 80052c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052cc:	f043 0202 	orr.w	r2, r3, #2
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d006      	beq.n	80052ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7fe ff49 	bl	8004178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f040 80a3 	bne.w	8005442 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800530a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800530c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	461a      	mov	r2, r3
 800531a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800531e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005320:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005324:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005326:	e841 2300 	strex	r3, r2, [r1]
 800532a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800532c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1e4      	bne.n	80052fc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3308      	adds	r3, #8
 8005338:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800533c:	e853 3f00 	ldrex	r3, [r3]
 8005340:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8005342:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005344:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005348:	f023 0301 	bic.w	r3, r3, #1
 800534c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3308      	adds	r3, #8
 8005356:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800535a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800535c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005360:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005368:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e1      	bne.n	8005332 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a60      	ldr	r2, [pc, #384]	@ (8005508 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d021      	beq.n	80053d0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d01a      	beq.n	80053d0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053a2:	e853 3f00 	ldrex	r3, [r3]
 80053a6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80053a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	461a      	mov	r2, r3
 80053b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80053be:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80053c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80053ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e4      	bne.n	800539a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d130      	bne.n	800543a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e6:	e853 3f00 	ldrex	r3, [r3]
 80053ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ee:	f023 0310 	bic.w	r3, r3, #16
 80053f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005400:	643b      	str	r3, [r7, #64]	@ 0x40
 8005402:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005406:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800540e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e4      	bne.n	80053de <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	2b10      	cmp	r3, #16
 8005420:	d103      	bne.n	800542a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2210      	movs	r2, #16
 8005428:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005430:	4619      	mov	r1, r3
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fe feaa 	bl	800418c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005438:	e00e      	b.n	8005458 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fb fbaa 	bl	8000b94 <HAL_UART_RxCpltCallback>
        break;
 8005440:	e00a      	b.n	8005458 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005442:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8005446:	2b00      	cmp	r3, #0
 8005448:	d006      	beq.n	8005458 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800544a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800544e:	f003 0320 	and.w	r3, r3, #32
 8005452:	2b00      	cmp	r3, #0
 8005454:	f47f aece 	bne.w	80051f4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800545e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005462:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005466:	2b00      	cmp	r3, #0
 8005468:	d049      	beq.n	80054fe <UART_RxISR_8BIT_FIFOEN+0x352>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005470:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8005474:	429a      	cmp	r2, r3
 8005476:	d242      	bcs.n	80054fe <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3308      	adds	r3, #8
 800547e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	e853 3f00 	ldrex	r3, [r3]
 8005486:	61fb      	str	r3, [r7, #28]
   return(result);
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800548e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3308      	adds	r3, #8
 8005498:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800549c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800549e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054a4:	e841 2300 	strex	r3, r2, [r1]
 80054a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1e3      	bne.n	8005478 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a16      	ldr	r2, [pc, #88]	@ (800550c <UART_RxISR_8BIT_FIFOEN+0x360>)
 80054b4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	e853 3f00 	ldrex	r3, [r3]
 80054c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f043 0320 	orr.w	r3, r3, #32
 80054ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6979      	ldr	r1, [r7, #20]
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	613b      	str	r3, [r7, #16]
   return(result);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e4      	bne.n	80054b6 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054ec:	e007      	b.n	80054fe <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	699a      	ldr	r2, [r3, #24]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f042 0208 	orr.w	r2, r2, #8
 80054fc:	619a      	str	r2, [r3, #24]
}
 80054fe:	bf00      	nop
 8005500:	37b0      	adds	r7, #176	@ 0xb0
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	40008000 	.word	0x40008000
 800550c:	08004e3d 	.word	0x08004e3d

08005510 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b0ae      	sub	sp, #184	@ 0xb8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800551e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005546:	2b22      	cmp	r3, #34	@ 0x22
 8005548:	f040 8187 	bne.w	800585a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005552:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005556:	e12a      	b.n	80057ae <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005566:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800556a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800556e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8005572:	4013      	ands	r3, r2
 8005574:	b29a      	uxth	r2, r3
 8005576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800557a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005580:	1c9a      	adds	r2, r3, #2
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800558c:	b29b      	uxth	r3, r3
 800558e:	3b01      	subs	r3, #1
 8005590:	b29a      	uxth	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80055a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d053      	beq.n	8005656 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d011      	beq.n	80055de <UART_RxISR_16BIT_FIFOEN+0xce>
 80055ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00b      	beq.n	80055de <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2201      	movs	r2, #1
 80055cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d4:	f043 0201 	orr.w	r2, r3, #1
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d011      	beq.n	800560e <UART_RxISR_16BIT_FIFOEN+0xfe>
 80055ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00b      	beq.n	800560e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2202      	movs	r2, #2
 80055fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005604:	f043 0204 	orr.w	r2, r3, #4
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800560e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	d011      	beq.n	800563e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800561a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00b      	beq.n	800563e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2204      	movs	r2, #4
 800562c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005634:	f043 0202 	orr.w	r2, r3, #2
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005644:	2b00      	cmp	r3, #0
 8005646:	d006      	beq.n	8005656 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7fe fd95 	bl	8004178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	f040 80a5 	bne.w	80057ae <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005672:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005678:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005686:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800568a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800568e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005698:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e2      	bne.n	8005664 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3308      	adds	r3, #8
 80056a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056b4:	f023 0301 	bic.w	r3, r3, #1
 80056b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3308      	adds	r3, #8
 80056c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80056c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80056cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80056d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e1      	bne.n	800569e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2220      	movs	r2, #32
 80056de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a60      	ldr	r2, [pc, #384]	@ (8005874 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d021      	beq.n	800573c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d01a      	beq.n	800573c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005714:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005716:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800571a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	461a      	mov	r2, r3
 8005724:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005728:	65bb      	str	r3, [r7, #88]	@ 0x58
 800572a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800572e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005736:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e4      	bne.n	8005706 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005740:	2b01      	cmp	r3, #1
 8005742:	d130      	bne.n	80057a6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800575a:	f023 0310 	bic.w	r3, r3, #16
 800575e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800576c:	647b      	str	r3, [r7, #68]	@ 0x44
 800576e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005772:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800577a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e4      	bne.n	800574a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	f003 0310 	and.w	r3, r3, #16
 800578a:	2b10      	cmp	r3, #16
 800578c:	d103      	bne.n	8005796 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2210      	movs	r2, #16
 8005794:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800579c:	4619      	mov	r1, r3
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fe fcf4 	bl	800418c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80057a4:	e00e      	b.n	80057c4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fb f9f4 	bl	8000b94 <HAL_UART_RxCpltCallback>
        break;
 80057ac:	e00a      	b.n	80057c4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80057ae:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d006      	beq.n	80057c4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80057b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f47f aeca 	bne.w	8005558 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80057ca:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80057ce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d049      	beq.n	800586a <UART_RxISR_16BIT_FIFOEN+0x35a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80057dc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d242      	bcs.n	800586a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3308      	adds	r3, #8
 80057ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	623b      	str	r3, [r7, #32]
   return(result);
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3308      	adds	r3, #8
 8005804:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005808:	633a      	str	r2, [r7, #48]	@ 0x30
 800580a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800580e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e3      	bne.n	80057e4 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a16      	ldr	r2, [pc, #88]	@ (8005878 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8005820:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	e853 3f00 	ldrex	r3, [r3]
 800582e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f043 0320 	orr.w	r3, r3, #32
 8005836:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	69b9      	ldr	r1, [r7, #24]
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	617b      	str	r3, [r7, #20]
   return(result);
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e4      	bne.n	8005822 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005858:	e007      	b.n	800586a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	699a      	ldr	r2, [r3, #24]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0208 	orr.w	r2, r2, #8
 8005868:	619a      	str	r2, [r3, #24]
}
 800586a:	bf00      	nop
 800586c:	37b8      	adds	r7, #184	@ 0xb8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40008000 	.word	0x40008000
 8005878:	08004ff5 	.word	0x08004ff5

0800587c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d101      	bne.n	80058ce <HAL_UARTEx_DisableFifoMode+0x16>
 80058ca:	2302      	movs	r3, #2
 80058cc:	e027      	b.n	800591e <HAL_UARTEx_DisableFifoMode+0x66>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2224      	movs	r2, #36	@ 0x24
 80058da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0201 	bic.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80058fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2220      	movs	r2, #32
 8005910:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800593e:	2302      	movs	r3, #2
 8005940:	e02d      	b.n	800599e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2224      	movs	r2, #36	@ 0x24
 800594e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0201 	bic.w	r2, r2, #1
 8005968:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f850 	bl	8005a24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2220      	movs	r2, #32
 8005990:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d101      	bne.n	80059be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059ba:	2302      	movs	r3, #2
 80059bc:	e02d      	b.n	8005a1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2224      	movs	r2, #36	@ 0x24
 80059ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0201 	bic.w	r2, r2, #1
 80059e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f812 	bl	8005a24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d108      	bne.n	8005a46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a44:	e031      	b.n	8005aaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a46:	2308      	movs	r3, #8
 8005a48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a4a:	2308      	movs	r3, #8
 8005a4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	0e5b      	lsrs	r3, r3, #25
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	0f5b      	lsrs	r3, r3, #29
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a6e:	7bbb      	ldrb	r3, [r7, #14]
 8005a70:	7b3a      	ldrb	r2, [r7, #12]
 8005a72:	4911      	ldr	r1, [pc, #68]	@ (8005ab8 <UARTEx_SetNbDataToProcess+0x94>)
 8005a74:	5c8a      	ldrb	r2, [r1, r2]
 8005a76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a7a:	7b3a      	ldrb	r2, [r7, #12]
 8005a7c:	490f      	ldr	r1, [pc, #60]	@ (8005abc <UARTEx_SetNbDataToProcess+0x98>)
 8005a7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a80:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
 8005a8e:	7b7a      	ldrb	r2, [r7, #13]
 8005a90:	4909      	ldr	r1, [pc, #36]	@ (8005ab8 <UARTEx_SetNbDataToProcess+0x94>)
 8005a92:	5c8a      	ldrb	r2, [r1, r2]
 8005a94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a98:	7b7a      	ldrb	r2, [r7, #13]
 8005a9a:	4908      	ldr	r1, [pc, #32]	@ (8005abc <UARTEx_SetNbDataToProcess+0x98>)
 8005a9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	08006b3c 	.word	0x08006b3c
 8005abc:	08006b44 	.word	0x08006b44

08005ac0 <atoi>:
 8005ac0:	220a      	movs	r2, #10
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	f000 b87a 	b.w	8005bbc <strtol>

08005ac8 <_strtol_l.constprop.0>:
 8005ac8:	2b24      	cmp	r3, #36	@ 0x24
 8005aca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ace:	4686      	mov	lr, r0
 8005ad0:	4690      	mov	r8, r2
 8005ad2:	d801      	bhi.n	8005ad8 <_strtol_l.constprop.0+0x10>
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d106      	bne.n	8005ae6 <_strtol_l.constprop.0+0x1e>
 8005ad8:	f000 f9f2 	bl	8005ec0 <__errno>
 8005adc:	2316      	movs	r3, #22
 8005ade:	6003      	str	r3, [r0, #0]
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae6:	4834      	ldr	r0, [pc, #208]	@ (8005bb8 <_strtol_l.constprop.0+0xf0>)
 8005ae8:	460d      	mov	r5, r1
 8005aea:	462a      	mov	r2, r5
 8005aec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005af0:	5d06      	ldrb	r6, [r0, r4]
 8005af2:	f016 0608 	ands.w	r6, r6, #8
 8005af6:	d1f8      	bne.n	8005aea <_strtol_l.constprop.0+0x22>
 8005af8:	2c2d      	cmp	r4, #45	@ 0x2d
 8005afa:	d12d      	bne.n	8005b58 <_strtol_l.constprop.0+0x90>
 8005afc:	782c      	ldrb	r4, [r5, #0]
 8005afe:	2601      	movs	r6, #1
 8005b00:	1c95      	adds	r5, r2, #2
 8005b02:	f033 0210 	bics.w	r2, r3, #16
 8005b06:	d109      	bne.n	8005b1c <_strtol_l.constprop.0+0x54>
 8005b08:	2c30      	cmp	r4, #48	@ 0x30
 8005b0a:	d12a      	bne.n	8005b62 <_strtol_l.constprop.0+0x9a>
 8005b0c:	782a      	ldrb	r2, [r5, #0]
 8005b0e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005b12:	2a58      	cmp	r2, #88	@ 0x58
 8005b14:	d125      	bne.n	8005b62 <_strtol_l.constprop.0+0x9a>
 8005b16:	786c      	ldrb	r4, [r5, #1]
 8005b18:	2310      	movs	r3, #16
 8005b1a:	3502      	adds	r5, #2
 8005b1c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005b20:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005b24:	2200      	movs	r2, #0
 8005b26:	fbbc f9f3 	udiv	r9, ip, r3
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	fb03 ca19 	mls	sl, r3, r9, ip
 8005b30:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005b34:	2f09      	cmp	r7, #9
 8005b36:	d81b      	bhi.n	8005b70 <_strtol_l.constprop.0+0xa8>
 8005b38:	463c      	mov	r4, r7
 8005b3a:	42a3      	cmp	r3, r4
 8005b3c:	dd27      	ble.n	8005b8e <_strtol_l.constprop.0+0xc6>
 8005b3e:	1c57      	adds	r7, r2, #1
 8005b40:	d007      	beq.n	8005b52 <_strtol_l.constprop.0+0x8a>
 8005b42:	4581      	cmp	r9, r0
 8005b44:	d320      	bcc.n	8005b88 <_strtol_l.constprop.0+0xc0>
 8005b46:	d101      	bne.n	8005b4c <_strtol_l.constprop.0+0x84>
 8005b48:	45a2      	cmp	sl, r4
 8005b4a:	db1d      	blt.n	8005b88 <_strtol_l.constprop.0+0xc0>
 8005b4c:	fb00 4003 	mla	r0, r0, r3, r4
 8005b50:	2201      	movs	r2, #1
 8005b52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b56:	e7eb      	b.n	8005b30 <_strtol_l.constprop.0+0x68>
 8005b58:	2c2b      	cmp	r4, #43	@ 0x2b
 8005b5a:	bf04      	itt	eq
 8005b5c:	782c      	ldrbeq	r4, [r5, #0]
 8005b5e:	1c95      	addeq	r5, r2, #2
 8005b60:	e7cf      	b.n	8005b02 <_strtol_l.constprop.0+0x3a>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1da      	bne.n	8005b1c <_strtol_l.constprop.0+0x54>
 8005b66:	2c30      	cmp	r4, #48	@ 0x30
 8005b68:	bf0c      	ite	eq
 8005b6a:	2308      	moveq	r3, #8
 8005b6c:	230a      	movne	r3, #10
 8005b6e:	e7d5      	b.n	8005b1c <_strtol_l.constprop.0+0x54>
 8005b70:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005b74:	2f19      	cmp	r7, #25
 8005b76:	d801      	bhi.n	8005b7c <_strtol_l.constprop.0+0xb4>
 8005b78:	3c37      	subs	r4, #55	@ 0x37
 8005b7a:	e7de      	b.n	8005b3a <_strtol_l.constprop.0+0x72>
 8005b7c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005b80:	2f19      	cmp	r7, #25
 8005b82:	d804      	bhi.n	8005b8e <_strtol_l.constprop.0+0xc6>
 8005b84:	3c57      	subs	r4, #87	@ 0x57
 8005b86:	e7d8      	b.n	8005b3a <_strtol_l.constprop.0+0x72>
 8005b88:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8c:	e7e1      	b.n	8005b52 <_strtol_l.constprop.0+0x8a>
 8005b8e:	1c53      	adds	r3, r2, #1
 8005b90:	d108      	bne.n	8005ba4 <_strtol_l.constprop.0+0xdc>
 8005b92:	2322      	movs	r3, #34	@ 0x22
 8005b94:	f8ce 3000 	str.w	r3, [lr]
 8005b98:	4660      	mov	r0, ip
 8005b9a:	f1b8 0f00 	cmp.w	r8, #0
 8005b9e:	d0a0      	beq.n	8005ae2 <_strtol_l.constprop.0+0x1a>
 8005ba0:	1e69      	subs	r1, r5, #1
 8005ba2:	e006      	b.n	8005bb2 <_strtol_l.constprop.0+0xea>
 8005ba4:	b106      	cbz	r6, 8005ba8 <_strtol_l.constprop.0+0xe0>
 8005ba6:	4240      	negs	r0, r0
 8005ba8:	f1b8 0f00 	cmp.w	r8, #0
 8005bac:	d099      	beq.n	8005ae2 <_strtol_l.constprop.0+0x1a>
 8005bae:	2a00      	cmp	r2, #0
 8005bb0:	d1f6      	bne.n	8005ba0 <_strtol_l.constprop.0+0xd8>
 8005bb2:	f8c8 1000 	str.w	r1, [r8]
 8005bb6:	e794      	b.n	8005ae2 <_strtol_l.constprop.0+0x1a>
 8005bb8:	08006b4d 	.word	0x08006b4d

08005bbc <strtol>:
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	460a      	mov	r2, r1
 8005bc0:	4601      	mov	r1, r0
 8005bc2:	4802      	ldr	r0, [pc, #8]	@ (8005bcc <strtol+0x10>)
 8005bc4:	6800      	ldr	r0, [r0, #0]
 8005bc6:	f7ff bf7f 	b.w	8005ac8 <_strtol_l.constprop.0>
 8005bca:	bf00      	nop
 8005bcc:	2000002c 	.word	0x2000002c

08005bd0 <std>:
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	b510      	push	{r4, lr}
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	e9c0 3300 	strd	r3, r3, [r0]
 8005bda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bde:	6083      	str	r3, [r0, #8]
 8005be0:	8181      	strh	r1, [r0, #12]
 8005be2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005be4:	81c2      	strh	r2, [r0, #14]
 8005be6:	6183      	str	r3, [r0, #24]
 8005be8:	4619      	mov	r1, r3
 8005bea:	2208      	movs	r2, #8
 8005bec:	305c      	adds	r0, #92	@ 0x5c
 8005bee:	f000 f906 	bl	8005dfe <memset>
 8005bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c28 <std+0x58>)
 8005bf4:	6263      	str	r3, [r4, #36]	@ 0x24
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c2c <std+0x5c>)
 8005bf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005c30 <std+0x60>)
 8005bfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005c34 <std+0x64>)
 8005c00:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c02:	4b0d      	ldr	r3, [pc, #52]	@ (8005c38 <std+0x68>)
 8005c04:	6224      	str	r4, [r4, #32]
 8005c06:	429c      	cmp	r4, r3
 8005c08:	d006      	beq.n	8005c18 <std+0x48>
 8005c0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c0e:	4294      	cmp	r4, r2
 8005c10:	d002      	beq.n	8005c18 <std+0x48>
 8005c12:	33d0      	adds	r3, #208	@ 0xd0
 8005c14:	429c      	cmp	r4, r3
 8005c16:	d105      	bne.n	8005c24 <std+0x54>
 8005c18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c20:	f000 b978 	b.w	8005f14 <__retarget_lock_init_recursive>
 8005c24:	bd10      	pop	{r4, pc}
 8005c26:	bf00      	nop
 8005c28:	08005d79 	.word	0x08005d79
 8005c2c:	08005d9b 	.word	0x08005d9b
 8005c30:	08005dd3 	.word	0x08005dd3
 8005c34:	08005df7 	.word	0x08005df7
 8005c38:	20000264 	.word	0x20000264

08005c3c <stdio_exit_handler>:
 8005c3c:	4a02      	ldr	r2, [pc, #8]	@ (8005c48 <stdio_exit_handler+0xc>)
 8005c3e:	4903      	ldr	r1, [pc, #12]	@ (8005c4c <stdio_exit_handler+0x10>)
 8005c40:	4803      	ldr	r0, [pc, #12]	@ (8005c50 <stdio_exit_handler+0x14>)
 8005c42:	f000 b869 	b.w	8005d18 <_fwalk_sglue>
 8005c46:	bf00      	nop
 8005c48:	20000020 	.word	0x20000020
 8005c4c:	080067b5 	.word	0x080067b5
 8005c50:	20000030 	.word	0x20000030

08005c54 <cleanup_stdio>:
 8005c54:	6841      	ldr	r1, [r0, #4]
 8005c56:	4b0c      	ldr	r3, [pc, #48]	@ (8005c88 <cleanup_stdio+0x34>)
 8005c58:	4299      	cmp	r1, r3
 8005c5a:	b510      	push	{r4, lr}
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	d001      	beq.n	8005c64 <cleanup_stdio+0x10>
 8005c60:	f000 fda8 	bl	80067b4 <_fflush_r>
 8005c64:	68a1      	ldr	r1, [r4, #8]
 8005c66:	4b09      	ldr	r3, [pc, #36]	@ (8005c8c <cleanup_stdio+0x38>)
 8005c68:	4299      	cmp	r1, r3
 8005c6a:	d002      	beq.n	8005c72 <cleanup_stdio+0x1e>
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f000 fda1 	bl	80067b4 <_fflush_r>
 8005c72:	68e1      	ldr	r1, [r4, #12]
 8005c74:	4b06      	ldr	r3, [pc, #24]	@ (8005c90 <cleanup_stdio+0x3c>)
 8005c76:	4299      	cmp	r1, r3
 8005c78:	d004      	beq.n	8005c84 <cleanup_stdio+0x30>
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c80:	f000 bd98 	b.w	80067b4 <_fflush_r>
 8005c84:	bd10      	pop	{r4, pc}
 8005c86:	bf00      	nop
 8005c88:	20000264 	.word	0x20000264
 8005c8c:	200002cc 	.word	0x200002cc
 8005c90:	20000334 	.word	0x20000334

08005c94 <global_stdio_init.part.0>:
 8005c94:	b510      	push	{r4, lr}
 8005c96:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc4 <global_stdio_init.part.0+0x30>)
 8005c98:	4c0b      	ldr	r4, [pc, #44]	@ (8005cc8 <global_stdio_init.part.0+0x34>)
 8005c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8005ccc <global_stdio_init.part.0+0x38>)
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2104      	movs	r1, #4
 8005ca4:	f7ff ff94 	bl	8005bd0 <std>
 8005ca8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005cac:	2201      	movs	r2, #1
 8005cae:	2109      	movs	r1, #9
 8005cb0:	f7ff ff8e 	bl	8005bd0 <std>
 8005cb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005cb8:	2202      	movs	r2, #2
 8005cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cbe:	2112      	movs	r1, #18
 8005cc0:	f7ff bf86 	b.w	8005bd0 <std>
 8005cc4:	2000039c 	.word	0x2000039c
 8005cc8:	20000264 	.word	0x20000264
 8005ccc:	08005c3d 	.word	0x08005c3d

08005cd0 <__sfp_lock_acquire>:
 8005cd0:	4801      	ldr	r0, [pc, #4]	@ (8005cd8 <__sfp_lock_acquire+0x8>)
 8005cd2:	f000 b920 	b.w	8005f16 <__retarget_lock_acquire_recursive>
 8005cd6:	bf00      	nop
 8005cd8:	200003a5 	.word	0x200003a5

08005cdc <__sfp_lock_release>:
 8005cdc:	4801      	ldr	r0, [pc, #4]	@ (8005ce4 <__sfp_lock_release+0x8>)
 8005cde:	f000 b91b 	b.w	8005f18 <__retarget_lock_release_recursive>
 8005ce2:	bf00      	nop
 8005ce4:	200003a5 	.word	0x200003a5

08005ce8 <__sinit>:
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	4604      	mov	r4, r0
 8005cec:	f7ff fff0 	bl	8005cd0 <__sfp_lock_acquire>
 8005cf0:	6a23      	ldr	r3, [r4, #32]
 8005cf2:	b11b      	cbz	r3, 8005cfc <__sinit+0x14>
 8005cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf8:	f7ff bff0 	b.w	8005cdc <__sfp_lock_release>
 8005cfc:	4b04      	ldr	r3, [pc, #16]	@ (8005d10 <__sinit+0x28>)
 8005cfe:	6223      	str	r3, [r4, #32]
 8005d00:	4b04      	ldr	r3, [pc, #16]	@ (8005d14 <__sinit+0x2c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1f5      	bne.n	8005cf4 <__sinit+0xc>
 8005d08:	f7ff ffc4 	bl	8005c94 <global_stdio_init.part.0>
 8005d0c:	e7f2      	b.n	8005cf4 <__sinit+0xc>
 8005d0e:	bf00      	nop
 8005d10:	08005c55 	.word	0x08005c55
 8005d14:	2000039c 	.word	0x2000039c

08005d18 <_fwalk_sglue>:
 8005d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d1c:	4607      	mov	r7, r0
 8005d1e:	4688      	mov	r8, r1
 8005d20:	4614      	mov	r4, r2
 8005d22:	2600      	movs	r6, #0
 8005d24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d28:	f1b9 0901 	subs.w	r9, r9, #1
 8005d2c:	d505      	bpl.n	8005d3a <_fwalk_sglue+0x22>
 8005d2e:	6824      	ldr	r4, [r4, #0]
 8005d30:	2c00      	cmp	r4, #0
 8005d32:	d1f7      	bne.n	8005d24 <_fwalk_sglue+0xc>
 8005d34:	4630      	mov	r0, r6
 8005d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d3a:	89ab      	ldrh	r3, [r5, #12]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d907      	bls.n	8005d50 <_fwalk_sglue+0x38>
 8005d40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d44:	3301      	adds	r3, #1
 8005d46:	d003      	beq.n	8005d50 <_fwalk_sglue+0x38>
 8005d48:	4629      	mov	r1, r5
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	47c0      	blx	r8
 8005d4e:	4306      	orrs	r6, r0
 8005d50:	3568      	adds	r5, #104	@ 0x68
 8005d52:	e7e9      	b.n	8005d28 <_fwalk_sglue+0x10>

08005d54 <iprintf>:
 8005d54:	b40f      	push	{r0, r1, r2, r3}
 8005d56:	b507      	push	{r0, r1, r2, lr}
 8005d58:	4906      	ldr	r1, [pc, #24]	@ (8005d74 <iprintf+0x20>)
 8005d5a:	ab04      	add	r3, sp, #16
 8005d5c:	6808      	ldr	r0, [r1, #0]
 8005d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d62:	6881      	ldr	r1, [r0, #8]
 8005d64:	9301      	str	r3, [sp, #4]
 8005d66:	f000 f9fb 	bl	8006160 <_vfiprintf_r>
 8005d6a:	b003      	add	sp, #12
 8005d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d70:	b004      	add	sp, #16
 8005d72:	4770      	bx	lr
 8005d74:	2000002c 	.word	0x2000002c

08005d78 <__sread>:
 8005d78:	b510      	push	{r4, lr}
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d80:	f000 f87a 	bl	8005e78 <_read_r>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	bfab      	itete	ge
 8005d88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d8a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d8c:	181b      	addge	r3, r3, r0
 8005d8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d92:	bfac      	ite	ge
 8005d94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d96:	81a3      	strhlt	r3, [r4, #12]
 8005d98:	bd10      	pop	{r4, pc}

08005d9a <__swrite>:
 8005d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9e:	461f      	mov	r7, r3
 8005da0:	898b      	ldrh	r3, [r1, #12]
 8005da2:	05db      	lsls	r3, r3, #23
 8005da4:	4605      	mov	r5, r0
 8005da6:	460c      	mov	r4, r1
 8005da8:	4616      	mov	r6, r2
 8005daa:	d505      	bpl.n	8005db8 <__swrite+0x1e>
 8005dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db0:	2302      	movs	r3, #2
 8005db2:	2200      	movs	r2, #0
 8005db4:	f000 f84e 	bl	8005e54 <_lseek_r>
 8005db8:	89a3      	ldrh	r3, [r4, #12]
 8005dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dc2:	81a3      	strh	r3, [r4, #12]
 8005dc4:	4632      	mov	r2, r6
 8005dc6:	463b      	mov	r3, r7
 8005dc8:	4628      	mov	r0, r5
 8005dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dce:	f000 b865 	b.w	8005e9c <_write_r>

08005dd2 <__sseek>:
 8005dd2:	b510      	push	{r4, lr}
 8005dd4:	460c      	mov	r4, r1
 8005dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dda:	f000 f83b 	bl	8005e54 <_lseek_r>
 8005dde:	1c43      	adds	r3, r0, #1
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	bf15      	itete	ne
 8005de4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005de6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005dea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005dee:	81a3      	strheq	r3, [r4, #12]
 8005df0:	bf18      	it	ne
 8005df2:	81a3      	strhne	r3, [r4, #12]
 8005df4:	bd10      	pop	{r4, pc}

08005df6 <__sclose>:
 8005df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dfa:	f000 b81b 	b.w	8005e34 <_close_r>

08005dfe <memset>:
 8005dfe:	4402      	add	r2, r0
 8005e00:	4603      	mov	r3, r0
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d100      	bne.n	8005e08 <memset+0xa>
 8005e06:	4770      	bx	lr
 8005e08:	f803 1b01 	strb.w	r1, [r3], #1
 8005e0c:	e7f9      	b.n	8005e02 <memset+0x4>

08005e0e <strncmp>:
 8005e0e:	b510      	push	{r4, lr}
 8005e10:	b16a      	cbz	r2, 8005e2e <strncmp+0x20>
 8005e12:	3901      	subs	r1, #1
 8005e14:	1884      	adds	r4, r0, r2
 8005e16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e1a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d103      	bne.n	8005e2a <strncmp+0x1c>
 8005e22:	42a0      	cmp	r0, r4
 8005e24:	d001      	beq.n	8005e2a <strncmp+0x1c>
 8005e26:	2a00      	cmp	r2, #0
 8005e28:	d1f5      	bne.n	8005e16 <strncmp+0x8>
 8005e2a:	1ad0      	subs	r0, r2, r3
 8005e2c:	bd10      	pop	{r4, pc}
 8005e2e:	4610      	mov	r0, r2
 8005e30:	e7fc      	b.n	8005e2c <strncmp+0x1e>
	...

08005e34 <_close_r>:
 8005e34:	b538      	push	{r3, r4, r5, lr}
 8005e36:	4d06      	ldr	r5, [pc, #24]	@ (8005e50 <_close_r+0x1c>)
 8005e38:	2300      	movs	r3, #0
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	4608      	mov	r0, r1
 8005e3e:	602b      	str	r3, [r5, #0]
 8005e40:	f7fa ffb2 	bl	8000da8 <_close>
 8005e44:	1c43      	adds	r3, r0, #1
 8005e46:	d102      	bne.n	8005e4e <_close_r+0x1a>
 8005e48:	682b      	ldr	r3, [r5, #0]
 8005e4a:	b103      	cbz	r3, 8005e4e <_close_r+0x1a>
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	bd38      	pop	{r3, r4, r5, pc}
 8005e50:	200003a0 	.word	0x200003a0

08005e54 <_lseek_r>:
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	4d07      	ldr	r5, [pc, #28]	@ (8005e74 <_lseek_r+0x20>)
 8005e58:	4604      	mov	r4, r0
 8005e5a:	4608      	mov	r0, r1
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	2200      	movs	r2, #0
 8005e60:	602a      	str	r2, [r5, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	f7fa ffc7 	bl	8000df6 <_lseek>
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	d102      	bne.n	8005e72 <_lseek_r+0x1e>
 8005e6c:	682b      	ldr	r3, [r5, #0]
 8005e6e:	b103      	cbz	r3, 8005e72 <_lseek_r+0x1e>
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
 8005e74:	200003a0 	.word	0x200003a0

08005e78 <_read_r>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	4d07      	ldr	r5, [pc, #28]	@ (8005e98 <_read_r+0x20>)
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	4608      	mov	r0, r1
 8005e80:	4611      	mov	r1, r2
 8005e82:	2200      	movs	r2, #0
 8005e84:	602a      	str	r2, [r5, #0]
 8005e86:	461a      	mov	r2, r3
 8005e88:	f7fa ff55 	bl	8000d36 <_read>
 8005e8c:	1c43      	adds	r3, r0, #1
 8005e8e:	d102      	bne.n	8005e96 <_read_r+0x1e>
 8005e90:	682b      	ldr	r3, [r5, #0]
 8005e92:	b103      	cbz	r3, 8005e96 <_read_r+0x1e>
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	bd38      	pop	{r3, r4, r5, pc}
 8005e98:	200003a0 	.word	0x200003a0

08005e9c <_write_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	4d07      	ldr	r5, [pc, #28]	@ (8005ebc <_write_r+0x20>)
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	4608      	mov	r0, r1
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	602a      	str	r2, [r5, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f7fa ff60 	bl	8000d70 <_write>
 8005eb0:	1c43      	adds	r3, r0, #1
 8005eb2:	d102      	bne.n	8005eba <_write_r+0x1e>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	b103      	cbz	r3, 8005eba <_write_r+0x1e>
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	200003a0 	.word	0x200003a0

08005ec0 <__errno>:
 8005ec0:	4b01      	ldr	r3, [pc, #4]	@ (8005ec8 <__errno+0x8>)
 8005ec2:	6818      	ldr	r0, [r3, #0]
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	2000002c 	.word	0x2000002c

08005ecc <__libc_init_array>:
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	4d0d      	ldr	r5, [pc, #52]	@ (8005f04 <__libc_init_array+0x38>)
 8005ed0:	4c0d      	ldr	r4, [pc, #52]	@ (8005f08 <__libc_init_array+0x3c>)
 8005ed2:	1b64      	subs	r4, r4, r5
 8005ed4:	10a4      	asrs	r4, r4, #2
 8005ed6:	2600      	movs	r6, #0
 8005ed8:	42a6      	cmp	r6, r4
 8005eda:	d109      	bne.n	8005ef0 <__libc_init_array+0x24>
 8005edc:	4d0b      	ldr	r5, [pc, #44]	@ (8005f0c <__libc_init_array+0x40>)
 8005ede:	4c0c      	ldr	r4, [pc, #48]	@ (8005f10 <__libc_init_array+0x44>)
 8005ee0:	f000 fdb8 	bl	8006a54 <_init>
 8005ee4:	1b64      	subs	r4, r4, r5
 8005ee6:	10a4      	asrs	r4, r4, #2
 8005ee8:	2600      	movs	r6, #0
 8005eea:	42a6      	cmp	r6, r4
 8005eec:	d105      	bne.n	8005efa <__libc_init_array+0x2e>
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef4:	4798      	blx	r3
 8005ef6:	3601      	adds	r6, #1
 8005ef8:	e7ee      	b.n	8005ed8 <__libc_init_array+0xc>
 8005efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efe:	4798      	blx	r3
 8005f00:	3601      	adds	r6, #1
 8005f02:	e7f2      	b.n	8005eea <__libc_init_array+0x1e>
 8005f04:	08006c88 	.word	0x08006c88
 8005f08:	08006c88 	.word	0x08006c88
 8005f0c:	08006c88 	.word	0x08006c88
 8005f10:	08006c8c 	.word	0x08006c8c

08005f14 <__retarget_lock_init_recursive>:
 8005f14:	4770      	bx	lr

08005f16 <__retarget_lock_acquire_recursive>:
 8005f16:	4770      	bx	lr

08005f18 <__retarget_lock_release_recursive>:
 8005f18:	4770      	bx	lr
	...

08005f1c <_free_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4605      	mov	r5, r0
 8005f20:	2900      	cmp	r1, #0
 8005f22:	d041      	beq.n	8005fa8 <_free_r+0x8c>
 8005f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f28:	1f0c      	subs	r4, r1, #4
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	bfb8      	it	lt
 8005f2e:	18e4      	addlt	r4, r4, r3
 8005f30:	f000 f8e0 	bl	80060f4 <__malloc_lock>
 8005f34:	4a1d      	ldr	r2, [pc, #116]	@ (8005fac <_free_r+0x90>)
 8005f36:	6813      	ldr	r3, [r2, #0]
 8005f38:	b933      	cbnz	r3, 8005f48 <_free_r+0x2c>
 8005f3a:	6063      	str	r3, [r4, #4]
 8005f3c:	6014      	str	r4, [r2, #0]
 8005f3e:	4628      	mov	r0, r5
 8005f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f44:	f000 b8dc 	b.w	8006100 <__malloc_unlock>
 8005f48:	42a3      	cmp	r3, r4
 8005f4a:	d908      	bls.n	8005f5e <_free_r+0x42>
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	1821      	adds	r1, r4, r0
 8005f50:	428b      	cmp	r3, r1
 8005f52:	bf01      	itttt	eq
 8005f54:	6819      	ldreq	r1, [r3, #0]
 8005f56:	685b      	ldreq	r3, [r3, #4]
 8005f58:	1809      	addeq	r1, r1, r0
 8005f5a:	6021      	streq	r1, [r4, #0]
 8005f5c:	e7ed      	b.n	8005f3a <_free_r+0x1e>
 8005f5e:	461a      	mov	r2, r3
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	b10b      	cbz	r3, 8005f68 <_free_r+0x4c>
 8005f64:	42a3      	cmp	r3, r4
 8005f66:	d9fa      	bls.n	8005f5e <_free_r+0x42>
 8005f68:	6811      	ldr	r1, [r2, #0]
 8005f6a:	1850      	adds	r0, r2, r1
 8005f6c:	42a0      	cmp	r0, r4
 8005f6e:	d10b      	bne.n	8005f88 <_free_r+0x6c>
 8005f70:	6820      	ldr	r0, [r4, #0]
 8005f72:	4401      	add	r1, r0
 8005f74:	1850      	adds	r0, r2, r1
 8005f76:	4283      	cmp	r3, r0
 8005f78:	6011      	str	r1, [r2, #0]
 8005f7a:	d1e0      	bne.n	8005f3e <_free_r+0x22>
 8005f7c:	6818      	ldr	r0, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	6053      	str	r3, [r2, #4]
 8005f82:	4408      	add	r0, r1
 8005f84:	6010      	str	r0, [r2, #0]
 8005f86:	e7da      	b.n	8005f3e <_free_r+0x22>
 8005f88:	d902      	bls.n	8005f90 <_free_r+0x74>
 8005f8a:	230c      	movs	r3, #12
 8005f8c:	602b      	str	r3, [r5, #0]
 8005f8e:	e7d6      	b.n	8005f3e <_free_r+0x22>
 8005f90:	6820      	ldr	r0, [r4, #0]
 8005f92:	1821      	adds	r1, r4, r0
 8005f94:	428b      	cmp	r3, r1
 8005f96:	bf04      	itt	eq
 8005f98:	6819      	ldreq	r1, [r3, #0]
 8005f9a:	685b      	ldreq	r3, [r3, #4]
 8005f9c:	6063      	str	r3, [r4, #4]
 8005f9e:	bf04      	itt	eq
 8005fa0:	1809      	addeq	r1, r1, r0
 8005fa2:	6021      	streq	r1, [r4, #0]
 8005fa4:	6054      	str	r4, [r2, #4]
 8005fa6:	e7ca      	b.n	8005f3e <_free_r+0x22>
 8005fa8:	bd38      	pop	{r3, r4, r5, pc}
 8005faa:	bf00      	nop
 8005fac:	200003ac 	.word	0x200003ac

08005fb0 <sbrk_aligned>:
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	4e0f      	ldr	r6, [pc, #60]	@ (8005ff0 <sbrk_aligned+0x40>)
 8005fb4:	460c      	mov	r4, r1
 8005fb6:	6831      	ldr	r1, [r6, #0]
 8005fb8:	4605      	mov	r5, r0
 8005fba:	b911      	cbnz	r1, 8005fc2 <sbrk_aligned+0x12>
 8005fbc:	f000 fcb6 	bl	800692c <_sbrk_r>
 8005fc0:	6030      	str	r0, [r6, #0]
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f000 fcb1 	bl	800692c <_sbrk_r>
 8005fca:	1c43      	adds	r3, r0, #1
 8005fcc:	d103      	bne.n	8005fd6 <sbrk_aligned+0x26>
 8005fce:	f04f 34ff 	mov.w	r4, #4294967295
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	bd70      	pop	{r4, r5, r6, pc}
 8005fd6:	1cc4      	adds	r4, r0, #3
 8005fd8:	f024 0403 	bic.w	r4, r4, #3
 8005fdc:	42a0      	cmp	r0, r4
 8005fde:	d0f8      	beq.n	8005fd2 <sbrk_aligned+0x22>
 8005fe0:	1a21      	subs	r1, r4, r0
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	f000 fca2 	bl	800692c <_sbrk_r>
 8005fe8:	3001      	adds	r0, #1
 8005fea:	d1f2      	bne.n	8005fd2 <sbrk_aligned+0x22>
 8005fec:	e7ef      	b.n	8005fce <sbrk_aligned+0x1e>
 8005fee:	bf00      	nop
 8005ff0:	200003a8 	.word	0x200003a8

08005ff4 <_malloc_r>:
 8005ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ff8:	1ccd      	adds	r5, r1, #3
 8005ffa:	f025 0503 	bic.w	r5, r5, #3
 8005ffe:	3508      	adds	r5, #8
 8006000:	2d0c      	cmp	r5, #12
 8006002:	bf38      	it	cc
 8006004:	250c      	movcc	r5, #12
 8006006:	2d00      	cmp	r5, #0
 8006008:	4606      	mov	r6, r0
 800600a:	db01      	blt.n	8006010 <_malloc_r+0x1c>
 800600c:	42a9      	cmp	r1, r5
 800600e:	d904      	bls.n	800601a <_malloc_r+0x26>
 8006010:	230c      	movs	r3, #12
 8006012:	6033      	str	r3, [r6, #0]
 8006014:	2000      	movs	r0, #0
 8006016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800601a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060f0 <_malloc_r+0xfc>
 800601e:	f000 f869 	bl	80060f4 <__malloc_lock>
 8006022:	f8d8 3000 	ldr.w	r3, [r8]
 8006026:	461c      	mov	r4, r3
 8006028:	bb44      	cbnz	r4, 800607c <_malloc_r+0x88>
 800602a:	4629      	mov	r1, r5
 800602c:	4630      	mov	r0, r6
 800602e:	f7ff ffbf 	bl	8005fb0 <sbrk_aligned>
 8006032:	1c43      	adds	r3, r0, #1
 8006034:	4604      	mov	r4, r0
 8006036:	d158      	bne.n	80060ea <_malloc_r+0xf6>
 8006038:	f8d8 4000 	ldr.w	r4, [r8]
 800603c:	4627      	mov	r7, r4
 800603e:	2f00      	cmp	r7, #0
 8006040:	d143      	bne.n	80060ca <_malloc_r+0xd6>
 8006042:	2c00      	cmp	r4, #0
 8006044:	d04b      	beq.n	80060de <_malloc_r+0xea>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	4639      	mov	r1, r7
 800604a:	4630      	mov	r0, r6
 800604c:	eb04 0903 	add.w	r9, r4, r3
 8006050:	f000 fc6c 	bl	800692c <_sbrk_r>
 8006054:	4581      	cmp	r9, r0
 8006056:	d142      	bne.n	80060de <_malloc_r+0xea>
 8006058:	6821      	ldr	r1, [r4, #0]
 800605a:	1a6d      	subs	r5, r5, r1
 800605c:	4629      	mov	r1, r5
 800605e:	4630      	mov	r0, r6
 8006060:	f7ff ffa6 	bl	8005fb0 <sbrk_aligned>
 8006064:	3001      	adds	r0, #1
 8006066:	d03a      	beq.n	80060de <_malloc_r+0xea>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	442b      	add	r3, r5
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	f8d8 3000 	ldr.w	r3, [r8]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	bb62      	cbnz	r2, 80060d0 <_malloc_r+0xdc>
 8006076:	f8c8 7000 	str.w	r7, [r8]
 800607a:	e00f      	b.n	800609c <_malloc_r+0xa8>
 800607c:	6822      	ldr	r2, [r4, #0]
 800607e:	1b52      	subs	r2, r2, r5
 8006080:	d420      	bmi.n	80060c4 <_malloc_r+0xd0>
 8006082:	2a0b      	cmp	r2, #11
 8006084:	d917      	bls.n	80060b6 <_malloc_r+0xc2>
 8006086:	1961      	adds	r1, r4, r5
 8006088:	42a3      	cmp	r3, r4
 800608a:	6025      	str	r5, [r4, #0]
 800608c:	bf18      	it	ne
 800608e:	6059      	strne	r1, [r3, #4]
 8006090:	6863      	ldr	r3, [r4, #4]
 8006092:	bf08      	it	eq
 8006094:	f8c8 1000 	streq.w	r1, [r8]
 8006098:	5162      	str	r2, [r4, r5]
 800609a:	604b      	str	r3, [r1, #4]
 800609c:	4630      	mov	r0, r6
 800609e:	f000 f82f 	bl	8006100 <__malloc_unlock>
 80060a2:	f104 000b 	add.w	r0, r4, #11
 80060a6:	1d23      	adds	r3, r4, #4
 80060a8:	f020 0007 	bic.w	r0, r0, #7
 80060ac:	1ac2      	subs	r2, r0, r3
 80060ae:	bf1c      	itt	ne
 80060b0:	1a1b      	subne	r3, r3, r0
 80060b2:	50a3      	strne	r3, [r4, r2]
 80060b4:	e7af      	b.n	8006016 <_malloc_r+0x22>
 80060b6:	6862      	ldr	r2, [r4, #4]
 80060b8:	42a3      	cmp	r3, r4
 80060ba:	bf0c      	ite	eq
 80060bc:	f8c8 2000 	streq.w	r2, [r8]
 80060c0:	605a      	strne	r2, [r3, #4]
 80060c2:	e7eb      	b.n	800609c <_malloc_r+0xa8>
 80060c4:	4623      	mov	r3, r4
 80060c6:	6864      	ldr	r4, [r4, #4]
 80060c8:	e7ae      	b.n	8006028 <_malloc_r+0x34>
 80060ca:	463c      	mov	r4, r7
 80060cc:	687f      	ldr	r7, [r7, #4]
 80060ce:	e7b6      	b.n	800603e <_malloc_r+0x4a>
 80060d0:	461a      	mov	r2, r3
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	42a3      	cmp	r3, r4
 80060d6:	d1fb      	bne.n	80060d0 <_malloc_r+0xdc>
 80060d8:	2300      	movs	r3, #0
 80060da:	6053      	str	r3, [r2, #4]
 80060dc:	e7de      	b.n	800609c <_malloc_r+0xa8>
 80060de:	230c      	movs	r3, #12
 80060e0:	6033      	str	r3, [r6, #0]
 80060e2:	4630      	mov	r0, r6
 80060e4:	f000 f80c 	bl	8006100 <__malloc_unlock>
 80060e8:	e794      	b.n	8006014 <_malloc_r+0x20>
 80060ea:	6005      	str	r5, [r0, #0]
 80060ec:	e7d6      	b.n	800609c <_malloc_r+0xa8>
 80060ee:	bf00      	nop
 80060f0:	200003ac 	.word	0x200003ac

080060f4 <__malloc_lock>:
 80060f4:	4801      	ldr	r0, [pc, #4]	@ (80060fc <__malloc_lock+0x8>)
 80060f6:	f7ff bf0e 	b.w	8005f16 <__retarget_lock_acquire_recursive>
 80060fa:	bf00      	nop
 80060fc:	200003a4 	.word	0x200003a4

08006100 <__malloc_unlock>:
 8006100:	4801      	ldr	r0, [pc, #4]	@ (8006108 <__malloc_unlock+0x8>)
 8006102:	f7ff bf09 	b.w	8005f18 <__retarget_lock_release_recursive>
 8006106:	bf00      	nop
 8006108:	200003a4 	.word	0x200003a4

0800610c <__sfputc_r>:
 800610c:	6893      	ldr	r3, [r2, #8]
 800610e:	3b01      	subs	r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	b410      	push	{r4}
 8006114:	6093      	str	r3, [r2, #8]
 8006116:	da08      	bge.n	800612a <__sfputc_r+0x1e>
 8006118:	6994      	ldr	r4, [r2, #24]
 800611a:	42a3      	cmp	r3, r4
 800611c:	db01      	blt.n	8006122 <__sfputc_r+0x16>
 800611e:	290a      	cmp	r1, #10
 8006120:	d103      	bne.n	800612a <__sfputc_r+0x1e>
 8006122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006126:	f000 bb6d 	b.w	8006804 <__swbuf_r>
 800612a:	6813      	ldr	r3, [r2, #0]
 800612c:	1c58      	adds	r0, r3, #1
 800612e:	6010      	str	r0, [r2, #0]
 8006130:	7019      	strb	r1, [r3, #0]
 8006132:	4608      	mov	r0, r1
 8006134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006138:	4770      	bx	lr

0800613a <__sfputs_r>:
 800613a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613c:	4606      	mov	r6, r0
 800613e:	460f      	mov	r7, r1
 8006140:	4614      	mov	r4, r2
 8006142:	18d5      	adds	r5, r2, r3
 8006144:	42ac      	cmp	r4, r5
 8006146:	d101      	bne.n	800614c <__sfputs_r+0x12>
 8006148:	2000      	movs	r0, #0
 800614a:	e007      	b.n	800615c <__sfputs_r+0x22>
 800614c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006150:	463a      	mov	r2, r7
 8006152:	4630      	mov	r0, r6
 8006154:	f7ff ffda 	bl	800610c <__sfputc_r>
 8006158:	1c43      	adds	r3, r0, #1
 800615a:	d1f3      	bne.n	8006144 <__sfputs_r+0xa>
 800615c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006160 <_vfiprintf_r>:
 8006160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006164:	460d      	mov	r5, r1
 8006166:	b09d      	sub	sp, #116	@ 0x74
 8006168:	4614      	mov	r4, r2
 800616a:	4698      	mov	r8, r3
 800616c:	4606      	mov	r6, r0
 800616e:	b118      	cbz	r0, 8006178 <_vfiprintf_r+0x18>
 8006170:	6a03      	ldr	r3, [r0, #32]
 8006172:	b90b      	cbnz	r3, 8006178 <_vfiprintf_r+0x18>
 8006174:	f7ff fdb8 	bl	8005ce8 <__sinit>
 8006178:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800617a:	07d9      	lsls	r1, r3, #31
 800617c:	d405      	bmi.n	800618a <_vfiprintf_r+0x2a>
 800617e:	89ab      	ldrh	r3, [r5, #12]
 8006180:	059a      	lsls	r2, r3, #22
 8006182:	d402      	bmi.n	800618a <_vfiprintf_r+0x2a>
 8006184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006186:	f7ff fec6 	bl	8005f16 <__retarget_lock_acquire_recursive>
 800618a:	89ab      	ldrh	r3, [r5, #12]
 800618c:	071b      	lsls	r3, r3, #28
 800618e:	d501      	bpl.n	8006194 <_vfiprintf_r+0x34>
 8006190:	692b      	ldr	r3, [r5, #16]
 8006192:	b99b      	cbnz	r3, 80061bc <_vfiprintf_r+0x5c>
 8006194:	4629      	mov	r1, r5
 8006196:	4630      	mov	r0, r6
 8006198:	f000 fb72 	bl	8006880 <__swsetup_r>
 800619c:	b170      	cbz	r0, 80061bc <_vfiprintf_r+0x5c>
 800619e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061a0:	07dc      	lsls	r4, r3, #31
 80061a2:	d504      	bpl.n	80061ae <_vfiprintf_r+0x4e>
 80061a4:	f04f 30ff 	mov.w	r0, #4294967295
 80061a8:	b01d      	add	sp, #116	@ 0x74
 80061aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ae:	89ab      	ldrh	r3, [r5, #12]
 80061b0:	0598      	lsls	r0, r3, #22
 80061b2:	d4f7      	bmi.n	80061a4 <_vfiprintf_r+0x44>
 80061b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061b6:	f7ff feaf 	bl	8005f18 <__retarget_lock_release_recursive>
 80061ba:	e7f3      	b.n	80061a4 <_vfiprintf_r+0x44>
 80061bc:	2300      	movs	r3, #0
 80061be:	9309      	str	r3, [sp, #36]	@ 0x24
 80061c0:	2320      	movs	r3, #32
 80061c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80061c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80061ca:	2330      	movs	r3, #48	@ 0x30
 80061cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800637c <_vfiprintf_r+0x21c>
 80061d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061d4:	f04f 0901 	mov.w	r9, #1
 80061d8:	4623      	mov	r3, r4
 80061da:	469a      	mov	sl, r3
 80061dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061e0:	b10a      	cbz	r2, 80061e6 <_vfiprintf_r+0x86>
 80061e2:	2a25      	cmp	r2, #37	@ 0x25
 80061e4:	d1f9      	bne.n	80061da <_vfiprintf_r+0x7a>
 80061e6:	ebba 0b04 	subs.w	fp, sl, r4
 80061ea:	d00b      	beq.n	8006204 <_vfiprintf_r+0xa4>
 80061ec:	465b      	mov	r3, fp
 80061ee:	4622      	mov	r2, r4
 80061f0:	4629      	mov	r1, r5
 80061f2:	4630      	mov	r0, r6
 80061f4:	f7ff ffa1 	bl	800613a <__sfputs_r>
 80061f8:	3001      	adds	r0, #1
 80061fa:	f000 80a7 	beq.w	800634c <_vfiprintf_r+0x1ec>
 80061fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006200:	445a      	add	r2, fp
 8006202:	9209      	str	r2, [sp, #36]	@ 0x24
 8006204:	f89a 3000 	ldrb.w	r3, [sl]
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 809f 	beq.w	800634c <_vfiprintf_r+0x1ec>
 800620e:	2300      	movs	r3, #0
 8006210:	f04f 32ff 	mov.w	r2, #4294967295
 8006214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006218:	f10a 0a01 	add.w	sl, sl, #1
 800621c:	9304      	str	r3, [sp, #16]
 800621e:	9307      	str	r3, [sp, #28]
 8006220:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006224:	931a      	str	r3, [sp, #104]	@ 0x68
 8006226:	4654      	mov	r4, sl
 8006228:	2205      	movs	r2, #5
 800622a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800622e:	4853      	ldr	r0, [pc, #332]	@ (800637c <_vfiprintf_r+0x21c>)
 8006230:	f7f9 fff6 	bl	8000220 <memchr>
 8006234:	9a04      	ldr	r2, [sp, #16]
 8006236:	b9d8      	cbnz	r0, 8006270 <_vfiprintf_r+0x110>
 8006238:	06d1      	lsls	r1, r2, #27
 800623a:	bf44      	itt	mi
 800623c:	2320      	movmi	r3, #32
 800623e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006242:	0713      	lsls	r3, r2, #28
 8006244:	bf44      	itt	mi
 8006246:	232b      	movmi	r3, #43	@ 0x2b
 8006248:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800624c:	f89a 3000 	ldrb.w	r3, [sl]
 8006250:	2b2a      	cmp	r3, #42	@ 0x2a
 8006252:	d015      	beq.n	8006280 <_vfiprintf_r+0x120>
 8006254:	9a07      	ldr	r2, [sp, #28]
 8006256:	4654      	mov	r4, sl
 8006258:	2000      	movs	r0, #0
 800625a:	f04f 0c0a 	mov.w	ip, #10
 800625e:	4621      	mov	r1, r4
 8006260:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006264:	3b30      	subs	r3, #48	@ 0x30
 8006266:	2b09      	cmp	r3, #9
 8006268:	d94b      	bls.n	8006302 <_vfiprintf_r+0x1a2>
 800626a:	b1b0      	cbz	r0, 800629a <_vfiprintf_r+0x13a>
 800626c:	9207      	str	r2, [sp, #28]
 800626e:	e014      	b.n	800629a <_vfiprintf_r+0x13a>
 8006270:	eba0 0308 	sub.w	r3, r0, r8
 8006274:	fa09 f303 	lsl.w	r3, r9, r3
 8006278:	4313      	orrs	r3, r2
 800627a:	9304      	str	r3, [sp, #16]
 800627c:	46a2      	mov	sl, r4
 800627e:	e7d2      	b.n	8006226 <_vfiprintf_r+0xc6>
 8006280:	9b03      	ldr	r3, [sp, #12]
 8006282:	1d19      	adds	r1, r3, #4
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	9103      	str	r1, [sp, #12]
 8006288:	2b00      	cmp	r3, #0
 800628a:	bfbb      	ittet	lt
 800628c:	425b      	neglt	r3, r3
 800628e:	f042 0202 	orrlt.w	r2, r2, #2
 8006292:	9307      	strge	r3, [sp, #28]
 8006294:	9307      	strlt	r3, [sp, #28]
 8006296:	bfb8      	it	lt
 8006298:	9204      	strlt	r2, [sp, #16]
 800629a:	7823      	ldrb	r3, [r4, #0]
 800629c:	2b2e      	cmp	r3, #46	@ 0x2e
 800629e:	d10a      	bne.n	80062b6 <_vfiprintf_r+0x156>
 80062a0:	7863      	ldrb	r3, [r4, #1]
 80062a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80062a4:	d132      	bne.n	800630c <_vfiprintf_r+0x1ac>
 80062a6:	9b03      	ldr	r3, [sp, #12]
 80062a8:	1d1a      	adds	r2, r3, #4
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	9203      	str	r2, [sp, #12]
 80062ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062b2:	3402      	adds	r4, #2
 80062b4:	9305      	str	r3, [sp, #20]
 80062b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800638c <_vfiprintf_r+0x22c>
 80062ba:	7821      	ldrb	r1, [r4, #0]
 80062bc:	2203      	movs	r2, #3
 80062be:	4650      	mov	r0, sl
 80062c0:	f7f9 ffae 	bl	8000220 <memchr>
 80062c4:	b138      	cbz	r0, 80062d6 <_vfiprintf_r+0x176>
 80062c6:	9b04      	ldr	r3, [sp, #16]
 80062c8:	eba0 000a 	sub.w	r0, r0, sl
 80062cc:	2240      	movs	r2, #64	@ 0x40
 80062ce:	4082      	lsls	r2, r0
 80062d0:	4313      	orrs	r3, r2
 80062d2:	3401      	adds	r4, #1
 80062d4:	9304      	str	r3, [sp, #16]
 80062d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062da:	4829      	ldr	r0, [pc, #164]	@ (8006380 <_vfiprintf_r+0x220>)
 80062dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062e0:	2206      	movs	r2, #6
 80062e2:	f7f9 ff9d 	bl	8000220 <memchr>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d03f      	beq.n	800636a <_vfiprintf_r+0x20a>
 80062ea:	4b26      	ldr	r3, [pc, #152]	@ (8006384 <_vfiprintf_r+0x224>)
 80062ec:	bb1b      	cbnz	r3, 8006336 <_vfiprintf_r+0x1d6>
 80062ee:	9b03      	ldr	r3, [sp, #12]
 80062f0:	3307      	adds	r3, #7
 80062f2:	f023 0307 	bic.w	r3, r3, #7
 80062f6:	3308      	adds	r3, #8
 80062f8:	9303      	str	r3, [sp, #12]
 80062fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062fc:	443b      	add	r3, r7
 80062fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006300:	e76a      	b.n	80061d8 <_vfiprintf_r+0x78>
 8006302:	fb0c 3202 	mla	r2, ip, r2, r3
 8006306:	460c      	mov	r4, r1
 8006308:	2001      	movs	r0, #1
 800630a:	e7a8      	b.n	800625e <_vfiprintf_r+0xfe>
 800630c:	2300      	movs	r3, #0
 800630e:	3401      	adds	r4, #1
 8006310:	9305      	str	r3, [sp, #20]
 8006312:	4619      	mov	r1, r3
 8006314:	f04f 0c0a 	mov.w	ip, #10
 8006318:	4620      	mov	r0, r4
 800631a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800631e:	3a30      	subs	r2, #48	@ 0x30
 8006320:	2a09      	cmp	r2, #9
 8006322:	d903      	bls.n	800632c <_vfiprintf_r+0x1cc>
 8006324:	2b00      	cmp	r3, #0
 8006326:	d0c6      	beq.n	80062b6 <_vfiprintf_r+0x156>
 8006328:	9105      	str	r1, [sp, #20]
 800632a:	e7c4      	b.n	80062b6 <_vfiprintf_r+0x156>
 800632c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006330:	4604      	mov	r4, r0
 8006332:	2301      	movs	r3, #1
 8006334:	e7f0      	b.n	8006318 <_vfiprintf_r+0x1b8>
 8006336:	ab03      	add	r3, sp, #12
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	462a      	mov	r2, r5
 800633c:	4b12      	ldr	r3, [pc, #72]	@ (8006388 <_vfiprintf_r+0x228>)
 800633e:	a904      	add	r1, sp, #16
 8006340:	4630      	mov	r0, r6
 8006342:	f3af 8000 	nop.w
 8006346:	4607      	mov	r7, r0
 8006348:	1c78      	adds	r0, r7, #1
 800634a:	d1d6      	bne.n	80062fa <_vfiprintf_r+0x19a>
 800634c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800634e:	07d9      	lsls	r1, r3, #31
 8006350:	d405      	bmi.n	800635e <_vfiprintf_r+0x1fe>
 8006352:	89ab      	ldrh	r3, [r5, #12]
 8006354:	059a      	lsls	r2, r3, #22
 8006356:	d402      	bmi.n	800635e <_vfiprintf_r+0x1fe>
 8006358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800635a:	f7ff fddd 	bl	8005f18 <__retarget_lock_release_recursive>
 800635e:	89ab      	ldrh	r3, [r5, #12]
 8006360:	065b      	lsls	r3, r3, #25
 8006362:	f53f af1f 	bmi.w	80061a4 <_vfiprintf_r+0x44>
 8006366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006368:	e71e      	b.n	80061a8 <_vfiprintf_r+0x48>
 800636a:	ab03      	add	r3, sp, #12
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	462a      	mov	r2, r5
 8006370:	4b05      	ldr	r3, [pc, #20]	@ (8006388 <_vfiprintf_r+0x228>)
 8006372:	a904      	add	r1, sp, #16
 8006374:	4630      	mov	r0, r6
 8006376:	f000 f879 	bl	800646c <_printf_i>
 800637a:	e7e4      	b.n	8006346 <_vfiprintf_r+0x1e6>
 800637c:	08006c4d 	.word	0x08006c4d
 8006380:	08006c57 	.word	0x08006c57
 8006384:	00000000 	.word	0x00000000
 8006388:	0800613b 	.word	0x0800613b
 800638c:	08006c53 	.word	0x08006c53

08006390 <_printf_common>:
 8006390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006394:	4616      	mov	r6, r2
 8006396:	4698      	mov	r8, r3
 8006398:	688a      	ldr	r2, [r1, #8]
 800639a:	690b      	ldr	r3, [r1, #16]
 800639c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063a0:	4293      	cmp	r3, r2
 80063a2:	bfb8      	it	lt
 80063a4:	4613      	movlt	r3, r2
 80063a6:	6033      	str	r3, [r6, #0]
 80063a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063ac:	4607      	mov	r7, r0
 80063ae:	460c      	mov	r4, r1
 80063b0:	b10a      	cbz	r2, 80063b6 <_printf_common+0x26>
 80063b2:	3301      	adds	r3, #1
 80063b4:	6033      	str	r3, [r6, #0]
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	0699      	lsls	r1, r3, #26
 80063ba:	bf42      	ittt	mi
 80063bc:	6833      	ldrmi	r3, [r6, #0]
 80063be:	3302      	addmi	r3, #2
 80063c0:	6033      	strmi	r3, [r6, #0]
 80063c2:	6825      	ldr	r5, [r4, #0]
 80063c4:	f015 0506 	ands.w	r5, r5, #6
 80063c8:	d106      	bne.n	80063d8 <_printf_common+0x48>
 80063ca:	f104 0a19 	add.w	sl, r4, #25
 80063ce:	68e3      	ldr	r3, [r4, #12]
 80063d0:	6832      	ldr	r2, [r6, #0]
 80063d2:	1a9b      	subs	r3, r3, r2
 80063d4:	42ab      	cmp	r3, r5
 80063d6:	dc26      	bgt.n	8006426 <_printf_common+0x96>
 80063d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063dc:	6822      	ldr	r2, [r4, #0]
 80063de:	3b00      	subs	r3, #0
 80063e0:	bf18      	it	ne
 80063e2:	2301      	movne	r3, #1
 80063e4:	0692      	lsls	r2, r2, #26
 80063e6:	d42b      	bmi.n	8006440 <_printf_common+0xb0>
 80063e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063ec:	4641      	mov	r1, r8
 80063ee:	4638      	mov	r0, r7
 80063f0:	47c8      	blx	r9
 80063f2:	3001      	adds	r0, #1
 80063f4:	d01e      	beq.n	8006434 <_printf_common+0xa4>
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	6922      	ldr	r2, [r4, #16]
 80063fa:	f003 0306 	and.w	r3, r3, #6
 80063fe:	2b04      	cmp	r3, #4
 8006400:	bf02      	ittt	eq
 8006402:	68e5      	ldreq	r5, [r4, #12]
 8006404:	6833      	ldreq	r3, [r6, #0]
 8006406:	1aed      	subeq	r5, r5, r3
 8006408:	68a3      	ldr	r3, [r4, #8]
 800640a:	bf0c      	ite	eq
 800640c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006410:	2500      	movne	r5, #0
 8006412:	4293      	cmp	r3, r2
 8006414:	bfc4      	itt	gt
 8006416:	1a9b      	subgt	r3, r3, r2
 8006418:	18ed      	addgt	r5, r5, r3
 800641a:	2600      	movs	r6, #0
 800641c:	341a      	adds	r4, #26
 800641e:	42b5      	cmp	r5, r6
 8006420:	d11a      	bne.n	8006458 <_printf_common+0xc8>
 8006422:	2000      	movs	r0, #0
 8006424:	e008      	b.n	8006438 <_printf_common+0xa8>
 8006426:	2301      	movs	r3, #1
 8006428:	4652      	mov	r2, sl
 800642a:	4641      	mov	r1, r8
 800642c:	4638      	mov	r0, r7
 800642e:	47c8      	blx	r9
 8006430:	3001      	adds	r0, #1
 8006432:	d103      	bne.n	800643c <_printf_common+0xac>
 8006434:	f04f 30ff 	mov.w	r0, #4294967295
 8006438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800643c:	3501      	adds	r5, #1
 800643e:	e7c6      	b.n	80063ce <_printf_common+0x3e>
 8006440:	18e1      	adds	r1, r4, r3
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	2030      	movs	r0, #48	@ 0x30
 8006446:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800644a:	4422      	add	r2, r4
 800644c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006450:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006454:	3302      	adds	r3, #2
 8006456:	e7c7      	b.n	80063e8 <_printf_common+0x58>
 8006458:	2301      	movs	r3, #1
 800645a:	4622      	mov	r2, r4
 800645c:	4641      	mov	r1, r8
 800645e:	4638      	mov	r0, r7
 8006460:	47c8      	blx	r9
 8006462:	3001      	adds	r0, #1
 8006464:	d0e6      	beq.n	8006434 <_printf_common+0xa4>
 8006466:	3601      	adds	r6, #1
 8006468:	e7d9      	b.n	800641e <_printf_common+0x8e>
	...

0800646c <_printf_i>:
 800646c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006470:	7e0f      	ldrb	r7, [r1, #24]
 8006472:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006474:	2f78      	cmp	r7, #120	@ 0x78
 8006476:	4691      	mov	r9, r2
 8006478:	4680      	mov	r8, r0
 800647a:	460c      	mov	r4, r1
 800647c:	469a      	mov	sl, r3
 800647e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006482:	d807      	bhi.n	8006494 <_printf_i+0x28>
 8006484:	2f62      	cmp	r7, #98	@ 0x62
 8006486:	d80a      	bhi.n	800649e <_printf_i+0x32>
 8006488:	2f00      	cmp	r7, #0
 800648a:	f000 80d2 	beq.w	8006632 <_printf_i+0x1c6>
 800648e:	2f58      	cmp	r7, #88	@ 0x58
 8006490:	f000 80b9 	beq.w	8006606 <_printf_i+0x19a>
 8006494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006498:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800649c:	e03a      	b.n	8006514 <_printf_i+0xa8>
 800649e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064a2:	2b15      	cmp	r3, #21
 80064a4:	d8f6      	bhi.n	8006494 <_printf_i+0x28>
 80064a6:	a101      	add	r1, pc, #4	@ (adr r1, 80064ac <_printf_i+0x40>)
 80064a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064ac:	08006505 	.word	0x08006505
 80064b0:	08006519 	.word	0x08006519
 80064b4:	08006495 	.word	0x08006495
 80064b8:	08006495 	.word	0x08006495
 80064bc:	08006495 	.word	0x08006495
 80064c0:	08006495 	.word	0x08006495
 80064c4:	08006519 	.word	0x08006519
 80064c8:	08006495 	.word	0x08006495
 80064cc:	08006495 	.word	0x08006495
 80064d0:	08006495 	.word	0x08006495
 80064d4:	08006495 	.word	0x08006495
 80064d8:	08006619 	.word	0x08006619
 80064dc:	08006543 	.word	0x08006543
 80064e0:	080065d3 	.word	0x080065d3
 80064e4:	08006495 	.word	0x08006495
 80064e8:	08006495 	.word	0x08006495
 80064ec:	0800663b 	.word	0x0800663b
 80064f0:	08006495 	.word	0x08006495
 80064f4:	08006543 	.word	0x08006543
 80064f8:	08006495 	.word	0x08006495
 80064fc:	08006495 	.word	0x08006495
 8006500:	080065db 	.word	0x080065db
 8006504:	6833      	ldr	r3, [r6, #0]
 8006506:	1d1a      	adds	r2, r3, #4
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6032      	str	r2, [r6, #0]
 800650c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006510:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006514:	2301      	movs	r3, #1
 8006516:	e09d      	b.n	8006654 <_printf_i+0x1e8>
 8006518:	6833      	ldr	r3, [r6, #0]
 800651a:	6820      	ldr	r0, [r4, #0]
 800651c:	1d19      	adds	r1, r3, #4
 800651e:	6031      	str	r1, [r6, #0]
 8006520:	0606      	lsls	r6, r0, #24
 8006522:	d501      	bpl.n	8006528 <_printf_i+0xbc>
 8006524:	681d      	ldr	r5, [r3, #0]
 8006526:	e003      	b.n	8006530 <_printf_i+0xc4>
 8006528:	0645      	lsls	r5, r0, #25
 800652a:	d5fb      	bpl.n	8006524 <_printf_i+0xb8>
 800652c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006530:	2d00      	cmp	r5, #0
 8006532:	da03      	bge.n	800653c <_printf_i+0xd0>
 8006534:	232d      	movs	r3, #45	@ 0x2d
 8006536:	426d      	negs	r5, r5
 8006538:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800653c:	4859      	ldr	r0, [pc, #356]	@ (80066a4 <_printf_i+0x238>)
 800653e:	230a      	movs	r3, #10
 8006540:	e011      	b.n	8006566 <_printf_i+0xfa>
 8006542:	6821      	ldr	r1, [r4, #0]
 8006544:	6833      	ldr	r3, [r6, #0]
 8006546:	0608      	lsls	r0, r1, #24
 8006548:	f853 5b04 	ldr.w	r5, [r3], #4
 800654c:	d402      	bmi.n	8006554 <_printf_i+0xe8>
 800654e:	0649      	lsls	r1, r1, #25
 8006550:	bf48      	it	mi
 8006552:	b2ad      	uxthmi	r5, r5
 8006554:	2f6f      	cmp	r7, #111	@ 0x6f
 8006556:	4853      	ldr	r0, [pc, #332]	@ (80066a4 <_printf_i+0x238>)
 8006558:	6033      	str	r3, [r6, #0]
 800655a:	bf14      	ite	ne
 800655c:	230a      	movne	r3, #10
 800655e:	2308      	moveq	r3, #8
 8006560:	2100      	movs	r1, #0
 8006562:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006566:	6866      	ldr	r6, [r4, #4]
 8006568:	60a6      	str	r6, [r4, #8]
 800656a:	2e00      	cmp	r6, #0
 800656c:	bfa2      	ittt	ge
 800656e:	6821      	ldrge	r1, [r4, #0]
 8006570:	f021 0104 	bicge.w	r1, r1, #4
 8006574:	6021      	strge	r1, [r4, #0]
 8006576:	b90d      	cbnz	r5, 800657c <_printf_i+0x110>
 8006578:	2e00      	cmp	r6, #0
 800657a:	d04b      	beq.n	8006614 <_printf_i+0x1a8>
 800657c:	4616      	mov	r6, r2
 800657e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006582:	fb03 5711 	mls	r7, r3, r1, r5
 8006586:	5dc7      	ldrb	r7, [r0, r7]
 8006588:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800658c:	462f      	mov	r7, r5
 800658e:	42bb      	cmp	r3, r7
 8006590:	460d      	mov	r5, r1
 8006592:	d9f4      	bls.n	800657e <_printf_i+0x112>
 8006594:	2b08      	cmp	r3, #8
 8006596:	d10b      	bne.n	80065b0 <_printf_i+0x144>
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	07df      	lsls	r7, r3, #31
 800659c:	d508      	bpl.n	80065b0 <_printf_i+0x144>
 800659e:	6923      	ldr	r3, [r4, #16]
 80065a0:	6861      	ldr	r1, [r4, #4]
 80065a2:	4299      	cmp	r1, r3
 80065a4:	bfde      	ittt	le
 80065a6:	2330      	movle	r3, #48	@ 0x30
 80065a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065b0:	1b92      	subs	r2, r2, r6
 80065b2:	6122      	str	r2, [r4, #16]
 80065b4:	f8cd a000 	str.w	sl, [sp]
 80065b8:	464b      	mov	r3, r9
 80065ba:	aa03      	add	r2, sp, #12
 80065bc:	4621      	mov	r1, r4
 80065be:	4640      	mov	r0, r8
 80065c0:	f7ff fee6 	bl	8006390 <_printf_common>
 80065c4:	3001      	adds	r0, #1
 80065c6:	d14a      	bne.n	800665e <_printf_i+0x1f2>
 80065c8:	f04f 30ff 	mov.w	r0, #4294967295
 80065cc:	b004      	add	sp, #16
 80065ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	f043 0320 	orr.w	r3, r3, #32
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	4833      	ldr	r0, [pc, #204]	@ (80066a8 <_printf_i+0x23c>)
 80065dc:	2778      	movs	r7, #120	@ 0x78
 80065de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	6831      	ldr	r1, [r6, #0]
 80065e6:	061f      	lsls	r7, r3, #24
 80065e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80065ec:	d402      	bmi.n	80065f4 <_printf_i+0x188>
 80065ee:	065f      	lsls	r7, r3, #25
 80065f0:	bf48      	it	mi
 80065f2:	b2ad      	uxthmi	r5, r5
 80065f4:	6031      	str	r1, [r6, #0]
 80065f6:	07d9      	lsls	r1, r3, #31
 80065f8:	bf44      	itt	mi
 80065fa:	f043 0320 	orrmi.w	r3, r3, #32
 80065fe:	6023      	strmi	r3, [r4, #0]
 8006600:	b11d      	cbz	r5, 800660a <_printf_i+0x19e>
 8006602:	2310      	movs	r3, #16
 8006604:	e7ac      	b.n	8006560 <_printf_i+0xf4>
 8006606:	4827      	ldr	r0, [pc, #156]	@ (80066a4 <_printf_i+0x238>)
 8006608:	e7e9      	b.n	80065de <_printf_i+0x172>
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	f023 0320 	bic.w	r3, r3, #32
 8006610:	6023      	str	r3, [r4, #0]
 8006612:	e7f6      	b.n	8006602 <_printf_i+0x196>
 8006614:	4616      	mov	r6, r2
 8006616:	e7bd      	b.n	8006594 <_printf_i+0x128>
 8006618:	6833      	ldr	r3, [r6, #0]
 800661a:	6825      	ldr	r5, [r4, #0]
 800661c:	6961      	ldr	r1, [r4, #20]
 800661e:	1d18      	adds	r0, r3, #4
 8006620:	6030      	str	r0, [r6, #0]
 8006622:	062e      	lsls	r6, r5, #24
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	d501      	bpl.n	800662c <_printf_i+0x1c0>
 8006628:	6019      	str	r1, [r3, #0]
 800662a:	e002      	b.n	8006632 <_printf_i+0x1c6>
 800662c:	0668      	lsls	r0, r5, #25
 800662e:	d5fb      	bpl.n	8006628 <_printf_i+0x1bc>
 8006630:	8019      	strh	r1, [r3, #0]
 8006632:	2300      	movs	r3, #0
 8006634:	6123      	str	r3, [r4, #16]
 8006636:	4616      	mov	r6, r2
 8006638:	e7bc      	b.n	80065b4 <_printf_i+0x148>
 800663a:	6833      	ldr	r3, [r6, #0]
 800663c:	1d1a      	adds	r2, r3, #4
 800663e:	6032      	str	r2, [r6, #0]
 8006640:	681e      	ldr	r6, [r3, #0]
 8006642:	6862      	ldr	r2, [r4, #4]
 8006644:	2100      	movs	r1, #0
 8006646:	4630      	mov	r0, r6
 8006648:	f7f9 fdea 	bl	8000220 <memchr>
 800664c:	b108      	cbz	r0, 8006652 <_printf_i+0x1e6>
 800664e:	1b80      	subs	r0, r0, r6
 8006650:	6060      	str	r0, [r4, #4]
 8006652:	6863      	ldr	r3, [r4, #4]
 8006654:	6123      	str	r3, [r4, #16]
 8006656:	2300      	movs	r3, #0
 8006658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800665c:	e7aa      	b.n	80065b4 <_printf_i+0x148>
 800665e:	6923      	ldr	r3, [r4, #16]
 8006660:	4632      	mov	r2, r6
 8006662:	4649      	mov	r1, r9
 8006664:	4640      	mov	r0, r8
 8006666:	47d0      	blx	sl
 8006668:	3001      	adds	r0, #1
 800666a:	d0ad      	beq.n	80065c8 <_printf_i+0x15c>
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	079b      	lsls	r3, r3, #30
 8006670:	d413      	bmi.n	800669a <_printf_i+0x22e>
 8006672:	68e0      	ldr	r0, [r4, #12]
 8006674:	9b03      	ldr	r3, [sp, #12]
 8006676:	4298      	cmp	r0, r3
 8006678:	bfb8      	it	lt
 800667a:	4618      	movlt	r0, r3
 800667c:	e7a6      	b.n	80065cc <_printf_i+0x160>
 800667e:	2301      	movs	r3, #1
 8006680:	4632      	mov	r2, r6
 8006682:	4649      	mov	r1, r9
 8006684:	4640      	mov	r0, r8
 8006686:	47d0      	blx	sl
 8006688:	3001      	adds	r0, #1
 800668a:	d09d      	beq.n	80065c8 <_printf_i+0x15c>
 800668c:	3501      	adds	r5, #1
 800668e:	68e3      	ldr	r3, [r4, #12]
 8006690:	9903      	ldr	r1, [sp, #12]
 8006692:	1a5b      	subs	r3, r3, r1
 8006694:	42ab      	cmp	r3, r5
 8006696:	dcf2      	bgt.n	800667e <_printf_i+0x212>
 8006698:	e7eb      	b.n	8006672 <_printf_i+0x206>
 800669a:	2500      	movs	r5, #0
 800669c:	f104 0619 	add.w	r6, r4, #25
 80066a0:	e7f5      	b.n	800668e <_printf_i+0x222>
 80066a2:	bf00      	nop
 80066a4:	08006c5e 	.word	0x08006c5e
 80066a8:	08006c6f 	.word	0x08006c6f

080066ac <__sflush_r>:
 80066ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066b4:	0716      	lsls	r6, r2, #28
 80066b6:	4605      	mov	r5, r0
 80066b8:	460c      	mov	r4, r1
 80066ba:	d454      	bmi.n	8006766 <__sflush_r+0xba>
 80066bc:	684b      	ldr	r3, [r1, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	dc02      	bgt.n	80066c8 <__sflush_r+0x1c>
 80066c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	dd48      	ble.n	800675a <__sflush_r+0xae>
 80066c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066ca:	2e00      	cmp	r6, #0
 80066cc:	d045      	beq.n	800675a <__sflush_r+0xae>
 80066ce:	2300      	movs	r3, #0
 80066d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80066d4:	682f      	ldr	r7, [r5, #0]
 80066d6:	6a21      	ldr	r1, [r4, #32]
 80066d8:	602b      	str	r3, [r5, #0]
 80066da:	d030      	beq.n	800673e <__sflush_r+0x92>
 80066dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80066de:	89a3      	ldrh	r3, [r4, #12]
 80066e0:	0759      	lsls	r1, r3, #29
 80066e2:	d505      	bpl.n	80066f0 <__sflush_r+0x44>
 80066e4:	6863      	ldr	r3, [r4, #4]
 80066e6:	1ad2      	subs	r2, r2, r3
 80066e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80066ea:	b10b      	cbz	r3, 80066f0 <__sflush_r+0x44>
 80066ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80066ee:	1ad2      	subs	r2, r2, r3
 80066f0:	2300      	movs	r3, #0
 80066f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066f4:	6a21      	ldr	r1, [r4, #32]
 80066f6:	4628      	mov	r0, r5
 80066f8:	47b0      	blx	r6
 80066fa:	1c43      	adds	r3, r0, #1
 80066fc:	89a3      	ldrh	r3, [r4, #12]
 80066fe:	d106      	bne.n	800670e <__sflush_r+0x62>
 8006700:	6829      	ldr	r1, [r5, #0]
 8006702:	291d      	cmp	r1, #29
 8006704:	d82b      	bhi.n	800675e <__sflush_r+0xb2>
 8006706:	4a2a      	ldr	r2, [pc, #168]	@ (80067b0 <__sflush_r+0x104>)
 8006708:	410a      	asrs	r2, r1
 800670a:	07d6      	lsls	r6, r2, #31
 800670c:	d427      	bmi.n	800675e <__sflush_r+0xb2>
 800670e:	2200      	movs	r2, #0
 8006710:	6062      	str	r2, [r4, #4]
 8006712:	04d9      	lsls	r1, r3, #19
 8006714:	6922      	ldr	r2, [r4, #16]
 8006716:	6022      	str	r2, [r4, #0]
 8006718:	d504      	bpl.n	8006724 <__sflush_r+0x78>
 800671a:	1c42      	adds	r2, r0, #1
 800671c:	d101      	bne.n	8006722 <__sflush_r+0x76>
 800671e:	682b      	ldr	r3, [r5, #0]
 8006720:	b903      	cbnz	r3, 8006724 <__sflush_r+0x78>
 8006722:	6560      	str	r0, [r4, #84]	@ 0x54
 8006724:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006726:	602f      	str	r7, [r5, #0]
 8006728:	b1b9      	cbz	r1, 800675a <__sflush_r+0xae>
 800672a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800672e:	4299      	cmp	r1, r3
 8006730:	d002      	beq.n	8006738 <__sflush_r+0x8c>
 8006732:	4628      	mov	r0, r5
 8006734:	f7ff fbf2 	bl	8005f1c <_free_r>
 8006738:	2300      	movs	r3, #0
 800673a:	6363      	str	r3, [r4, #52]	@ 0x34
 800673c:	e00d      	b.n	800675a <__sflush_r+0xae>
 800673e:	2301      	movs	r3, #1
 8006740:	4628      	mov	r0, r5
 8006742:	47b0      	blx	r6
 8006744:	4602      	mov	r2, r0
 8006746:	1c50      	adds	r0, r2, #1
 8006748:	d1c9      	bne.n	80066de <__sflush_r+0x32>
 800674a:	682b      	ldr	r3, [r5, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0c6      	beq.n	80066de <__sflush_r+0x32>
 8006750:	2b1d      	cmp	r3, #29
 8006752:	d001      	beq.n	8006758 <__sflush_r+0xac>
 8006754:	2b16      	cmp	r3, #22
 8006756:	d11e      	bne.n	8006796 <__sflush_r+0xea>
 8006758:	602f      	str	r7, [r5, #0]
 800675a:	2000      	movs	r0, #0
 800675c:	e022      	b.n	80067a4 <__sflush_r+0xf8>
 800675e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006762:	b21b      	sxth	r3, r3
 8006764:	e01b      	b.n	800679e <__sflush_r+0xf2>
 8006766:	690f      	ldr	r7, [r1, #16]
 8006768:	2f00      	cmp	r7, #0
 800676a:	d0f6      	beq.n	800675a <__sflush_r+0xae>
 800676c:	0793      	lsls	r3, r2, #30
 800676e:	680e      	ldr	r6, [r1, #0]
 8006770:	bf08      	it	eq
 8006772:	694b      	ldreq	r3, [r1, #20]
 8006774:	600f      	str	r7, [r1, #0]
 8006776:	bf18      	it	ne
 8006778:	2300      	movne	r3, #0
 800677a:	eba6 0807 	sub.w	r8, r6, r7
 800677e:	608b      	str	r3, [r1, #8]
 8006780:	f1b8 0f00 	cmp.w	r8, #0
 8006784:	dde9      	ble.n	800675a <__sflush_r+0xae>
 8006786:	6a21      	ldr	r1, [r4, #32]
 8006788:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800678a:	4643      	mov	r3, r8
 800678c:	463a      	mov	r2, r7
 800678e:	4628      	mov	r0, r5
 8006790:	47b0      	blx	r6
 8006792:	2800      	cmp	r0, #0
 8006794:	dc08      	bgt.n	80067a8 <__sflush_r+0xfc>
 8006796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800679a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800679e:	81a3      	strh	r3, [r4, #12]
 80067a0:	f04f 30ff 	mov.w	r0, #4294967295
 80067a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067a8:	4407      	add	r7, r0
 80067aa:	eba8 0800 	sub.w	r8, r8, r0
 80067ae:	e7e7      	b.n	8006780 <__sflush_r+0xd4>
 80067b0:	dfbffffe 	.word	0xdfbffffe

080067b4 <_fflush_r>:
 80067b4:	b538      	push	{r3, r4, r5, lr}
 80067b6:	690b      	ldr	r3, [r1, #16]
 80067b8:	4605      	mov	r5, r0
 80067ba:	460c      	mov	r4, r1
 80067bc:	b913      	cbnz	r3, 80067c4 <_fflush_r+0x10>
 80067be:	2500      	movs	r5, #0
 80067c0:	4628      	mov	r0, r5
 80067c2:	bd38      	pop	{r3, r4, r5, pc}
 80067c4:	b118      	cbz	r0, 80067ce <_fflush_r+0x1a>
 80067c6:	6a03      	ldr	r3, [r0, #32]
 80067c8:	b90b      	cbnz	r3, 80067ce <_fflush_r+0x1a>
 80067ca:	f7ff fa8d 	bl	8005ce8 <__sinit>
 80067ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0f3      	beq.n	80067be <_fflush_r+0xa>
 80067d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80067d8:	07d0      	lsls	r0, r2, #31
 80067da:	d404      	bmi.n	80067e6 <_fflush_r+0x32>
 80067dc:	0599      	lsls	r1, r3, #22
 80067de:	d402      	bmi.n	80067e6 <_fflush_r+0x32>
 80067e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067e2:	f7ff fb98 	bl	8005f16 <__retarget_lock_acquire_recursive>
 80067e6:	4628      	mov	r0, r5
 80067e8:	4621      	mov	r1, r4
 80067ea:	f7ff ff5f 	bl	80066ac <__sflush_r>
 80067ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067f0:	07da      	lsls	r2, r3, #31
 80067f2:	4605      	mov	r5, r0
 80067f4:	d4e4      	bmi.n	80067c0 <_fflush_r+0xc>
 80067f6:	89a3      	ldrh	r3, [r4, #12]
 80067f8:	059b      	lsls	r3, r3, #22
 80067fa:	d4e1      	bmi.n	80067c0 <_fflush_r+0xc>
 80067fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067fe:	f7ff fb8b 	bl	8005f18 <__retarget_lock_release_recursive>
 8006802:	e7dd      	b.n	80067c0 <_fflush_r+0xc>

08006804 <__swbuf_r>:
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006806:	460e      	mov	r6, r1
 8006808:	4614      	mov	r4, r2
 800680a:	4605      	mov	r5, r0
 800680c:	b118      	cbz	r0, 8006816 <__swbuf_r+0x12>
 800680e:	6a03      	ldr	r3, [r0, #32]
 8006810:	b90b      	cbnz	r3, 8006816 <__swbuf_r+0x12>
 8006812:	f7ff fa69 	bl	8005ce8 <__sinit>
 8006816:	69a3      	ldr	r3, [r4, #24]
 8006818:	60a3      	str	r3, [r4, #8]
 800681a:	89a3      	ldrh	r3, [r4, #12]
 800681c:	071a      	lsls	r2, r3, #28
 800681e:	d501      	bpl.n	8006824 <__swbuf_r+0x20>
 8006820:	6923      	ldr	r3, [r4, #16]
 8006822:	b943      	cbnz	r3, 8006836 <__swbuf_r+0x32>
 8006824:	4621      	mov	r1, r4
 8006826:	4628      	mov	r0, r5
 8006828:	f000 f82a 	bl	8006880 <__swsetup_r>
 800682c:	b118      	cbz	r0, 8006836 <__swbuf_r+0x32>
 800682e:	f04f 37ff 	mov.w	r7, #4294967295
 8006832:	4638      	mov	r0, r7
 8006834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	6922      	ldr	r2, [r4, #16]
 800683a:	1a98      	subs	r0, r3, r2
 800683c:	6963      	ldr	r3, [r4, #20]
 800683e:	b2f6      	uxtb	r6, r6
 8006840:	4283      	cmp	r3, r0
 8006842:	4637      	mov	r7, r6
 8006844:	dc05      	bgt.n	8006852 <__swbuf_r+0x4e>
 8006846:	4621      	mov	r1, r4
 8006848:	4628      	mov	r0, r5
 800684a:	f7ff ffb3 	bl	80067b4 <_fflush_r>
 800684e:	2800      	cmp	r0, #0
 8006850:	d1ed      	bne.n	800682e <__swbuf_r+0x2a>
 8006852:	68a3      	ldr	r3, [r4, #8]
 8006854:	3b01      	subs	r3, #1
 8006856:	60a3      	str	r3, [r4, #8]
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	6022      	str	r2, [r4, #0]
 800685e:	701e      	strb	r6, [r3, #0]
 8006860:	6962      	ldr	r2, [r4, #20]
 8006862:	1c43      	adds	r3, r0, #1
 8006864:	429a      	cmp	r2, r3
 8006866:	d004      	beq.n	8006872 <__swbuf_r+0x6e>
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	07db      	lsls	r3, r3, #31
 800686c:	d5e1      	bpl.n	8006832 <__swbuf_r+0x2e>
 800686e:	2e0a      	cmp	r6, #10
 8006870:	d1df      	bne.n	8006832 <__swbuf_r+0x2e>
 8006872:	4621      	mov	r1, r4
 8006874:	4628      	mov	r0, r5
 8006876:	f7ff ff9d 	bl	80067b4 <_fflush_r>
 800687a:	2800      	cmp	r0, #0
 800687c:	d0d9      	beq.n	8006832 <__swbuf_r+0x2e>
 800687e:	e7d6      	b.n	800682e <__swbuf_r+0x2a>

08006880 <__swsetup_r>:
 8006880:	b538      	push	{r3, r4, r5, lr}
 8006882:	4b29      	ldr	r3, [pc, #164]	@ (8006928 <__swsetup_r+0xa8>)
 8006884:	4605      	mov	r5, r0
 8006886:	6818      	ldr	r0, [r3, #0]
 8006888:	460c      	mov	r4, r1
 800688a:	b118      	cbz	r0, 8006894 <__swsetup_r+0x14>
 800688c:	6a03      	ldr	r3, [r0, #32]
 800688e:	b90b      	cbnz	r3, 8006894 <__swsetup_r+0x14>
 8006890:	f7ff fa2a 	bl	8005ce8 <__sinit>
 8006894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006898:	0719      	lsls	r1, r3, #28
 800689a:	d422      	bmi.n	80068e2 <__swsetup_r+0x62>
 800689c:	06da      	lsls	r2, r3, #27
 800689e:	d407      	bmi.n	80068b0 <__swsetup_r+0x30>
 80068a0:	2209      	movs	r2, #9
 80068a2:	602a      	str	r2, [r5, #0]
 80068a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068a8:	81a3      	strh	r3, [r4, #12]
 80068aa:	f04f 30ff 	mov.w	r0, #4294967295
 80068ae:	e033      	b.n	8006918 <__swsetup_r+0x98>
 80068b0:	0758      	lsls	r0, r3, #29
 80068b2:	d512      	bpl.n	80068da <__swsetup_r+0x5a>
 80068b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068b6:	b141      	cbz	r1, 80068ca <__swsetup_r+0x4a>
 80068b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068bc:	4299      	cmp	r1, r3
 80068be:	d002      	beq.n	80068c6 <__swsetup_r+0x46>
 80068c0:	4628      	mov	r0, r5
 80068c2:	f7ff fb2b 	bl	8005f1c <_free_r>
 80068c6:	2300      	movs	r3, #0
 80068c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80068ca:	89a3      	ldrh	r3, [r4, #12]
 80068cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80068d0:	81a3      	strh	r3, [r4, #12]
 80068d2:	2300      	movs	r3, #0
 80068d4:	6063      	str	r3, [r4, #4]
 80068d6:	6923      	ldr	r3, [r4, #16]
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	f043 0308 	orr.w	r3, r3, #8
 80068e0:	81a3      	strh	r3, [r4, #12]
 80068e2:	6923      	ldr	r3, [r4, #16]
 80068e4:	b94b      	cbnz	r3, 80068fa <__swsetup_r+0x7a>
 80068e6:	89a3      	ldrh	r3, [r4, #12]
 80068e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80068ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068f0:	d003      	beq.n	80068fa <__swsetup_r+0x7a>
 80068f2:	4621      	mov	r1, r4
 80068f4:	4628      	mov	r0, r5
 80068f6:	f000 f84f 	bl	8006998 <__smakebuf_r>
 80068fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068fe:	f013 0201 	ands.w	r2, r3, #1
 8006902:	d00a      	beq.n	800691a <__swsetup_r+0x9a>
 8006904:	2200      	movs	r2, #0
 8006906:	60a2      	str	r2, [r4, #8]
 8006908:	6962      	ldr	r2, [r4, #20]
 800690a:	4252      	negs	r2, r2
 800690c:	61a2      	str	r2, [r4, #24]
 800690e:	6922      	ldr	r2, [r4, #16]
 8006910:	b942      	cbnz	r2, 8006924 <__swsetup_r+0xa4>
 8006912:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006916:	d1c5      	bne.n	80068a4 <__swsetup_r+0x24>
 8006918:	bd38      	pop	{r3, r4, r5, pc}
 800691a:	0799      	lsls	r1, r3, #30
 800691c:	bf58      	it	pl
 800691e:	6962      	ldrpl	r2, [r4, #20]
 8006920:	60a2      	str	r2, [r4, #8]
 8006922:	e7f4      	b.n	800690e <__swsetup_r+0x8e>
 8006924:	2000      	movs	r0, #0
 8006926:	e7f7      	b.n	8006918 <__swsetup_r+0x98>
 8006928:	2000002c 	.word	0x2000002c

0800692c <_sbrk_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4d06      	ldr	r5, [pc, #24]	@ (8006948 <_sbrk_r+0x1c>)
 8006930:	2300      	movs	r3, #0
 8006932:	4604      	mov	r4, r0
 8006934:	4608      	mov	r0, r1
 8006936:	602b      	str	r3, [r5, #0]
 8006938:	f7fa fa6a 	bl	8000e10 <_sbrk>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	d102      	bne.n	8006946 <_sbrk_r+0x1a>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	b103      	cbz	r3, 8006946 <_sbrk_r+0x1a>
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	bd38      	pop	{r3, r4, r5, pc}
 8006948:	200003a0 	.word	0x200003a0

0800694c <__swhatbuf_r>:
 800694c:	b570      	push	{r4, r5, r6, lr}
 800694e:	460c      	mov	r4, r1
 8006950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006954:	2900      	cmp	r1, #0
 8006956:	b096      	sub	sp, #88	@ 0x58
 8006958:	4615      	mov	r5, r2
 800695a:	461e      	mov	r6, r3
 800695c:	da0d      	bge.n	800697a <__swhatbuf_r+0x2e>
 800695e:	89a3      	ldrh	r3, [r4, #12]
 8006960:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006964:	f04f 0100 	mov.w	r1, #0
 8006968:	bf14      	ite	ne
 800696a:	2340      	movne	r3, #64	@ 0x40
 800696c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006970:	2000      	movs	r0, #0
 8006972:	6031      	str	r1, [r6, #0]
 8006974:	602b      	str	r3, [r5, #0]
 8006976:	b016      	add	sp, #88	@ 0x58
 8006978:	bd70      	pop	{r4, r5, r6, pc}
 800697a:	466a      	mov	r2, sp
 800697c:	f000 f848 	bl	8006a10 <_fstat_r>
 8006980:	2800      	cmp	r0, #0
 8006982:	dbec      	blt.n	800695e <__swhatbuf_r+0x12>
 8006984:	9901      	ldr	r1, [sp, #4]
 8006986:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800698a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800698e:	4259      	negs	r1, r3
 8006990:	4159      	adcs	r1, r3
 8006992:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006996:	e7eb      	b.n	8006970 <__swhatbuf_r+0x24>

08006998 <__smakebuf_r>:
 8006998:	898b      	ldrh	r3, [r1, #12]
 800699a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800699c:	079d      	lsls	r5, r3, #30
 800699e:	4606      	mov	r6, r0
 80069a0:	460c      	mov	r4, r1
 80069a2:	d507      	bpl.n	80069b4 <__smakebuf_r+0x1c>
 80069a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80069a8:	6023      	str	r3, [r4, #0]
 80069aa:	6123      	str	r3, [r4, #16]
 80069ac:	2301      	movs	r3, #1
 80069ae:	6163      	str	r3, [r4, #20]
 80069b0:	b003      	add	sp, #12
 80069b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069b4:	ab01      	add	r3, sp, #4
 80069b6:	466a      	mov	r2, sp
 80069b8:	f7ff ffc8 	bl	800694c <__swhatbuf_r>
 80069bc:	9f00      	ldr	r7, [sp, #0]
 80069be:	4605      	mov	r5, r0
 80069c0:	4639      	mov	r1, r7
 80069c2:	4630      	mov	r0, r6
 80069c4:	f7ff fb16 	bl	8005ff4 <_malloc_r>
 80069c8:	b948      	cbnz	r0, 80069de <__smakebuf_r+0x46>
 80069ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069ce:	059a      	lsls	r2, r3, #22
 80069d0:	d4ee      	bmi.n	80069b0 <__smakebuf_r+0x18>
 80069d2:	f023 0303 	bic.w	r3, r3, #3
 80069d6:	f043 0302 	orr.w	r3, r3, #2
 80069da:	81a3      	strh	r3, [r4, #12]
 80069dc:	e7e2      	b.n	80069a4 <__smakebuf_r+0xc>
 80069de:	89a3      	ldrh	r3, [r4, #12]
 80069e0:	6020      	str	r0, [r4, #0]
 80069e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069e6:	81a3      	strh	r3, [r4, #12]
 80069e8:	9b01      	ldr	r3, [sp, #4]
 80069ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80069ee:	b15b      	cbz	r3, 8006a08 <__smakebuf_r+0x70>
 80069f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069f4:	4630      	mov	r0, r6
 80069f6:	f000 f81d 	bl	8006a34 <_isatty_r>
 80069fa:	b128      	cbz	r0, 8006a08 <__smakebuf_r+0x70>
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	f023 0303 	bic.w	r3, r3, #3
 8006a02:	f043 0301 	orr.w	r3, r3, #1
 8006a06:	81a3      	strh	r3, [r4, #12]
 8006a08:	89a3      	ldrh	r3, [r4, #12]
 8006a0a:	431d      	orrs	r5, r3
 8006a0c:	81a5      	strh	r5, [r4, #12]
 8006a0e:	e7cf      	b.n	80069b0 <__smakebuf_r+0x18>

08006a10 <_fstat_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4d07      	ldr	r5, [pc, #28]	@ (8006a30 <_fstat_r+0x20>)
 8006a14:	2300      	movs	r3, #0
 8006a16:	4604      	mov	r4, r0
 8006a18:	4608      	mov	r0, r1
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	602b      	str	r3, [r5, #0]
 8006a1e:	f7fa f9cf 	bl	8000dc0 <_fstat>
 8006a22:	1c43      	adds	r3, r0, #1
 8006a24:	d102      	bne.n	8006a2c <_fstat_r+0x1c>
 8006a26:	682b      	ldr	r3, [r5, #0]
 8006a28:	b103      	cbz	r3, 8006a2c <_fstat_r+0x1c>
 8006a2a:	6023      	str	r3, [r4, #0]
 8006a2c:	bd38      	pop	{r3, r4, r5, pc}
 8006a2e:	bf00      	nop
 8006a30:	200003a0 	.word	0x200003a0

08006a34 <_isatty_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	4d06      	ldr	r5, [pc, #24]	@ (8006a50 <_isatty_r+0x1c>)
 8006a38:	2300      	movs	r3, #0
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	602b      	str	r3, [r5, #0]
 8006a40:	f7fa f9ce 	bl	8000de0 <_isatty>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	d102      	bne.n	8006a4e <_isatty_r+0x1a>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	b103      	cbz	r3, 8006a4e <_isatty_r+0x1a>
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	200003a0 	.word	0x200003a0

08006a54 <_init>:
 8006a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a56:	bf00      	nop
 8006a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a5a:	bc08      	pop	{r3}
 8006a5c:	469e      	mov	lr, r3
 8006a5e:	4770      	bx	lr

08006a60 <_fini>:
 8006a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a62:	bf00      	nop
 8006a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a66:	bc08      	pop	{r3}
 8006a68:	469e      	mov	lr, r3
 8006a6a:	4770      	bx	lr
